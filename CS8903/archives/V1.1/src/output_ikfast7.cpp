/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2016-11-01 16:53:15.681553
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70;
x0=IKsin(j[5]);
x1=IKcos(j[4]);
x2=IKsin(j[0]);
x3=IKsin(j[3]);
x4=(x2*x3);
x5=IKcos(j[3]);
x6=IKsin(j[1]);
x7=IKsin(j[2]);
x8=IKcos(j[0]);
x9=(x6*x7*x8);
x10=IKcos(j[1]);
x11=IKcos(j[2]);
x12=(x10*x11*x8);
x13=((((-1.0)*(1.0)*x9))+(((-1.0)*(1.0)*x12)));
x14=(x13*x5);
x15=(x14+x4);
x16=(x1*x15);
x17=IKsin(j[4]);
x18=((1.0)*x17);
x19=(x2*x5);
x20=((0.5)*x19);
x21=(x11*x6);
x22=((0.866025403784439)*x21);
x23=(x22*x8);
x24=(x10*x7);
x25=((0.866025403784439)*x24);
x26=(x25*x8);
x27=(x3*(((((-1.0)*(0.5)*x12))+(((-1.0)*(0.5)*x9)))));
x28=(x23+x20+(((-1.0)*(1.0)*x27))+(((-1.0)*(1.0)*x26)));
x29=IKcos(j[5]);
x30=((0.433012701892219)*x21);
x31=((0.433012701892219)*x24);
x32=(x8*((x31+(((-1.0)*(1.0)*x30)))));
x33=(x13*x3);
x34=(x32+(((-1.0)*(0.75)*x33))+((x18*(((((-1.0)*(0.5)*x4))+(((-1.0)*(0.5)*x14))))))+(((0.75)*x19))+((x1*(((((0.25)*x19))+(((-1.0)*(0.5)*x27))+(((-1.0)*(1.0)*x32)))))));
x35=(x11*x6*x8);
x36=(x10*x7*x8);
x37=((0.866025403784439)*x17);
x38=((0.866025403784439)*x1);
x39=((0.41)*x6);
x40=(x3*x8);
x41=(x2*x6*x7);
x42=(x10*x11*x2);
x43=((((-1.0)*(1.0)*x42))+(((-1.0)*(1.0)*x41)));
x44=(x43*x5);
x45=((((-1.0)*(1.0)*x40))+x44);
x46=(x1*x45);
x47=(x5*x8);
x48=((0.5)*x47);
x49=(x2*x22);
x50=(x2*x25);
x51=(x3*(((((-1.0)*(0.5)*x42))+(((-1.0)*(0.5)*x41)))));
x52=((((-1.0)*(1.0)*x48))+(((-1.0)*(1.0)*x50))+(((-1.0)*(1.0)*x51))+x49);
x53=(x2*x30);
x54=(x2*x31);
x55=(x3*x43);
x56=(((x1*(((((-1.0)*(1.0)*x53))+(((0.25)*x47))+x54+(((0.5)*x51))))))+(((-1.0)*(1.0)*x54))+(((0.75)*x47))+(((0.75)*x55))+x53+((x17*(((((-1.0)*(0.5)*x40))+(((0.5)*x44)))))));
x57=(x11*x2*x6);
x58=(x10*x2*x7);
x59=(x5*((x21+(((-1.0)*(1.0)*x24)))));
x60=(x1*x59);
x61=(x6*x7);
x62=((0.866025403784439)*x61);
x63=(x10*x11);
x64=((0.866025403784439)*x63);
x65=((((0.5)*x21))+(((-1.0)*(0.5)*x24)));
x66=(x3*x65);
x67=(x64+x62+(((-1.0)*(1.0)*x66)));
x68=((0.433012701892219)*x61);
x69=((0.433012701892219)*x63);
x70=(((x1*(((((-1.0)*(1.0)*x68))+(((-1.0)*(1.0)*x69))+(((0.5)*x66))))))+x68+x69+((x17*x5*x65))+((x3*(((((-1.0)*(0.866025403784439)*x25))+(((0.866025403784439)*x22)))))));
eerot[0]=(((x0*(((((-1.0)*(1.0)*x16))+(((-1.0)*(1.0)*x18*x28))))))+((x29*x34)));
eerot[1]=(((x0*x34))+((x29*((x16+((x17*x28)))))));
eerot[2]=((((0.25)*x36))+(((0.433012701892219)*x19))+(((-1.0)*(0.433012701892219)*x33))+(((-1.0)*(0.25)*x35))+((x38*(((((-1.0)*(1.0)*x23))+x27+x26+(((-1.0)*(1.0)*x20))))))+((x15*x37)));
eetrans[0]=((((-1.0)*(0.29276408)*x35))+(((0.0740573656612548)*x19))+(((-1.0)*(0.0740573656612548)*x33))+(((-1.0)*(0.00975)*x2))+(((0.29276408)*x36))+((x39*x8)));
eerot[3]=(((x29*x56))+((x0*((((x17*x52))+x46)))));
eerot[4]=(((x29*(((((-1.0)*(1.0)*x18*x52))+(((-1.0)*(1.0)*x46))))))+((x0*x56)));
eerot[5]=((((0.25)*x57))+(((-1.0)*(0.25)*x58))+(((0.433012701892219)*x55))+(((0.433012701892219)*x47))+(((-1.0)*x38*(((((-1.0)*(1.0)*x49))+x48+x51+x50))))+(((-1.0)*(1.0)*x37*x45)));
eetrans[1]=((((-1.0)*(1.0)*x2*x39))+(((0.0740573656612548)*x55))+(((0.0740573656612548)*x47))+(((-1.0)*(0.29276408)*x58))+(((0.29276408)*x57))+(((-1.0)*(0.00975)*x8)));
eerot[6]=(((x29*x70))+((x0*((((x17*x67))+x60)))));
eerot[7]=(((x29*(((((-1.0)*(1.0)*x60))+(((-1.0)*(1.0)*x18*x67))))))+((x0*x70)));
eerot[8]=((((-1.0)*(1.0)*x37*x59))+(((0.25)*x63))+(((-1.0)*x38*((x66+(((-1.0)*(1.0)*x64))+(((-1.0)*(1.0)*x62))))))+((x3*((x30+(((-1.0)*(1.0)*x31))))))+(((0.25)*x61)));
eetrans[2]=((0.2755)+((x3*(((((-1.0)*(0.0740573656612548)*x24))+(((0.0740573656612548)*x21))))))+(((0.29276408)*x63))+(((-1.0)*(0.41)*x10))+(((0.29276408)*x61)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*(((1.0)*r00)));
new_r01=r01;
new_r02=((-1.0)*(((1.0)*r02)));
new_px=((((-1.0)*(0.04275704)*r02))+px);
new_r10=r10;
new_r11=((-1.0)*(((1.0)*r11)));
new_r12=r12;
new_py=((((-1.0)*(1.0)*py))+(((0.04275704)*r12)));
new_r20=r20;
new_r21=((-1.0)*(((1.0)*r21)));
new_r22=r22;
new_pz=((0.2755)+(((-1.0)*(1.0)*pz))+(((0.04275704)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x71=((1.0)*py);
IkReal x72=((1.0)*pz);
IkReal x73=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=((((-1.0)*r20*x71))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x72)));
rxp0_2=(((py*r00))+(((-1.0)*r10*x73)));
rxp1_0=((((-1.0)*r21*x71))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x72)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x73)));
rxp2_0=((((-1.0)*r22*x71))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x72))+((px*r22)));
rxp2_2=((((-1.0)*r12*x73))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x74=((0.0740573656612548)*r10);
IkReal x75=((-0.00975)+py);
IkReal x76=(x75+x74);
IkReal x77=((0.14811473132251)*r11);
IkReal x78=((-1.0)*x77);
IkReal x79=((-1.0)*x74);
IkReal x80=(x75+x79);
IkReal x81=((114108.225350135)*r11);
IkReal x82=((-1.0)*x81);
IkReal x83=((2668758.76698047)*rxp0_1);
IkReal x84=((-1.0)*x83);
IkReal x85=((1540808.59251835)*rxp2_1);
IkReal x86=((-1.0)*x85);
IkReal x87=(x86+x84+x82);
IkReal x88=((1421595.70558544)*px);
IkReal x89=((256552.099176271)*r00);
IkReal x90=((-1.0)*x89);
IkReal x91=((208903.647968128)*r02);
IkReal x92=((-1.0)*x91);
IkReal x93=((2713.54926137516)*r21);
IkReal x94=((63464.3853123405)*rxp0_2);
IkReal x95=((278312.744756426)*rxp1_0);
IkReal x96=((36641.1799440339)*rxp2_2);
IkReal x97=((6509167.72434262)*npx);
IkReal x98=(px*x97);
IkReal x99=((3758069.73784963)*npz);
IkReal x100=(px*x99);
IkReal x101=((3254583.86217131)*pp);
IkReal x102=(r00*x101);
IkReal x103=((-1.0)*x102);
IkReal x104=((1879034.86892482)*pp);
IkReal x105=(r02*x104);
IkReal x106=((-1.0)*x105);
IkReal x107=(x103+x106+x100+x98+x92+x95+x90+x93+x96+x94+x88);
IkReal x108=((2713.54926137516)*r01);
IkReal x109=((63464.3853123405)*rxp0_0);
IkReal x110=((36641.1799440339)*rxp2_0);
IkReal x111=(x109+x108+x110);
IkReal x112=((1421595.70558544)*pz);
IkReal x113=((-1.0)*x112);
IkReal x114=((256552.099176271)*r20);
IkReal x115=((208903.647968128)*r22);
IkReal x116=((278312.744756426)*rxp1_2);
IkReal x117=((-1.0)*x116);
IkReal x118=(pz*x97);
IkReal x119=((-1.0)*x118);
IkReal x120=(pz*x99);
IkReal x121=((-1.0)*x120);
IkReal x122=(r20*x101);
IkReal x123=(r22*x104);
IkReal x124=(x121+x122+x123+x115+x114+x119+x113+x117);
IkReal x125=((228216.45070027)*r10);
IkReal x126=((5337517.53396095)*rxp1_1);
IkReal x127=(x126+(((-1.0)*x125)));
IkReal x128=((513104.198352541)*r01);
IkReal x129=((5427.09852275031)*r20);
IkReal x130=((556625.489512853)*rxp0_0);
IkReal x131=((-1.0)*(((126928.770624681)*rxp1_2)));
IkReal x132=((13018335.4486852)*npy);
IkReal x133=(px*x132);
IkReal x134=((6509167.72434262)*pp);
IkReal x135=(r01*x134);
IkReal x136=(x130+x131+x135+x128+x129+(((-1.0)*x133)));
IkReal x137=((5427.09852275031)*r00);
IkReal x138=((126928.770624681)*rxp1_0);
IkReal x139=(x137+(((-1.0)*x138)));
IkReal x140=((513104.198352541)*r21);
IkReal x141=((556625.489512853)*rxp0_2);
IkReal x142=(pz*x132);
IkReal x143=(r21*x134);
IkReal x144=(x142+(((-1.0)*x141))+(((-1.0)*x140))+(((-1.0)*x143)));
IkReal x145=(x81+x86+x83);
IkReal x146=((-1.0)*x93);
IkReal x147=((-1.0)*x94);
IkReal x148=((-1.0)*x95);
IkReal x149=((-1.0)*x98);
IkReal x150=(x102+x106+x100+x149+x147+x148+x146+x92+x96+x89+x88);
IkReal x151=((-1.0)*x108);
IkReal x152=((-1.0)*x109);
IkReal x153=(x152+x151+x110);
IkReal x154=((-1.0)*x114);
IkReal x155=((-1.0)*x122);
IkReal x156=(x121+x123+x155+x154+x115+x118+x113+x116);
IkReal x157=((-1.0)*x110);
IkReal x158=(x157+x152+x151);
IkReal x159=((-1.0)*x115);
IkReal x160=((-1.0)*x123);
IkReal x161=(x120+x159+x155+x154+x160+x118+x112+x116);
IkReal x162=(x81+x83+x85);
IkReal x163=(x138+(((-1.0)*x137)));
IkReal x164=((((-1.0)*x142))+x141+x140+x143);
IkReal x165=(x125+(((-1.0)*x126)));
IkReal x166=(x109+x108+x157);
IkReal x167=(x120+x122+x159+x160+x114+x119+x112+x117);
IkReal x168=(x85+x84+x82);
IkReal x169=((-1.0)*(((2.0)*px)));
IkReal x170=((0.14811473132251)*r00);
IkReal x171=((((-1.0)*x170))+x169);
IkReal x172=((0.296229462645019)*r01);
IkReal x173=(x170+x169);
IkReal x174=((228216.45070027)*r01);
IkReal x175=((5337517.53396095)*rxp0_0);
IkReal x176=((3081617.1850367)*rxp2_0);
IkReal x177=((2843191.41117088)*py);
IkReal x178=((513104.198352541)*r10);
IkReal x179=((-1.0)*(((417807.295936257)*r12)));
IkReal x180=((556625.489512853)*rxp1_1);
IkReal x181=((13018335.4486852)*npx*py);
IkReal x182=((7516139.47569927)*npz*py);
IkReal x183=(r10*x134);
IkReal x184=((-1.0)*(((3758069.73784963)*pp*r12)));
IkReal x185=((((-1.0)*x178))+(((-1.0)*x183))+x179+x177+x181+x182+x184+x180);
IkReal x186=((73282.3598880679)*rxp2_1);
IkReal x187=((5427.09852275031)*r11);
IkReal x188=((126928.770624681)*rxp0_1);
IkReal x189=(x188+x187);
IkReal x190=((456432.901400539)*r00);
IkReal x191=((10675035.0679219)*rxp1_0);
IkReal x192=((((1026208.39670508)*r11))+(((-1.0)*(26036670.8973705)*npy*py))+(((1113250.97902571)*rxp0_1))+(((13018335.4486852)*pp*r11)));
IkReal x193=((10854.1970455006)*r10);
IkReal x194=((253857.541249362)*rxp1_1);
IkReal x195=((-1.0)*x174);
IkReal x196=((-1.0)*x175);
IkReal x197=((-1.0)*x180);
IkReal x198=((-1.0)*x181);
IkReal x199=((((-1.0)*x188))+(((-1.0)*x187)));
IkReal x200=((-1.0)*x186);
IkReal x201=((-1.0)*x176);
IkReal x202=((-0.00975)+(((-1.0)*(1.0)*py)));
IkReal x203=(x202+x79);
IkReal x204=(x202+x74);
IkReal x205=((-1.0)*x88);
IkReal x206=((-1.0)*x100);
IkReal x207=(x102+x105+x149+x148+x91+x93+x96+x94+x89+x206+x205);
IkReal x208=(x133+x131+(((-1.0)*x128))+x129+(((-1.0)*x130))+(((-1.0)*x135)));
IkReal x209=(x103+x105+x147+x146+x98+x91+x95+x90+x96+x206+x205);
op[0]=x76;
op[1]=x76;
op[2]=x78;
op[3]=x78;
op[4]=x80;
op[5]=x80;
op[6]=(x107+x87);
op[7]=(x124+x111);
op[8]=(x136+x127);
op[9]=(x139+x144);
op[10]=(x150+x145);
op[11]=(x156+x153);
op[12]=(x158+x161);
op[13]=(x107+x162);
op[14]=(x163+x164);
op[15]=(x136+x165);
op[16]=(x166+x167);
op[17]=(x150+x168);
op[18]=0;
op[19]=x76;
op[20]=0;
op[21]=x78;
op[22]=0;
op[23]=x80;
op[24]=x171;
op[25]=x171;
op[26]=x172;
op[27]=x172;
op[28]=x173;
op[29]=x173;
op[30]=(x176+x175+x174+x185);
op[31]=(x189+x186);
op[32]=((((-1.0)*x191))+x192+x190);
op[33]=((((-1.0)*x194))+x193);
op[34]=(x179+x178+x177+x176+x195+x196+x197+x198+x183+x182+x184);
op[35]=(x199+x186);
op[36]=(x200+x199);
op[37]=(x201+x195+x196+x185);
op[38]=((((-1.0)*x193))+x194);
op[39]=((((-1.0)*x190))+x192+x191);
op[40]=(x200+x189);
op[41]=(x179+x178+x177+x175+x174+x201+x197+x198+x183+x182+x184);
op[42]=0;
op[43]=x171;
op[44]=0;
op[45]=x172;
op[46]=0;
op[47]=x173;
op[48]=x203;
op[49]=x203;
op[50]=x77;
op[51]=x77;
op[52]=x204;
op[53]=x204;
op[54]=(x207+x162);
op[55]=(x124+x158);
op[56]=(x208+x165);
op[57]=(x144+x163);
op[58]=(x209+x168);
op[59]=(x156+x166);
op[60]=(x161+x111);
op[61]=(x87+x207);
op[62]=(x139+x164);
op[63]=(x127+x208);
op[64]=(x153+x167);
op[65]=(x145+x209);
op[66]=0;
op[67]=x203;
op[68]=0;
op[69]=x77;
op[70]=0;
op[71]=x204;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j5array[16], cj5array[16], sj5array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj5 = zeror[ij0+1], htj1 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj5)||isnan(htj1)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x210=htj0*htj0;
CheckValue<IkReal> x211=IKPowWithIntegerCheck(((1.0)+x210),-1);
if(!x211.valid){
continue;
}
cj0array[numsolutions]=((x211.value)*(((1.0)+(((-1.0)*x210)))));
CheckValue<IkReal> x212=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x212.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x212.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x213=htj5*htj5;
CheckValue<IkReal> x214=IKPowWithIntegerCheck(((1.0)+x213),-1);
if(!x214.valid){
continue;
}
cj5array[numsolutions]=((x214.value)*(((1.0)+(((-1.0)*x213)))));
CheckValue<IkReal> x215=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x215.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x215.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x216=htj1*htj1;
CheckValue<IkReal> x217=IKPowWithIntegerCheck(((1.0)+x216),-1);
if(!x217.valid){
continue;
}
cj1array[numsolutions]=((x217.value)*(((1.0)+(((-1.0)*x216)))));
CheckValue<IkReal> x218=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x218.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x218.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj5 = 1;
_nj1 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij0]-cj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij0]-sj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij5[1] = 0; _ij1[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j5 = j5array[ij0]; cj5 = cj5array[ij0]; sj5 = sj5array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x219=((3.99988736317185)*pz);
IkReal x220=((3.99988736317185)*cj0*px);
IkReal x221=((3.99988736317185)*py*sj0);
IkReal x222=((0.29622112105825)*sj1);
IkReal x223=(cj5*r20);
IkReal x224=(r21*sj5);
IkReal x225=(cj5*r00);
IkReal x226=((0.29622112105825)*cj0*cj1);
IkReal x227=(r01*sj5);
IkReal x228=(cj5*r10);
IkReal x229=((0.29622112105825)*cj1*sj0);
IkReal x230=(r11*sj5);
IkReal x231=((0.29622112105825)*cj1);
IkReal x232=((0.29622112105825)*cj0*sj1);
IkReal x233=((0.29622112105825)*sj0*sj1);
if( IKabs((((cj1*x221))+((x228*x229))+(((-1.0)*sj1*x219))+((x222*x224))+((x225*x226))+(((-1.0)*x222*x223))+((cj1*x220))+(((-1.0)*x229*x230))+(((-1.0)*x226*x227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.63995381890046)+((x227*x232))+(((-1.0)*x223*x231))+(((-1.0)*sj1*x221))+(((-1.0)*sj1*x220))+(((-1.0)*cj1*x219))+((x224*x231))+(((-1.0)*x225*x232))+(((-1.0)*x228*x233))+((x230*x233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x221))+((x228*x229))+(((-1.0)*sj1*x219))+((x222*x224))+((x225*x226))+(((-1.0)*x222*x223))+((cj1*x220))+(((-1.0)*x229*x230))+(((-1.0)*x226*x227))))+IKsqr(((1.63995381890046)+((x227*x232))+(((-1.0)*x223*x231))+(((-1.0)*sj1*x221))+(((-1.0)*sj1*x220))+(((-1.0)*cj1*x219))+((x224*x231))+(((-1.0)*x225*x232))+(((-1.0)*x228*x233))+((x230*x233))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x221))+((x228*x229))+(((-1.0)*sj1*x219))+((x222*x224))+((x225*x226))+(((-1.0)*x222*x223))+((cj1*x220))+(((-1.0)*x229*x230))+(((-1.0)*x226*x227))), ((1.63995381890046)+((x227*x232))+(((-1.0)*x223*x231))+(((-1.0)*sj1*x221))+(((-1.0)*sj1*x220))+(((-1.0)*cj1*x219))+((x224*x231))+(((-1.0)*x225*x232))+(((-1.0)*x228*x233))+((x230*x233))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x234=((0.0740573656612548)*cj5);
IkReal x235=((0.0740573656612548)*sj5);
IkReal x236=IKcos(j2);
IkReal x237=((0.25000704)*cj1);
IkReal x238=IKsin(j2);
IkReal x239=((0.25000704)*sj1);
evalcond[0]=((((-1.0)*x236*x237))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-1.0)*x238*x239))+(((-1.0)*r20*x234))+((r21*x235)));
evalcond[1]=((((-1.0)*x236*x239))+(((0.41)*sj1))+(((-1.0)*cj0*r00*x234))+(((-1.0)*(1.0)*py*sj0))+((cj0*r01*x235))+(((-1.0)*r10*sj0*x234))+((x237*x238))+((r11*sj0*x235))+(((-1.0)*(1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
j3eval[0]=((((-1.0)*(1.0)*cj1*sj2))+((cj2*sj1)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*(1.0)*sj1*sj2)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x240=((1.0)*cj5);
if( IKabs((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x240))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x240))))+IKsqr(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x240))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x240))), ((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x240))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x241=((0.866025403784439)*cj5);
IkReal x242=((0.866025403784439)*sj5);
evalcond[0]=(((r21*x242))+(((-1.0)*(0.866025403784439)*(IKsin(j3))))+(((-1.0)*(0.5)*r22))+(((-1.0)*r20*x241)));
evalcond[1]=((((-1.0)*r01*sj0*x242))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0))+((r00*sj0*x241))+(((0.866025403784439)*(IKcos(j3))))+(((-1.0)*cj0*r10*x241))+((cj0*r11*x242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x243=r22*r22;
IkReal x244=r20*r20;
IkReal x245=r21*r21;
IkReal x246=((1.15470053837925)*r22);
IkReal x247=(cj5*r20);
IkReal x248=(r21*sj5);
IkReal x249=(cj5*r20*r21*sj5);
IkReal x250=cj5*cj5;
IkReal x251=(x245*x250);
IkReal x252=(x244*x250);
IkReal x253=((0.866025403784439)*r22);
IkReal x254=((0.5)*r20);
IkReal x255=(cj3*cj5);
IkReal x256=((0.5)*r21);
IkReal x257=(cj3*sj5);
IkReal x258=((0.25)*sj3);
j4eval[0]=(((x246*x248))+(((-1.0)*x252))+x243+(((-1.0)*x246*x247))+x251+(((1.33333333333333)*x244))+(((0.333333333333333)*x245))+(((2.0)*x249)));
j4eval[1]=((IKabs(((((-1.0)*r21*x255))+(((0.433012701892219)*r22*sj3))+((x248*x258))+(((-1.0)*x247*x258))+(((-1.0)*r20*x257)))))+(IKabs((((sj3*sj5*x254))+((x256*x257))+((cj3*x253))+((cj5*sj3*x256))+(((-1.0)*x254*x255))))));
j4eval[2]=IKsign(((((1.5)*x249))+(((0.25)*x245))+x244+(((-0.75)*x252))+(((0.75)*x251))+(((-1.0)*x247*x253))+(((0.75)*x243))+((x248*x253))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x259=((1.73205080756888)*cj0);
IkReal x260=((1.73205080756888)*sj0);
IkReal x261=(((cj0*r02))+(((-1.0)*r01*sj5*x259))+((cj5*r10*x260))+(((-1.0)*r11*sj5*x260))+((r12*sj0))+((cj5*r00*x259)));
j4eval[0]=x261;
j4eval[1]=IKsign(x261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x262=(cj0*r01*r21);
IkReal x263=(r11*r21*sj0);
IkReal x264=(cj0*r00*r20);
IkReal x265=(cj0*r02*r22);
IkReal x266=(r10*r20*sj0);
IkReal x267=(r12*r22*sj0);
IkReal x268=(cj0*cj5*r00*r22);
IkReal x269=(cj0*cj5*r02*r20);
IkReal x270=(cj0*r01*r22*sj5);
IkReal x271=(cj0*r02*r21*sj5);
IkReal x272=(cj5*r10*r22*sj0);
IkReal x273=(cj5*r12*r20*sj0);
IkReal x274=(r11*r22*sj0*sj5);
IkReal x275=(r12*r21*sj0*sj5);
IkReal x276=(cj0*cj5*r00*r21*sj5);
IkReal x277=(cj0*cj5*r01*r20*sj5);
IkReal x278=(cj5*r10*r21*sj0*sj5);
IkReal x279=(cj5*r11*r20*sj0*sj5);
IkReal x280=cj5*cj5;
IkReal x281=(cj0*r00*r20*x280);
IkReal x282=(cj0*r01*r21*x280);
IkReal x283=(r10*r20*sj0*x280);
IkReal x284=(r11*r21*sj0*x280);
j4eval[0]=((((1.73205080756888)*x271))+(((3.0)*x282))+(((3.0)*x284))+x262+x263+(((3.0)*x267))+(((4.0)*x266))+(((-3.0)*x281))+(((-1.73205080756888)*x269))+(((-1.73205080756888)*x272))+(((-1.73205080756888)*x268))+(((-1.73205080756888)*x273))+(((1.73205080756888)*x274))+(((3.0)*x279))+(((1.73205080756888)*x275))+(((4.0)*x264))+(((3.0)*x265))+(((3.0)*x276))+(((3.0)*x278))+(((-3.0)*x283))+(((3.0)*x277))+(((1.73205080756888)*x270)));
j4eval[1]=IKsign(((((0.866025403784439)*x274))+(((-0.866025403784439)*x268))+(((-1.5)*x281))+(((1.5)*x279))+(((1.5)*x282))+(((1.5)*x284))+(((-1.5)*x283))+(((2.0)*x264))+(((-0.866025403784439)*x272))+(((-0.866025403784439)*x273))+(((0.866025403784439)*x271))+(((0.866025403784439)*x270))+(((2.0)*x266))+(((1.5)*x267))+(((-0.866025403784439)*x269))+(((0.5)*x262))+(((1.5)*x278))+(((0.5)*x263))+(((1.5)*x265))+(((0.866025403784439)*x275))+(((1.5)*x277))+(((1.5)*x276))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x285=(cj0*r01);
IkReal x286=(cj5*sj3);
IkReal x287=(cj0*r00);
IkReal x288=(sj3*sj5);
IkReal x289=(r11*sj0);
IkReal x290=(r10*sj0);
IkReal x291=((0.866025403784439)*sj3);
IkReal x292=(cj0*r02);
IkReal x293=(r12*sj0);
IkReal x294=((0.5)*cj5*sj3);
IkReal x295=((0.5)*sj3*sj5);
IkReal x296=((2.0)*r20);
IkReal x297=((0.5)*r21);
IkReal x298=((1.5)*r22);
IkReal x299=((0.866025403784439)*cj5*r22);
IkReal x300=((0.866025403784439)*cj5*r20);
IkReal x301=((0.866025403784439)*r22*sj5);
IkReal x302=((0.866025403784439)*r21*sj5);
IkReal x303=((1.5)*cj5*r21*sj5);
IkReal x304=((1.5)*cj5*r20*sj5);
IkReal x305=cj5*cj5;
IkReal x306=((1.5)*r20*x305);
IkReal x307=((1.5)*r21*x305);
CheckValue<IkReal> x308 = IKatan2WithCheck(IkReal((((x285*x286))+((x286*x289))+((x288*x290))+((x287*x288)))),IkReal((((x289*x295))+(((-1.0)*x290*x294))+((x291*x292))+(((-1.0)*x287*x294))+((x285*x295))+((x291*x293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x308.valid){
continue;
}
CheckValue<IkReal> x309=IKPowWithIntegerCheck(IKsign((((x285*x304))+((x292*x298))+((x290*x303))+((x285*x297))+(((-1.0)*x290*x306))+((x285*x307))+((x289*x301))+((x287*x303))+(((-1.0)*x290*x299))+((x293*x302))+((x289*x307))+((x292*x302))+((x289*x304))+(((-1.0)*x287*x306))+(((-1.0)*x287*x299))+((x285*x301))+((x293*x298))+((x287*x296))+(((-1.0)*x293*x300))+(((-1.0)*x292*x300))+((x289*x297))+((x290*x296)))),-1);
if(!x309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x308.value)+(((1.5707963267949)*(x309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x310=IKcos(j4);
IkReal x311=((0.866025403784439)*r22);
IkReal x312=IKsin(j4);
IkReal x313=(cj5*x312);
IkReal x314=(r20*sj5);
IkReal x315=((0.5)*r20);
IkReal x316=((0.5)*r21*sj5);
IkReal x317=((1.0)*cj5*x310);
IkReal x318=((0.866025403784439)*cj0*r02);
IkReal x319=((0.866025403784439)*r12*sj0);
IkReal x320=((0.5)*r00);
IkReal x321=(cj0*cj5*x312);
IkReal x322=((1.0)*cj0*cj5*x310);
IkReal x323=((1.0)*cj0*sj5*x310);
IkReal x324=((0.5)*r01);
IkReal x325=(cj0*sj5*x312);
IkReal x326=((0.5)*r10);
IkReal x327=(cj5*sj0*x312);
IkReal x328=((0.5)*r11);
IkReal x329=(sj0*sj5*x312);
IkReal x330=((0.866025403784439)*cj0*r12);
IkReal x331=((0.866025403784439)*r02*sj0);
IkReal x332=(cj0*cj5*x310);
IkReal x333=(cj0*sj5*x310);
IkReal x334=(cj5*sj0*x310);
IkReal x335=(r00*sj0*sj5);
IkReal x336=(sj0*sj5*x310);
evalcond[0]=(((r21*x313))+((x310*x311))+(((-1.0)*(0.5)*sj3))+((x312*x314))+(((-1.0)*cj5*x310*x315))+((x310*x316)));
evalcond[1]=((((-1.0)*x310*x314))+(((-1.0)*(1.0)*cj3))+((x311*x312))+(((-1.0)*x313*x315))+(((-1.0)*r21*x317))+((x312*x316)));
evalcond[2]=(((x328*x329))+(((-1.0)*r10*sj0*sj5*x310))+(((-1.0)*x320*x321))+((x312*x319))+((x312*x318))+(((-1.0)*r11*sj0*x317))+(((-1.0)*r01*x322))+(((-1.0)*r00*x323))+(((-1.0)*x326*x327))+((x324*x325)));
evalcond[3]=(((r11*x321))+((r10*x325))+(((-1.0)*r01*x327))+((x328*x333))+(((-1.0)*x312*x335))+(((-1.0)*x326*x332))+((x310*x330))+(((-1.0)*x310*x331))+((x320*x334))+(((-1.0)*x324*x336))+(((0.5)*cj3)));
evalcond[4]=(((x312*x330))+((r01*x334))+(((-1.0)*r10*x323))+(((-1.0)*r11*x322))+((x320*x327))+(((-1.0)*x324*x329))+(((-1.0)*x321*x326))+((x325*x328))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x312*x331))+((x310*x335)));
evalcond[5]=((0.866025403784439)+((x324*x333))+((r00*x325))+(((-1.0)*x320*x332))+((r01*x321))+((r11*x327))+(((-1.0)*x326*x334))+((x310*x319))+((x328*x336))+((r10*x329))+((x310*x318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x337=((1.73205080756888)*cj0);
IkReal x338=(cj5*r00);
IkReal x339=(r01*sj5);
IkReal x340=((1.73205080756888)*sj0);
IkReal x341=(cj5*r10);
IkReal x342=(r11*sj5);
IkReal x343=((0.866025403784439)*sj3);
IkReal x344=(cj3*cj5);
IkReal x345=(cj3*sj5);
IkReal x346=((0.5)*cj0*sj3);
IkReal x347=((0.5)*sj0*sj3);
IkReal x348=(cj0*sj3);
IkReal x349=((1.0)*sj0*sj3);
CheckValue<IkReal> x350 = IKatan2WithCheck(IkReal(((((-0.5)*r21*x345))+((x341*x346))+((x339*x347))+((r02*sj0*x343))+(((-1.0)*cj0*r12*x343))+(((-1.0)*x342*x346))+(((-1.0)*x338*x347))+(((-1.0)*(0.866025403784439)*cj3*r22))+(((0.5)*r20*x344)))),IkReal((((r21*x344))+((r10*sj5*x348))+(((-1.0)*r00*sj5*x349))+(((-1.0)*cj5*r01*x349))+((cj5*r11*x348))+((r20*x345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x350.valid){
continue;
}
CheckValue<IkReal> x351=IKPowWithIntegerCheck(IKsign((((x340*x341))+((x337*x338))+(((-1.0)*x340*x342))+((cj0*r02))+((r12*sj0))+(((-1.0)*x337*x339)))),-1);
if(!x351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x350.value)+(((1.5707963267949)*(x351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x352=IKcos(j4);
IkReal x353=((0.866025403784439)*r22);
IkReal x354=IKsin(j4);
IkReal x355=(cj5*x354);
IkReal x356=(r20*sj5);
IkReal x357=((0.5)*r20);
IkReal x358=((0.5)*r21*sj5);
IkReal x359=((1.0)*cj5*x352);
IkReal x360=((0.866025403784439)*cj0*r02);
IkReal x361=((0.866025403784439)*r12*sj0);
IkReal x362=((0.5)*r00);
IkReal x363=(cj0*cj5*x354);
IkReal x364=((1.0)*cj0*cj5*x352);
IkReal x365=((1.0)*cj0*sj5*x352);
IkReal x366=((0.5)*r01);
IkReal x367=(cj0*sj5*x354);
IkReal x368=((0.5)*r10);
IkReal x369=(cj5*sj0*x354);
IkReal x370=((0.5)*r11);
IkReal x371=(sj0*sj5*x354);
IkReal x372=((0.866025403784439)*cj0*r12);
IkReal x373=((0.866025403784439)*r02*sj0);
IkReal x374=(cj0*cj5*x352);
IkReal x375=(cj0*sj5*x352);
IkReal x376=(cj5*sj0*x352);
IkReal x377=(r00*sj0*sj5);
IkReal x378=(sj0*sj5*x352);
evalcond[0]=(((r21*x355))+((x352*x353))+(((-1.0)*cj5*x352*x357))+(((-1.0)*(0.5)*sj3))+((x354*x356))+((x352*x358)));
evalcond[1]=((((-1.0)*(1.0)*cj3))+(((-1.0)*x355*x357))+((x354*x358))+(((-1.0)*r21*x359))+((x353*x354))+(((-1.0)*x352*x356)));
evalcond[2]=(((x354*x360))+((x354*x361))+(((-1.0)*x368*x369))+((x370*x371))+((x366*x367))+(((-1.0)*r00*x365))+(((-1.0)*x362*x363))+(((-1.0)*r10*sj0*sj5*x352))+(((-1.0)*r01*x364))+(((-1.0)*r11*sj0*x359)));
evalcond[3]=(((x362*x376))+((x370*x375))+((r10*x367))+(((-1.0)*r01*x369))+(((-1.0)*x352*x373))+(((-1.0)*x354*x377))+(((0.5)*cj3))+((r11*x363))+(((-1.0)*x368*x374))+(((-1.0)*x366*x378))+((x352*x372)));
evalcond[4]=((((-1.0)*x366*x371))+((x352*x377))+(((-1.0)*x363*x368))+(((-1.0)*r10*x365))+((x367*x370))+((x362*x369))+((r01*x376))+(((-1.0)*r11*x364))+(((-1.0)*(1.0)*sj3))+((x354*x372))+(((-1.0)*x354*x373)));
evalcond[5]=((0.866025403784439)+((r11*x369))+(((-1.0)*x362*x374))+((r00*x367))+((r10*x371))+((r01*x363))+(((-1.0)*x368*x376))+((x370*x378))+((x352*x361))+((x352*x360))+((x366*x375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x379=((0.866025403784439)*r22);
IkReal x380=((0.5)*r20);
IkReal x381=(cj3*cj5);
IkReal x382=((0.5)*r21);
IkReal x383=(cj3*sj5);
IkReal x384=((0.25)*sj3);
IkReal x385=(cj5*r20);
IkReal x386=(r21*sj5);
IkReal x387=r20*r20;
IkReal x388=r21*r21;
IkReal x389=((0.75)*(cj5*cj5));
CheckValue<IkReal> x390 = IKatan2WithCheck(IkReal((((sj3*sj5*x380))+((cj3*x379))+((cj5*sj3*x382))+(((-1.0)*x380*x381))+((x382*x383)))),IkReal(((((0.433012701892219)*r22*sj3))+(((-1.0)*x384*x385))+((x384*x386))+(((-1.0)*r21*x381))+(((-1.0)*r20*x383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x390.valid){
continue;
}
CheckValue<IkReal> x391=IKPowWithIntegerCheck(IKsign(((((0.25)*x388))+(((0.75)*(r22*r22)))+((x379*x386))+(((-1.0)*x387*x389))+((x388*x389))+x387+(((1.5)*cj5*r20*x386))+(((-1.0)*x379*x385)))),-1);
if(!x391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x390.value)+(((1.5707963267949)*(x391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x392=IKcos(j4);
IkReal x393=((0.866025403784439)*r22);
IkReal x394=IKsin(j4);
IkReal x395=(cj5*x394);
IkReal x396=(r20*sj5);
IkReal x397=((0.5)*r20);
IkReal x398=((0.5)*r21*sj5);
IkReal x399=((1.0)*cj5*x392);
IkReal x400=((0.866025403784439)*cj0*r02);
IkReal x401=((0.866025403784439)*r12*sj0);
IkReal x402=((0.5)*r00);
IkReal x403=(cj0*cj5*x394);
IkReal x404=((1.0)*cj0*cj5*x392);
IkReal x405=((1.0)*cj0*sj5*x392);
IkReal x406=((0.5)*r01);
IkReal x407=(cj0*sj5*x394);
IkReal x408=((0.5)*r10);
IkReal x409=(cj5*sj0*x394);
IkReal x410=((0.5)*r11);
IkReal x411=(sj0*sj5*x394);
IkReal x412=((0.866025403784439)*cj0*r12);
IkReal x413=((0.866025403784439)*r02*sj0);
IkReal x414=(cj0*cj5*x392);
IkReal x415=(cj0*sj5*x392);
IkReal x416=(cj5*sj0*x392);
IkReal x417=(r00*sj0*sj5);
IkReal x418=(sj0*sj5*x392);
evalcond[0]=(((x392*x393))+((x392*x398))+(((-1.0)*cj5*x392*x397))+(((-1.0)*(0.5)*sj3))+((r21*x395))+((x394*x396)));
evalcond[1]=((((-1.0)*x392*x396))+((x393*x394))+(((-1.0)*r21*x399))+(((-1.0)*(1.0)*cj3))+(((-1.0)*x395*x397))+((x394*x398)));
evalcond[2]=((((-1.0)*r11*sj0*x399))+(((-1.0)*x402*x403))+(((-1.0)*r00*x405))+((x410*x411))+((x394*x400))+((x394*x401))+(((-1.0)*r10*sj0*sj5*x392))+((x406*x407))+(((-1.0)*r01*x404))+(((-1.0)*x408*x409)));
evalcond[3]=(((r10*x407))+(((-1.0)*x408*x414))+((r11*x403))+(((-1.0)*r01*x409))+((x402*x416))+((x410*x415))+(((-1.0)*x394*x417))+(((-1.0)*x392*x413))+(((0.5)*cj3))+(((-1.0)*x406*x418))+((x392*x412)));
evalcond[4]=(((x407*x410))+(((-1.0)*r10*x405))+((x402*x409))+((x392*x417))+(((-1.0)*r11*x404))+(((-1.0)*x403*x408))+((r01*x416))+(((-1.0)*x406*x411))+(((-1.0)*(1.0)*sj3))+((x394*x412))+(((-1.0)*x394*x413)));
evalcond[5]=((0.866025403784439)+((x392*x400))+((r00*x407))+((x410*x418))+(((-1.0)*x408*x416))+(((-1.0)*x402*x414))+((x406*x415))+((r10*x411))+((x392*x401))+((r11*x409))+((r01*x403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x419=((1.0)*sj5);
if( IKabs((((cj5*r20))+(((-1.0)*r21*x419))+(((0.577350269189626)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))+(((-1.0)*cj0*r11*x419)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20))+(((-1.0)*r21*x419))+(((0.577350269189626)*r22))))+IKsqr((((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))+(((-1.0)*cj0*r11*x419))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r20))+(((-1.0)*r21*x419))+(((0.577350269189626)*r22))), (((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))+(((-1.0)*cj0*r11*x419))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x420=((0.866025403784439)*cj5);
IkReal x421=((0.866025403784439)*sj5);
evalcond[0]=(((r21*x421))+(((-1.0)*(0.5)*r22))+(((-1.0)*r20*x420))+(((0.866025403784439)*(IKsin(j3)))));
evalcond[1]=((((-1.0)*r01*sj0*x421))+(((-1.0)*(0.5)*cj0*r12))+((cj0*r11*x421))+(((0.5)*r02*sj0))+(((-1.0)*cj0*r10*x420))+((r00*sj0*x420))+(((0.866025403784439)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x422=(r02*sj0);
IkReal x423=(cj0*r12);
IkReal x424=(cj0*cj5*r10);
IkReal x425=(cj0*r11*sj5);
IkReal x426=(cj5*r00*sj0);
IkReal x427=(r01*sj0*sj5);
j4eval[0]=(x422+(((-1.73205080756888)*x427))+(((1.73205080756888)*x426))+(((1.73205080756888)*x425))+(((-1.0)*x423))+(((-1.73205080756888)*x424)));
j4eval[1]=IKsign(((((0.5)*x422))+(((0.866025403784439)*x425))+(((-0.866025403784439)*x424))+(((0.866025403784439)*x426))+(((-0.866025403784439)*x427))+(((-0.5)*x423))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x428=r20*r20;
IkReal x429=r21*r21;
IkReal x430=r22*r22;
IkReal x431=((3.46410161513775)*r22);
IkReal x432=(cj5*r20);
IkReal x433=(r21*sj5);
IkReal x434=(cj5*r20*r21*sj5);
IkReal x435=cj5*cj5;
IkReal x436=(x428*x435);
IkReal x437=(x429*x435);
IkReal x438=((0.866025403784439)*r22);
IkReal x439=((0.5)*r20);
IkReal x440=(cj3*cj5);
IkReal x441=((0.5)*r21);
IkReal x442=(cj3*sj5);
IkReal x443=((0.25)*sj3);
j4eval[0]=((((-3.0)*x430))+(((-4.0)*x428))+(((-6.0)*x434))+(((3.0)*x436))+((x431*x432))+(((-1.0)*x431*x433))+(((-3.0)*x437))+(((-1.0)*x429)));
j4eval[1]=IKsign(((((-1.5)*x434))+(((-1.0)*x433*x438))+(((-0.25)*x429))+(((-0.75)*x437))+(((-0.75)*x430))+(((0.75)*x436))+((x432*x438))+(((-1.0)*x428))));
j4eval[2]=((IKabs(((((-1.0)*x439*x440))+((x441*x442))+((cj3*x438))+((sj3*sj5*x439))+((cj5*sj3*x441)))))+(IKabs(((((-1.0)*r21*x440))+(((0.433012701892219)*r22*sj3))+(((-1.0)*r20*x442))+((x433*x443))+(((-1.0)*x432*x443))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x444=(cj0*r01*r21);
IkReal x445=(r11*r21*sj0);
IkReal x446=(cj0*r00*r20);
IkReal x447=(cj0*r02*r22);
IkReal x448=(r10*r20*sj0);
IkReal x449=(r12*r22*sj0);
IkReal x450=(cj0*cj5*r00*r22);
IkReal x451=(cj0*cj5*r02*r20);
IkReal x452=(cj0*r01*r22*sj5);
IkReal x453=(cj0*r02*r21*sj5);
IkReal x454=(cj5*r10*r22*sj0);
IkReal x455=(cj5*r12*r20*sj0);
IkReal x456=(r11*r22*sj0*sj5);
IkReal x457=(r12*r21*sj0*sj5);
IkReal x458=(cj0*cj5*r00*r21*sj5);
IkReal x459=(cj0*cj5*r01*r20*sj5);
IkReal x460=(cj5*r10*r21*sj0*sj5);
IkReal x461=(cj5*r11*r20*sj0*sj5);
IkReal x462=cj5*cj5;
IkReal x463=(cj0*r00*r20*x462);
IkReal x464=(cj0*r01*r21*x462);
IkReal x465=(r10*r20*sj0*x462);
IkReal x466=(r11*r21*sj0*x462);
j4eval[0]=((((3.0)*x461))+(((-3.0)*x465))+(((3.0)*x466))+(((3.0)*x460))+(((-1.73205080756888)*x454))+(((4.0)*x446))+(((-1.73205080756888)*x455))+(((3.0)*x458))+(((1.73205080756888)*x457))+(((3.0)*x449))+(((3.0)*x464))+x444+x445+(((-3.0)*x463))+(((3.0)*x447))+(((4.0)*x448))+(((1.73205080756888)*x456))+(((3.0)*x459))+(((-1.73205080756888)*x451))+(((-1.73205080756888)*x450))+(((1.73205080756888)*x453))+(((1.73205080756888)*x452)));
j4eval[1]=IKsign(((((-1.5)*x463))+(((0.866025403784439)*x457))+(((1.5)*x447))+(((0.5)*x444))+(((-1.5)*x465))+(((1.5)*x449))+(((-0.866025403784439)*x454))+(((1.5)*x464))+(((0.5)*x445))+(((0.866025403784439)*x452))+(((0.866025403784439)*x453))+(((1.5)*x466))+(((2.0)*x448))+(((1.5)*x460))+(((2.0)*x446))+(((1.5)*x459))+(((-0.866025403784439)*x455))+(((0.866025403784439)*x456))+(((1.5)*x458))+(((-0.866025403784439)*x451))+(((-0.866025403784439)*x450))+(((1.5)*x461))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x467=(cj0*r01);
IkReal x468=((1.0)*cj5*sj3);
IkReal x469=(cj0*r00);
IkReal x470=((1.0)*sj3*sj5);
IkReal x471=(r11*sj0);
IkReal x472=(r10*sj0);
IkReal x473=((0.866025403784439)*sj3);
IkReal x474=(cj0*r02);
IkReal x475=(r12*sj0);
IkReal x476=((0.5)*sj3);
IkReal x477=(cj0*cj5*r00);
IkReal x478=(cj0*r01*sj5);
IkReal x479=(cj5*r10*sj0);
IkReal x480=(r11*sj0*sj5);
IkReal x481=((2.0)*r20);
IkReal x482=((0.5)*r21);
IkReal x483=((1.5)*r22);
IkReal x484=((0.866025403784439)*r22);
IkReal x485=(cj5*r20);
IkReal x486=((0.866025403784439)*cj0*r02);
IkReal x487=(r21*sj5);
IkReal x488=((0.866025403784439)*r12*sj0);
IkReal x489=((1.5)*r21*sj5);
IkReal x490=((1.5)*cj5*r20);
IkReal x491=cj5*cj5;
IkReal x492=((1.5)*r20*x491);
IkReal x493=((1.5)*r21*x491);
CheckValue<IkReal> x494 = IKatan2WithCheck(IkReal(((((-1.0)*x468*x471))+(((-1.0)*x470*x472))+(((-1.0)*x467*x468))+(((-1.0)*x469*x470)))),IkReal((((x476*x479))+(((-1.0)*x473*x474))+(((-1.0)*x473*x475))+(((-1.0)*x476*x478))+((x476*x477))+(((-1.0)*x476*x480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x494.valid){
continue;
}
CheckValue<IkReal> x495=IKPowWithIntegerCheck(IKsign((((x480*x484))+(((-1.0)*x485*x486))+(((-1.0)*x477*x484))+(((-1.0)*x469*x492))+((x467*x493))+((x477*x489))+((x480*x490))+((x471*x493))+((x478*x490))+(((-1.0)*x485*x488))+((x472*x481))+((x471*x482))+((x478*x484))+((x479*x489))+((x486*x487))+((x467*x482))+((x487*x488))+((x469*x481))+((x474*x483))+(((-1.0)*x479*x484))+((x475*x483))+(((-1.0)*x472*x492)))),-1);
if(!x495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x494.value)+(((1.5707963267949)*(x495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x496=IKsin(j4);
IkReal x497=((0.866025403784439)*r22);
IkReal x498=((0.5)*r20);
IkReal x499=(cj5*x496);
IkReal x500=IKcos(j4);
IkReal x501=((1.0)*cj5*x500);
IkReal x502=(r20*sj5);
IkReal x503=((0.5)*r21*sj5);
IkReal x504=((0.866025403784439)*cj0*r02);
IkReal x505=((0.866025403784439)*r12*sj0);
IkReal x506=((0.5)*r00);
IkReal x507=(cj0*cj5*x496);
IkReal x508=((1.0)*cj0*cj5*x500);
IkReal x509=((1.0)*cj0*sj5*x500);
IkReal x510=((0.5)*r01);
IkReal x511=(cj0*sj5*x496);
IkReal x512=((0.5)*r10);
IkReal x513=(cj5*sj0*x496);
IkReal x514=((0.5)*r11);
IkReal x515=(sj0*sj5*x496);
IkReal x516=((0.866025403784439)*cj0*r12);
IkReal x517=((0.866025403784439)*r02*sj0);
IkReal x518=(cj0*cj5*x500);
IkReal x519=(cj0*sj5*x500);
IkReal x520=(cj5*sj0*x500);
IkReal x521=(r00*sj0*sj5);
IkReal x522=(sj0*sj5*x500);
evalcond[0]=(((x496*x503))+cj3+(((-1.0)*r21*x501))+((x496*x497))+(((-1.0)*x500*x502))+(((-1.0)*x498*x499)));
evalcond[1]=(((x497*x500))+(((-1.0)*cj5*x498*x500))+(((0.5)*sj3))+((r21*x499))+((x500*x503))+((x496*x502)));
evalcond[2]=((((-1.0)*x512*x513))+((x514*x515))+(((-1.0)*x506*x507))+(((-1.0)*r11*sj0*x501))+((x496*x504))+((x496*x505))+((x510*x511))+(((-1.0)*r10*sj0*sj5*x500))+(((-1.0)*r01*x508))+(((-1.0)*r00*x509)));
evalcond[3]=((((-1.0)*x496*x521))+((x500*x516))+(((-1.0)*x500*x517))+((r11*x507))+(((-1.0)*x510*x522))+(((-1.0)*x512*x518))+((r10*x511))+((x506*x520))+(((0.5)*cj3))+((x514*x519))+(((-1.0)*r01*x513)));
evalcond[4]=((((-1.0)*r11*x508))+((r01*x520))+((x496*x516))+(((-1.0)*x510*x515))+((x511*x514))+(((-1.0)*r10*x509))+(((-1.0)*x507*x512))+(((-1.0)*x496*x517))+(((-1.0)*(1.0)*sj3))+((x500*x521))+((x506*x513)));
evalcond[5]=((-0.866025403784439)+(((-1.0)*x506*x518))+((x500*x505))+((r10*x515))+((x514*x522))+(((-1.0)*x512*x520))+((r00*x511))+((r11*x513))+((x500*x504))+((r01*x507))+((x510*x519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x523=((0.866025403784439)*r22);
IkReal x524=((0.5)*r20);
IkReal x525=(cj3*cj5);
IkReal x526=((0.5)*r21);
IkReal x527=(cj3*sj5);
IkReal x528=((0.25)*sj3);
IkReal x529=(cj5*r20);
IkReal x530=(r21*sj5);
IkReal x531=r20*r20;
IkReal x532=r21*r21;
IkReal x533=((0.75)*(cj5*cj5));
CheckValue<IkReal> x534 = IKatan2WithCheck(IkReal(((((-1.0)*x524*x525))+((cj3*x523))+((sj3*sj5*x524))+((cj5*sj3*x526))+((x526*x527)))),IkReal((((x528*x530))+(((-1.0)*r21*x525))+(((0.433012701892219)*r22*sj3))+(((-1.0)*r20*x527))+(((-1.0)*x528*x529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x534.valid){
continue;
}
CheckValue<IkReal> x535=IKPowWithIntegerCheck(IKsign((((x523*x529))+(((-1.0)*x523*x530))+(((-0.25)*x532))+(((-1.0)*x532*x533))+((x531*x533))+(((-1.0)*x531))+(((-1.0)*(0.75)*(r22*r22)))+(((-1.5)*cj5*r20*x530)))),-1);
if(!x535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x534.value)+(((1.5707963267949)*(x535.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x536=IKsin(j4);
IkReal x537=((0.866025403784439)*r22);
IkReal x538=((0.5)*r20);
IkReal x539=(cj5*x536);
IkReal x540=IKcos(j4);
IkReal x541=((1.0)*cj5*x540);
IkReal x542=(r20*sj5);
IkReal x543=((0.5)*r21*sj5);
IkReal x544=((0.866025403784439)*cj0*r02);
IkReal x545=((0.866025403784439)*r12*sj0);
IkReal x546=((0.5)*r00);
IkReal x547=(cj0*cj5*x536);
IkReal x548=((1.0)*cj0*cj5*x540);
IkReal x549=((1.0)*cj0*sj5*x540);
IkReal x550=((0.5)*r01);
IkReal x551=(cj0*sj5*x536);
IkReal x552=((0.5)*r10);
IkReal x553=(cj5*sj0*x536);
IkReal x554=((0.5)*r11);
IkReal x555=(sj0*sj5*x536);
IkReal x556=((0.866025403784439)*cj0*r12);
IkReal x557=((0.866025403784439)*r02*sj0);
IkReal x558=(cj0*cj5*x540);
IkReal x559=(cj0*sj5*x540);
IkReal x560=(cj5*sj0*x540);
IkReal x561=(r00*sj0*sj5);
IkReal x562=(sj0*sj5*x540);
evalcond[0]=(((x536*x537))+(((-1.0)*x540*x542))+((x536*x543))+cj3+(((-1.0)*r21*x541))+(((-1.0)*x538*x539)));
evalcond[1]=((((-1.0)*cj5*x538*x540))+(((0.5)*sj3))+((r21*x539))+((x536*x542))+((x537*x540))+((x540*x543)));
evalcond[2]=((((-1.0)*x552*x553))+((x536*x545))+(((-1.0)*r11*sj0*x541))+((x536*x544))+(((-1.0)*r00*x549))+((x550*x551))+(((-1.0)*x546*x547))+(((-1.0)*r01*x548))+(((-1.0)*r10*sj0*sj5*x540))+((x554*x555)));
evalcond[3]=((((-1.0)*r01*x553))+((r10*x551))+((r11*x547))+((x546*x560))+(((-1.0)*x536*x561))+((x554*x559))+(((-1.0)*x552*x558))+(((-1.0)*x540*x557))+(((0.5)*cj3))+((x540*x556))+(((-1.0)*x550*x562)));
evalcond[4]=((((-1.0)*x550*x555))+(((-1.0)*r11*x548))+((x540*x561))+(((-1.0)*r10*x549))+((x551*x554))+(((-1.0)*x547*x552))+((x536*x556))+(((-1.0)*x536*x557))+(((-1.0)*(1.0)*sj3))+((r01*x560))+((x546*x553)));
evalcond[5]=((-0.866025403784439)+((x540*x545))+((r01*x547))+(((-1.0)*x546*x558))+((r10*x555))+((r00*x551))+((r11*x553))+(((-1.0)*x552*x560))+((x554*x562))+((x540*x544))+((x550*x559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x563=((0.866025403784439)*cj0);
IkReal x564=(cj5*r10);
IkReal x565=(r11*sj5);
IkReal x566=((0.866025403784439)*sj0);
IkReal x567=(cj5*r00);
IkReal x568=(r01*sj5);
IkReal x569=((1.0)*cj0*cj3);
IkReal x570=((1.0)*cj3*sj0);
IkReal x571=((0.5)*cj0*cj3);
IkReal x572=((0.5)*cj3*sj0);
CheckValue<IkReal> x573=IKPowWithIntegerCheck(IKsign(((((-1.0)*x563*x564))+(((-0.5)*cj0*r12))+((x566*x567))+(((-1.0)*x566*x568))+((x563*x565))+((r02*(((0.5)*sj0)))))),-1);
if(!x573.valid){
continue;
}
CheckValue<IkReal> x574 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r01*x569))+(((-1.0)*cj5*r11*x570))+(((-1.0)*r00*sj5*x569))+(((-1.0)*r10*sj5*x570)))),IkReal((((x564*x572))+((x567*x571))+(((-1.0)*x565*x572))+(((-1.0)*cj3*r12*x566))+(((-1.0)*cj3*r02*x563))+(((-1.0)*x568*x571)))),IKFAST_ATAN2_MAGTHRESH);
if(!x574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x573.value)))+(x574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x575=IKsin(j4);
IkReal x576=((0.866025403784439)*r22);
IkReal x577=((0.5)*r20);
IkReal x578=(cj5*x575);
IkReal x579=IKcos(j4);
IkReal x580=((1.0)*cj5*x579);
IkReal x581=(r20*sj5);
IkReal x582=((0.5)*r21*sj5);
IkReal x583=((0.866025403784439)*cj0*r02);
IkReal x584=((0.866025403784439)*r12*sj0);
IkReal x585=((0.5)*r00);
IkReal x586=(cj0*cj5*x575);
IkReal x587=((1.0)*cj0*cj5*x579);
IkReal x588=((1.0)*cj0*sj5*x579);
IkReal x589=((0.5)*r01);
IkReal x590=(cj0*sj5*x575);
IkReal x591=((0.5)*r10);
IkReal x592=(cj5*sj0*x575);
IkReal x593=((0.5)*r11);
IkReal x594=(sj0*sj5*x575);
IkReal x595=((0.866025403784439)*cj0*r12);
IkReal x596=((0.866025403784439)*r02*sj0);
IkReal x597=(cj0*cj5*x579);
IkReal x598=(cj0*sj5*x579);
IkReal x599=(cj5*sj0*x579);
IkReal x600=(r00*sj0*sj5);
IkReal x601=(sj0*sj5*x579);
evalcond[0]=((((-1.0)*x579*x581))+((x575*x576))+(((-1.0)*x577*x578))+(((-1.0)*r21*x580))+cj3+((x575*x582)));
evalcond[1]=((((0.5)*sj3))+((x576*x579))+((r21*x578))+((x579*x582))+((x575*x581))+(((-1.0)*cj5*x577*x579)));
evalcond[2]=(((x593*x594))+((x575*x583))+(((-1.0)*r10*sj0*sj5*x579))+(((-1.0)*x591*x592))+(((-1.0)*r00*x588))+((x589*x590))+(((-1.0)*r01*x587))+(((-1.0)*r11*sj0*x580))+((x575*x584))+(((-1.0)*x585*x586)));
evalcond[3]=(((r11*x586))+((x585*x599))+((x593*x598))+(((-1.0)*r01*x592))+((x579*x595))+(((-1.0)*x591*x597))+(((-1.0)*x575*x600))+(((0.5)*cj3))+(((-1.0)*x589*x601))+((r10*x590))+(((-1.0)*x579*x596)));
evalcond[4]=(((x575*x595))+((x579*x600))+(((-1.0)*x589*x594))+((r01*x599))+(((-1.0)*r10*x588))+((x585*x592))+(((-1.0)*x575*x596))+((x590*x593))+(((-1.0)*r11*x587))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x586*x591)));
evalcond[5]=((-0.866025403784439)+((r11*x592))+((x589*x598))+((x593*x601))+((r00*x590))+((x579*x583))+((r01*x586))+(((-1.0)*x591*x599))+((r10*x594))+((x579*x584))+(((-1.0)*x585*x597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x602=((1.0)*sj5);
if( IKabs(((((-1.0)*r21*x602))+((cj5*r20))+(((0.577350269189626)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x602))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x602))+((cj5*r20))+(((0.577350269189626)*r22))))+IKsqr((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x602))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r21*x602))+((cj5*r20))+(((0.577350269189626)*r22))), (((cj0*cj5*r10))+(((-1.0)*cj0*r11*x602))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x603=((0.866025403784439)*cj5);
IkReal x604=((0.866025403784439)*sj5);
evalcond[0]=((((-1.0)*(0.5)*r22))+(((-1.0)*r20*x603))+((r21*x604))+(((0.866025403784439)*(IKsin(j3)))));
evalcond[1]=((((-1.0)*(0.5)*cj0*r12))+(((-1.0)*r01*sj0*x604))+(((0.5)*r02*sj0))+((r00*sj0*x603))+(((-1.0)*cj0*r10*x603))+(((0.866025403784439)*(IKcos(j3))))+((cj0*r11*x604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x605=(r02*sj0);
IkReal x606=(cj0*r12);
IkReal x607=(cj0*cj5*r10);
IkReal x608=(cj0*r11*sj5);
IkReal x609=(cj5*r00*sj0);
IkReal x610=(r01*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x609))+(((-1.0)*x606))+(((-1.73205080756888)*x610))+(((-1.73205080756888)*x607))+x605+(((1.73205080756888)*x608)));
j4eval[1]=IKsign(((((0.866025403784439)*x609))+(((0.866025403784439)*x608))+(((-0.866025403784439)*x607))+(((-0.5)*x606))+(((-0.866025403784439)*x610))+(((0.5)*x605))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x611=r20*r20;
IkReal x612=r21*r21;
IkReal x613=r22*r22;
IkReal x614=((3.46410161513775)*r22);
IkReal x615=(cj5*r20);
IkReal x616=(r21*sj5);
IkReal x617=(cj5*r20*r21*sj5);
IkReal x618=cj5*cj5;
IkReal x619=(x611*x618);
IkReal x620=(x612*x618);
IkReal x621=((0.866025403784439)*r22);
IkReal x622=((0.5)*r20);
IkReal x623=(cj3*cj5);
IkReal x624=((0.5)*r21);
IkReal x625=(cj3*sj5);
IkReal x626=((0.25)*sj3);
j4eval[0]=(((x614*x615))+(((-3.0)*x620))+(((3.0)*x619))+(((-1.0)*x614*x616))+(((-1.0)*x612))+(((-6.0)*x617))+(((-4.0)*x611))+(((-3.0)*x613)));
j4eval[1]=IKsign(((((-0.75)*x613))+((x615*x621))+(((-1.0)*x616*x621))+(((-0.75)*x620))+(((-1.0)*x611))+(((-0.25)*x612))+(((-1.5)*x617))+(((0.75)*x619))));
j4eval[2]=((IKabs((((sj3*sj5*x622))+(((-1.0)*x622*x623))+((cj5*sj3*x624))+((cj3*x621))+((x624*x625)))))+(IKabs(((((0.433012701892219)*r22*sj3))+(((-1.0)*r21*x623))+((x616*x626))+(((-1.0)*r20*x625))+(((-1.0)*x615*x626))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x627=(cj0*r01*r21);
IkReal x628=(r11*r21*sj0);
IkReal x629=(cj0*r00*r20);
IkReal x630=(cj0*r02*r22);
IkReal x631=(r10*r20*sj0);
IkReal x632=(r12*r22*sj0);
IkReal x633=(cj0*cj5*r00*r22);
IkReal x634=(cj0*cj5*r02*r20);
IkReal x635=(cj0*r01*r22*sj5);
IkReal x636=(cj0*r02*r21*sj5);
IkReal x637=(cj5*r10*r22*sj0);
IkReal x638=(cj5*r12*r20*sj0);
IkReal x639=(r11*r22*sj0*sj5);
IkReal x640=(r12*r21*sj0*sj5);
IkReal x641=(cj0*cj5*r00*r21*sj5);
IkReal x642=(cj0*cj5*r01*r20*sj5);
IkReal x643=(cj5*r10*r21*sj0*sj5);
IkReal x644=(cj5*r11*r20*sj0*sj5);
IkReal x645=cj5*cj5;
IkReal x646=(cj0*r00*r20*x645);
IkReal x647=(cj0*r01*r21*x645);
IkReal x648=(r10*r20*sj0*x645);
IkReal x649=(r11*r21*sj0*x645);
j4eval[0]=((((3.0)*x630))+(((3.0)*x632))+(((1.73205080756888)*x640))+(((-1.73205080756888)*x634))+(((-1.73205080756888)*x637))+(((1.73205080756888)*x639))+(((1.73205080756888)*x635))+x628+x627+(((-1.73205080756888)*x633))+(((3.0)*x649))+(((4.0)*x629))+(((-1.73205080756888)*x638))+(((4.0)*x631))+(((-3.0)*x646))+(((-3.0)*x648))+(((3.0)*x642))+(((1.73205080756888)*x636))+(((3.0)*x641))+(((3.0)*x644))+(((3.0)*x647))+(((3.0)*x643)));
j4eval[1]=IKsign(((((0.5)*x627))+(((-1.5)*x646))+(((-1.5)*x648))+(((1.5)*x632))+(((0.866025403784439)*x636))+(((-0.866025403784439)*x634))+(((1.5)*x630))+(((2.0)*x631))+(((0.5)*x628))+(((-0.866025403784439)*x638))+(((0.866025403784439)*x635))+(((1.5)*x644))+(((2.0)*x629))+(((1.5)*x643))+(((0.866025403784439)*x639))+(((1.5)*x642))+(((1.5)*x641))+(((1.5)*x647))+(((1.5)*x649))+(((-0.866025403784439)*x637))+(((-0.866025403784439)*x633))+(((0.866025403784439)*x640))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x650=(cj0*r01);
IkReal x651=((1.0)*cj5*sj3);
IkReal x652=(cj0*r00);
IkReal x653=((1.0)*sj3*sj5);
IkReal x654=(r11*sj0);
IkReal x655=(r10*sj0);
IkReal x656=((0.866025403784439)*sj3);
IkReal x657=(cj0*r02);
IkReal x658=(r12*sj0);
IkReal x659=((0.5)*sj3);
IkReal x660=(cj0*cj5*r00);
IkReal x661=(cj0*r01*sj5);
IkReal x662=(cj5*r10*sj0);
IkReal x663=(r11*sj0*sj5);
IkReal x664=((2.0)*r20);
IkReal x665=((0.5)*r21);
IkReal x666=((1.5)*r22);
IkReal x667=((0.866025403784439)*r22);
IkReal x668=(cj5*r20);
IkReal x669=((0.866025403784439)*cj0*r02);
IkReal x670=(r21*sj5);
IkReal x671=((0.866025403784439)*r12*sj0);
IkReal x672=((1.5)*r21*sj5);
IkReal x673=((1.5)*cj5*r20);
IkReal x674=cj5*cj5;
IkReal x675=((1.5)*r20*x674);
IkReal x676=((1.5)*r21*x674);
CheckValue<IkReal> x677=IKPowWithIntegerCheck(IKsign((((x658*x666))+((x662*x672))+((x654*x665))+((x654*x676))+((x652*x664))+((x663*x673))+(((-1.0)*x652*x675))+((x650*x676))+((x657*x666))+((x660*x672))+((x669*x670))+(((-1.0)*x662*x667))+(((-1.0)*x668*x671))+((x663*x667))+(((-1.0)*x660*x667))+((x661*x667))+((x650*x665))+((x655*x664))+(((-1.0)*x655*x675))+((x661*x673))+(((-1.0)*x668*x669))+((x670*x671)))),-1);
if(!x677.valid){
continue;
}
CheckValue<IkReal> x678 = IKatan2WithCheck(IkReal(((((-1.0)*x652*x653))+(((-1.0)*x653*x655))+(((-1.0)*x651*x654))+(((-1.0)*x650*x651)))),IkReal(((((-1.0)*x656*x657))+((x659*x660))+((x659*x662))+(((-1.0)*x656*x658))+(((-1.0)*x659*x663))+(((-1.0)*x659*x661)))),IKFAST_ATAN2_MAGTHRESH);
if(!x678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x677.value)))+(x678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x679=IKsin(j4);
IkReal x680=((0.866025403784439)*r22);
IkReal x681=((0.5)*r20);
IkReal x682=(cj5*x679);
IkReal x683=IKcos(j4);
IkReal x684=((1.0)*cj5*x683);
IkReal x685=(r20*sj5);
IkReal x686=((0.5)*r21*sj5);
IkReal x687=((0.866025403784439)*cj0*r02);
IkReal x688=((0.866025403784439)*r12*sj0);
IkReal x689=((0.5)*r00);
IkReal x690=(cj0*cj5*x679);
IkReal x691=((1.0)*cj0*cj5*x683);
IkReal x692=((1.0)*cj0*sj5*x683);
IkReal x693=((0.5)*r01);
IkReal x694=(cj0*sj5*x679);
IkReal x695=((0.5)*r10);
IkReal x696=(cj5*sj0*x679);
IkReal x697=((0.5)*r11);
IkReal x698=(sj0*sj5*x679);
IkReal x699=((0.866025403784439)*cj0*r12);
IkReal x700=((0.866025403784439)*r02*sj0);
IkReal x701=(cj0*cj5*x683);
IkReal x702=(cj0*sj5*x683);
IkReal x703=(cj5*sj0*x683);
IkReal x704=(r00*sj0*sj5);
IkReal x705=(sj0*sj5*x683);
evalcond[0]=(((x679*x686))+(((-1.0)*r21*x684))+((x679*x680))+(((-1.0)*x683*x685))+cj3+(((-1.0)*x681*x682)));
evalcond[1]=((((-1.0)*cj5*x681*x683))+((x679*x685))+(((0.5)*sj3))+((x683*x686))+((r21*x682))+((x680*x683)));
evalcond[2]=(((x679*x688))+(((-1.0)*r10*sj0*sj5*x683))+(((-1.0)*x689*x690))+(((-1.0)*r01*x691))+(((-1.0)*r11*sj0*x684))+((x693*x694))+(((-1.0)*r00*x692))+(((-1.0)*x695*x696))+((x679*x687))+((x697*x698)));
evalcond[3]=((((-1.0)*x679*x704))+(((-1.0)*x683*x700))+((r10*x694))+((x683*x699))+(((-1.0)*x693*x705))+(((-1.0)*r01*x696))+(((-1.0)*x695*x701))+((r11*x690))+(((0.5)*cj3))+((x697*x702))+((x689*x703)));
evalcond[4]=(((x679*x699))+((r01*x703))+((x689*x696))+((x683*x704))+(((-1.0)*r11*x691))+(((-1.0)*x690*x695))+(((-1.0)*x679*x700))+(((-1.0)*x693*x698))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r10*x692))+((x694*x697)));
evalcond[5]=((-0.866025403784439)+((x697*x705))+((r00*x694))+((r01*x690))+(((-1.0)*x689*x701))+((x683*x687))+((x683*x688))+((r11*x696))+(((-1.0)*x695*x703))+((r10*x698))+((x693*x702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x706=((0.866025403784439)*r22);
IkReal x707=((0.5)*r20);
IkReal x708=(cj3*cj5);
IkReal x709=((0.5)*r21);
IkReal x710=(cj3*sj5);
IkReal x711=((0.25)*sj3);
IkReal x712=(cj5*r20);
IkReal x713=(r21*sj5);
IkReal x714=r20*r20;
IkReal x715=r21*r21;
IkReal x716=((0.75)*(cj5*cj5));
CheckValue<IkReal> x717=IKPowWithIntegerCheck(IKsign(((((-1.0)*x706*x713))+(((-0.25)*x715))+(((-1.5)*cj5*r20*x713))+((x706*x712))+((x714*x716))+(((-1.0)*x715*x716))+(((-1.0)*x714))+(((-1.0)*(0.75)*(r22*r22))))),-1);
if(!x717.valid){
continue;
}
CheckValue<IkReal> x718 = IKatan2WithCheck(IkReal((((cj5*sj3*x709))+(((-1.0)*x707*x708))+((x709*x710))+((sj3*sj5*x707))+((cj3*x706)))),IkReal(((((-1.0)*r20*x710))+(((-1.0)*r21*x708))+(((0.433012701892219)*r22*sj3))+(((-1.0)*x711*x712))+((x711*x713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x717.value)))+(x718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x719=IKsin(j4);
IkReal x720=((0.866025403784439)*r22);
IkReal x721=((0.5)*r20);
IkReal x722=(cj5*x719);
IkReal x723=IKcos(j4);
IkReal x724=((1.0)*cj5*x723);
IkReal x725=(r20*sj5);
IkReal x726=((0.5)*r21*sj5);
IkReal x727=((0.866025403784439)*cj0*r02);
IkReal x728=((0.866025403784439)*r12*sj0);
IkReal x729=((0.5)*r00);
IkReal x730=(cj0*cj5*x719);
IkReal x731=((1.0)*cj0*cj5*x723);
IkReal x732=((1.0)*cj0*sj5*x723);
IkReal x733=((0.5)*r01);
IkReal x734=(cj0*sj5*x719);
IkReal x735=((0.5)*r10);
IkReal x736=(cj5*sj0*x719);
IkReal x737=((0.5)*r11);
IkReal x738=(sj0*sj5*x719);
IkReal x739=((0.866025403784439)*cj0*r12);
IkReal x740=((0.866025403784439)*r02*sj0);
IkReal x741=(cj0*cj5*x723);
IkReal x742=(cj0*sj5*x723);
IkReal x743=(cj5*sj0*x723);
IkReal x744=(r00*sj0*sj5);
IkReal x745=(sj0*sj5*x723);
evalcond[0]=(((x719*x726))+(((-1.0)*r21*x724))+cj3+((x719*x720))+(((-1.0)*x723*x725))+(((-1.0)*x721*x722)));
evalcond[1]=(((r21*x722))+((x723*x726))+(((-1.0)*cj5*x721*x723))+(((0.5)*sj3))+((x720*x723))+((x719*x725)));
evalcond[2]=((((-1.0)*x735*x736))+(((-1.0)*r00*x732))+(((-1.0)*r11*sj0*x724))+((x719*x728))+((x719*x727))+(((-1.0)*r10*sj0*sj5*x723))+(((-1.0)*r01*x731))+((x733*x734))+((x737*x738))+(((-1.0)*x729*x730)));
evalcond[3]=(((x729*x743))+(((-1.0)*r01*x736))+(((-1.0)*x719*x744))+(((-1.0)*x733*x745))+((x737*x742))+((r10*x734))+(((-1.0)*x723*x740))+((r11*x730))+(((0.5)*cj3))+((x723*x739))+(((-1.0)*x735*x741)));
evalcond[4]=(((x719*x739))+(((-1.0)*x719*x740))+(((-1.0)*x733*x738))+(((-1.0)*x730*x735))+((r01*x743))+(((-1.0)*r11*x731))+(((-1.0)*r10*x732))+(((-1.0)*(1.0)*sj3))+((x723*x744))+((x734*x737))+((x729*x736)));
evalcond[5]=((-0.866025403784439)+((x733*x742))+((x723*x728))+(((-1.0)*x729*x741))+((r10*x738))+(((-1.0)*x735*x743))+((r00*x734))+((x737*x745))+((r01*x730))+((r11*x736))+((x723*x727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x746=((0.866025403784439)*cj0);
IkReal x747=(cj5*r10);
IkReal x748=(r11*sj5);
IkReal x749=((0.866025403784439)*sj0);
IkReal x750=(cj5*r00);
IkReal x751=(r01*sj5);
IkReal x752=((1.0)*cj0*cj3);
IkReal x753=((1.0)*cj3*sj0);
IkReal x754=((0.5)*cj0*cj3);
IkReal x755=((0.5)*cj3*sj0);
CheckValue<IkReal> x756=IKPowWithIntegerCheck(IKsign(((((-1.0)*x749*x751))+((x749*x750))+(((-0.5)*cj0*r12))+(((-1.0)*x746*x747))+((x746*x748))+((r02*(((0.5)*sj0)))))),-1);
if(!x756.valid){
continue;
}
CheckValue<IkReal> x757 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11*x753))+(((-1.0)*cj5*r01*x752))+(((-1.0)*r00*sj5*x752))+(((-1.0)*r10*sj5*x753)))),IkReal(((((-1.0)*x748*x755))+(((-1.0)*cj3*r02*x746))+(((-1.0)*x751*x754))+((x747*x755))+(((-1.0)*cj3*r12*x749))+((x750*x754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x756.value)))+(x757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x758=IKsin(j4);
IkReal x759=((0.866025403784439)*r22);
IkReal x760=((0.5)*r20);
IkReal x761=(cj5*x758);
IkReal x762=IKcos(j4);
IkReal x763=((1.0)*cj5*x762);
IkReal x764=(r20*sj5);
IkReal x765=((0.5)*r21*sj5);
IkReal x766=((0.866025403784439)*cj0*r02);
IkReal x767=((0.866025403784439)*r12*sj0);
IkReal x768=((0.5)*r00);
IkReal x769=(cj0*cj5*x758);
IkReal x770=((1.0)*cj0*cj5*x762);
IkReal x771=((1.0)*cj0*sj5*x762);
IkReal x772=((0.5)*r01);
IkReal x773=(cj0*sj5*x758);
IkReal x774=((0.5)*r10);
IkReal x775=(cj5*sj0*x758);
IkReal x776=((0.5)*r11);
IkReal x777=(sj0*sj5*x758);
IkReal x778=((0.866025403784439)*cj0*r12);
IkReal x779=((0.866025403784439)*r02*sj0);
IkReal x780=(cj0*cj5*x762);
IkReal x781=(cj0*sj5*x762);
IkReal x782=(cj5*sj0*x762);
IkReal x783=(r00*sj0*sj5);
IkReal x784=(sj0*sj5*x762);
evalcond[0]=((((-1.0)*r21*x763))+((x758*x759))+((x758*x765))+cj3+(((-1.0)*x760*x761))+(((-1.0)*x762*x764)));
evalcond[1]=(((x758*x764))+((x762*x765))+((r21*x761))+(((0.5)*sj3))+(((-1.0)*cj5*x760*x762))+((x759*x762)));
evalcond[2]=(((x758*x766))+(((-1.0)*x774*x775))+((x772*x773))+(((-1.0)*r10*sj0*sj5*x762))+(((-1.0)*r00*x771))+((x758*x767))+(((-1.0)*r11*sj0*x763))+(((-1.0)*x768*x769))+(((-1.0)*r01*x770))+((x776*x777)));
evalcond[3]=(((x776*x781))+((x762*x778))+((x768*x782))+(((-1.0)*x762*x779))+(((-1.0)*x774*x780))+(((-1.0)*x758*x783))+(((-1.0)*r01*x775))+((r11*x769))+((r10*x773))+(((0.5)*cj3))+(((-1.0)*x772*x784)));
evalcond[4]=(((x773*x776))+((x758*x778))+(((-1.0)*r11*x770))+(((-1.0)*x758*x779))+((r01*x782))+(((-1.0)*r10*x771))+(((-1.0)*x769*x774))+((x768*x775))+(((-1.0)*x772*x777))+(((-1.0)*(1.0)*sj3))+((x762*x783)));
evalcond[5]=((-0.866025403784439)+(((-1.0)*x774*x782))+((r10*x777))+((x762*x766))+((r00*x773))+(((-1.0)*x768*x780))+((r11*x775))+((x776*x784))+((r01*x769))+((x762*x767))+((x772*x781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x785=((1.0)*cj5);
if( IKabs((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x785)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*r00*sj0*x785)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x785))))+IKsqr(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*r00*sj0*x785))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x785))), ((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*r00*sj0*x785))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x786=((0.866025403784439)*cj5);
IkReal x787=((0.866025403784439)*sj5);
evalcond[0]=(((r21*x787))+(((-1.0)*r20*x786))+(((-1.0)*(0.866025403784439)*(IKsin(j3))))+(((-1.0)*(0.5)*r22)));
evalcond[1]=(((r00*sj0*x786))+(((-1.0)*(0.5)*cj0*r12))+(((-1.0)*cj0*r10*x786))+((cj0*r11*x787))+(((-1.0)*r01*sj0*x787))+(((0.5)*r02*sj0))+(((0.866025403784439)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x788=r22*r22;
IkReal x789=r20*r20;
IkReal x790=r21*r21;
IkReal x791=((1.15470053837925)*r22);
IkReal x792=(cj5*r20);
IkReal x793=(r21*sj5);
IkReal x794=(cj5*r20*r21*sj5);
IkReal x795=cj5*cj5;
IkReal x796=(x790*x795);
IkReal x797=(x789*x795);
IkReal x798=((0.866025403784439)*r22);
IkReal x799=((0.5)*r20);
IkReal x800=(cj3*cj5);
IkReal x801=((0.5)*r21);
IkReal x802=(cj3*sj5);
IkReal x803=((0.25)*sj3);
j4eval[0]=((((-1.0)*x797))+x788+(((1.33333333333333)*x789))+((x791*x793))+(((2.0)*x794))+(((0.333333333333333)*x790))+(((-1.0)*x791*x792))+x796);
j4eval[1]=((IKabs((((sj3*sj5*x799))+((cj3*x798))+((cj5*sj3*x801))+(((-1.0)*x799*x800))+((x801*x802)))))+(IKabs(((((-1.0)*r20*x802))+(((0.433012701892219)*r22*sj3))+((x793*x803))+(((-1.0)*x792*x803))+(((-1.0)*r21*x800))))));
j4eval[2]=IKsign((x789+(((0.75)*x796))+(((-1.0)*x792*x798))+(((-0.75)*x797))+(((1.5)*x794))+(((0.75)*x788))+(((0.25)*x790))+((x793*x798))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x804=((1.73205080756888)*cj0);
IkReal x805=((1.73205080756888)*sj0);
IkReal x806=((((-1.0)*r11*sj5*x805))+((cj5*r00*x804))+((cj5*r10*x805))+(((-1.0)*r01*sj5*x804))+((cj0*r02))+((r12*sj0)));
j4eval[0]=x806;
j4eval[1]=IKsign(x806);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x807=(cj0*r01*r21);
IkReal x808=(r11*r21*sj0);
IkReal x809=(cj0*r00*r20);
IkReal x810=(cj0*r02*r22);
IkReal x811=(r10*r20*sj0);
IkReal x812=(r12*r22*sj0);
IkReal x813=(cj0*cj5*r00*r22);
IkReal x814=(cj0*cj5*r02*r20);
IkReal x815=(cj0*r01*r22*sj5);
IkReal x816=(cj0*r02*r21*sj5);
IkReal x817=(cj5*r10*r22*sj0);
IkReal x818=(cj5*r12*r20*sj0);
IkReal x819=(r11*r22*sj0*sj5);
IkReal x820=(r12*r21*sj0*sj5);
IkReal x821=(cj0*cj5*r00*r21*sj5);
IkReal x822=(cj0*cj5*r01*r20*sj5);
IkReal x823=(cj5*r10*r21*sj0*sj5);
IkReal x824=(cj5*r11*r20*sj0*sj5);
IkReal x825=cj5*cj5;
IkReal x826=(cj0*r00*r20*x825);
IkReal x827=(cj0*r01*r21*x825);
IkReal x828=(r10*r20*sj0*x825);
IkReal x829=(r11*r21*sj0*x825);
j4eval[0]=((((3.0)*x810))+(((3.0)*x827))+(((1.73205080756888)*x819))+(((-1.73205080756888)*x813))+(((3.0)*x822))+(((3.0)*x812))+(((1.73205080756888)*x816))+(((3.0)*x821))+(((1.73205080756888)*x815))+x807+x808+(((-1.73205080756888)*x814))+(((4.0)*x809))+(((-1.73205080756888)*x817))+(((4.0)*x811))+(((3.0)*x824))+(((-3.0)*x828))+(((-1.73205080756888)*x818))+(((-3.0)*x826))+(((3.0)*x823))+(((1.73205080756888)*x820))+(((3.0)*x829)));
j4eval[1]=IKsign(((((0.866025403784439)*x820))+(((2.0)*x809))+(((0.866025403784439)*x815))+(((2.0)*x811))+(((-0.866025403784439)*x818))+(((0.866025403784439)*x816))+(((-1.5)*x828))+(((-0.866025403784439)*x817))+(((0.866025403784439)*x819))+(((1.5)*x822))+(((1.5)*x821))+(((0.5)*x807))+(((1.5)*x812))+(((-0.866025403784439)*x813))+(((1.5)*x810))+(((1.5)*x827))+(((1.5)*x824))+(((-0.866025403784439)*x814))+(((-1.5)*x826))+(((0.5)*x808))+(((1.5)*x823))+(((1.5)*x829))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x830=(cj0*r01);
IkReal x831=(cj5*sj3);
IkReal x832=(cj0*r00);
IkReal x833=(sj3*sj5);
IkReal x834=(r11*sj0);
IkReal x835=(r10*sj0);
IkReal x836=((0.866025403784439)*sj3);
IkReal x837=(cj0*r02);
IkReal x838=(r12*sj0);
IkReal x839=((0.5)*cj5*sj3);
IkReal x840=((0.5)*sj3*sj5);
IkReal x841=((2.0)*r20);
IkReal x842=((0.5)*r21);
IkReal x843=((1.5)*r22);
IkReal x844=((0.866025403784439)*cj5*r22);
IkReal x845=((0.866025403784439)*cj5*r20);
IkReal x846=((0.866025403784439)*r22*sj5);
IkReal x847=((0.866025403784439)*r21*sj5);
IkReal x848=((1.5)*cj5*r21*sj5);
IkReal x849=((1.5)*cj5*r20*sj5);
IkReal x850=cj5*cj5;
IkReal x851=((1.5)*r20*x850);
IkReal x852=((1.5)*r21*x850);
CheckValue<IkReal> x853 = IKatan2WithCheck(IkReal((((x833*x835))+((x832*x833))+((x830*x831))+((x831*x834)))),IkReal((((x834*x840))+((x836*x838))+(((-1.0)*x835*x839))+((x836*x837))+((x830*x840))+(((-1.0)*x832*x839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x853.valid){
continue;
}
CheckValue<IkReal> x854=IKPowWithIntegerCheck(IKsign((((x830*x846))+((x832*x848))+((x835*x848))+((x834*x842))+((x830*x842))+(((-1.0)*x835*x844))+((x837*x847))+((x838*x847))+((x837*x843))+(((-1.0)*x832*x844))+(((-1.0)*x835*x851))+((x838*x843))+(((-1.0)*x832*x851))+((x834*x849))+((x834*x852))+((x830*x852))+(((-1.0)*x838*x845))+((x834*x846))+((x832*x841))+(((-1.0)*x837*x845))+((x830*x849))+((x835*x841)))),-1);
if(!x854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x853.value)+(((1.5707963267949)*(x854.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x855=IKcos(j4);
IkReal x856=((0.866025403784439)*r22);
IkReal x857=IKsin(j4);
IkReal x858=(cj5*x857);
IkReal x859=(r20*sj5);
IkReal x860=((0.5)*r20);
IkReal x861=((0.5)*r21*sj5);
IkReal x862=((1.0)*cj5*x855);
IkReal x863=((0.866025403784439)*cj0*r02);
IkReal x864=((0.866025403784439)*r12*sj0);
IkReal x865=((0.5)*r00);
IkReal x866=(cj0*cj5*x857);
IkReal x867=((1.0)*cj0*cj5*x855);
IkReal x868=((1.0)*cj0*sj5*x855);
IkReal x869=((0.5)*r01);
IkReal x870=(cj0*sj5*x857);
IkReal x871=((0.5)*r10);
IkReal x872=(cj5*sj0*x857);
IkReal x873=((0.5)*r11);
IkReal x874=(sj0*sj5*x857);
IkReal x875=((0.866025403784439)*cj0*r12);
IkReal x876=((0.866025403784439)*r02*sj0);
IkReal x877=(cj0*cj5*x855);
IkReal x878=(cj0*sj5*x855);
IkReal x879=(cj5*sj0*x855);
IkReal x880=(r00*sj0*sj5);
IkReal x881=(sj0*sj5*x855);
evalcond[0]=((((-1.0)*cj5*x855*x860))+((x857*x859))+((x855*x861))+(((-1.0)*(0.5)*sj3))+((x855*x856))+((r21*x858)));
evalcond[1]=((((-1.0)*(1.0)*cj3))+((x856*x857))+(((-1.0)*x858*x860))+(((-1.0)*x855*x859))+((x857*x861))+(((-1.0)*r21*x862)));
evalcond[2]=(((x857*x863))+((x869*x870))+(((-1.0)*r11*sj0*x862))+(((-1.0)*r01*x867))+((x873*x874))+(((-1.0)*r00*x868))+((x857*x864))+(((-1.0)*x871*x872))+(((-1.0)*x865*x866))+(((-1.0)*r10*sj0*sj5*x855)));
evalcond[3]=(((x873*x878))+((x855*x875))+(((-1.0)*x857*x880))+((r11*x866))+(((-1.0)*r01*x872))+(((-1.0)*x871*x877))+(((-1.0)*x869*x881))+((x865*x879))+((r10*x870))+(((0.5)*cj3))+(((-1.0)*x855*x876)));
evalcond[4]=(((x855*x880))+(((-1.0)*x869*x874))+((r01*x879))+(((-1.0)*r10*x868))+((x865*x872))+(((-1.0)*x857*x876))+(((-1.0)*r11*x867))+(((-1.0)*(1.0)*sj3))+((x857*x875))+(((-1.0)*x866*x871))+((x870*x873)));
evalcond[5]=((0.866025403784439)+((x873*x881))+((r10*x874))+(((-1.0)*x865*x877))+((x855*x863))+((x869*x878))+((r01*x866))+((r00*x870))+((r11*x872))+((x855*x864))+(((-1.0)*x871*x879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x882=((1.73205080756888)*cj0);
IkReal x883=(cj5*r00);
IkReal x884=(r01*sj5);
IkReal x885=((1.73205080756888)*sj0);
IkReal x886=(cj5*r10);
IkReal x887=(r11*sj5);
IkReal x888=((0.866025403784439)*sj3);
IkReal x889=(cj3*cj5);
IkReal x890=(cj3*sj5);
IkReal x891=((0.5)*cj0*sj3);
IkReal x892=((0.5)*sj0*sj3);
IkReal x893=(cj0*sj3);
IkReal x894=((1.0)*sj0*sj3);
CheckValue<IkReal> x895 = IKatan2WithCheck(IkReal((((x886*x891))+(((0.5)*r20*x889))+((x884*x892))+((r02*sj0*x888))+(((-1.0)*cj0*r12*x888))+(((-0.5)*r21*x890))+(((-1.0)*x887*x891))+(((-1.0)*(0.866025403784439)*cj3*r22))+(((-1.0)*x883*x892)))),IkReal((((r21*x889))+((r10*sj5*x893))+(((-1.0)*r00*sj5*x894))+((r20*x890))+(((-1.0)*cj5*r01*x894))+((cj5*r11*x893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x895.valid){
continue;
}
CheckValue<IkReal> x896=IKPowWithIntegerCheck(IKsign(((((-1.0)*x885*x887))+((x885*x886))+((cj0*r02))+((x882*x883))+((r12*sj0))+(((-1.0)*x882*x884)))),-1);
if(!x896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x895.value)+(((1.5707963267949)*(x896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x897=IKcos(j4);
IkReal x898=((0.866025403784439)*r22);
IkReal x899=IKsin(j4);
IkReal x900=(cj5*x899);
IkReal x901=(r20*sj5);
IkReal x902=((0.5)*r20);
IkReal x903=((0.5)*r21*sj5);
IkReal x904=((1.0)*cj5*x897);
IkReal x905=((0.866025403784439)*cj0*r02);
IkReal x906=((0.866025403784439)*r12*sj0);
IkReal x907=((0.5)*r00);
IkReal x908=(cj0*cj5*x899);
IkReal x909=((1.0)*cj0*cj5*x897);
IkReal x910=((1.0)*cj0*sj5*x897);
IkReal x911=((0.5)*r01);
IkReal x912=(cj0*sj5*x899);
IkReal x913=((0.5)*r10);
IkReal x914=(cj5*sj0*x899);
IkReal x915=((0.5)*r11);
IkReal x916=(sj0*sj5*x899);
IkReal x917=((0.866025403784439)*cj0*r12);
IkReal x918=((0.866025403784439)*r02*sj0);
IkReal x919=(cj0*cj5*x897);
IkReal x920=(cj0*sj5*x897);
IkReal x921=(cj5*sj0*x897);
IkReal x922=(r00*sj0*sj5);
IkReal x923=(sj0*sj5*x897);
evalcond[0]=(((x897*x903))+((x897*x898))+(((-1.0)*cj5*x897*x902))+((x899*x901))+(((-1.0)*(0.5)*sj3))+((r21*x900)));
evalcond[1]=((((-1.0)*(1.0)*cj3))+((x898*x899))+(((-1.0)*x897*x901))+(((-1.0)*r21*x904))+(((-1.0)*x900*x902))+((x899*x903)));
evalcond[2]=(((x899*x905))+(((-1.0)*x913*x914))+(((-1.0)*r11*sj0*x904))+((x911*x912))+(((-1.0)*r01*x909))+(((-1.0)*r00*x910))+(((-1.0)*r10*sj0*sj5*x897))+((x915*x916))+(((-1.0)*x907*x908))+((x899*x906)));
evalcond[3]=(((r10*x912))+(((-1.0)*r01*x914))+((x915*x920))+((x907*x921))+(((-1.0)*x911*x923))+(((-1.0)*x897*x918))+(((-1.0)*x899*x922))+(((-1.0)*x913*x919))+(((0.5)*cj3))+((r11*x908))+((x897*x917)));
evalcond[4]=((((-1.0)*x911*x916))+(((-1.0)*x899*x918))+((x912*x915))+(((-1.0)*r11*x909))+((x897*x922))+((x907*x914))+(((-1.0)*x908*x913))+((x899*x917))+((r01*x921))+(((-1.0)*r10*x910))+(((-1.0)*(1.0)*sj3)));
evalcond[5]=((0.866025403784439)+(((-1.0)*x907*x919))+((r10*x916))+((r11*x914))+((x897*x905))+((x915*x923))+((x897*x906))+((x911*x920))+((r00*x912))+((r01*x908))+(((-1.0)*x913*x921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x924=((0.866025403784439)*r22);
IkReal x925=((0.5)*r20);
IkReal x926=(cj3*cj5);
IkReal x927=((0.5)*r21);
IkReal x928=(cj3*sj5);
IkReal x929=((0.25)*sj3);
IkReal x930=(cj5*r20);
IkReal x931=(r21*sj5);
IkReal x932=r20*r20;
IkReal x933=r21*r21;
IkReal x934=((0.75)*(cj5*cj5));
CheckValue<IkReal> x935 = IKatan2WithCheck(IkReal(((((-1.0)*x925*x926))+((cj5*sj3*x927))+((x927*x928))+((sj3*sj5*x925))+((cj3*x924)))),IkReal(((((-1.0)*x929*x930))+(((0.433012701892219)*r22*sj3))+(((-1.0)*r21*x926))+((x929*x931))+(((-1.0)*r20*x928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x935.valid){
continue;
}
CheckValue<IkReal> x936=IKPowWithIntegerCheck(IKsign(((((0.75)*(r22*r22)))+(((0.25)*x933))+(((1.5)*cj5*r20*x931))+(((-1.0)*x932*x934))+x932+((x933*x934))+((x924*x931))+(((-1.0)*x924*x930)))),-1);
if(!x936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x935.value)+(((1.5707963267949)*(x936.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x937=IKcos(j4);
IkReal x938=((0.866025403784439)*r22);
IkReal x939=IKsin(j4);
IkReal x940=(cj5*x939);
IkReal x941=(r20*sj5);
IkReal x942=((0.5)*r20);
IkReal x943=((0.5)*r21*sj5);
IkReal x944=((1.0)*cj5*x937);
IkReal x945=((0.866025403784439)*cj0*r02);
IkReal x946=((0.866025403784439)*r12*sj0);
IkReal x947=((0.5)*r00);
IkReal x948=(cj0*cj5*x939);
IkReal x949=((1.0)*cj0*cj5*x937);
IkReal x950=((1.0)*cj0*sj5*x937);
IkReal x951=((0.5)*r01);
IkReal x952=(cj0*sj5*x939);
IkReal x953=((0.5)*r10);
IkReal x954=(cj5*sj0*x939);
IkReal x955=((0.5)*r11);
IkReal x956=(sj0*sj5*x939);
IkReal x957=((0.866025403784439)*cj0*r12);
IkReal x958=((0.866025403784439)*r02*sj0);
IkReal x959=(cj0*cj5*x937);
IkReal x960=(cj0*sj5*x937);
IkReal x961=(cj5*sj0*x937);
IkReal x962=(r00*sj0*sj5);
IkReal x963=(sj0*sj5*x937);
evalcond[0]=((((-1.0)*cj5*x937*x942))+((x937*x938))+((r21*x940))+(((-1.0)*(0.5)*sj3))+((x937*x943))+((x939*x941)));
evalcond[1]=((((-1.0)*x937*x941))+(((-1.0)*r21*x944))+(((-1.0)*(1.0)*cj3))+((x938*x939))+((x939*x943))+(((-1.0)*x940*x942)));
evalcond[2]=((((-1.0)*x947*x948))+(((-1.0)*x953*x954))+(((-1.0)*r10*sj0*sj5*x937))+(((-1.0)*r01*x949))+(((-1.0)*r11*sj0*x944))+(((-1.0)*r00*x950))+((x955*x956))+((x939*x945))+((x939*x946))+((x951*x952)));
evalcond[3]=(((x955*x960))+(((-1.0)*x937*x958))+(((-1.0)*r01*x954))+((r10*x952))+(((-1.0)*x951*x963))+((r11*x948))+((x937*x957))+(((-1.0)*x939*x962))+(((0.5)*cj3))+(((-1.0)*x953*x959))+((x947*x961)));
evalcond[4]=(((x939*x957))+(((-1.0)*x951*x956))+((x947*x954))+(((-1.0)*x948*x953))+((x937*x962))+((r01*x961))+(((-1.0)*r10*x950))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x939*x958))+(((-1.0)*r11*x949))+((x952*x955)));
evalcond[5]=((0.866025403784439)+((x937*x945))+((x955*x963))+((r00*x952))+((x951*x960))+(((-1.0)*x947*x959))+((x937*x946))+((r11*x954))+(((-1.0)*x953*x961))+((r01*x948))+((r10*x956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x964=((1.0)*sj5);
if( IKabs((((cj5*r20))+(((0.577350269189626)*r22))+(((-1.0)*r21*x964)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))+(((-1.0)*cj0*r11*x964)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20))+(((0.577350269189626)*r22))+(((-1.0)*r21*x964))))+IKsqr((((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))+(((-1.0)*cj0*r11*x964))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r20))+(((0.577350269189626)*r22))+(((-1.0)*r21*x964))), (((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))+(((-1.0)*cj0*r11*x964))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x965=((0.866025403784439)*cj5);
IkReal x966=((0.866025403784439)*sj5);
evalcond[0]=(((r21*x966))+(((-1.0)*(0.5)*r22))+(((-1.0)*r20*x965))+(((0.866025403784439)*(IKsin(j3)))));
evalcond[1]=((((-1.0)*cj0*r10*x965))+((cj0*r11*x966))+((r00*sj0*x965))+(((-1.0)*r01*sj0*x966))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0))+(((0.866025403784439)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x967=(r02*sj0);
IkReal x968=(cj0*r12);
IkReal x969=(cj0*cj5*r10);
IkReal x970=(cj0*r11*sj5);
IkReal x971=(cj5*r00*sj0);
IkReal x972=(r01*sj0*sj5);
j4eval[0]=((((-1.0)*x968))+(((1.73205080756888)*x971))+(((1.73205080756888)*x970))+x967+(((-1.73205080756888)*x972))+(((-1.73205080756888)*x969)));
j4eval[1]=IKsign(((((-0.866025403784439)*x972))+(((-0.5)*x968))+(((0.5)*x967))+(((0.866025403784439)*x970))+(((0.866025403784439)*x971))+(((-0.866025403784439)*x969))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x973=r20*r20;
IkReal x974=r21*r21;
IkReal x975=r22*r22;
IkReal x976=((3.46410161513775)*r22);
IkReal x977=(cj5*r20);
IkReal x978=(r21*sj5);
IkReal x979=(cj5*r20*r21*sj5);
IkReal x980=cj5*cj5;
IkReal x981=(x973*x980);
IkReal x982=(x974*x980);
IkReal x983=((0.866025403784439)*r22);
IkReal x984=((0.5)*r20);
IkReal x985=(cj3*cj5);
IkReal x986=((0.5)*r21);
IkReal x987=(cj3*sj5);
IkReal x988=((0.25)*sj3);
j4eval[0]=((((-3.0)*x975))+(((-3.0)*x982))+(((-6.0)*x979))+(((3.0)*x981))+((x976*x977))+(((-1.0)*x974))+(((-1.0)*x976*x978))+(((-4.0)*x973)));
j4eval[1]=IKsign(((((-1.0)*x973))+(((-0.75)*x982))+(((-0.75)*x975))+(((0.75)*x981))+(((-1.5)*x979))+((x977*x983))+(((-1.0)*x978*x983))+(((-0.25)*x974))));
j4eval[2]=((IKabs(((((0.433012701892219)*r22*sj3))+(((-1.0)*x977*x988))+(((-1.0)*r21*x985))+(((-1.0)*r20*x987))+((x978*x988)))))+(IKabs((((x986*x987))+((sj3*sj5*x984))+(((-1.0)*x984*x985))+((cj3*x983))+((cj5*sj3*x986))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x989=(cj0*r01*r21);
IkReal x990=(r11*r21*sj0);
IkReal x991=(cj0*r00*r20);
IkReal x992=(cj0*r02*r22);
IkReal x993=(r10*r20*sj0);
IkReal x994=(r12*r22*sj0);
IkReal x995=(cj0*cj5*r00*r22);
IkReal x996=(cj0*cj5*r02*r20);
IkReal x997=(cj0*r01*r22*sj5);
IkReal x998=(cj0*r02*r21*sj5);
IkReal x999=(cj5*r10*r22*sj0);
IkReal x1000=(cj5*r12*r20*sj0);
IkReal x1001=(r11*r22*sj0*sj5);
IkReal x1002=(r12*r21*sj0*sj5);
IkReal x1003=(cj0*cj5*r00*r21*sj5);
IkReal x1004=(cj0*cj5*r01*r20*sj5);
IkReal x1005=(cj5*r10*r21*sj0*sj5);
IkReal x1006=(cj5*r11*r20*sj0*sj5);
IkReal x1007=cj5*cj5;
IkReal x1008=(cj0*r00*r20*x1007);
IkReal x1009=(cj0*r01*r21*x1007);
IkReal x1010=(r10*r20*sj0*x1007);
IkReal x1011=(r11*r21*sj0*x1007);
j4eval[0]=((((1.73205080756888)*x1002))+(((3.0)*x1004))+(((-3.0)*x1010))+(((1.73205080756888)*x1001))+(((3.0)*x1003))+(((3.0)*x1006))+(((3.0)*x1005))+(((1.73205080756888)*x997))+(((3.0)*x992))+(((4.0)*x993))+(((4.0)*x991))+(((-1.73205080756888)*x995))+x989+(((-1.73205080756888)*x996))+(((3.0)*x994))+(((-1.73205080756888)*x1000))+(((1.73205080756888)*x998))+(((3.0)*x1011))+(((-3.0)*x1008))+x990+(((3.0)*x1009))+(((-1.73205080756888)*x999)));
j4eval[1]=IKsign(((((0.866025403784439)*x997))+(((-0.866025403784439)*x1000))+(((0.866025403784439)*x998))+(((1.5)*x992))+(((-1.5)*x1010))+(((-1.5)*x1008))+(((2.0)*x991))+(((2.0)*x993))+(((-0.866025403784439)*x995))+(((1.5)*x1004))+(((-0.866025403784439)*x999))+(((-0.866025403784439)*x996))+(((0.866025403784439)*x1001))+(((1.5)*x994))+(((1.5)*x1006))+(((0.5)*x989))+(((1.5)*x1003))+(((1.5)*x1011))+(((0.866025403784439)*x1002))+(((1.5)*x1005))+(((1.5)*x1009))+(((0.5)*x990))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1012=(cj0*r01);
IkReal x1013=((1.0)*cj5*sj3);
IkReal x1014=(cj0*r00);
IkReal x1015=((1.0)*sj3*sj5);
IkReal x1016=(r11*sj0);
IkReal x1017=(r10*sj0);
IkReal x1018=((0.866025403784439)*sj3);
IkReal x1019=(cj0*r02);
IkReal x1020=(r12*sj0);
IkReal x1021=((0.5)*sj3);
IkReal x1022=(cj0*cj5*r00);
IkReal x1023=(cj0*r01*sj5);
IkReal x1024=(cj5*r10*sj0);
IkReal x1025=(r11*sj0*sj5);
IkReal x1026=((2.0)*r20);
IkReal x1027=((0.5)*r21);
IkReal x1028=((1.5)*r22);
IkReal x1029=((0.866025403784439)*r22);
IkReal x1030=(cj5*r20);
IkReal x1031=((0.866025403784439)*cj0*r02);
IkReal x1032=(r21*sj5);
IkReal x1033=((0.866025403784439)*r12*sj0);
IkReal x1034=((1.5)*r21*sj5);
IkReal x1035=((1.5)*cj5*r20);
IkReal x1036=cj5*cj5;
IkReal x1037=((1.5)*r20*x1036);
IkReal x1038=((1.5)*r21*x1036);
CheckValue<IkReal> x1039 = IKatan2WithCheck(IkReal(((((-1.0)*x1014*x1015))+(((-1.0)*x1012*x1013))+(((-1.0)*x1013*x1016))+(((-1.0)*x1015*x1017)))),IkReal(((((-1.0)*x1018*x1019))+((x1021*x1024))+(((-1.0)*x1018*x1020))+(((-1.0)*x1021*x1023))+((x1021*x1022))+(((-1.0)*x1021*x1025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1039.valid){
continue;
}
CheckValue<IkReal> x1040=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1014*x1037))+((x1012*x1027))+((x1020*x1028))+((x1017*x1026))+((x1032*x1033))+((x1019*x1028))+((x1016*x1027))+((x1031*x1032))+((x1012*x1038))+(((-1.0)*x1017*x1037))+((x1014*x1026))+(((-1.0)*x1024*x1029))+((x1024*x1034))+((x1022*x1034))+(((-1.0)*x1030*x1031))+(((-1.0)*x1030*x1033))+(((-1.0)*x1022*x1029))+((x1023*x1029))+((x1025*x1029))+((x1023*x1035))+((x1025*x1035))+((x1016*x1038)))),-1);
if(!x1040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1039.value)+(((1.5707963267949)*(x1040.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1041=IKsin(j4);
IkReal x1042=((0.866025403784439)*r22);
IkReal x1043=((0.5)*r20);
IkReal x1044=(cj5*x1041);
IkReal x1045=IKcos(j4);
IkReal x1046=((1.0)*cj5*x1045);
IkReal x1047=(r20*sj5);
IkReal x1048=((0.5)*r21*sj5);
IkReal x1049=((0.866025403784439)*cj0*r02);
IkReal x1050=((0.866025403784439)*r12*sj0);
IkReal x1051=((0.5)*r00);
IkReal x1052=(cj0*cj5*x1041);
IkReal x1053=((1.0)*cj0*cj5*x1045);
IkReal x1054=((1.0)*cj0*sj5*x1045);
IkReal x1055=((0.5)*r01);
IkReal x1056=(cj0*sj5*x1041);
IkReal x1057=((0.5)*r10);
IkReal x1058=(cj5*sj0*x1041);
IkReal x1059=((0.5)*r11);
IkReal x1060=(sj0*sj5*x1041);
IkReal x1061=((0.866025403784439)*cj0*r12);
IkReal x1062=((0.866025403784439)*r02*sj0);
IkReal x1063=(cj0*cj5*x1045);
IkReal x1064=(cj0*sj5*x1045);
IkReal x1065=(cj5*sj0*x1045);
IkReal x1066=(r00*sj0*sj5);
IkReal x1067=(sj0*sj5*x1045);
evalcond[0]=(((x1041*x1042))+(((-1.0)*x1043*x1044))+cj3+(((-1.0)*r21*x1046))+((x1041*x1048))+(((-1.0)*x1045*x1047)));
evalcond[1]=(((x1041*x1047))+(((-1.0)*cj5*x1043*x1045))+(((0.5)*sj3))+((x1042*x1045))+((x1045*x1048))+((r21*x1044)));
evalcond[2]=(((x1041*x1050))+(((-1.0)*r01*x1053))+((x1059*x1060))+(((-1.0)*x1051*x1052))+((x1041*x1049))+(((-1.0)*r00*x1054))+(((-1.0)*r11*sj0*x1046))+((x1055*x1056))+(((-1.0)*x1057*x1058))+(((-1.0)*r10*sj0*sj5*x1045)));
evalcond[3]=(((x1059*x1064))+((r11*x1052))+((x1051*x1065))+(((-1.0)*x1045*x1062))+((x1045*x1061))+((r10*x1056))+(((0.5)*cj3))+(((-1.0)*x1057*x1063))+(((-1.0)*r01*x1058))+(((-1.0)*x1041*x1066))+(((-1.0)*x1055*x1067)));
evalcond[4]=(((x1051*x1058))+((x1041*x1061))+(((-1.0)*x1052*x1057))+((r01*x1065))+(((-1.0)*x1041*x1062))+(((-1.0)*x1055*x1060))+(((-1.0)*r11*x1053))+(((-1.0)*(1.0)*sj3))+((x1056*x1059))+((x1045*x1066))+(((-1.0)*r10*x1054)));
evalcond[5]=((-0.866025403784439)+((x1045*x1050))+((x1045*x1049))+(((-1.0)*x1057*x1065))+(((-1.0)*x1051*x1063))+((x1059*x1067))+((r01*x1052))+((r10*x1060))+((r11*x1058))+((x1055*x1064))+((r00*x1056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1068=((0.866025403784439)*r22);
IkReal x1069=((0.5)*r20);
IkReal x1070=(cj3*cj5);
IkReal x1071=((0.5)*r21);
IkReal x1072=(cj3*sj5);
IkReal x1073=((0.25)*sj3);
IkReal x1074=(cj5*r20);
IkReal x1075=(r21*sj5);
IkReal x1076=r20*r20;
IkReal x1077=r21*r21;
IkReal x1078=((0.75)*(cj5*cj5));
CheckValue<IkReal> x1079=IKPowWithIntegerCheck(IKsign((((x1068*x1074))+(((-0.25)*x1077))+(((-1.0)*x1068*x1075))+(((-1.5)*cj5*r20*x1075))+(((-1.0)*x1077*x1078))+(((-1.0)*x1076))+((x1076*x1078))+(((-1.0)*(0.75)*(r22*r22))))),-1);
if(!x1079.valid){
continue;
}
CheckValue<IkReal> x1080 = IKatan2WithCheck(IkReal((((x1071*x1072))+((cj3*x1068))+((cj5*sj3*x1071))+((sj3*sj5*x1069))+(((-1.0)*x1069*x1070)))),IkReal(((((0.433012701892219)*r22*sj3))+((x1073*x1075))+(((-1.0)*r20*x1072))+(((-1.0)*x1073*x1074))+(((-1.0)*r21*x1070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1079.value)))+(x1080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1081=IKsin(j4);
IkReal x1082=((0.866025403784439)*r22);
IkReal x1083=((0.5)*r20);
IkReal x1084=(cj5*x1081);
IkReal x1085=IKcos(j4);
IkReal x1086=((1.0)*cj5*x1085);
IkReal x1087=(r20*sj5);
IkReal x1088=((0.5)*r21*sj5);
IkReal x1089=((0.866025403784439)*cj0*r02);
IkReal x1090=((0.866025403784439)*r12*sj0);
IkReal x1091=((0.5)*r00);
IkReal x1092=(cj0*cj5*x1081);
IkReal x1093=((1.0)*cj0*cj5*x1085);
IkReal x1094=((1.0)*cj0*sj5*x1085);
IkReal x1095=((0.5)*r01);
IkReal x1096=(cj0*sj5*x1081);
IkReal x1097=((0.5)*r10);
IkReal x1098=(cj5*sj0*x1081);
IkReal x1099=((0.5)*r11);
IkReal x1100=(sj0*sj5*x1081);
IkReal x1101=((0.866025403784439)*cj0*r12);
IkReal x1102=((0.866025403784439)*r02*sj0);
IkReal x1103=(cj0*cj5*x1085);
IkReal x1104=(cj0*sj5*x1085);
IkReal x1105=(cj5*sj0*x1085);
IkReal x1106=(r00*sj0*sj5);
IkReal x1107=(sj0*sj5*x1085);
evalcond[0]=(((x1081*x1088))+(((-1.0)*x1083*x1084))+cj3+(((-1.0)*x1085*x1087))+((x1081*x1082))+(((-1.0)*r21*x1086)));
evalcond[1]=(((x1081*x1087))+((x1082*x1085))+(((0.5)*sj3))+((x1085*x1088))+((r21*x1084))+(((-1.0)*cj5*x1083*x1085)));
evalcond[2]=((((-1.0)*r10*sj0*sj5*x1085))+(((-1.0)*x1091*x1092))+((x1099*x1100))+((x1081*x1089))+(((-1.0)*x1097*x1098))+((x1095*x1096))+((x1081*x1090))+(((-1.0)*r11*sj0*x1086))+(((-1.0)*r01*x1093))+(((-1.0)*r00*x1094)));
evalcond[3]=((((-1.0)*x1097*x1103))+(((-1.0)*x1081*x1106))+(((-1.0)*x1085*x1102))+(((-1.0)*r01*x1098))+(((-1.0)*x1095*x1107))+((x1099*x1104))+((x1091*x1105))+((x1085*x1101))+((r11*x1092))+((r10*x1096))+(((0.5)*cj3)));
evalcond[4]=((((-1.0)*r11*x1093))+(((-1.0)*x1081*x1102))+((x1096*x1099))+(((-1.0)*x1095*x1100))+((r01*x1105))+((x1081*x1101))+(((-1.0)*(1.0)*sj3))+((x1085*x1106))+(((-1.0)*r10*x1094))+((x1091*x1098))+(((-1.0)*x1092*x1097)));
evalcond[5]=((-0.866025403784439)+((r10*x1100))+(((-1.0)*x1097*x1105))+((x1085*x1089))+((r11*x1098))+((r00*x1096))+(((-1.0)*x1091*x1103))+((r01*x1092))+((x1099*x1107))+((x1085*x1090))+((x1095*x1104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1108=((0.866025403784439)*cj0);
IkReal x1109=(cj5*r10);
IkReal x1110=(r11*sj5);
IkReal x1111=((0.866025403784439)*sj0);
IkReal x1112=(cj5*r00);
IkReal x1113=(r01*sj5);
IkReal x1114=((1.0)*cj0*cj3);
IkReal x1115=((1.0)*cj3*sj0);
IkReal x1116=((0.5)*cj0*cj3);
IkReal x1117=((0.5)*cj3*sj0);
CheckValue<IkReal> x1118=IKPowWithIntegerCheck(IKsign((((x1108*x1110))+(((-1.0)*x1111*x1113))+(((-1.0)*x1108*x1109))+(((-0.5)*cj0*r12))+((x1111*x1112))+((r02*(((0.5)*sj0)))))),-1);
if(!x1118.valid){
continue;
}
CheckValue<IkReal> x1119 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r01*x1114))+(((-1.0)*r00*sj5*x1114))+(((-1.0)*cj5*r11*x1115))+(((-1.0)*r10*sj5*x1115)))),IkReal((((x1112*x1116))+((x1109*x1117))+(((-1.0)*cj3*r12*x1111))+(((-1.0)*x1113*x1116))+(((-1.0)*cj3*r02*x1108))+(((-1.0)*x1110*x1117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1118.value)))+(x1119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1120=IKsin(j4);
IkReal x1121=((0.866025403784439)*r22);
IkReal x1122=((0.5)*r20);
IkReal x1123=(cj5*x1120);
IkReal x1124=IKcos(j4);
IkReal x1125=((1.0)*cj5*x1124);
IkReal x1126=(r20*sj5);
IkReal x1127=((0.5)*r21*sj5);
IkReal x1128=((0.866025403784439)*cj0*r02);
IkReal x1129=((0.866025403784439)*r12*sj0);
IkReal x1130=((0.5)*r00);
IkReal x1131=(cj0*cj5*x1120);
IkReal x1132=((1.0)*cj0*cj5*x1124);
IkReal x1133=((1.0)*cj0*sj5*x1124);
IkReal x1134=((0.5)*r01);
IkReal x1135=(cj0*sj5*x1120);
IkReal x1136=((0.5)*r10);
IkReal x1137=(cj5*sj0*x1120);
IkReal x1138=((0.5)*r11);
IkReal x1139=(sj0*sj5*x1120);
IkReal x1140=((0.866025403784439)*cj0*r12);
IkReal x1141=((0.866025403784439)*r02*sj0);
IkReal x1142=(cj0*cj5*x1124);
IkReal x1143=(cj0*sj5*x1124);
IkReal x1144=(cj5*sj0*x1124);
IkReal x1145=(r00*sj0*sj5);
IkReal x1146=(sj0*sj5*x1124);
evalcond[0]=(((x1120*x1121))+(((-1.0)*x1122*x1123))+(((-1.0)*r21*x1125))+cj3+((x1120*x1127))+(((-1.0)*x1124*x1126)));
evalcond[1]=((((-1.0)*cj5*x1122*x1124))+(((0.5)*sj3))+((x1120*x1126))+((r21*x1123))+((x1124*x1127))+((x1121*x1124)));
evalcond[2]=((((-1.0)*r10*sj0*sj5*x1124))+(((-1.0)*r11*sj0*x1125))+((x1138*x1139))+(((-1.0)*r01*x1132))+((x1134*x1135))+(((-1.0)*r00*x1133))+((x1120*x1129))+(((-1.0)*x1130*x1131))+(((-1.0)*x1136*x1137))+((x1120*x1128)));
evalcond[3]=((((-1.0)*r01*x1137))+(((-1.0)*x1124*x1141))+((x1130*x1144))+((r10*x1135))+((x1124*x1140))+((r11*x1131))+(((-1.0)*x1120*x1145))+(((-1.0)*x1134*x1146))+(((0.5)*cj3))+((x1138*x1143))+(((-1.0)*x1136*x1142)));
evalcond[4]=(((x1120*x1140))+((x1130*x1137))+((r01*x1144))+((x1124*x1145))+(((-1.0)*x1120*x1141))+((x1135*x1138))+(((-1.0)*x1131*x1136))+(((-1.0)*x1134*x1139))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r10*x1133))+(((-1.0)*r11*x1132)));
evalcond[5]=((-0.866025403784439)+((x1124*x1129))+((x1124*x1128))+((x1134*x1143))+((r00*x1135))+((r01*x1131))+((r10*x1139))+(((-1.0)*x1136*x1144))+((r11*x1137))+(((-1.0)*x1130*x1142))+((x1138*x1146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1147=((1.0)*cj5);
if( IKabs((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x1147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x1147))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x1147))))+IKsqr(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x1147))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x1147))), ((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x1147))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1148=((0.866025403784439)*cj5);
IkReal x1149=((0.866025403784439)*sj5);
evalcond[0]=((((-1.0)*(0.866025403784439)*(IKsin(j3))))+(((-1.0)*(0.5)*r22))+(((-1.0)*r20*x1148))+((r21*x1149)));
evalcond[1]=(((cj0*r11*x1149))+(((-1.0)*cj0*r10*x1148))+(((-1.0)*r01*sj0*x1149))+((r00*sj0*x1148))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0))+(((0.866025403784439)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1150=r22*r22;
IkReal x1151=r20*r20;
IkReal x1152=r21*r21;
IkReal x1153=((1.15470053837925)*r22);
IkReal x1154=(cj5*r20);
IkReal x1155=(r21*sj5);
IkReal x1156=(cj5*r20*r21*sj5);
IkReal x1157=cj5*cj5;
IkReal x1158=(x1152*x1157);
IkReal x1159=(x1151*x1157);
IkReal x1160=((0.866025403784439)*r22);
IkReal x1161=((0.5)*r20);
IkReal x1162=(cj3*cj5);
IkReal x1163=((0.5)*r21);
IkReal x1164=(cj3*sj5);
IkReal x1165=((0.25)*sj3);
j4eval[0]=(((x1153*x1155))+x1158+x1150+(((-1.0)*x1153*x1154))+(((2.0)*x1156))+(((1.33333333333333)*x1151))+(((0.333333333333333)*x1152))+(((-1.0)*x1159)));
j4eval[1]=((IKabs(((((0.433012701892219)*r22*sj3))+(((-1.0)*r21*x1162))+((x1155*x1165))+(((-1.0)*x1154*x1165))+(((-1.0)*r20*x1164)))))+(IKabs((((sj3*sj5*x1161))+((cj3*x1160))+((x1163*x1164))+((cj5*sj3*x1163))+(((-1.0)*x1161*x1162))))));
j4eval[2]=IKsign(((((0.75)*x1150))+(((-1.0)*x1154*x1160))+x1151+(((-0.75)*x1159))+(((0.75)*x1158))+((x1155*x1160))+(((0.25)*x1152))+(((1.5)*x1156))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1166=((1.73205080756888)*cj0);
IkReal x1167=((1.73205080756888)*sj0);
IkReal x1168=(((cj5*r10*x1167))+((cj0*r02))+((cj5*r00*x1166))+(((-1.0)*r11*sj5*x1167))+((r12*sj0))+(((-1.0)*r01*sj5*x1166)));
j4eval[0]=x1168;
j4eval[1]=IKsign(x1168);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1169=(cj0*r01*r21);
IkReal x1170=(r11*r21*sj0);
IkReal x1171=(cj0*r00*r20);
IkReal x1172=(cj0*r02*r22);
IkReal x1173=(r10*r20*sj0);
IkReal x1174=(r12*r22*sj0);
IkReal x1175=(cj0*cj5*r00*r22);
IkReal x1176=(cj0*cj5*r02*r20);
IkReal x1177=(cj0*r01*r22*sj5);
IkReal x1178=(cj0*r02*r21*sj5);
IkReal x1179=(cj5*r10*r22*sj0);
IkReal x1180=(cj5*r12*r20*sj0);
IkReal x1181=(r11*r22*sj0*sj5);
IkReal x1182=(r12*r21*sj0*sj5);
IkReal x1183=(cj0*cj5*r00*r21*sj5);
IkReal x1184=(cj0*cj5*r01*r20*sj5);
IkReal x1185=(cj5*r10*r21*sj0*sj5);
IkReal x1186=(cj5*r11*r20*sj0*sj5);
IkReal x1187=cj5*cj5;
IkReal x1188=(cj0*r00*r20*x1187);
IkReal x1189=(cj0*r01*r21*x1187);
IkReal x1190=(r10*r20*sj0*x1187);
IkReal x1191=(r11*r21*sj0*x1187);
j4eval[0]=((((3.0)*x1191))+(((3.0)*x1174))+(((1.73205080756888)*x1181))+(((1.73205080756888)*x1177))+(((3.0)*x1184))+(((-1.73205080756888)*x1180))+(((3.0)*x1183))+(((3.0)*x1185))+(((1.73205080756888)*x1182))+(((3.0)*x1186))+(((1.73205080756888)*x1178))+(((-3.0)*x1188))+(((4.0)*x1173))+x1169+(((-3.0)*x1190))+(((3.0)*x1189))+x1170+(((-1.73205080756888)*x1175))+(((-1.73205080756888)*x1176))+(((-1.73205080756888)*x1179))+(((4.0)*x1171))+(((3.0)*x1172)));
j4eval[1]=IKsign(((((1.5)*x1184))+(((-0.866025403784439)*x1176))+(((-0.866025403784439)*x1179))+(((1.5)*x1183))+(((-0.866025403784439)*x1175))+(((1.5)*x1191))+(((-1.5)*x1190))+(((-1.5)*x1188))+(((1.5)*x1174))+(((2.0)*x1173))+(((0.866025403784439)*x1182))+(((1.5)*x1172))+(((0.866025403784439)*x1181))+(((0.5)*x1170))+(((0.5)*x1169))+(((-0.866025403784439)*x1180))+(((0.866025403784439)*x1177))+(((0.866025403784439)*x1178))+(((1.5)*x1189))+(((2.0)*x1171))+(((1.5)*x1185))+(((1.5)*x1186))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1192=(cj0*r01);
IkReal x1193=(cj5*sj3);
IkReal x1194=(cj0*r00);
IkReal x1195=(sj3*sj5);
IkReal x1196=(r11*sj0);
IkReal x1197=(r10*sj0);
IkReal x1198=((0.866025403784439)*sj3);
IkReal x1199=(cj0*r02);
IkReal x1200=(r12*sj0);
IkReal x1201=((0.5)*cj5*sj3);
IkReal x1202=((0.5)*sj3*sj5);
IkReal x1203=((2.0)*r20);
IkReal x1204=((0.5)*r21);
IkReal x1205=((1.5)*r22);
IkReal x1206=((0.866025403784439)*cj5*r22);
IkReal x1207=((0.866025403784439)*cj5*r20);
IkReal x1208=((0.866025403784439)*r22*sj5);
IkReal x1209=((0.866025403784439)*r21*sj5);
IkReal x1210=((1.5)*cj5*r21*sj5);
IkReal x1211=((1.5)*cj5*r20*sj5);
IkReal x1212=cj5*cj5;
IkReal x1213=((1.5)*r20*x1212);
IkReal x1214=((1.5)*r21*x1212);
CheckValue<IkReal> x1215=IKPowWithIntegerCheck(IKsign((((x1199*x1205))+((x1199*x1209))+((x1197*x1210))+((x1200*x1205))+((x1196*x1204))+(((-1.0)*x1200*x1207))+(((-1.0)*x1197*x1206))+(((-1.0)*x1194*x1206))+((x1192*x1208))+((x1197*x1203))+(((-1.0)*x1197*x1213))+((x1196*x1211))+((x1194*x1210))+(((-1.0)*x1194*x1213))+((x1192*x1214))+(((-1.0)*x1199*x1207))+((x1200*x1209))+((x1194*x1203))+((x1192*x1204))+((x1192*x1211))+((x1196*x1208))+((x1196*x1214)))),-1);
if(!x1215.valid){
continue;
}
CheckValue<IkReal> x1216 = IKatan2WithCheck(IkReal((((x1195*x1197))+((x1192*x1193))+((x1193*x1196))+((x1194*x1195)))),IkReal((((x1192*x1202))+(((-1.0)*x1194*x1201))+(((-1.0)*x1197*x1201))+((x1198*x1199))+((x1198*x1200))+((x1196*x1202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1215.value)))+(x1216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1217=IKcos(j4);
IkReal x1218=((0.866025403784439)*r22);
IkReal x1219=IKsin(j4);
IkReal x1220=(cj5*x1219);
IkReal x1221=(r20*sj5);
IkReal x1222=((0.5)*r20);
IkReal x1223=((0.5)*r21*sj5);
IkReal x1224=((1.0)*cj5*x1217);
IkReal x1225=((0.866025403784439)*cj0*r02);
IkReal x1226=((0.866025403784439)*r12*sj0);
IkReal x1227=((0.5)*r00);
IkReal x1228=(cj0*cj5*x1219);
IkReal x1229=((1.0)*cj0*cj5*x1217);
IkReal x1230=((1.0)*cj0*sj5*x1217);
IkReal x1231=((0.5)*r01);
IkReal x1232=(cj0*sj5*x1219);
IkReal x1233=((0.5)*r10);
IkReal x1234=(cj5*sj0*x1219);
IkReal x1235=((0.5)*r11);
IkReal x1236=(sj0*sj5*x1219);
IkReal x1237=((0.866025403784439)*cj0*r12);
IkReal x1238=((0.866025403784439)*r02*sj0);
IkReal x1239=(cj0*cj5*x1217);
IkReal x1240=(cj0*sj5*x1217);
IkReal x1241=(cj5*sj0*x1217);
IkReal x1242=(r00*sj0*sj5);
IkReal x1243=(sj0*sj5*x1217);
evalcond[0]=(((x1217*x1218))+((x1219*x1221))+(((-1.0)*cj5*x1217*x1222))+((x1217*x1223))+(((-1.0)*(0.5)*sj3))+((r21*x1220)));
evalcond[1]=((((-1.0)*r21*x1224))+((x1219*x1223))+(((-1.0)*x1220*x1222))+(((-1.0)*(1.0)*cj3))+(((-1.0)*x1217*x1221))+((x1218*x1219)));
evalcond[2]=(((x1235*x1236))+(((-1.0)*r10*sj0*sj5*x1217))+((x1231*x1232))+((x1219*x1225))+((x1219*x1226))+(((-1.0)*r01*x1229))+(((-1.0)*x1233*x1234))+(((-1.0)*r11*sj0*x1224))+(((-1.0)*x1227*x1228))+(((-1.0)*r00*x1230)));
evalcond[3]=((((-1.0)*x1231*x1243))+((x1217*x1237))+(((-1.0)*x1217*x1238))+((x1235*x1240))+((r10*x1232))+(((-1.0)*x1233*x1239))+((r11*x1228))+(((0.5)*cj3))+((x1227*x1241))+(((-1.0)*r01*x1234))+(((-1.0)*x1219*x1242)));
evalcond[4]=(((x1217*x1242))+(((-1.0)*x1228*x1233))+(((-1.0)*r11*x1229))+(((-1.0)*x1231*x1236))+(((-1.0)*x1219*x1238))+((x1219*x1237))+((r01*x1241))+((x1232*x1235))+((x1227*x1234))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r10*x1230)));
evalcond[5]=((0.866025403784439)+((r00*x1232))+((r10*x1236))+((x1217*x1226))+((r11*x1234))+((x1217*x1225))+((r01*x1228))+((x1235*x1243))+((x1231*x1240))+(((-1.0)*x1227*x1239))+(((-1.0)*x1233*x1241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1244=((1.73205080756888)*cj0);
IkReal x1245=(cj5*r00);
IkReal x1246=(r01*sj5);
IkReal x1247=((1.73205080756888)*sj0);
IkReal x1248=(cj5*r10);
IkReal x1249=(r11*sj5);
IkReal x1250=((0.866025403784439)*sj3);
IkReal x1251=(cj3*cj5);
IkReal x1252=(cj3*sj5);
IkReal x1253=((0.5)*cj0*sj3);
IkReal x1254=((0.5)*sj0*sj3);
IkReal x1255=(cj0*sj3);
IkReal x1256=((1.0)*sj0*sj3);
CheckValue<IkReal> x1257 = IKatan2WithCheck(IkReal(((((0.5)*r20*x1251))+((x1246*x1254))+(((-1.0)*cj0*r12*x1250))+(((-1.0)*x1245*x1254))+(((-1.0)*x1249*x1253))+(((-0.5)*r21*x1252))+((x1248*x1253))+(((-1.0)*(0.866025403784439)*cj3*r22))+((r02*sj0*x1250)))),IkReal((((cj5*r11*x1255))+((r20*x1252))+((r21*x1251))+(((-1.0)*r00*sj5*x1256))+(((-1.0)*cj5*r01*x1256))+((r10*sj5*x1255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1257.valid){
continue;
}
CheckValue<IkReal> x1258=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1247*x1249))+((cj0*r02))+(((-1.0)*x1244*x1246))+((x1244*x1245))+((r12*sj0))+((x1247*x1248)))),-1);
if(!x1258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1257.value)+(((1.5707963267949)*(x1258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1259=IKcos(j4);
IkReal x1260=((0.866025403784439)*r22);
IkReal x1261=IKsin(j4);
IkReal x1262=(cj5*x1261);
IkReal x1263=(r20*sj5);
IkReal x1264=((0.5)*r20);
IkReal x1265=((0.5)*r21*sj5);
IkReal x1266=((1.0)*cj5*x1259);
IkReal x1267=((0.866025403784439)*cj0*r02);
IkReal x1268=((0.866025403784439)*r12*sj0);
IkReal x1269=((0.5)*r00);
IkReal x1270=(cj0*cj5*x1261);
IkReal x1271=((1.0)*cj0*cj5*x1259);
IkReal x1272=((1.0)*cj0*sj5*x1259);
IkReal x1273=((0.5)*r01);
IkReal x1274=(cj0*sj5*x1261);
IkReal x1275=((0.5)*r10);
IkReal x1276=(cj5*sj0*x1261);
IkReal x1277=((0.5)*r11);
IkReal x1278=(sj0*sj5*x1261);
IkReal x1279=((0.866025403784439)*cj0*r12);
IkReal x1280=((0.866025403784439)*r02*sj0);
IkReal x1281=(cj0*cj5*x1259);
IkReal x1282=(cj0*sj5*x1259);
IkReal x1283=(cj5*sj0*x1259);
IkReal x1284=(r00*sj0*sj5);
IkReal x1285=(sj0*sj5*x1259);
evalcond[0]=(((x1259*x1260))+((x1261*x1263))+(((-1.0)*(0.5)*sj3))+((r21*x1262))+((x1259*x1265))+(((-1.0)*cj5*x1259*x1264)));
evalcond[1]=(((x1261*x1265))+((x1260*x1261))+(((-1.0)*(1.0)*cj3))+(((-1.0)*x1262*x1264))+(((-1.0)*x1259*x1263))+(((-1.0)*r21*x1266)));
evalcond[2]=(((x1277*x1278))+((x1261*x1267))+(((-1.0)*x1269*x1270))+(((-1.0)*r00*x1272))+(((-1.0)*r11*sj0*x1266))+((x1273*x1274))+(((-1.0)*x1275*x1276))+((x1261*x1268))+(((-1.0)*r01*x1271))+(((-1.0)*r10*sj0*sj5*x1259)));
evalcond[3]=((((-1.0)*x1259*x1280))+((x1277*x1282))+((x1269*x1283))+(((-1.0)*x1275*x1281))+(((-1.0)*x1273*x1285))+((r11*x1270))+(((-1.0)*x1261*x1284))+(((-1.0)*r01*x1276))+(((0.5)*cj3))+((r10*x1274))+((x1259*x1279)));
evalcond[4]=((((-1.0)*r11*x1271))+((x1259*x1284))+(((-1.0)*x1270*x1275))+(((-1.0)*x1261*x1280))+((r01*x1283))+((x1274*x1277))+(((-1.0)*x1273*x1278))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r10*x1272))+((x1269*x1276))+((x1261*x1279)));
evalcond[5]=((0.866025403784439)+((r10*x1278))+(((-1.0)*x1269*x1281))+((x1259*x1268))+((x1259*x1267))+((x1273*x1282))+(((-1.0)*x1275*x1283))+((r00*x1274))+((r11*x1276))+((x1277*x1285))+((r01*x1270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1286=((0.866025403784439)*r22);
IkReal x1287=((0.5)*r20);
IkReal x1288=(cj3*cj5);
IkReal x1289=((0.5)*r21);
IkReal x1290=(cj3*sj5);
IkReal x1291=((0.25)*sj3);
IkReal x1292=(cj5*r20);
IkReal x1293=(r21*sj5);
IkReal x1294=r20*r20;
IkReal x1295=r21*r21;
IkReal x1296=((0.75)*(cj5*cj5));
CheckValue<IkReal> x1297 = IKatan2WithCheck(IkReal((((cj3*x1286))+((sj3*sj5*x1287))+((x1289*x1290))+((cj5*sj3*x1289))+(((-1.0)*x1287*x1288)))),IkReal((((x1291*x1293))+(((0.433012701892219)*r22*sj3))+(((-1.0)*x1291*x1292))+(((-1.0)*r20*x1290))+(((-1.0)*r21*x1288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1297.valid){
continue;
}
CheckValue<IkReal> x1298=IKPowWithIntegerCheck(IKsign(((((0.75)*(r22*r22)))+x1294+(((-1.0)*x1294*x1296))+((x1286*x1293))+(((0.25)*x1295))+(((1.5)*cj5*r20*x1293))+((x1295*x1296))+(((-1.0)*x1286*x1292)))),-1);
if(!x1298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1297.value)+(((1.5707963267949)*(x1298.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1299=IKcos(j4);
IkReal x1300=((0.866025403784439)*r22);
IkReal x1301=IKsin(j4);
IkReal x1302=(cj5*x1301);
IkReal x1303=(r20*sj5);
IkReal x1304=((0.5)*r20);
IkReal x1305=((0.5)*r21*sj5);
IkReal x1306=((1.0)*cj5*x1299);
IkReal x1307=((0.866025403784439)*cj0*r02);
IkReal x1308=((0.866025403784439)*r12*sj0);
IkReal x1309=((0.5)*r00);
IkReal x1310=(cj0*cj5*x1301);
IkReal x1311=((1.0)*cj0*cj5*x1299);
IkReal x1312=((1.0)*cj0*sj5*x1299);
IkReal x1313=((0.5)*r01);
IkReal x1314=(cj0*sj5*x1301);
IkReal x1315=((0.5)*r10);
IkReal x1316=(cj5*sj0*x1301);
IkReal x1317=((0.5)*r11);
IkReal x1318=(sj0*sj5*x1301);
IkReal x1319=((0.866025403784439)*cj0*r12);
IkReal x1320=((0.866025403784439)*r02*sj0);
IkReal x1321=(cj0*cj5*x1299);
IkReal x1322=(cj0*sj5*x1299);
IkReal x1323=(cj5*sj0*x1299);
IkReal x1324=(r00*sj0*sj5);
IkReal x1325=(sj0*sj5*x1299);
evalcond[0]=((((-1.0)*cj5*x1299*x1304))+((r21*x1302))+((x1299*x1305))+(((-1.0)*(0.5)*sj3))+((x1301*x1303))+((x1299*x1300)));
evalcond[1]=((((-1.0)*(1.0)*cj3))+(((-1.0)*x1302*x1304))+((x1301*x1305))+(((-1.0)*x1299*x1303))+((x1300*x1301))+(((-1.0)*r21*x1306)));
evalcond[2]=((((-1.0)*r11*sj0*x1306))+(((-1.0)*r10*sj0*sj5*x1299))+((x1301*x1308))+(((-1.0)*x1309*x1310))+((x1301*x1307))+((x1317*x1318))+(((-1.0)*r01*x1311))+((x1313*x1314))+(((-1.0)*x1315*x1316))+(((-1.0)*r00*x1312)));
evalcond[3]=((((-1.0)*x1315*x1321))+(((-1.0)*x1299*x1320))+((x1299*x1319))+((r10*x1314))+((x1309*x1323))+(((-1.0)*x1301*x1324))+(((0.5)*cj3))+((x1317*x1322))+(((-1.0)*x1313*x1325))+(((-1.0)*r01*x1316))+((r11*x1310)));
evalcond[4]=((((-1.0)*x1313*x1318))+((x1299*x1324))+((x1301*x1319))+(((-1.0)*x1310*x1315))+((r01*x1323))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r10*x1312))+(((-1.0)*r11*x1311))+((x1309*x1316))+((x1314*x1317))+(((-1.0)*x1301*x1320)));
evalcond[5]=((0.866025403784439)+((r01*x1310))+((x1299*x1308))+((x1317*x1325))+(((-1.0)*x1309*x1321))+((r11*x1316))+((r00*x1314))+(((-1.0)*x1315*x1323))+((x1313*x1322))+((x1299*x1307))+((r10*x1318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1326=((1.0)*cj5);
if( IKabs((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x1326)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x1326))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x1326))))+IKsqr(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x1326))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x1326))), ((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x1326))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1327=((0.866025403784439)*cj5);
IkReal x1328=((0.866025403784439)*sj5);
evalcond[0]=((((-1.0)*(0.866025403784439)*(IKsin(j3))))+(((-1.0)*r20*x1327))+(((-1.0)*(0.5)*r22))+((r21*x1328)));
evalcond[1]=((((-1.0)*r01*sj0*x1328))+(((-1.0)*cj0*r10*x1327))+((r00*sj0*x1327))+(((-1.0)*(0.5)*cj0*r12))+((cj0*r11*x1328))+(((0.5)*r02*sj0))+(((0.866025403784439)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1329=r22*r22;
IkReal x1330=r20*r20;
IkReal x1331=r21*r21;
IkReal x1332=((1.15470053837925)*r22);
IkReal x1333=(cj5*r20);
IkReal x1334=(r21*sj5);
IkReal x1335=(cj5*r20*r21*sj5);
IkReal x1336=cj5*cj5;
IkReal x1337=(x1331*x1336);
IkReal x1338=(x1330*x1336);
IkReal x1339=((0.866025403784439)*r22);
IkReal x1340=((0.5)*r20);
IkReal x1341=(cj3*cj5);
IkReal x1342=((0.5)*r21);
IkReal x1343=(cj3*sj5);
IkReal x1344=((0.25)*sj3);
j4eval[0]=(x1329+(((-1.0)*x1338))+(((0.333333333333333)*x1331))+x1337+(((2.0)*x1335))+(((1.33333333333333)*x1330))+((x1332*x1334))+(((-1.0)*x1332*x1333)));
j4eval[1]=((IKabs(((((-1.0)*r20*x1343))+(((0.433012701892219)*r22*sj3))+((x1334*x1344))+(((-1.0)*r21*x1341))+(((-1.0)*x1333*x1344)))))+(IKabs(((((-1.0)*x1340*x1341))+((cj5*sj3*x1342))+((x1342*x1343))+((cj3*x1339))+((sj3*sj5*x1340))))));
j4eval[2]=IKsign(((((0.75)*x1329))+(((1.5)*x1335))+x1330+(((-1.0)*x1333*x1339))+(((0.75)*x1337))+(((-0.75)*x1338))+(((0.25)*x1331))+((x1334*x1339))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1345=((1.73205080756888)*cj0);
IkReal x1346=((1.73205080756888)*sj0);
IkReal x1347=(((cj5*r10*x1346))+(((-1.0)*r01*sj5*x1345))+((cj5*r00*x1345))+((cj0*r02))+(((-1.0)*r11*sj5*x1346))+((r12*sj0)));
j4eval[0]=x1347;
j4eval[1]=IKsign(x1347);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1348=(cj0*r01*r21);
IkReal x1349=(r11*r21*sj0);
IkReal x1350=(cj0*r00*r20);
IkReal x1351=(cj0*r02*r22);
IkReal x1352=(r10*r20*sj0);
IkReal x1353=(r12*r22*sj0);
IkReal x1354=(cj0*cj5*r00*r22);
IkReal x1355=(cj0*cj5*r02*r20);
IkReal x1356=(cj0*r01*r22*sj5);
IkReal x1357=(cj0*r02*r21*sj5);
IkReal x1358=(cj5*r10*r22*sj0);
IkReal x1359=(cj5*r12*r20*sj0);
IkReal x1360=(r11*r22*sj0*sj5);
IkReal x1361=(r12*r21*sj0*sj5);
IkReal x1362=(cj0*cj5*r00*r21*sj5);
IkReal x1363=(cj0*cj5*r01*r20*sj5);
IkReal x1364=(cj5*r10*r21*sj0*sj5);
IkReal x1365=(cj5*r11*r20*sj0*sj5);
IkReal x1366=cj5*cj5;
IkReal x1367=(cj0*r00*r20*x1366);
IkReal x1368=(cj0*r01*r21*x1366);
IkReal x1369=(r10*r20*sj0*x1366);
IkReal x1370=(r11*r21*sj0*x1366);
j4eval[0]=((((-1.73205080756888)*x1355))+(((4.0)*x1352))+(((3.0)*x1353))+(((1.73205080756888)*x1360))+(((1.73205080756888)*x1356))+(((3.0)*x1370))+(((4.0)*x1350))+(((-1.73205080756888)*x1354))+(((3.0)*x1364))+(((3.0)*x1363))+(((3.0)*x1365))+(((1.73205080756888)*x1361))+(((3.0)*x1362))+(((-3.0)*x1369))+(((3.0)*x1351))+(((-3.0)*x1367))+(((-1.73205080756888)*x1359))+(((1.73205080756888)*x1357))+x1349+x1348+(((-1.73205080756888)*x1358))+(((3.0)*x1368)));
j4eval[1]=IKsign(((((1.5)*x1353))+(((0.5)*x1349))+(((-0.866025403784439)*x1358))+(((0.5)*x1348))+(((2.0)*x1350))+(((1.5)*x1364))+(((-1.5)*x1369))+(((2.0)*x1352))+(((-0.866025403784439)*x1359))+(((0.866025403784439)*x1361))+(((-1.5)*x1367))+(((-0.866025403784439)*x1354))+(((1.5)*x1351))+(((1.5)*x1362))+(((0.866025403784439)*x1356))+(((-0.866025403784439)*x1355))+(((0.866025403784439)*x1360))+(((1.5)*x1370))+(((1.5)*x1365))+(((0.866025403784439)*x1357))+(((1.5)*x1368))+(((1.5)*x1363))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1371=(cj0*r01);
IkReal x1372=(cj5*sj3);
IkReal x1373=(cj0*r00);
IkReal x1374=(sj3*sj5);
IkReal x1375=(r11*sj0);
IkReal x1376=(r10*sj0);
IkReal x1377=((0.866025403784439)*sj3);
IkReal x1378=(cj0*r02);
IkReal x1379=(r12*sj0);
IkReal x1380=((0.5)*cj5*sj3);
IkReal x1381=((0.5)*sj3*sj5);
IkReal x1382=((2.0)*r20);
IkReal x1383=((0.5)*r21);
IkReal x1384=((1.5)*r22);
IkReal x1385=((0.866025403784439)*cj5*r22);
IkReal x1386=((0.866025403784439)*cj5*r20);
IkReal x1387=((0.866025403784439)*r22*sj5);
IkReal x1388=((0.866025403784439)*r21*sj5);
IkReal x1389=((1.5)*cj5*r21*sj5);
IkReal x1390=((1.5)*cj5*r20*sj5);
IkReal x1391=cj5*cj5;
IkReal x1392=((1.5)*r20*x1391);
IkReal x1393=((1.5)*r21*x1391);
CheckValue<IkReal> x1394 = IKatan2WithCheck(IkReal((((x1373*x1374))+((x1372*x1375))+((x1371*x1372))+((x1374*x1376)))),IkReal((((x1377*x1378))+(((-1.0)*x1376*x1380))+(((-1.0)*x1373*x1380))+((x1371*x1381))+((x1375*x1381))+((x1377*x1379)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1394.valid){
continue;
}
CheckValue<IkReal> x1395=IKPowWithIntegerCheck(IKsign((((x1375*x1393))+((x1371*x1393))+((x1379*x1388))+((x1375*x1387))+(((-1.0)*x1379*x1386))+((x1375*x1383))+((x1375*x1390))+((x1378*x1388))+(((-1.0)*x1376*x1392))+((x1378*x1384))+((x1371*x1390))+((x1371*x1383))+((x1376*x1389))+((x1371*x1387))+(((-1.0)*x1376*x1385))+(((-1.0)*x1378*x1386))+(((-1.0)*x1373*x1385))+((x1376*x1382))+((x1373*x1389))+((x1379*x1384))+((x1373*x1382))+(((-1.0)*x1373*x1392)))),-1);
if(!x1395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1394.value)+(((1.5707963267949)*(x1395.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1396=IKcos(j4);
IkReal x1397=((0.866025403784439)*r22);
IkReal x1398=IKsin(j4);
IkReal x1399=(cj5*x1398);
IkReal x1400=(r20*sj5);
IkReal x1401=((0.5)*r20);
IkReal x1402=((0.5)*r21*sj5);
IkReal x1403=((1.0)*cj5*x1396);
IkReal x1404=((0.866025403784439)*cj0*r02);
IkReal x1405=((0.866025403784439)*r12*sj0);
IkReal x1406=((0.5)*r00);
IkReal x1407=(cj0*cj5*x1398);
IkReal x1408=((1.0)*cj0*cj5*x1396);
IkReal x1409=((1.0)*cj0*sj5*x1396);
IkReal x1410=((0.5)*r01);
IkReal x1411=(cj0*sj5*x1398);
IkReal x1412=((0.5)*r10);
IkReal x1413=(cj5*sj0*x1398);
IkReal x1414=((0.5)*r11);
IkReal x1415=(sj0*sj5*x1398);
IkReal x1416=((0.866025403784439)*cj0*r12);
IkReal x1417=((0.866025403784439)*r02*sj0);
IkReal x1418=(cj0*cj5*x1396);
IkReal x1419=(cj0*sj5*x1396);
IkReal x1420=(cj5*sj0*x1396);
IkReal x1421=(r00*sj0*sj5);
IkReal x1422=(sj0*sj5*x1396);
evalcond[0]=(((x1396*x1402))+((x1396*x1397))+((r21*x1399))+(((-1.0)*(0.5)*sj3))+(((-1.0)*cj5*x1396*x1401))+((x1398*x1400)));
evalcond[1]=((((-1.0)*x1399*x1401))+((x1397*x1398))+(((-1.0)*(1.0)*cj3))+((x1398*x1402))+(((-1.0)*r21*x1403))+(((-1.0)*x1396*x1400)));
evalcond[2]=((((-1.0)*r01*x1408))+((x1414*x1415))+(((-1.0)*r11*sj0*x1403))+((x1398*x1404))+((x1398*x1405))+(((-1.0)*x1412*x1413))+(((-1.0)*r00*x1409))+((x1410*x1411))+(((-1.0)*x1406*x1407))+(((-1.0)*r10*sj0*sj5*x1396)));
evalcond[3]=(((x1396*x1416))+(((-1.0)*x1396*x1417))+((x1406*x1420))+((x1414*x1419))+((r11*x1407))+(((-1.0)*x1410*x1422))+(((-1.0)*x1398*x1421))+(((-1.0)*x1412*x1418))+(((0.5)*cj3))+(((-1.0)*r01*x1413))+((r10*x1411)));
evalcond[4]=(((x1411*x1414))+((x1398*x1416))+((x1406*x1413))+(((-1.0)*x1398*x1417))+(((-1.0)*x1407*x1412))+(((-1.0)*r10*x1409))+(((-1.0)*r11*x1408))+(((-1.0)*(1.0)*sj3))+((x1396*x1421))+(((-1.0)*x1410*x1415))+((r01*x1420)));
evalcond[5]=((0.866025403784439)+(((-1.0)*x1406*x1418))+((r10*x1415))+((r00*x1411))+(((-1.0)*x1412*x1420))+((x1396*x1404))+((x1396*x1405))+((r11*x1413))+((x1414*x1422))+((x1410*x1419))+((r01*x1407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1423=((1.73205080756888)*cj0);
IkReal x1424=(cj5*r00);
IkReal x1425=(r01*sj5);
IkReal x1426=((1.73205080756888)*sj0);
IkReal x1427=(cj5*r10);
IkReal x1428=(r11*sj5);
IkReal x1429=((0.866025403784439)*sj3);
IkReal x1430=(cj3*cj5);
IkReal x1431=(cj3*sj5);
IkReal x1432=((0.5)*cj0*sj3);
IkReal x1433=((0.5)*sj0*sj3);
IkReal x1434=(cj0*sj3);
IkReal x1435=((1.0)*sj0*sj3);
CheckValue<IkReal> x1436 = IKatan2WithCheck(IkReal(((((-0.5)*r21*x1431))+((x1427*x1432))+(((0.5)*r20*x1430))+((x1425*x1433))+(((-1.0)*x1424*x1433))+(((-1.0)*x1428*x1432))+((r02*sj0*x1429))+(((-1.0)*(0.866025403784439)*cj3*r22))+(((-1.0)*cj0*r12*x1429)))),IkReal((((r21*x1430))+((cj5*r11*x1434))+((r20*x1431))+(((-1.0)*r00*sj5*x1435))+(((-1.0)*cj5*r01*x1435))+((r10*sj5*x1434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1436.valid){
continue;
}
CheckValue<IkReal> x1437=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1426*x1428))+((x1426*x1427))+((cj0*r02))+(((-1.0)*x1423*x1425))+((r12*sj0))+((x1423*x1424)))),-1);
if(!x1437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1436.value)+(((1.5707963267949)*(x1437.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1438=IKcos(j4);
IkReal x1439=((0.866025403784439)*r22);
IkReal x1440=IKsin(j4);
IkReal x1441=(cj5*x1440);
IkReal x1442=(r20*sj5);
IkReal x1443=((0.5)*r20);
IkReal x1444=((0.5)*r21*sj5);
IkReal x1445=((1.0)*cj5*x1438);
IkReal x1446=((0.866025403784439)*cj0*r02);
IkReal x1447=((0.866025403784439)*r12*sj0);
IkReal x1448=((0.5)*r00);
IkReal x1449=(cj0*cj5*x1440);
IkReal x1450=((1.0)*cj0*cj5*x1438);
IkReal x1451=((1.0)*cj0*sj5*x1438);
IkReal x1452=((0.5)*r01);
IkReal x1453=(cj0*sj5*x1440);
IkReal x1454=((0.5)*r10);
IkReal x1455=(cj5*sj0*x1440);
IkReal x1456=((0.5)*r11);
IkReal x1457=(sj0*sj5*x1440);
IkReal x1458=((0.866025403784439)*cj0*r12);
IkReal x1459=((0.866025403784439)*r02*sj0);
IkReal x1460=(cj0*cj5*x1438);
IkReal x1461=(cj0*sj5*x1438);
IkReal x1462=(cj5*sj0*x1438);
IkReal x1463=(r00*sj0*sj5);
IkReal x1464=(sj0*sj5*x1438);
evalcond[0]=(((x1440*x1442))+((x1438*x1439))+(((-1.0)*(0.5)*sj3))+((x1438*x1444))+((r21*x1441))+(((-1.0)*cj5*x1438*x1443)));
evalcond[1]=((((-1.0)*x1438*x1442))+(((-1.0)*(1.0)*cj3))+(((-1.0)*r21*x1445))+((x1440*x1444))+(((-1.0)*x1441*x1443))+((x1439*x1440)));
evalcond[2]=(((x1456*x1457))+(((-1.0)*r10*sj0*sj5*x1438))+(((-1.0)*x1454*x1455))+((x1452*x1453))+((x1440*x1446))+((x1440*x1447))+(((-1.0)*r00*x1451))+(((-1.0)*r01*x1450))+(((-1.0)*r11*sj0*x1445))+(((-1.0)*x1448*x1449)));
evalcond[3]=((((-1.0)*x1438*x1459))+(((-1.0)*x1440*x1463))+(((-1.0)*r01*x1455))+((x1438*x1458))+((x1456*x1461))+((r10*x1453))+((r11*x1449))+((x1448*x1462))+(((0.5)*cj3))+(((-1.0)*x1452*x1464))+(((-1.0)*x1454*x1460)));
evalcond[4]=(((x1448*x1455))+((x1438*x1463))+(((-1.0)*x1452*x1457))+(((-1.0)*x1449*x1454))+((r01*x1462))+(((-1.0)*x1440*x1459))+((x1453*x1456))+(((-1.0)*r10*x1451))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r11*x1450))+((x1440*x1458)));
evalcond[5]=((0.866025403784439)+((x1438*x1446))+((r10*x1457))+(((-1.0)*x1448*x1460))+((x1438*x1447))+((r11*x1455))+((x1456*x1464))+((r01*x1449))+((x1452*x1461))+(((-1.0)*x1454*x1462))+((r00*x1453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1465=((0.866025403784439)*r22);
IkReal x1466=((0.5)*r20);
IkReal x1467=(cj3*cj5);
IkReal x1468=((0.5)*r21);
IkReal x1469=(cj3*sj5);
IkReal x1470=((0.25)*sj3);
IkReal x1471=(cj5*r20);
IkReal x1472=(r21*sj5);
IkReal x1473=r20*r20;
IkReal x1474=r21*r21;
IkReal x1475=((0.75)*(cj5*cj5));
CheckValue<IkReal> x1476 = IKatan2WithCheck(IkReal((((cj5*sj3*x1468))+((x1468*x1469))+((cj3*x1465))+(((-1.0)*x1466*x1467))+((sj3*sj5*x1466)))),IkReal(((((-1.0)*r20*x1469))+(((0.433012701892219)*r22*sj3))+(((-1.0)*x1470*x1471))+(((-1.0)*r21*x1467))+((x1470*x1472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1476.valid){
continue;
}
CheckValue<IkReal> x1477=IKPowWithIntegerCheck(IKsign(((((0.25)*x1474))+(((0.75)*(r22*r22)))+((x1465*x1472))+((x1474*x1475))+(((-1.0)*x1465*x1471))+(((1.5)*cj5*r20*x1472))+(((-1.0)*x1473*x1475))+x1473)),-1);
if(!x1477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1476.value)+(((1.5707963267949)*(x1477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1478=IKcos(j4);
IkReal x1479=((0.866025403784439)*r22);
IkReal x1480=IKsin(j4);
IkReal x1481=(cj5*x1480);
IkReal x1482=(r20*sj5);
IkReal x1483=((0.5)*r20);
IkReal x1484=((0.5)*r21*sj5);
IkReal x1485=((1.0)*cj5*x1478);
IkReal x1486=((0.866025403784439)*cj0*r02);
IkReal x1487=((0.866025403784439)*r12*sj0);
IkReal x1488=((0.5)*r00);
IkReal x1489=(cj0*cj5*x1480);
IkReal x1490=((1.0)*cj0*cj5*x1478);
IkReal x1491=((1.0)*cj0*sj5*x1478);
IkReal x1492=((0.5)*r01);
IkReal x1493=(cj0*sj5*x1480);
IkReal x1494=((0.5)*r10);
IkReal x1495=(cj5*sj0*x1480);
IkReal x1496=((0.5)*r11);
IkReal x1497=(sj0*sj5*x1480);
IkReal x1498=((0.866025403784439)*cj0*r12);
IkReal x1499=((0.866025403784439)*r02*sj0);
IkReal x1500=(cj0*cj5*x1478);
IkReal x1501=(cj0*sj5*x1478);
IkReal x1502=(cj5*sj0*x1478);
IkReal x1503=(r00*sj0*sj5);
IkReal x1504=(sj0*sj5*x1478);
evalcond[0]=(((x1478*x1479))+((x1478*x1484))+((r21*x1481))+(((-1.0)*(0.5)*sj3))+((x1480*x1482))+(((-1.0)*cj5*x1478*x1483)));
evalcond[1]=((((-1.0)*r21*x1485))+(((-1.0)*(1.0)*cj3))+(((-1.0)*x1481*x1483))+(((-1.0)*x1478*x1482))+((x1479*x1480))+((x1480*x1484)));
evalcond[2]=((((-1.0)*r10*sj0*sj5*x1478))+(((-1.0)*x1494*x1495))+((x1492*x1493))+(((-1.0)*r01*x1490))+(((-1.0)*r00*x1491))+((x1480*x1486))+(((-1.0)*r11*sj0*x1485))+(((-1.0)*x1488*x1489))+((x1496*x1497))+((x1480*x1487)));
evalcond[3]=(((x1488*x1502))+((x1478*x1498))+(((-1.0)*x1478*x1499))+(((-1.0)*x1480*x1503))+(((-1.0)*r01*x1495))+(((0.5)*cj3))+((r11*x1489))+((r10*x1493))+(((-1.0)*x1492*x1504))+((x1496*x1501))+(((-1.0)*x1494*x1500)));
evalcond[4]=((((-1.0)*r11*x1490))+((x1480*x1498))+((x1493*x1496))+((x1488*x1495))+(((-1.0)*x1492*x1497))+(((-1.0)*x1480*x1499))+((r01*x1502))+(((-1.0)*x1489*x1494))+(((-1.0)*r10*x1491))+(((-1.0)*(1.0)*sj3))+((x1478*x1503)));
evalcond[5]=((0.866025403784439)+((r01*x1489))+((r10*x1497))+((x1492*x1501))+((r00*x1493))+((x1496*x1504))+((x1478*x1487))+((r11*x1495))+(((-1.0)*x1494*x1502))+((x1478*x1486))+(((-1.0)*x1488*x1500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1505=((1.0)*sj5);
if( IKabs(((((-1.0)*r21*x1505))+((cj5*r20))+(((0.577350269189626)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))+(((-1.0)*cj0*r11*x1505)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x1505))+((cj5*r20))+(((0.577350269189626)*r22))))+IKsqr((((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))+(((-1.0)*cj0*r11*x1505))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r21*x1505))+((cj5*r20))+(((0.577350269189626)*r22))), (((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))+(((-1.0)*cj0*r11*x1505))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1506=((0.866025403784439)*cj5);
IkReal x1507=((0.866025403784439)*sj5);
evalcond[0]=((((-1.0)*(0.5)*r22))+((r21*x1507))+(((0.866025403784439)*(IKsin(j3))))+(((-1.0)*r20*x1506)));
evalcond[1]=((((-1.0)*cj0*r10*x1506))+((cj0*r11*x1507))+(((-1.0)*r01*sj0*x1507))+(((-1.0)*(0.5)*cj0*r12))+((r00*sj0*x1506))+(((0.5)*r02*sj0))+(((0.866025403784439)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1508=(r02*sj0);
IkReal x1509=(cj0*r12);
IkReal x1510=(cj0*cj5*r10);
IkReal x1511=(cj0*r11*sj5);
IkReal x1512=(cj5*r00*sj0);
IkReal x1513=(r01*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x1511))+(((1.73205080756888)*x1512))+(((-1.0)*x1509))+(((-1.73205080756888)*x1513))+(((-1.73205080756888)*x1510))+x1508);
j4eval[1]=IKsign(((((-0.5)*x1509))+(((-0.866025403784439)*x1510))+(((0.866025403784439)*x1512))+(((0.866025403784439)*x1511))+(((0.5)*x1508))+(((-0.866025403784439)*x1513))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1514=r20*r20;
IkReal x1515=r21*r21;
IkReal x1516=r22*r22;
IkReal x1517=((3.46410161513775)*r22);
IkReal x1518=(cj5*r20);
IkReal x1519=(r21*sj5);
IkReal x1520=(cj5*r20*r21*sj5);
IkReal x1521=cj5*cj5;
IkReal x1522=(x1514*x1521);
IkReal x1523=(x1515*x1521);
IkReal x1524=((0.866025403784439)*r22);
IkReal x1525=((0.5)*r20);
IkReal x1526=(cj3*cj5);
IkReal x1527=((0.5)*r21);
IkReal x1528=(cj3*sj5);
IkReal x1529=((0.25)*sj3);
j4eval[0]=((((-1.0)*x1515))+(((-3.0)*x1523))+((x1517*x1518))+(((-6.0)*x1520))+(((-1.0)*x1517*x1519))+(((3.0)*x1522))+(((-3.0)*x1516))+(((-4.0)*x1514)));
j4eval[1]=IKsign(((((-1.0)*x1519*x1524))+((x1518*x1524))+(((-0.75)*x1523))+(((-0.75)*x1516))+(((-0.25)*x1515))+(((0.75)*x1522))+(((-1.0)*x1514))+(((-1.5)*x1520))));
j4eval[2]=((IKabs(((((-1.0)*r21*x1526))+(((-1.0)*r20*x1528))+(((0.433012701892219)*r22*sj3))+((x1519*x1529))+(((-1.0)*x1518*x1529)))))+(IKabs((((x1527*x1528))+((cj3*x1524))+((cj5*sj3*x1527))+(((-1.0)*x1525*x1526))+((sj3*sj5*x1525))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1530=(cj0*r01*r21);
IkReal x1531=(r11*r21*sj0);
IkReal x1532=(cj0*r00*r20);
IkReal x1533=(cj0*r02*r22);
IkReal x1534=(r10*r20*sj0);
IkReal x1535=(r12*r22*sj0);
IkReal x1536=(cj0*cj5*r00*r22);
IkReal x1537=(cj0*cj5*r02*r20);
IkReal x1538=(cj0*r01*r22*sj5);
IkReal x1539=(cj0*r02*r21*sj5);
IkReal x1540=(cj5*r10*r22*sj0);
IkReal x1541=(cj5*r12*r20*sj0);
IkReal x1542=(r11*r22*sj0*sj5);
IkReal x1543=(r12*r21*sj0*sj5);
IkReal x1544=(cj0*cj5*r00*r21*sj5);
IkReal x1545=(cj0*cj5*r01*r20*sj5);
IkReal x1546=(cj5*r10*r21*sj0*sj5);
IkReal x1547=(cj5*r11*r20*sj0*sj5);
IkReal x1548=cj5*cj5;
IkReal x1549=(cj0*r00*r20*x1548);
IkReal x1550=(cj0*r01*r21*x1548);
IkReal x1551=(r10*r20*sj0*x1548);
IkReal x1552=(r11*r21*sj0*x1548);
j4eval[0]=((((-1.73205080756888)*x1540))+(((4.0)*x1532))+(((4.0)*x1534))+(((1.73205080756888)*x1543))+(((3.0)*x1550))+(((3.0)*x1535))+(((1.73205080756888)*x1542))+(((3.0)*x1547))+(((3.0)*x1544))+(((-1.73205080756888)*x1541))+(((1.73205080756888)*x1539))+(((3.0)*x1545))+x1531+x1530+(((3.0)*x1546))+(((1.73205080756888)*x1538))+(((-3.0)*x1551))+(((3.0)*x1552))+(((-3.0)*x1549))+(((3.0)*x1533))+(((-1.73205080756888)*x1537))+(((-1.73205080756888)*x1536)));
j4eval[1]=IKsign(((((1.5)*x1552))+(((1.5)*x1547))+(((-1.5)*x1551))+(((1.5)*x1533))+(((0.866025403784439)*x1538))+(((0.866025403784439)*x1539))+(((0.866025403784439)*x1542))+(((2.0)*x1534))+(((0.5)*x1531))+(((1.5)*x1545))+(((0.866025403784439)*x1543))+(((-1.5)*x1549))+(((0.5)*x1530))+(((1.5)*x1550))+(((-0.866025403784439)*x1536))+(((1.5)*x1546))+(((-0.866025403784439)*x1537))+(((-0.866025403784439)*x1540))+(((2.0)*x1532))+(((1.5)*x1544))+(((-0.866025403784439)*x1541))+(((1.5)*x1535))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1553=(cj0*r01);
IkReal x1554=((1.0)*cj5*sj3);
IkReal x1555=(cj0*r00);
IkReal x1556=((1.0)*sj3*sj5);
IkReal x1557=(r11*sj0);
IkReal x1558=(r10*sj0);
IkReal x1559=((0.866025403784439)*sj3);
IkReal x1560=(cj0*r02);
IkReal x1561=(r12*sj0);
IkReal x1562=((0.5)*sj3);
IkReal x1563=(cj0*cj5*r00);
IkReal x1564=(cj0*r01*sj5);
IkReal x1565=(cj5*r10*sj0);
IkReal x1566=(r11*sj0*sj5);
IkReal x1567=((2.0)*r20);
IkReal x1568=((0.5)*r21);
IkReal x1569=((1.5)*r22);
IkReal x1570=((0.866025403784439)*r22);
IkReal x1571=(cj5*r20);
IkReal x1572=((0.866025403784439)*cj0*r02);
IkReal x1573=(r21*sj5);
IkReal x1574=((0.866025403784439)*r12*sj0);
IkReal x1575=((1.5)*r21*sj5);
IkReal x1576=((1.5)*cj5*r20);
IkReal x1577=cj5*cj5;
IkReal x1578=((1.5)*r20*x1577);
IkReal x1579=((1.5)*r21*x1577);
CheckValue<IkReal> x1580 = IKatan2WithCheck(IkReal(((((-1.0)*x1553*x1554))+(((-1.0)*x1555*x1556))+(((-1.0)*x1554*x1557))+(((-1.0)*x1556*x1558)))),IkReal(((((-1.0)*x1559*x1561))+((x1562*x1565))+((x1562*x1563))+(((-1.0)*x1562*x1564))+(((-1.0)*x1559*x1560))+(((-1.0)*x1562*x1566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1580.valid){
continue;
}
CheckValue<IkReal> x1581=IKPowWithIntegerCheck(IKsign((((x1566*x1576))+((x1558*x1567))+((x1566*x1570))+((x1561*x1569))+((x1565*x1575))+((x1563*x1575))+((x1553*x1568))+((x1572*x1573))+((x1557*x1579))+(((-1.0)*x1565*x1570))+((x1560*x1569))+(((-1.0)*x1555*x1578))+((x1564*x1570))+((x1564*x1576))+(((-1.0)*x1571*x1572))+(((-1.0)*x1563*x1570))+((x1553*x1579))+((x1573*x1574))+(((-1.0)*x1571*x1574))+((x1555*x1567))+((x1557*x1568))+(((-1.0)*x1558*x1578)))),-1);
if(!x1581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1580.value)+(((1.5707963267949)*(x1581.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1582=IKsin(j4);
IkReal x1583=((0.866025403784439)*r22);
IkReal x1584=((0.5)*r20);
IkReal x1585=(cj5*x1582);
IkReal x1586=IKcos(j4);
IkReal x1587=((1.0)*cj5*x1586);
IkReal x1588=(r20*sj5);
IkReal x1589=((0.5)*r21*sj5);
IkReal x1590=((0.866025403784439)*cj0*r02);
IkReal x1591=((0.866025403784439)*r12*sj0);
IkReal x1592=((0.5)*r00);
IkReal x1593=(cj0*cj5*x1582);
IkReal x1594=((1.0)*cj0*cj5*x1586);
IkReal x1595=((1.0)*cj0*sj5*x1586);
IkReal x1596=((0.5)*r01);
IkReal x1597=(cj0*sj5*x1582);
IkReal x1598=((0.5)*r10);
IkReal x1599=(cj5*sj0*x1582);
IkReal x1600=((0.5)*r11);
IkReal x1601=(sj0*sj5*x1582);
IkReal x1602=((0.866025403784439)*cj0*r12);
IkReal x1603=((0.866025403784439)*r02*sj0);
IkReal x1604=(cj0*cj5*x1586);
IkReal x1605=(cj0*sj5*x1586);
IkReal x1606=(cj5*sj0*x1586);
IkReal x1607=(r00*sj0*sj5);
IkReal x1608=(sj0*sj5*x1586);
evalcond[0]=(((x1582*x1589))+(((-1.0)*r21*x1587))+cj3+((x1582*x1583))+(((-1.0)*x1584*x1585))+(((-1.0)*x1586*x1588)));
evalcond[1]=((((0.5)*sj3))+((r21*x1585))+((x1582*x1588))+((x1583*x1586))+((x1586*x1589))+(((-1.0)*cj5*x1584*x1586)));
evalcond[2]=(((x1582*x1590))+(((-1.0)*r10*sj0*sj5*x1586))+(((-1.0)*r01*x1594))+((x1596*x1597))+((x1600*x1601))+((x1582*x1591))+(((-1.0)*x1592*x1593))+(((-1.0)*r11*sj0*x1587))+(((-1.0)*x1598*x1599))+(((-1.0)*r00*x1595)));
evalcond[3]=((((-1.0)*x1582*x1607))+((x1592*x1606))+(((-1.0)*x1598*x1604))+(((-1.0)*x1586*x1603))+((x1586*x1602))+(((-1.0)*r01*x1599))+(((-1.0)*x1596*x1608))+((r11*x1593))+(((0.5)*cj3))+((r10*x1597))+((x1600*x1605)));
evalcond[4]=((((-1.0)*x1596*x1601))+((r01*x1606))+((x1582*x1602))+(((-1.0)*x1593*x1598))+(((-1.0)*r10*x1595))+((x1586*x1607))+(((-1.0)*r11*x1594))+(((-1.0)*x1582*x1603))+(((-1.0)*(1.0)*sj3))+((x1592*x1599))+((x1597*x1600)));
evalcond[5]=((-0.866025403784439)+((r11*x1599))+((x1596*x1605))+((r01*x1593))+((x1586*x1590))+((r10*x1601))+(((-1.0)*x1592*x1604))+(((-1.0)*x1598*x1606))+((x1600*x1608))+((x1586*x1591))+((r00*x1597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1609=((0.866025403784439)*r22);
IkReal x1610=((0.5)*r20);
IkReal x1611=(cj3*cj5);
IkReal x1612=((0.5)*r21);
IkReal x1613=(cj3*sj5);
IkReal x1614=((0.25)*sj3);
IkReal x1615=(cj5*r20);
IkReal x1616=(r21*sj5);
IkReal x1617=r20*r20;
IkReal x1618=r21*r21;
IkReal x1619=((0.75)*(cj5*cj5));
CheckValue<IkReal> x1620=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1609*x1616))+((x1617*x1619))+(((-1.0)*x1617))+((x1609*x1615))+(((-0.25)*x1618))+(((-1.5)*cj5*r20*x1616))+(((-1.0)*x1618*x1619))+(((-1.0)*(0.75)*(r22*r22))))),-1);
if(!x1620.valid){
continue;
}
CheckValue<IkReal> x1621 = IKatan2WithCheck(IkReal((((x1612*x1613))+((cj3*x1609))+((sj3*sj5*x1610))+(((-1.0)*x1610*x1611))+((cj5*sj3*x1612)))),IkReal(((((-1.0)*x1614*x1615))+(((0.433012701892219)*r22*sj3))+((x1614*x1616))+(((-1.0)*r21*x1611))+(((-1.0)*r20*x1613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1620.value)))+(x1621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1622=IKsin(j4);
IkReal x1623=((0.866025403784439)*r22);
IkReal x1624=((0.5)*r20);
IkReal x1625=(cj5*x1622);
IkReal x1626=IKcos(j4);
IkReal x1627=((1.0)*cj5*x1626);
IkReal x1628=(r20*sj5);
IkReal x1629=((0.5)*r21*sj5);
IkReal x1630=((0.866025403784439)*cj0*r02);
IkReal x1631=((0.866025403784439)*r12*sj0);
IkReal x1632=((0.5)*r00);
IkReal x1633=(cj0*cj5*x1622);
IkReal x1634=((1.0)*cj0*cj5*x1626);
IkReal x1635=((1.0)*cj0*sj5*x1626);
IkReal x1636=((0.5)*r01);
IkReal x1637=(cj0*sj5*x1622);
IkReal x1638=((0.5)*r10);
IkReal x1639=(cj5*sj0*x1622);
IkReal x1640=((0.5)*r11);
IkReal x1641=(sj0*sj5*x1622);
IkReal x1642=((0.866025403784439)*cj0*r12);
IkReal x1643=((0.866025403784439)*r02*sj0);
IkReal x1644=(cj0*cj5*x1626);
IkReal x1645=(cj0*sj5*x1626);
IkReal x1646=(cj5*sj0*x1626);
IkReal x1647=(r00*sj0*sj5);
IkReal x1648=(sj0*sj5*x1626);
evalcond[0]=((((-1.0)*r21*x1627))+((x1622*x1629))+(((-1.0)*x1624*x1625))+cj3+((x1622*x1623))+(((-1.0)*x1626*x1628)));
evalcond[1]=(((r21*x1625))+((x1622*x1628))+(((0.5)*sj3))+((x1626*x1629))+(((-1.0)*cj5*x1624*x1626))+((x1623*x1626)));
evalcond[2]=((((-1.0)*r00*x1635))+(((-1.0)*r01*x1634))+(((-1.0)*x1638*x1639))+((x1622*x1630))+((x1636*x1637))+((x1640*x1641))+(((-1.0)*r11*sj0*x1627))+(((-1.0)*r10*sj0*sj5*x1626))+(((-1.0)*x1632*x1633))+((x1622*x1631)));
evalcond[3]=((((-1.0)*x1638*x1644))+(((-1.0)*x1636*x1648))+(((-1.0)*x1622*x1647))+((x1640*x1645))+(((-1.0)*r01*x1639))+((x1632*x1646))+((r11*x1633))+((r10*x1637))+(((0.5)*cj3))+((x1626*x1642))+(((-1.0)*x1626*x1643)));
evalcond[4]=(((r01*x1646))+(((-1.0)*x1633*x1638))+((x1637*x1640))+((x1632*x1639))+((x1622*x1642))+((x1626*x1647))+(((-1.0)*r10*x1635))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x1636*x1641))+(((-1.0)*r11*x1634))+(((-1.0)*x1622*x1643)));
evalcond[5]=((-0.866025403784439)+((r01*x1633))+((x1640*x1648))+((r10*x1641))+(((-1.0)*x1632*x1644))+(((-1.0)*x1638*x1646))+((r00*x1637))+((x1636*x1645))+((x1626*x1630))+((x1626*x1631))+((r11*x1639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1649=((0.866025403784439)*cj0);
IkReal x1650=(cj5*r10);
IkReal x1651=(r11*sj5);
IkReal x1652=((0.866025403784439)*sj0);
IkReal x1653=(cj5*r00);
IkReal x1654=(r01*sj5);
IkReal x1655=((1.0)*cj0*cj3);
IkReal x1656=((1.0)*cj3*sj0);
IkReal x1657=((0.5)*cj0*cj3);
IkReal x1658=((0.5)*cj3*sj0);
CheckValue<IkReal> x1659 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5*x1655))+(((-1.0)*r10*sj5*x1656))+(((-1.0)*cj5*r11*x1656))+(((-1.0)*cj5*r01*x1655)))),IkReal(((((-1.0)*x1651*x1658))+(((-1.0)*x1654*x1657))+((x1653*x1657))+(((-1.0)*cj3*r12*x1652))+((x1650*x1658))+(((-1.0)*cj3*r02*x1649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1659.valid){
continue;
}
CheckValue<IkReal> x1660=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1652*x1654))+((x1649*x1651))+(((-1.0)*x1649*x1650))+(((-0.5)*cj0*r12))+((x1652*x1653))+((r02*(((0.5)*sj0)))))),-1);
if(!x1660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1659.value)+(((1.5707963267949)*(x1660.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1661=IKsin(j4);
IkReal x1662=((0.866025403784439)*r22);
IkReal x1663=((0.5)*r20);
IkReal x1664=(cj5*x1661);
IkReal x1665=IKcos(j4);
IkReal x1666=((1.0)*cj5*x1665);
IkReal x1667=(r20*sj5);
IkReal x1668=((0.5)*r21*sj5);
IkReal x1669=((0.866025403784439)*cj0*r02);
IkReal x1670=((0.866025403784439)*r12*sj0);
IkReal x1671=((0.5)*r00);
IkReal x1672=(cj0*cj5*x1661);
IkReal x1673=((1.0)*cj0*cj5*x1665);
IkReal x1674=((1.0)*cj0*sj5*x1665);
IkReal x1675=((0.5)*r01);
IkReal x1676=(cj0*sj5*x1661);
IkReal x1677=((0.5)*r10);
IkReal x1678=(cj5*sj0*x1661);
IkReal x1679=((0.5)*r11);
IkReal x1680=(sj0*sj5*x1661);
IkReal x1681=((0.866025403784439)*cj0*r12);
IkReal x1682=((0.866025403784439)*r02*sj0);
IkReal x1683=(cj0*cj5*x1665);
IkReal x1684=(cj0*sj5*x1665);
IkReal x1685=(cj5*sj0*x1665);
IkReal x1686=(r00*sj0*sj5);
IkReal x1687=(sj0*sj5*x1665);
evalcond[0]=(((x1661*x1662))+(((-1.0)*x1663*x1664))+(((-1.0)*r21*x1666))+cj3+((x1661*x1668))+(((-1.0)*x1665*x1667)));
evalcond[1]=((((-1.0)*cj5*x1663*x1665))+(((0.5)*sj3))+((x1662*x1665))+((x1661*x1667))+((r21*x1664))+((x1665*x1668)));
evalcond[2]=(((x1661*x1670))+(((-1.0)*r11*sj0*x1666))+(((-1.0)*r01*x1673))+(((-1.0)*x1677*x1678))+(((-1.0)*r10*sj0*sj5*x1665))+((x1675*x1676))+(((-1.0)*r00*x1674))+(((-1.0)*x1671*x1672))+((x1679*x1680))+((x1661*x1669)));
evalcond[3]=((((-1.0)*r01*x1678))+(((-1.0)*x1677*x1683))+(((-1.0)*x1665*x1682))+((x1671*x1685))+(((-1.0)*x1661*x1686))+((x1679*x1684))+((r10*x1676))+((r11*x1672))+((x1665*x1681))+(((0.5)*cj3))+(((-1.0)*x1675*x1687)));
evalcond[4]=(((x1661*x1681))+(((-1.0)*r10*x1674))+((r01*x1685))+(((-1.0)*x1675*x1680))+(((-1.0)*x1661*x1682))+((x1671*x1678))+(((-1.0)*x1672*x1677))+((x1676*x1679))+((x1665*x1686))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r11*x1673)));
evalcond[5]=((-0.866025403784439)+((r11*x1678))+((x1675*x1684))+((x1665*x1670))+((r00*x1676))+((r10*x1680))+((r01*x1672))+(((-1.0)*x1671*x1683))+(((-1.0)*x1677*x1685))+((x1665*x1669))+((x1679*x1687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1688=((0.577350269189626)*cj0);
IkReal x1689=((0.577350269189626)*sj0);
IkReal x1690=(r01*sj5);
IkReal x1691=(r11*sj5);
IkReal x1692=((1.0)*r00);
IkReal x1693=(cj0*cj5);
IkReal x1694=(cj5*sj0);
if( IKabs((((sj0*x1691))+(((-1.0)*r12*x1689))+((cj0*x1690))+(((-1.0)*x1692*x1693))+(((-1.0)*r10*x1694))+(((-1.0)*r02*x1688)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x1691))+(((-1.0)*r02*x1689))+(((-1.0)*x1692*x1694))+((r12*x1688))+((r10*x1693))+((sj0*x1690)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj0*x1691))+(((-1.0)*r12*x1689))+((cj0*x1690))+(((-1.0)*x1692*x1693))+(((-1.0)*r10*x1694))+(((-1.0)*r02*x1688))))+IKsqr(((((-1.0)*cj0*x1691))+(((-1.0)*r02*x1689))+(((-1.0)*x1692*x1694))+((r12*x1688))+((r10*x1693))+((sj0*x1690))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj0*x1691))+(((-1.0)*r12*x1689))+((cj0*x1690))+(((-1.0)*x1692*x1693))+(((-1.0)*r10*x1694))+(((-1.0)*r02*x1688))), ((((-1.0)*cj0*x1691))+(((-1.0)*r02*x1689))+(((-1.0)*x1692*x1694))+((r12*x1688))+((r10*x1693))+((sj0*x1690))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1695=((0.5)*cj0);
IkReal x1696=((0.5)*sj0);
IkReal x1697=((0.866025403784439)*cj0*cj5);
IkReal x1698=((0.866025403784439)*cj0*sj5);
IkReal x1699=((0.866025403784439)*cj5*sj0);
IkReal x1700=((0.866025403784439)*sj0*sj5);
evalcond[0]=(((r11*x1698))+(((-1.0)*r01*x1700))+(((-1.0)*r10*x1697))+((r02*x1696))+((r00*x1699))+(((0.866025403784439)*(IKcos(j3))))+(((-1.0)*r12*x1695)));
evalcond[1]=((((-1.0)*r12*x1696))+((r01*x1698))+(((-1.0)*(0.866025403784439)*(IKsin(j3))))+(((-1.0)*r02*x1695))+(((-1.0)*r10*x1699))+((r11*x1700))+(((-1.0)*r00*x1697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1701=(cj0*r02);
IkReal x1702=(r12*sj0);
IkReal x1703=(cj0*cj5*r00);
IkReal x1704=(cj0*r01*sj5);
IkReal x1705=(cj5*r10*sj0);
IkReal x1706=(r11*sj0*sj5);
IkReal x1707=(cj5*sj3);
IkReal x1708=(sj3*sj5);
j4eval[0]=((((-1.73205080756888)*x1704))+x1701+x1702+(((-1.73205080756888)*x1706))+(((1.73205080756888)*x1705))+(((1.73205080756888)*x1703)));
j4eval[1]=((((0.5)*(IKabs(((((-1.0)*(1.73205080756888)*r22*sj3))+((r20*x1707))+(((-1.0)*r21*x1708)))))))+(IKabs((((r21*x1707))+((r20*x1708))))));
j4eval[2]=IKsign(((((-0.866025403784439)*x1704))+(((0.866025403784439)*x1705))+(((0.5)*x1702))+(((0.5)*x1701))+(((-0.866025403784439)*x1706))+(((0.866025403784439)*x1703))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1709=r20*r20;
IkReal x1710=r21*r21;
IkReal x1711=r22*r22;
IkReal x1712=(cj5*r20*r22);
IkReal x1713=(r21*r22*sj5);
IkReal x1714=(cj5*r20*r21*sj5);
IkReal x1715=cj5*cj5;
IkReal x1716=(x1709*x1715);
IkReal x1717=(x1710*x1715);
j4eval[0]=((((-4.0)*x1709))+(((3.46410161513775)*x1712))+(((-1.0)*x1710))+(((-3.0)*x1711))+(((-3.46410161513775)*x1713))+(((-6.0)*x1714))+(((-3.0)*x1717))+(((3.0)*x1716)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-0.5)*x1710))+(((-1.73205080756888)*x1713))+(((1.73205080756888)*x1712))+(((-3.0)*x1714))+(((-1.5)*x1717))+(((1.5)*x1716))+(((-1.5)*x1711))+(((-2.0)*x1709))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1718=(r01*r21*sj0);
IkReal x1719=(cj0*r10*r20);
IkReal x1720=(cj0*r11*r21);
IkReal x1721=(cj0*r12*r22);
IkReal x1722=(r00*r20*sj0);
IkReal x1723=(r02*r22*sj0);
IkReal x1724=((1.73205080756888)*r22);
IkReal x1725=(cj0*cj5*r10);
IkReal x1726=(cj0*cj5*r12*r20);
IkReal x1727=(cj0*r11*sj5);
IkReal x1728=(cj0*r12*r21*sj5);
IkReal x1729=(cj5*r00*sj0);
IkReal x1730=(cj5*r02*r20*sj0);
IkReal x1731=(r01*sj0*sj5);
IkReal x1732=(r02*r21*sj0*sj5);
IkReal x1733=(cj0*cj5*r10*r21*sj5);
IkReal x1734=(cj0*cj5*r11*r20*sj5);
IkReal x1735=(cj5*r00*r21*sj0*sj5);
IkReal x1736=(cj5*r01*r20*sj0*sj5);
IkReal x1737=cj5*cj5;
IkReal x1738=(cj0*r10*r20*x1737);
IkReal x1739=(cj0*r11*r21*x1737);
IkReal x1740=(r00*r20*sj0*x1737);
IkReal x1741=(r01*r21*sj0*x1737);
IkReal x1742=((0.866025403784439)*r22);
IkReal x1743=(cj3*r21);
IkReal x1744=(cj3*r20);
j4eval[0]=((((4.0)*x1722))+(((3.0)*x1738))+(((-3.0)*x1734))+(((-1.73205080756888)*x1730))+(((3.0)*x1741))+(((1.73205080756888)*x1726))+x1718+(((-4.0)*x1719))+(((3.0)*x1723))+(((-1.0)*x1724*x1727))+(((-3.0)*x1721))+(((-1.73205080756888)*x1728))+(((1.73205080756888)*x1732))+((x1724*x1725))+(((-1.0)*x1724*x1729))+(((-1.0)*x1720))+(((-3.0)*x1740))+((x1724*x1731))+(((-3.0)*x1733))+(((3.0)*x1736))+(((3.0)*x1735))+(((-3.0)*x1739)));
j4eval[1]=IKsign(((((1.5)*x1741))+(((-2.0)*x1719))+(((-1.5)*x1721))+(((-0.866025403784439)*x1730))+((x1731*x1742))+(((-1.5)*x1740))+(((1.5)*x1738))+(((0.866025403784439)*x1732))+(((-1.5)*x1739))+(((-1.5)*x1733))+(((0.5)*x1718))+(((-1.5)*x1734))+(((1.5)*x1736))+(((1.5)*x1735))+(((2.0)*x1722))+((x1725*x1742))+(((-1.0)*x1729*x1742))+(((-0.5)*x1720))+(((0.866025403784439)*x1726))+(((-0.866025403784439)*x1728))+(((1.5)*x1723))+(((-1.0)*x1727*x1742))));
j4eval[2]=((((0.5)*(IKabs(((((-1.0)*cj5*x1744))+((sj5*x1743))+((cj3*x1724)))))))+(IKabs((((cj5*x1743))+((sj5*x1744))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1745=(cj0*r02);
IkReal x1746=(r12*sj0);
IkReal x1747=(cj0*cj5*r00);
IkReal x1748=(cj0*r01*sj5);
IkReal x1749=(cj5*r10*sj0);
IkReal x1750=(r11*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x1747))+(((1.73205080756888)*x1749))+(((-1.73205080756888)*x1748))+x1745+x1746+(((-1.73205080756888)*x1750)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((-0.866025403784439)*x1750))+(((0.866025403784439)*x1749))+(((-0.866025403784439)*x1748))+(((0.5)*x1745))+(((0.866025403784439)*x1747))+(((0.5)*x1746))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1751=r20*r20;
IkReal x1752=r21*r21;
IkReal x1753=r22*r22;
IkReal x1754=(cj5*r20*r22);
IkReal x1755=(r21*r22*sj5);
IkReal x1756=(cj5*r20*r21*sj5);
IkReal x1757=cj5*cj5;
IkReal x1758=(x1751*x1757);
IkReal x1759=(x1752*x1757);
j4eval[0]=((((3.0)*x1758))+(((-3.0)*x1753))+(((-4.0)*x1751))+(((-3.46410161513775)*x1755))+(((-1.0)*x1752))+(((-3.0)*x1759))+(((3.46410161513775)*x1754))+(((-6.0)*x1756)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((1.73205080756888)*x1754))+(((-1.5)*x1759))+(((-3.0)*x1756))+(((-1.73205080756888)*x1755))+(((-0.5)*x1752))+(((-2.0)*x1751))+(((-1.5)*x1753))+(((1.5)*x1758))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1760=((1.73205080756888)*cj0);
IkReal x1761=((1.73205080756888)*sj0);
IkReal x1762=(((r11*sj5*x1760))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((cj5*r00*x1761))+(((-1.0)*cj5*r10*x1760))+(((-1.0)*r01*sj5*x1761)));
j4eval[0]=x1762;
j4eval[1]=IKsign(x1762);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1763=((1.73205080756888)*cj0*cj5);
IkReal x1764=((1.73205080756888)*cj0*sj5);
IkReal x1765=((1.73205080756888)*cj5*sj0);
IkReal x1766=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x1767 = IKatan2WithCheck(IkReal(((((-1.0)*(0.5)*cj5*r20))+(((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((0.866025403784439)*r22))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5))+(((0.5)*r21*sj5)))),IkReal((((r01*x1763))+((r10*x1766))+(((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21))+((r11*x1765))+((r00*x1764)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1767.valid){
continue;
}
CheckValue<IkReal> x1768=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1763))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*x1766))+((r11*x1764))+((r00*x1765)))),-1);
if(!x1768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1767.value)+(((1.5707963267949)*(x1768.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1769=IKsin(j4);
IkReal x1770=((0.866025403784439)*r22);
IkReal x1771=((0.5)*r20);
IkReal x1772=(cj5*x1769);
IkReal x1773=IKcos(j4);
IkReal x1774=((1.0)*cj5*x1773);
IkReal x1775=(r20*sj5);
IkReal x1776=((0.5)*r21*sj5);
IkReal x1777=((0.866025403784439)*cj0*r02);
IkReal x1778=((0.866025403784439)*r12*sj0);
IkReal x1779=(cj0*cj5*x1769);
IkReal x1780=(cj0*sj5*x1769);
IkReal x1781=(cj5*sj0*x1769);
IkReal x1782=(sj0*sj5*x1769);
IkReal x1783=((0.5)*r00);
IkReal x1784=(cj0*cj5*x1773);
IkReal x1785=((0.5)*r01);
IkReal x1786=(cj0*sj5*x1773);
IkReal x1787=((0.5)*r10);
IkReal x1788=(cj5*sj0*x1773);
IkReal x1789=((0.5)*r11);
IkReal x1790=(sj0*sj5*x1773);
IkReal x1791=((0.866025403784439)*cj0*r12);
IkReal x1792=((0.866025403784439)*r02*sj0);
IkReal x1793=(r00*sj0*sj5);
IkReal x1794=((1.0)*cj0*cj5*x1773);
IkReal x1795=((1.0)*cj0*sj5*x1773);
evalcond[0]=((((-1.0)*x1771*x1772))+((x1769*x1776))+((x1769*x1770))+(((-1.0)*r21*x1774))+(((-1.0)*x1773*x1775)));
evalcond[1]=((-0.866025403784439)+((r21*x1772))+((x1769*x1775))+((x1770*x1773))+(((-1.0)*cj5*x1771*x1773))+((x1773*x1776)));
evalcond[2]=((-0.5)+((x1773*x1777))+((x1773*x1778))+((r11*x1781))+(((-1.0)*x1783*x1784))+((r00*x1780))+((r01*x1779))+((x1789*x1790))+((x1785*x1786))+((r10*x1782))+(((-1.0)*x1787*x1788)));
evalcond[3]=((((-1.0)*x1773*x1792))+(((-1.0)*x1769*x1793))+((x1786*x1789))+(((-1.0)*x1784*x1787))+((x1773*x1791))+((r11*x1779))+(((-1.0)*r01*x1781))+((x1783*x1788))+((r10*x1780))+(((-1.0)*x1785*x1790)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x1795))+((x1781*x1783))+((x1773*x1793))+(((-1.0)*x1769*x1792))+(((-1.0)*r11*x1794))+(((-1.0)*x1782*x1785))+((x1769*x1791))+((x1780*x1789))+(((-1.0)*x1779*x1787))+((r01*x1788)));
evalcond[5]=((((-1.0)*x1779*x1783))+(((-1.0)*r10*sj0*sj5*x1773))+((x1769*x1777))+((x1769*x1778))+(((-1.0)*r11*sj0*x1774))+((x1780*x1785))+((x1782*x1789))+(((-1.0)*r00*x1795))+(((-1.0)*x1781*x1787))+(((-1.0)*r01*x1794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1796=((1.73205080756888)*r21);
IkReal x1797=(cj5*r20);
IkReal x1798=(r21*sj5);
IkReal x1799=r20*r20;
IkReal x1800=r21*r21;
IkReal x1801=((1.5)*(cj5*cj5));
CheckValue<IkReal> x1802=IKPowWithIntegerCheck(IKsign(((((-3.0)*cj5*r20*x1798))+((x1799*x1801))+(((-0.5)*x1800))+(((-2.0)*x1799))+(((1.73205080756888)*r22*x1797))+(((-1.0)*r22*sj5*x1796))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*x1800*x1801)))),-1);
if(!x1802.valid){
continue;
}
CheckValue<IkReal> x1803 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x1796)))),IkReal(((((-0.866025403784439)*x1798))+(((-1.0)*(1.5)*r22))+(((0.866025403784439)*x1797)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1802.value)))+(x1803.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1804=IKsin(j4);
IkReal x1805=((0.866025403784439)*r22);
IkReal x1806=((0.5)*r20);
IkReal x1807=(cj5*x1804);
IkReal x1808=IKcos(j4);
IkReal x1809=((1.0)*cj5*x1808);
IkReal x1810=(r20*sj5);
IkReal x1811=((0.5)*r21*sj5);
IkReal x1812=((0.866025403784439)*cj0*r02);
IkReal x1813=((0.866025403784439)*r12*sj0);
IkReal x1814=(cj0*cj5*x1804);
IkReal x1815=(cj0*sj5*x1804);
IkReal x1816=(cj5*sj0*x1804);
IkReal x1817=(sj0*sj5*x1804);
IkReal x1818=((0.5)*r00);
IkReal x1819=(cj0*cj5*x1808);
IkReal x1820=((0.5)*r01);
IkReal x1821=(cj0*sj5*x1808);
IkReal x1822=((0.5)*r10);
IkReal x1823=(cj5*sj0*x1808);
IkReal x1824=((0.5)*r11);
IkReal x1825=(sj0*sj5*x1808);
IkReal x1826=((0.866025403784439)*cj0*r12);
IkReal x1827=((0.866025403784439)*r02*sj0);
IkReal x1828=(r00*sj0*sj5);
IkReal x1829=((1.0)*cj0*cj5*x1808);
IkReal x1830=((1.0)*cj0*sj5*x1808);
evalcond[0]=((((-1.0)*x1808*x1810))+(((-1.0)*x1806*x1807))+((x1804*x1811))+(((-1.0)*r21*x1809))+((x1804*x1805)));
evalcond[1]=((-0.866025403784439)+((x1804*x1810))+((r21*x1807))+(((-1.0)*cj5*x1806*x1808))+((x1808*x1811))+((x1805*x1808)));
evalcond[2]=((-0.5)+((r10*x1817))+(((-1.0)*x1822*x1823))+((x1808*x1813))+((r01*x1814))+((x1824*x1825))+((r11*x1816))+((x1808*x1812))+((x1820*x1821))+((r00*x1815))+(((-1.0)*x1818*x1819)));
evalcond[3]=(((x1808*x1826))+(((-1.0)*r01*x1816))+(((-1.0)*x1808*x1827))+((x1818*x1823))+(((-1.0)*x1820*x1825))+((r11*x1814))+((x1821*x1824))+(((-1.0)*x1804*x1828))+((r10*x1815))+(((-1.0)*x1819*x1822)));
evalcond[4]=((-1.0)+(((-1.0)*x1817*x1820))+((x1804*x1826))+((x1816*x1818))+(((-1.0)*x1804*x1827))+(((-1.0)*x1814*x1822))+((x1815*x1824))+((r01*x1823))+((x1808*x1828))+(((-1.0)*r10*x1830))+(((-1.0)*r11*x1829)));
evalcond[5]=(((x1804*x1813))+(((-1.0)*r00*x1830))+(((-1.0)*x1816*x1822))+(((-1.0)*r11*sj0*x1809))+((x1804*x1812))+(((-1.0)*r01*x1829))+((x1815*x1820))+((x1817*x1824))+(((-1.0)*x1814*x1818))+(((-1.0)*r10*sj0*sj5*x1808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1831=((0.866025403784439)*cj0);
IkReal x1832=((0.866025403784439)*sj0);
CheckValue<IkReal> x1833 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1833.valid){
continue;
}
CheckValue<IkReal> x1834=IKPowWithIntegerCheck(IKsign((((cj5*r10*x1832))+(((-1.0)*r11*sj5*x1832))+(((0.5)*r12*sj0))+((cj5*r00*x1831))+(((-1.0)*r01*sj5*x1831))+(((0.5)*cj0*r02)))),-1);
if(!x1834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1833.value)+(((1.5707963267949)*(x1834.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1835=IKsin(j4);
IkReal x1836=((0.866025403784439)*r22);
IkReal x1837=((0.5)*r20);
IkReal x1838=(cj5*x1835);
IkReal x1839=IKcos(j4);
IkReal x1840=((1.0)*cj5*x1839);
IkReal x1841=(r20*sj5);
IkReal x1842=((0.5)*r21*sj5);
IkReal x1843=((0.866025403784439)*cj0*r02);
IkReal x1844=((0.866025403784439)*r12*sj0);
IkReal x1845=(cj0*cj5*x1835);
IkReal x1846=(cj0*sj5*x1835);
IkReal x1847=(cj5*sj0*x1835);
IkReal x1848=(sj0*sj5*x1835);
IkReal x1849=((0.5)*r00);
IkReal x1850=(cj0*cj5*x1839);
IkReal x1851=((0.5)*r01);
IkReal x1852=(cj0*sj5*x1839);
IkReal x1853=((0.5)*r10);
IkReal x1854=(cj5*sj0*x1839);
IkReal x1855=((0.5)*r11);
IkReal x1856=(sj0*sj5*x1839);
IkReal x1857=((0.866025403784439)*cj0*r12);
IkReal x1858=((0.866025403784439)*r02*sj0);
IkReal x1859=(r00*sj0*sj5);
IkReal x1860=((1.0)*cj0*cj5*x1839);
IkReal x1861=((1.0)*cj0*sj5*x1839);
evalcond[0]=(((x1835*x1842))+(((-1.0)*x1839*x1841))+(((-1.0)*r21*x1840))+(((-1.0)*x1837*x1838))+((x1835*x1836)));
evalcond[1]=((-0.866025403784439)+((r21*x1838))+((x1836*x1839))+((x1835*x1841))+(((-1.0)*cj5*x1837*x1839))+((x1839*x1842)));
evalcond[2]=((-0.5)+((x1839*x1843))+((r01*x1845))+((r10*x1848))+(((-1.0)*x1849*x1850))+((r11*x1847))+(((-1.0)*x1853*x1854))+((r00*x1846))+((x1855*x1856))+((x1851*x1852))+((x1839*x1844)));
evalcond[3]=((((-1.0)*r01*x1847))+(((-1.0)*x1839*x1858))+((r11*x1845))+(((-1.0)*x1851*x1856))+((x1852*x1855))+(((-1.0)*x1850*x1853))+((x1849*x1854))+((r10*x1846))+((x1839*x1857))+(((-1.0)*x1835*x1859)));
evalcond[4]=((-1.0)+(((-1.0)*x1835*x1858))+((x1846*x1855))+((x1847*x1849))+(((-1.0)*x1845*x1853))+((x1839*x1859))+(((-1.0)*x1848*x1851))+((r01*x1854))+(((-1.0)*r11*x1860))+(((-1.0)*r10*x1861))+((x1835*x1857)));
evalcond[5]=(((x1835*x1843))+(((-1.0)*r11*sj0*x1840))+(((-1.0)*r01*x1860))+(((-1.0)*x1847*x1853))+((x1846*x1851))+((x1848*x1855))+((x1835*x1844))+(((-1.0)*r10*sj0*sj5*x1839))+(((-1.0)*r00*x1861))+(((-1.0)*x1845*x1849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1862=(cj0*r02);
IkReal x1863=(r12*sj0);
IkReal x1864=(cj0*cj5*r00);
IkReal x1865=(cj0*r01*sj5);
IkReal x1866=(cj5*r10*sj0);
IkReal x1867=(r11*sj0*sj5);
j4eval[0]=(x1862+x1863+(((-1.73205080756888)*x1865))+(((1.73205080756888)*x1866))+(((-1.73205080756888)*x1867))+(((1.73205080756888)*x1864)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.5)*x1862))+(((0.5)*x1863))+(((0.866025403784439)*x1866))+(((-0.866025403784439)*x1865))+(((0.866025403784439)*x1864))+(((-0.866025403784439)*x1867))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1868=r20*r20;
IkReal x1869=r21*r21;
IkReal x1870=r22*r22;
IkReal x1871=(cj5*r20*r22);
IkReal x1872=(r21*r22*sj5);
IkReal x1873=(cj5*r20*r21*sj5);
IkReal x1874=cj5*cj5;
IkReal x1875=(x1868*x1874);
IkReal x1876=(x1869*x1874);
j4eval[0]=((((3.46410161513775)*x1871))+(((-3.0)*x1870))+(((-6.0)*x1873))+(((-4.0)*x1868))+(((-3.0)*x1876))+(((-1.0)*x1869))+(((3.0)*x1875))+(((-3.46410161513775)*x1872)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.5)*x1870))+(((-1.73205080756888)*x1872))+(((-1.5)*x1876))+(((-2.0)*x1868))+(((1.73205080756888)*x1871))+(((-3.0)*x1873))+(((-0.5)*x1869))+(((1.5)*x1875))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1877=((1.73205080756888)*cj0);
IkReal x1878=((1.73205080756888)*sj0);
IkReal x1879=(((cj5*r00*x1878))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*sj5*x1877))+(((-1.0)*r01*sj5*x1878))+(((-1.0)*cj5*r10*x1877)));
j4eval[0]=x1879;
j4eval[1]=IKsign(x1879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1880=((1.73205080756888)*cj0*cj5);
IkReal x1881=((1.73205080756888)*cj0*sj5);
IkReal x1882=((1.73205080756888)*cj5*sj0);
IkReal x1883=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x1884=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1883))+((r00*x1882))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*x1881))+(((-1.0)*r10*x1880)))),-1);
if(!x1884.valid){
continue;
}
CheckValue<IkReal> x1885 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r20*sj5))+((cj5*r21))+((r01*x1880))+((r00*x1881))+((r10*x1883))+((r11*x1882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1884.value)))+(x1885.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1886=IKsin(j4);
IkReal x1887=((0.866025403784439)*r22);
IkReal x1888=((0.5)*r20);
IkReal x1889=(cj5*x1886);
IkReal x1890=IKcos(j4);
IkReal x1891=((1.0)*cj5*x1890);
IkReal x1892=(r20*sj5);
IkReal x1893=((0.5)*r21*sj5);
IkReal x1894=((0.866025403784439)*cj0*r02);
IkReal x1895=((0.866025403784439)*r12*sj0);
IkReal x1896=(cj0*cj5*x1886);
IkReal x1897=(cj0*sj5*x1886);
IkReal x1898=(cj5*sj0*x1886);
IkReal x1899=(sj0*sj5*x1886);
IkReal x1900=((0.5)*r00);
IkReal x1901=(cj0*cj5*x1890);
IkReal x1902=((0.5)*r01);
IkReal x1903=(cj0*sj5*x1890);
IkReal x1904=((0.5)*r10);
IkReal x1905=(cj5*sj0*x1890);
IkReal x1906=((0.5)*r11);
IkReal x1907=(sj0*sj5*x1890);
IkReal x1908=((0.866025403784439)*cj0*r12);
IkReal x1909=((0.866025403784439)*r02*sj0);
IkReal x1910=(r00*sj0*sj5);
IkReal x1911=((1.0)*cj0*cj5*x1890);
IkReal x1912=((1.0)*cj0*sj5*x1890);
evalcond[0]=(((x1886*x1887))+(((-1.0)*x1890*x1892))+(((-1.0)*x1888*x1889))+((x1886*x1893))+(((-1.0)*r21*x1891)));
evalcond[1]=((-0.866025403784439)+((x1890*x1893))+((r21*x1889))+((x1886*x1892))+((x1887*x1890))+(((-1.0)*cj5*x1888*x1890)));
evalcond[2]=((0.5)+((r01*x1896))+((r00*x1897))+((x1890*x1895))+((x1890*x1894))+((r11*x1898))+((x1906*x1907))+((r10*x1899))+((x1902*x1903))+(((-1.0)*x1900*x1901))+(((-1.0)*x1904*x1905)));
evalcond[3]=(((r11*x1896))+(((-1.0)*x1901*x1904))+(((-1.0)*x1902*x1907))+(((-1.0)*x1890*x1909))+(((-1.0)*x1886*x1910))+((x1903*x1906))+((x1900*x1905))+(((-1.0)*r01*x1898))+((r10*x1897))+((x1890*x1908)));
evalcond[4]=((1.0)+((r01*x1905))+(((-1.0)*x1896*x1904))+((x1897*x1906))+((x1890*x1910))+(((-1.0)*r10*x1912))+(((-1.0)*x1886*x1909))+((x1898*x1900))+(((-1.0)*x1899*x1902))+(((-1.0)*r11*x1911))+((x1886*x1908)));
evalcond[5]=((((-1.0)*r11*sj0*x1891))+(((-1.0)*r00*x1912))+(((-1.0)*x1896*x1900))+(((-1.0)*r01*x1911))+((x1886*x1894))+((x1897*x1902))+(((-1.0)*x1898*x1904))+((x1899*x1906))+(((-1.0)*r10*sj0*sj5*x1890))+((x1886*x1895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1913=((1.73205080756888)*r21);
IkReal x1914=(cj5*r20);
IkReal x1915=(r21*sj5);
IkReal x1916=r20*r20;
IkReal x1917=r21*r21;
IkReal x1918=((1.5)*(cj5*cj5));
CheckValue<IkReal> x1919 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x1913))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((0.866025403784439)*x1914))+(((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x1915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1919.valid){
continue;
}
CheckValue<IkReal> x1920=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1917*x1918))+(((-0.5)*x1917))+(((-1.0)*r22*sj5*x1913))+(((-3.0)*cj5*r20*x1915))+(((-1.0)*(1.5)*(r22*r22)))+(((-2.0)*x1916))+(((1.73205080756888)*r22*x1914))+((x1916*x1918)))),-1);
if(!x1920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1919.value)+(((1.5707963267949)*(x1920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1921=IKsin(j4);
IkReal x1922=((0.866025403784439)*r22);
IkReal x1923=((0.5)*r20);
IkReal x1924=(cj5*x1921);
IkReal x1925=IKcos(j4);
IkReal x1926=((1.0)*cj5*x1925);
IkReal x1927=(r20*sj5);
IkReal x1928=((0.5)*r21*sj5);
IkReal x1929=((0.866025403784439)*cj0*r02);
IkReal x1930=((0.866025403784439)*r12*sj0);
IkReal x1931=(cj0*cj5*x1921);
IkReal x1932=(cj0*sj5*x1921);
IkReal x1933=(cj5*sj0*x1921);
IkReal x1934=(sj0*sj5*x1921);
IkReal x1935=((0.5)*r00);
IkReal x1936=(cj0*cj5*x1925);
IkReal x1937=((0.5)*r01);
IkReal x1938=(cj0*sj5*x1925);
IkReal x1939=((0.5)*r10);
IkReal x1940=(cj5*sj0*x1925);
IkReal x1941=((0.5)*r11);
IkReal x1942=(sj0*sj5*x1925);
IkReal x1943=((0.866025403784439)*cj0*r12);
IkReal x1944=((0.866025403784439)*r02*sj0);
IkReal x1945=(r00*sj0*sj5);
IkReal x1946=((1.0)*cj0*cj5*x1925);
IkReal x1947=((1.0)*cj0*sj5*x1925);
evalcond[0]=((((-1.0)*x1923*x1924))+(((-1.0)*x1925*x1927))+((x1921*x1922))+(((-1.0)*r21*x1926))+((x1921*x1928)));
evalcond[1]=((-0.866025403784439)+((r21*x1924))+((x1925*x1928))+((x1921*x1927))+(((-1.0)*cj5*x1923*x1925))+((x1922*x1925)));
evalcond[2]=((0.5)+((r00*x1932))+(((-1.0)*x1935*x1936))+((x1925*x1930))+((x1925*x1929))+((r10*x1934))+(((-1.0)*x1939*x1940))+((r11*x1933))+((x1937*x1938))+((x1941*x1942))+((r01*x1931)));
evalcond[3]=((((-1.0)*x1936*x1939))+(((-1.0)*r01*x1933))+((x1938*x1941))+((x1935*x1940))+((x1925*x1943))+(((-1.0)*x1925*x1944))+(((-1.0)*x1921*x1945))+(((-1.0)*x1937*x1942))+((r11*x1931))+((r10*x1932)));
evalcond[4]=((1.0)+((x1932*x1941))+(((-1.0)*r10*x1947))+((r01*x1940))+(((-1.0)*r11*x1946))+((x1933*x1935))+(((-1.0)*x1934*x1937))+((x1925*x1945))+((x1921*x1943))+(((-1.0)*x1931*x1939))+(((-1.0)*x1921*x1944)));
evalcond[5]=((((-1.0)*x1931*x1935))+(((-1.0)*r00*x1947))+(((-1.0)*x1933*x1939))+((x1934*x1941))+(((-1.0)*r11*sj0*x1926))+((x1921*x1930))+(((-1.0)*r01*x1946))+(((-1.0)*r10*sj0*sj5*x1925))+((x1932*x1937))+((x1921*x1929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1948=((0.866025403784439)*cj0);
IkReal x1949=((0.866025403784439)*sj0);
CheckValue<IkReal> x1950=IKPowWithIntegerCheck(IKsign((((cj5*r10*x1949))+(((0.5)*r12*sj0))+(((-1.0)*r01*sj5*x1948))+((cj5*r00*x1948))+(((0.5)*cj0*r02))+(((-1.0)*r11*sj5*x1949)))),-1);
if(!x1950.valid){
continue;
}
CheckValue<IkReal> x1951 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1950.value)))+(x1951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1952=IKsin(j4);
IkReal x1953=((0.866025403784439)*r22);
IkReal x1954=((0.5)*r20);
IkReal x1955=(cj5*x1952);
IkReal x1956=IKcos(j4);
IkReal x1957=((1.0)*cj5*x1956);
IkReal x1958=(r20*sj5);
IkReal x1959=((0.5)*r21*sj5);
IkReal x1960=((0.866025403784439)*cj0*r02);
IkReal x1961=((0.866025403784439)*r12*sj0);
IkReal x1962=(cj0*cj5*x1952);
IkReal x1963=(cj0*sj5*x1952);
IkReal x1964=(cj5*sj0*x1952);
IkReal x1965=(sj0*sj5*x1952);
IkReal x1966=((0.5)*r00);
IkReal x1967=(cj0*cj5*x1956);
IkReal x1968=((0.5)*r01);
IkReal x1969=(cj0*sj5*x1956);
IkReal x1970=((0.5)*r10);
IkReal x1971=(cj5*sj0*x1956);
IkReal x1972=((0.5)*r11);
IkReal x1973=(sj0*sj5*x1956);
IkReal x1974=((0.866025403784439)*cj0*r12);
IkReal x1975=((0.866025403784439)*r02*sj0);
IkReal x1976=(r00*sj0*sj5);
IkReal x1977=((1.0)*cj0*cj5*x1956);
IkReal x1978=((1.0)*cj0*sj5*x1956);
evalcond[0]=(((x1952*x1953))+((x1952*x1959))+(((-1.0)*x1954*x1955))+(((-1.0)*x1956*x1958))+(((-1.0)*r21*x1957)));
evalcond[1]=((-0.866025403784439)+((x1953*x1956))+(((-1.0)*cj5*x1954*x1956))+((x1956*x1959))+((r21*x1955))+((x1952*x1958)));
evalcond[2]=((0.5)+(((-1.0)*x1970*x1971))+((x1956*x1960))+((r01*x1962))+((r00*x1963))+((x1968*x1969))+((r10*x1965))+((x1972*x1973))+((r11*x1964))+(((-1.0)*x1966*x1967))+((x1956*x1961)));
evalcond[3]=((((-1.0)*x1967*x1970))+((x1966*x1971))+((x1956*x1974))+((r11*x1962))+((x1969*x1972))+(((-1.0)*x1952*x1976))+(((-1.0)*x1968*x1973))+((r10*x1963))+(((-1.0)*x1956*x1975))+(((-1.0)*r01*x1964)));
evalcond[4]=((1.0)+((r01*x1971))+(((-1.0)*r11*x1977))+(((-1.0)*x1962*x1970))+(((-1.0)*r10*x1978))+((x1956*x1976))+((x1952*x1974))+((x1963*x1972))+((x1964*x1966))+(((-1.0)*x1965*x1968))+(((-1.0)*x1952*x1975)));
evalcond[5]=(((x1965*x1972))+(((-1.0)*r00*x1978))+(((-1.0)*x1962*x1966))+((x1952*x1960))+((x1952*x1961))+(((-1.0)*r10*sj0*sj5*x1956))+(((-1.0)*r01*x1977))+((x1963*x1968))+(((-1.0)*x1964*x1970))+(((-1.0)*r11*sj0*x1957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1979=(r02*sj0);
IkReal x1980=(cj0*r12);
IkReal x1981=(cj0*cj5*r10);
IkReal x1982=(cj0*r11*sj5);
IkReal x1983=(cj5*r00*sj0);
IkReal x1984=(r01*sj0*sj5);
j4eval[0]=((((-1.73205080756888)*x1981))+(((-1.0)*x1980))+(((1.73205080756888)*x1982))+(((-1.73205080756888)*x1984))+(((1.73205080756888)*x1983))+x1979);
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.866025403784439)*x1983))+(((-0.866025403784439)*x1981))+(((0.866025403784439)*x1982))+(((0.5)*x1979))+(((-0.866025403784439)*x1984))+(((-0.5)*x1980))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1985=r20*r20;
IkReal x1986=r21*r21;
IkReal x1987=r22*r22;
IkReal x1988=(cj5*r20*r22);
IkReal x1989=(r21*r22*sj5);
IkReal x1990=(cj5*r20*r21*sj5);
IkReal x1991=cj5*cj5;
IkReal x1992=(x1985*x1991);
IkReal x1993=(x1986*x1991);
j4eval[0]=((((-4.0)*x1985))+(((-3.46410161513775)*x1989))+(((-6.0)*x1990))+(((-3.0)*x1993))+(((3.0)*x1992))+(((-3.0)*x1987))+(((3.46410161513775)*x1988))+(((-1.0)*x1986)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.73205080756888)*x1989))+(((1.73205080756888)*x1988))+(((-2.0)*x1985))+(((-3.0)*x1990))+(((-1.5)*x1993))+(((-0.5)*x1986))+(((1.5)*x1992))+(((-1.5)*x1987))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1994=((1.73205080756888)*cj0);
IkReal x1995=((1.73205080756888)*sj0);
IkReal x1996=(((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*cj5*r10*x1994))+((cj5*r00*x1995))+((r11*sj5*x1994))+(((-1.0)*r01*sj5*x1995)));
j4eval[0]=x1996;
j4eval[1]=IKsign(x1996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1997=((1.73205080756888)*cj0*cj5);
IkReal x1998=((1.73205080756888)*cj0*sj5);
IkReal x1999=((1.73205080756888)*cj5*sj0);
IkReal x2000=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x2001=IKPowWithIntegerCheck(IKsign((((r00*x1999))+(((-1.0)*r01*x2000))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r10*x1997))+((r11*x1998)))),-1);
if(!x2001.valid){
continue;
}
CheckValue<IkReal> x2002 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r00*x1998))+((r01*x1997))+((r10*x2000))+((r11*x1999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2001.value)))+(x2002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2003=IKsin(j4);
IkReal x2004=((0.866025403784439)*r22);
IkReal x2005=((0.5)*r20);
IkReal x2006=(cj5*x2003);
IkReal x2007=IKcos(j4);
IkReal x2008=((1.0)*cj5*x2007);
IkReal x2009=(r20*sj5);
IkReal x2010=((0.5)*r21*sj5);
IkReal x2011=((0.866025403784439)*cj0*r02);
IkReal x2012=((0.866025403784439)*r12*sj0);
IkReal x2013=(cj0*cj5*x2003);
IkReal x2014=(cj0*sj5*x2003);
IkReal x2015=(cj5*sj0*x2003);
IkReal x2016=(sj0*sj5*x2003);
IkReal x2017=((0.5)*r00);
IkReal x2018=(cj0*cj5*x2007);
IkReal x2019=((0.5)*r01);
IkReal x2020=(cj0*sj5*x2007);
IkReal x2021=((0.5)*r10);
IkReal x2022=(cj5*sj0*x2007);
IkReal x2023=((0.5)*r11);
IkReal x2024=(sj0*sj5*x2007);
IkReal x2025=((0.866025403784439)*cj0*r12);
IkReal x2026=((0.866025403784439)*r02*sj0);
IkReal x2027=(r00*sj0*sj5);
IkReal x2028=((1.0)*cj0*cj5*x2007);
IkReal x2029=((1.0)*cj0*sj5*x2007);
evalcond[0]=((((-1.0)*x2005*x2006))+((x2003*x2004))+(((-1.0)*r21*x2008))+((x2003*x2010))+(((-1.0)*x2007*x2009)));
evalcond[1]=((-0.866025403784439)+((x2003*x2009))+(((-1.0)*cj5*x2005*x2007))+((x2004*x2007))+((r21*x2006))+((x2007*x2010)));
evalcond[2]=((((-1.0)*x2017*x2018))+((x2007*x2012))+((r01*x2013))+(((-1.0)*x2021*x2022))+((x2023*x2024))+((x2007*x2011))+((x2019*x2020))+((r10*x2016))+((r00*x2014))+((r11*x2015)));
evalcond[3]=((((-1.0)*x2016*x2019))+((x2014*x2023))+((x2015*x2017))+(((-1.0)*x2003*x2026))+(((-1.0)*r10*x2029))+(((-1.0)*r11*x2028))+((x2003*x2025))+((r01*x2022))+((x2007*x2027))+(((-1.0)*x2013*x2021)));
evalcond[4]=((0.5)+((r11*x2013))+(((-1.0)*x2019*x2024))+(((-1.0)*x2003*x2027))+((x2020*x2023))+(((-1.0)*r01*x2015))+(((-1.0)*x2007*x2026))+((x2007*x2025))+((x2017*x2022))+((r10*x2014))+(((-1.0)*x2018*x2021)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x2029))+((x2003*x2012))+((x2016*x2023))+(((-1.0)*x2015*x2021))+((x2003*x2011))+(((-1.0)*r01*x2028))+(((-1.0)*r10*sj0*sj5*x2007))+((x2014*x2019))+(((-1.0)*r11*sj0*x2008))+(((-1.0)*x2013*x2017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2030=((1.73205080756888)*r21);
IkReal x2031=(cj5*r20);
IkReal x2032=(r21*sj5);
IkReal x2033=r20*r20;
IkReal x2034=r21*r21;
IkReal x2035=((1.5)*(cj5*cj5));
CheckValue<IkReal> x2036 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x2030))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*x2031))+(((-0.866025403784439)*x2032)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2036.valid){
continue;
}
CheckValue<IkReal> x2037=IKPowWithIntegerCheck(IKsign(((((1.73205080756888)*r22*x2031))+(((-1.0)*x2034*x2035))+((x2033*x2035))+(((-1.0)*r22*sj5*x2030))+(((-2.0)*x2033))+(((-1.0)*(1.5)*(r22*r22)))+(((-0.5)*x2034))+(((-3.0)*cj5*r20*x2032)))),-1);
if(!x2037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2036.value)+(((1.5707963267949)*(x2037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2038=IKsin(j4);
IkReal x2039=((0.866025403784439)*r22);
IkReal x2040=((0.5)*r20);
IkReal x2041=(cj5*x2038);
IkReal x2042=IKcos(j4);
IkReal x2043=((1.0)*cj5*x2042);
IkReal x2044=(r20*sj5);
IkReal x2045=((0.5)*r21*sj5);
IkReal x2046=((0.866025403784439)*cj0*r02);
IkReal x2047=((0.866025403784439)*r12*sj0);
IkReal x2048=(cj0*cj5*x2038);
IkReal x2049=(cj0*sj5*x2038);
IkReal x2050=(cj5*sj0*x2038);
IkReal x2051=(sj0*sj5*x2038);
IkReal x2052=((0.5)*r00);
IkReal x2053=(cj0*cj5*x2042);
IkReal x2054=((0.5)*r01);
IkReal x2055=(cj0*sj5*x2042);
IkReal x2056=((0.5)*r10);
IkReal x2057=(cj5*sj0*x2042);
IkReal x2058=((0.5)*r11);
IkReal x2059=(sj0*sj5*x2042);
IkReal x2060=((0.866025403784439)*cj0*r12);
IkReal x2061=((0.866025403784439)*r02*sj0);
IkReal x2062=(r00*sj0*sj5);
IkReal x2063=((1.0)*cj0*cj5*x2042);
IkReal x2064=((1.0)*cj0*sj5*x2042);
evalcond[0]=(((x2038*x2045))+((x2038*x2039))+(((-1.0)*r21*x2043))+(((-1.0)*x2040*x2041))+(((-1.0)*x2042*x2044)));
evalcond[1]=((-0.866025403784439)+((x2038*x2044))+((x2039*x2042))+(((-1.0)*cj5*x2040*x2042))+((r21*x2041))+((x2042*x2045)));
evalcond[2]=((((-1.0)*x2056*x2057))+((r10*x2051))+((r00*x2049))+((x2054*x2055))+(((-1.0)*x2052*x2053))+((r01*x2048))+((r11*x2050))+((x2058*x2059))+((x2042*x2046))+((x2042*x2047)));
evalcond[3]=(((x2038*x2060))+(((-1.0)*x2051*x2054))+((x2042*x2062))+(((-1.0)*x2048*x2056))+((x2049*x2058))+(((-1.0)*r10*x2064))+((x2050*x2052))+(((-1.0)*r11*x2063))+((r01*x2057))+(((-1.0)*x2038*x2061)));
evalcond[4]=((0.5)+(((-1.0)*r01*x2050))+((x2052*x2057))+(((-1.0)*x2053*x2056))+((r11*x2048))+(((-1.0)*x2038*x2062))+((x2055*x2058))+(((-1.0)*x2042*x2061))+((x2042*x2060))+((r10*x2049))+(((-1.0)*x2054*x2059)));
evalcond[5]=((-1.0)+(((-1.0)*r11*sj0*x2043))+(((-1.0)*x2048*x2052))+((x2051*x2058))+(((-1.0)*x2050*x2056))+((x2049*x2054))+(((-1.0)*r01*x2063))+(((-1.0)*r00*x2064))+((x2038*x2047))+((x2038*x2046))+(((-1.0)*r10*sj0*sj5*x2042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2065=((0.866025403784439)*cj0);
IkReal x2066=((0.866025403784439)*sj0);
CheckValue<IkReal> x2067=IKPowWithIntegerCheck(IKsign((((cj5*r00*x2066))+(((-1.0)*cj5*r10*x2065))+((r11*sj5*x2065))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0))+(((-1.0)*r01*sj5*x2066)))),-1);
if(!x2067.valid){
continue;
}
CheckValue<IkReal> x2068 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2067.value)))+(x2068.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2069=IKsin(j4);
IkReal x2070=((0.866025403784439)*r22);
IkReal x2071=((0.5)*r20);
IkReal x2072=(cj5*x2069);
IkReal x2073=IKcos(j4);
IkReal x2074=((1.0)*cj5*x2073);
IkReal x2075=(r20*sj5);
IkReal x2076=((0.5)*r21*sj5);
IkReal x2077=((0.866025403784439)*cj0*r02);
IkReal x2078=((0.866025403784439)*r12*sj0);
IkReal x2079=(cj0*cj5*x2069);
IkReal x2080=(cj0*sj5*x2069);
IkReal x2081=(cj5*sj0*x2069);
IkReal x2082=(sj0*sj5*x2069);
IkReal x2083=((0.5)*r00);
IkReal x2084=(cj0*cj5*x2073);
IkReal x2085=((0.5)*r01);
IkReal x2086=(cj0*sj5*x2073);
IkReal x2087=((0.5)*r10);
IkReal x2088=(cj5*sj0*x2073);
IkReal x2089=((0.5)*r11);
IkReal x2090=(sj0*sj5*x2073);
IkReal x2091=((0.866025403784439)*cj0*r12);
IkReal x2092=((0.866025403784439)*r02*sj0);
IkReal x2093=(r00*sj0*sj5);
IkReal x2094=((1.0)*cj0*cj5*x2073);
IkReal x2095=((1.0)*cj0*sj5*x2073);
evalcond[0]=((((-1.0)*r21*x2074))+((x2069*x2076))+((x2069*x2070))+(((-1.0)*x2071*x2072))+(((-1.0)*x2073*x2075)));
evalcond[1]=((-0.866025403784439)+((x2069*x2075))+(((-1.0)*cj5*x2071*x2073))+((x2073*x2076))+((r21*x2072))+((x2070*x2073)));
evalcond[2]=(((r01*x2079))+(((-1.0)*x2083*x2084))+((r11*x2081))+((r10*x2082))+((x2085*x2086))+((x2073*x2077))+(((-1.0)*x2087*x2088))+((x2073*x2078))+((r00*x2080))+((x2089*x2090)));
evalcond[3]=(((r01*x2088))+(((-1.0)*x2082*x2085))+((x2080*x2089))+(((-1.0)*r10*x2095))+(((-1.0)*x2079*x2087))+(((-1.0)*r11*x2094))+(((-1.0)*x2069*x2092))+((x2073*x2093))+((x2081*x2083))+((x2069*x2091)));
evalcond[4]=((0.5)+((x2073*x2091))+((x2083*x2088))+(((-1.0)*x2085*x2090))+(((-1.0)*r01*x2081))+((x2086*x2089))+(((-1.0)*x2084*x2087))+((r11*x2079))+(((-1.0)*x2069*x2093))+((r10*x2080))+(((-1.0)*x2073*x2092)));
evalcond[5]=((-1.0)+(((-1.0)*x2079*x2083))+((x2069*x2077))+((x2082*x2089))+(((-1.0)*r10*sj0*sj5*x2073))+(((-1.0)*x2081*x2087))+((x2069*x2078))+(((-1.0)*r00*x2095))+(((-1.0)*r11*sj0*x2074))+(((-1.0)*r01*x2094))+((x2080*x2085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2096=(r02*sj0);
IkReal x2097=(cj0*r12);
IkReal x2098=(cj0*cj5*r10);
IkReal x2099=(cj0*r11*sj5);
IkReal x2100=(cj5*r00*sj0);
IkReal x2101=(r01*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x2100))+(((1.73205080756888)*x2099))+x2096+(((-1.73205080756888)*x2098))+(((-1.0)*x2097))+(((-1.73205080756888)*x2101)));
j4eval[1]=IKsign(((((-0.866025403784439)*x2098))+(((0.866025403784439)*x2099))+(((-0.866025403784439)*x2101))+(((0.866025403784439)*x2100))+(((0.5)*x2096))+(((-0.5)*x2097))));
j4eval[2]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2102=r20*r20;
IkReal x2103=r21*r21;
IkReal x2104=r22*r22;
IkReal x2105=(cj5*r20*r22);
IkReal x2106=(r21*r22*sj5);
IkReal x2107=(cj5*r20*r21*sj5);
IkReal x2108=cj5*cj5;
IkReal x2109=(x2102*x2108);
IkReal x2110=(x2103*x2108);
j4eval[0]=((((3.0)*x2109))+(((-1.0)*x2103))+(((-3.46410161513775)*x2106))+(((3.46410161513775)*x2105))+(((-6.0)*x2107))+(((-3.0)*x2104))+(((-3.0)*x2110))+(((-4.0)*x2102)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-2.0)*x2102))+(((-1.5)*x2104))+(((1.5)*x2109))+(((-3.0)*x2107))+(((-1.73205080756888)*x2106))+(((-0.5)*x2103))+(((-1.5)*x2110))+(((1.73205080756888)*x2105))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2111=((1.73205080756888)*cj0);
IkReal x2112=((1.73205080756888)*sj0);
IkReal x2113=(((r11*sj5*x2111))+(((-1.0)*cj5*r10*x2111))+((cj5*r00*x2112))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*sj5*x2112)));
j4eval[0]=x2113;
j4eval[1]=IKsign(x2113);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2114=((1.73205080756888)*cj0*cj5);
IkReal x2115=((1.73205080756888)*cj0*sj5);
IkReal x2116=((1.73205080756888)*cj5*sj0);
IkReal x2117=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x2118=IKPowWithIntegerCheck(IKsign((((r11*x2115))+(((-1.0)*r01*x2117))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r00*x2116))+(((-1.0)*r10*x2114)))),-1);
if(!x2118.valid){
continue;
}
CheckValue<IkReal> x2119 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r11*x2116))+((r01*x2114))+((r00*x2115))+((r10*x2117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2118.value)))+(x2119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2120=IKsin(j4);
IkReal x2121=((0.866025403784439)*r22);
IkReal x2122=((0.5)*r20);
IkReal x2123=(cj5*x2120);
IkReal x2124=IKcos(j4);
IkReal x2125=((1.0)*cj5*x2124);
IkReal x2126=(r20*sj5);
IkReal x2127=((0.5)*r21*sj5);
IkReal x2128=((0.866025403784439)*cj0*r02);
IkReal x2129=((0.866025403784439)*r12*sj0);
IkReal x2130=(cj0*cj5*x2120);
IkReal x2131=(cj0*sj5*x2120);
IkReal x2132=(cj5*sj0*x2120);
IkReal x2133=(sj0*sj5*x2120);
IkReal x2134=((0.5)*r00);
IkReal x2135=(cj0*cj5*x2124);
IkReal x2136=((0.5)*r01);
IkReal x2137=(cj0*sj5*x2124);
IkReal x2138=((0.5)*r10);
IkReal x2139=(cj5*sj0*x2124);
IkReal x2140=((0.5)*r11);
IkReal x2141=(sj0*sj5*x2124);
IkReal x2142=((0.866025403784439)*cj0*r12);
IkReal x2143=((0.866025403784439)*r02*sj0);
IkReal x2144=(r00*sj0*sj5);
IkReal x2145=((1.0)*cj0*cj5*x2124);
IkReal x2146=((1.0)*cj0*sj5*x2124);
evalcond[0]=((((-1.0)*r21*x2125))+(((-1.0)*x2124*x2126))+((x2120*x2121))+(((-1.0)*x2122*x2123))+((x2120*x2127)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x2122*x2124))+((x2121*x2124))+((r21*x2123))+((x2124*x2127))+((x2120*x2126)));
evalcond[2]=(((r01*x2130))+((r10*x2133))+(((-1.0)*x2134*x2135))+((x2140*x2141))+(((-1.0)*x2138*x2139))+((x2124*x2128))+((r11*x2132))+((r00*x2131))+((x2124*x2129))+((x2136*x2137)));
evalcond[3]=((((-1.0)*x2130*x2138))+(((-1.0)*r11*x2145))+((x2120*x2142))+((x2124*x2144))+((r01*x2139))+((x2132*x2134))+(((-1.0)*r10*x2146))+(((-1.0)*x2133*x2136))+(((-1.0)*x2120*x2143))+((x2131*x2140)));
evalcond[4]=((-0.5)+((r11*x2130))+((r10*x2131))+((x2137*x2140))+(((-1.0)*x2124*x2143))+(((-1.0)*x2135*x2138))+((x2124*x2142))+(((-1.0)*r01*x2132))+(((-1.0)*x2136*x2141))+((x2134*x2139))+(((-1.0)*x2120*x2144)));
evalcond[5]=((1.0)+(((-1.0)*r10*sj0*sj5*x2124))+((x2131*x2136))+(((-1.0)*r11*sj0*x2125))+((x2133*x2140))+(((-1.0)*r01*x2145))+(((-1.0)*r00*x2146))+(((-1.0)*x2130*x2134))+((x2120*x2129))+((x2120*x2128))+(((-1.0)*x2132*x2138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2147=((1.73205080756888)*r21);
IkReal x2148=(cj5*r20);
IkReal x2149=(r21*sj5);
IkReal x2150=r20*r20;
IkReal x2151=r21*r21;
IkReal x2152=((1.5)*(cj5*cj5));
CheckValue<IkReal> x2153 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x2147)))),IkReal(((((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x2149))+(((0.866025403784439)*x2148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2153.valid){
continue;
}
CheckValue<IkReal> x2154=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*sj5*x2147))+(((1.73205080756888)*r22*x2148))+((x2150*x2152))+(((-2.0)*x2150))+(((-1.0)*x2151*x2152))+(((-3.0)*cj5*r20*x2149))+(((-0.5)*x2151))+(((-1.0)*(1.5)*(r22*r22))))),-1);
if(!x2154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2153.value)+(((1.5707963267949)*(x2154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2155=IKsin(j4);
IkReal x2156=((0.866025403784439)*r22);
IkReal x2157=((0.5)*r20);
IkReal x2158=(cj5*x2155);
IkReal x2159=IKcos(j4);
IkReal x2160=((1.0)*cj5*x2159);
IkReal x2161=(r20*sj5);
IkReal x2162=((0.5)*r21*sj5);
IkReal x2163=((0.866025403784439)*cj0*r02);
IkReal x2164=((0.866025403784439)*r12*sj0);
IkReal x2165=(cj0*cj5*x2155);
IkReal x2166=(cj0*sj5*x2155);
IkReal x2167=(cj5*sj0*x2155);
IkReal x2168=(sj0*sj5*x2155);
IkReal x2169=((0.5)*r00);
IkReal x2170=(cj0*cj5*x2159);
IkReal x2171=((0.5)*r01);
IkReal x2172=(cj0*sj5*x2159);
IkReal x2173=((0.5)*r10);
IkReal x2174=(cj5*sj0*x2159);
IkReal x2175=((0.5)*r11);
IkReal x2176=(sj0*sj5*x2159);
IkReal x2177=((0.866025403784439)*cj0*r12);
IkReal x2178=((0.866025403784439)*r02*sj0);
IkReal x2179=(r00*sj0*sj5);
IkReal x2180=((1.0)*cj0*cj5*x2159);
IkReal x2181=((1.0)*cj0*sj5*x2159);
evalcond[0]=(((x2155*x2156))+(((-1.0)*r21*x2160))+(((-1.0)*x2157*x2158))+((x2155*x2162))+(((-1.0)*x2159*x2161)));
evalcond[1]=((-0.866025403784439)+((x2155*x2161))+((x2156*x2159))+(((-1.0)*cj5*x2157*x2159))+((x2159*x2162))+((r21*x2158)));
evalcond[2]=(((x2159*x2164))+((r11*x2167))+(((-1.0)*x2173*x2174))+((x2159*x2163))+((x2175*x2176))+((r00*x2166))+((x2171*x2172))+((r01*x2165))+((r10*x2168))+(((-1.0)*x2169*x2170)));
evalcond[3]=((((-1.0)*x2165*x2173))+((x2167*x2169))+(((-1.0)*r10*x2181))+((r01*x2174))+(((-1.0)*x2168*x2171))+((x2159*x2179))+((x2155*x2177))+(((-1.0)*r11*x2180))+((x2166*x2175))+(((-1.0)*x2155*x2178)));
evalcond[4]=((-0.5)+((x2159*x2177))+((r10*x2166))+(((-1.0)*r01*x2167))+((x2169*x2174))+(((-1.0)*x2159*x2178))+(((-1.0)*x2170*x2173))+((x2172*x2175))+(((-1.0)*x2171*x2176))+(((-1.0)*x2155*x2179))+((r11*x2165)));
evalcond[5]=((1.0)+(((-1.0)*r10*sj0*sj5*x2159))+(((-1.0)*r11*sj0*x2160))+(((-1.0)*r01*x2180))+((x2155*x2164))+((x2155*x2163))+(((-1.0)*x2165*x2169))+(((-1.0)*r00*x2181))+((x2168*x2175))+((x2166*x2171))+(((-1.0)*x2167*x2173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2182=((0.866025403784439)*cj0);
IkReal x2183=((0.866025403784439)*sj0);
CheckValue<IkReal> x2184=IKPowWithIntegerCheck(IKsign((((r11*sj5*x2182))+(((-1.0)*(0.5)*cj0*r12))+(((-1.0)*r01*sj5*x2183))+(((0.5)*r02*sj0))+(((-1.0)*cj5*r10*x2182))+((cj5*r00*x2183)))),-1);
if(!x2184.valid){
continue;
}
CheckValue<IkReal> x2185 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2184.value)))+(x2185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2186=IKsin(j4);
IkReal x2187=((0.866025403784439)*r22);
IkReal x2188=((0.5)*r20);
IkReal x2189=(cj5*x2186);
IkReal x2190=IKcos(j4);
IkReal x2191=((1.0)*cj5*x2190);
IkReal x2192=(r20*sj5);
IkReal x2193=((0.5)*r21*sj5);
IkReal x2194=((0.866025403784439)*cj0*r02);
IkReal x2195=((0.866025403784439)*r12*sj0);
IkReal x2196=(cj0*cj5*x2186);
IkReal x2197=(cj0*sj5*x2186);
IkReal x2198=(cj5*sj0*x2186);
IkReal x2199=(sj0*sj5*x2186);
IkReal x2200=((0.5)*r00);
IkReal x2201=(cj0*cj5*x2190);
IkReal x2202=((0.5)*r01);
IkReal x2203=(cj0*sj5*x2190);
IkReal x2204=((0.5)*r10);
IkReal x2205=(cj5*sj0*x2190);
IkReal x2206=((0.5)*r11);
IkReal x2207=(sj0*sj5*x2190);
IkReal x2208=((0.866025403784439)*cj0*r12);
IkReal x2209=((0.866025403784439)*r02*sj0);
IkReal x2210=(r00*sj0*sj5);
IkReal x2211=((1.0)*cj0*cj5*x2190);
IkReal x2212=((1.0)*cj0*sj5*x2190);
evalcond[0]=((((-1.0)*x2188*x2189))+(((-1.0)*x2190*x2192))+((x2186*x2193))+(((-1.0)*r21*x2191))+((x2186*x2187)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x2188*x2190))+((r21*x2189))+((x2186*x2192))+((x2187*x2190))+((x2190*x2193)));
evalcond[2]=((((-1.0)*x2204*x2205))+((x2190*x2195))+((x2202*x2203))+((r10*x2199))+((r01*x2196))+((r00*x2197))+((x2190*x2194))+((r11*x2198))+((x2206*x2207))+(((-1.0)*x2200*x2201)));
evalcond[3]=(((x2197*x2206))+((x2186*x2208))+(((-1.0)*r11*x2211))+((x2198*x2200))+((x2190*x2210))+(((-1.0)*x2199*x2202))+(((-1.0)*r10*x2212))+(((-1.0)*x2196*x2204))+((r01*x2205))+(((-1.0)*x2186*x2209)));
evalcond[4]=((-0.5)+(((-1.0)*r01*x2198))+((x2190*x2208))+((x2203*x2206))+((r10*x2197))+(((-1.0)*x2186*x2210))+(((-1.0)*x2190*x2209))+((r11*x2196))+(((-1.0)*x2201*x2204))+((x2200*x2205))+(((-1.0)*x2202*x2207)));
evalcond[5]=((1.0)+(((-1.0)*r00*x2212))+(((-1.0)*r11*sj0*x2191))+((x2199*x2206))+(((-1.0)*x2198*x2204))+((x2186*x2194))+(((-1.0)*r01*x2211))+(((-1.0)*r10*sj0*sj5*x2190))+(((-1.0)*x2196*x2200))+((x2186*x2195))+((x2197*x2202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2213=(cj3*cj5);
IkReal x2214=(cj3*sj5);
IkReal x2215=((0.5)*r21);
IkReal x2216=((2.0)*r20);
IkReal x2217=(cj0*r10);
IkReal x2218=(cj0*r11);
IkReal x2219=((1.5)*r22);
IkReal x2220=(r00*sj0);
IkReal x2221=(r01*sj0);
IkReal x2222=((0.866025403784439)*cj5*r22);
IkReal x2223=(cj5*r20);
IkReal x2224=((0.866025403784439)*cj0*r12);
IkReal x2225=((0.866025403784439)*r22*sj5);
IkReal x2226=(r21*sj5);
IkReal x2227=((0.866025403784439)*r02*sj0);
IkReal x2228=((1.5)*cj5*r21*sj5);
IkReal x2229=((1.5)*cj5*r20*sj5);
IkReal x2230=cj5*cj5;
IkReal x2231=((1.5)*r20*x2230);
IkReal x2232=((1.5)*r21*x2230);
CheckValue<IkReal> x2233 = IKatan2WithCheck(IkReal((((r20*x2214))+((r21*x2213)))),IkReal(((((-0.5)*r20*x2213))+((cj3*(((0.866025403784439)*r22))))+((x2214*x2215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2233.valid){
continue;
}
CheckValue<IkReal> x2234=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2220*x2222))+((x2217*x2222))+(((-1.0)*x2224*x2226))+((r02*sj0*x2219))+((x2215*x2221))+((x2221*x2229))+(((-1.0)*x2220*x2231))+(((-1.0)*x2215*x2218))+(((-1.0)*x2216*x2217))+((x2217*x2231))+(((-1.0)*x2223*x2227))+(((-1.0)*cj0*r12*x2219))+(((-1.0)*x2218*x2225))+(((-1.0)*x2218*x2229))+((x2221*x2225))+((x2220*x2228))+((x2226*x2227))+(((-1.0)*x2217*x2228))+((x2216*x2220))+(((-1.0)*x2218*x2232))+((x2221*x2232))+((x2223*x2224)))),-1);
if(!x2234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2233.value)+(((1.5707963267949)*(x2234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2235=IKsin(j4);
IkReal x2236=((0.866025403784439)*r22);
IkReal x2237=((0.5)*r20);
IkReal x2238=(cj5*x2235);
IkReal x2239=IKcos(j4);
IkReal x2240=((1.0)*cj5*x2239);
IkReal x2241=(r20*sj5);
IkReal x2242=((0.5)*r21*sj5);
IkReal x2243=((0.866025403784439)*cj0*r02);
IkReal x2244=((0.866025403784439)*r12*sj0);
IkReal x2245=(cj0*cj5*x2235);
IkReal x2246=(cj0*sj5*x2235);
IkReal x2247=(cj5*sj0*x2235);
IkReal x2248=(sj0*sj5*x2235);
IkReal x2249=((0.5)*r00);
IkReal x2250=(cj0*cj5*x2239);
IkReal x2251=((0.5)*r01);
IkReal x2252=(cj0*sj5*x2239);
IkReal x2253=((0.5)*r10);
IkReal x2254=(cj5*sj0*x2239);
IkReal x2255=((0.5)*r11);
IkReal x2256=(sj0*sj5*x2239);
IkReal x2257=((0.866025403784439)*cj0*r12);
IkReal x2258=((0.866025403784439)*r02*sj0);
IkReal x2259=(r00*sj0*sj5);
IkReal x2260=((1.0)*cj0*cj5*x2239);
IkReal x2261=((1.0)*cj0*sj5*x2239);
evalcond[0]=((((-1.0)*x2239*x2241))+((x2235*x2236))+((x2235*x2242))+(((-1.0)*x2237*x2238))+(((-1.0)*r21*x2240)));
evalcond[1]=((-0.866025403784439)+((x2236*x2239))+((x2235*x2241))+((r21*x2238))+((x2239*x2242))+(((-1.0)*cj5*x2237*x2239)));
evalcond[2]=(((x2239*x2244))+((r10*x2248))+((x2255*x2256))+(((-1.0)*x2249*x2250))+(((-1.0)*(0.5)*sj3))+((r01*x2245))+((r11*x2247))+((x2251*x2252))+((x2239*x2243))+(((-1.0)*x2253*x2254))+((r00*x2246)));
evalcond[3]=((((-1.0)*x2250*x2253))+((x2239*x2257))+(((-1.0)*x2251*x2256))+((r10*x2246))+((r11*x2245))+(((-1.0)*x2235*x2259))+((x2252*x2255))+(((0.5)*cj3))+((x2249*x2254))+(((-1.0)*x2239*x2258))+(((-1.0)*r01*x2247)));
evalcond[4]=(((x2247*x2249))+((x2239*x2259))+(((-1.0)*x2235*x2258))+(((-1.0)*r10*x2261))+((x2246*x2255))+(((-1.0)*r11*x2260))+((x2235*x2257))+(((-1.0)*x2248*x2251))+(((-1.0)*x2245*x2253))+((r01*x2254))+(((-1.0)*(1.0)*sj3)));
evalcond[5]=((((-1.0)*r11*sj0*x2240))+(((-1.0)*(1.0)*cj3))+(((-1.0)*x2247*x2253))+(((-1.0)*r00*x2261))+((x2246*x2251))+(((-1.0)*r01*x2260))+(((-1.0)*x2245*x2249))+((x2248*x2255))+((x2235*x2244))+(((-1.0)*r10*sj0*sj5*x2239))+((x2235*x2243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2262=((1.73205080756888)*r21);
IkReal x2263=(cj5*r20);
IkReal x2264=(r21*sj5);
IkReal x2265=r20*r20;
IkReal x2266=r21*r21;
IkReal x2267=((1.5)*(cj5*cj5));
CheckValue<IkReal> x2268=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*sj5*x2262))+((x2265*x2267))+(((-1.0)*x2266*x2267))+(((-2.0)*x2265))+(((1.73205080756888)*r22*x2263))+(((-1.0)*(1.5)*(r22*r22)))+(((-3.0)*cj5*r20*x2264))+(((-0.5)*x2266)))),-1);
if(!x2268.valid){
continue;
}
CheckValue<IkReal> x2269 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x2262))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((0.866025403784439)*x2263))+(((-0.866025403784439)*x2264))+(((-1.0)*(1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2268.value)))+(x2269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2270=IKsin(j4);
IkReal x2271=((0.866025403784439)*r22);
IkReal x2272=((0.5)*r20);
IkReal x2273=(cj5*x2270);
IkReal x2274=IKcos(j4);
IkReal x2275=((1.0)*cj5*x2274);
IkReal x2276=(r20*sj5);
IkReal x2277=((0.5)*r21*sj5);
IkReal x2278=((0.866025403784439)*cj0*r02);
IkReal x2279=((0.866025403784439)*r12*sj0);
IkReal x2280=(cj0*cj5*x2270);
IkReal x2281=(cj0*sj5*x2270);
IkReal x2282=(cj5*sj0*x2270);
IkReal x2283=(sj0*sj5*x2270);
IkReal x2284=((0.5)*r00);
IkReal x2285=(cj0*cj5*x2274);
IkReal x2286=((0.5)*r01);
IkReal x2287=(cj0*sj5*x2274);
IkReal x2288=((0.5)*r10);
IkReal x2289=(cj5*sj0*x2274);
IkReal x2290=((0.5)*r11);
IkReal x2291=(sj0*sj5*x2274);
IkReal x2292=((0.866025403784439)*cj0*r12);
IkReal x2293=((0.866025403784439)*r02*sj0);
IkReal x2294=(r00*sj0*sj5);
IkReal x2295=((1.0)*cj0*cj5*x2274);
IkReal x2296=((1.0)*cj0*sj5*x2274);
evalcond[0]=((((-1.0)*r21*x2275))+(((-1.0)*x2274*x2276))+(((-1.0)*x2272*x2273))+((x2270*x2277))+((x2270*x2271)));
evalcond[1]=((-0.866025403784439)+((x2271*x2274))+((x2274*x2277))+((r21*x2273))+((x2270*x2276))+(((-1.0)*cj5*x2272*x2274)));
evalcond[2]=((((-1.0)*x2284*x2285))+((r11*x2282))+((x2274*x2279))+((r10*x2283))+(((-1.0)*x2288*x2289))+(((-1.0)*(0.5)*sj3))+((r00*x2281))+((x2290*x2291))+((r01*x2280))+((x2286*x2287))+((x2274*x2278)));
evalcond[3]=((((-1.0)*x2270*x2294))+((r10*x2281))+((x2284*x2289))+(((-1.0)*x2286*x2291))+((x2274*x2292))+(((-1.0)*x2274*x2293))+(((-1.0)*r01*x2282))+(((-1.0)*x2285*x2288))+(((0.5)*cj3))+((r11*x2280))+((x2287*x2290)));
evalcond[4]=(((r01*x2289))+(((-1.0)*x2280*x2288))+((x2281*x2290))+((x2270*x2292))+(((-1.0)*r10*x2296))+(((-1.0)*r11*x2295))+(((-1.0)*x2270*x2293))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x2283*x2286))+((x2282*x2284))+((x2274*x2294)));
evalcond[5]=(((x2283*x2290))+((x2270*x2279))+(((-1.0)*(1.0)*cj3))+((x2270*x2278))+(((-1.0)*r10*sj0*sj5*x2274))+(((-1.0)*x2280*x2284))+(((-1.0)*r00*x2296))+(((-1.0)*r11*sj0*x2275))+(((-1.0)*r01*x2295))+(((-1.0)*x2282*x2288))+((x2281*x2286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2297=(cj5*sj3);
IkReal x2298=(sj3*sj5);
IkReal x2299=((0.866025403784439)*cj0);
IkReal x2300=((0.866025403784439)*sj0);
CheckValue<IkReal> x2301 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2297))+(((-1.0)*r20*x2298)))),IkReal(((((-1.0)*(0.866025403784439)*r22*sj3))+(((0.5)*r20*x2297))+(((-0.5)*r21*x2298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2301.valid){
continue;
}
CheckValue<IkReal> x2302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x2299))+((cj5*r00*x2299))+(((0.5)*r12*sj0))+(((-1.0)*r11*sj5*x2300))+(((0.5)*cj0*r02))+((cj5*r10*x2300)))),-1);
if(!x2302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2301.value)+(((1.5707963267949)*(x2302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2303=IKsin(j4);
IkReal x2304=((0.866025403784439)*r22);
IkReal x2305=((0.5)*r20);
IkReal x2306=(cj5*x2303);
IkReal x2307=IKcos(j4);
IkReal x2308=((1.0)*cj5*x2307);
IkReal x2309=(r20*sj5);
IkReal x2310=((0.5)*r21*sj5);
IkReal x2311=((0.866025403784439)*cj0*r02);
IkReal x2312=((0.866025403784439)*r12*sj0);
IkReal x2313=(cj0*cj5*x2303);
IkReal x2314=(cj0*sj5*x2303);
IkReal x2315=(cj5*sj0*x2303);
IkReal x2316=(sj0*sj5*x2303);
IkReal x2317=((0.5)*r00);
IkReal x2318=(cj0*cj5*x2307);
IkReal x2319=((0.5)*r01);
IkReal x2320=(cj0*sj5*x2307);
IkReal x2321=((0.5)*r10);
IkReal x2322=(cj5*sj0*x2307);
IkReal x2323=((0.5)*r11);
IkReal x2324=(sj0*sj5*x2307);
IkReal x2325=((0.866025403784439)*cj0*r12);
IkReal x2326=((0.866025403784439)*r02*sj0);
IkReal x2327=(r00*sj0*sj5);
IkReal x2328=((1.0)*cj0*cj5*x2307);
IkReal x2329=((1.0)*cj0*sj5*x2307);
evalcond[0]=(((x2303*x2310))+(((-1.0)*x2305*x2306))+((x2303*x2304))+(((-1.0)*r21*x2308))+(((-1.0)*x2307*x2309)));
evalcond[1]=((-0.866025403784439)+((x2307*x2310))+((r21*x2306))+((x2303*x2309))+(((-1.0)*cj5*x2305*x2307))+((x2304*x2307)));
evalcond[2]=(((r01*x2313))+((x2307*x2312))+(((-1.0)*x2317*x2318))+((r11*x2315))+(((-1.0)*(0.5)*sj3))+((r00*x2314))+((x2323*x2324))+(((-1.0)*x2321*x2322))+((x2307*x2311))+((x2319*x2320))+((r10*x2316)));
evalcond[3]=((((-1.0)*x2319*x2324))+(((-1.0)*x2318*x2321))+(((-1.0)*x2307*x2326))+((r11*x2313))+(((-1.0)*r01*x2315))+((x2320*x2323))+((x2307*x2325))+(((-1.0)*x2303*x2327))+(((0.5)*cj3))+((r10*x2314))+((x2317*x2322)));
evalcond[4]=((((-1.0)*x2313*x2321))+((x2315*x2317))+(((-1.0)*r11*x2328))+((x2307*x2327))+((x2314*x2323))+((x2303*x2325))+(((-1.0)*x2316*x2319))+(((-1.0)*r10*x2329))+(((-1.0)*(1.0)*sj3))+((r01*x2322))+(((-1.0)*x2303*x2326)));
evalcond[5]=((((-1.0)*x2313*x2317))+((x2316*x2323))+((x2303*x2311))+(((-1.0)*x2315*x2321))+(((-1.0)*(1.0)*cj3))+(((-1.0)*r01*x2328))+((x2314*x2319))+(((-1.0)*r00*x2329))+(((-1.0)*r10*sj0*sj5*x2307))+(((-1.0)*r11*sj0*x2308))+((x2303*x2312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2330=((0.577350269189626)*cj0);
IkReal x2331=((0.577350269189626)*sj0);
IkReal x2332=(cj0*cj5);
IkReal x2333=(cj5*sj0);
IkReal x2334=((1.0)*cj0);
IkReal x2335=(r01*sj5);
IkReal x2336=(r11*sj5);
if( IKabs(((((-1.0)*sj0*x2336))+((r10*x2333))+((r12*x2331))+((r02*x2330))+((r00*x2332))+(((-1.0)*x2334*x2335)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x2335))+((r12*x2330))+(((-1.0)*r02*x2331))+(((-1.0)*r00*x2333))+((r10*x2332))+(((-1.0)*x2334*x2336)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x2336))+((r10*x2333))+((r12*x2331))+((r02*x2330))+((r00*x2332))+(((-1.0)*x2334*x2335))))+IKsqr((((sj0*x2335))+((r12*x2330))+(((-1.0)*r02*x2331))+(((-1.0)*r00*x2333))+((r10*x2332))+(((-1.0)*x2334*x2336))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj0*x2336))+((r10*x2333))+((r12*x2331))+((r02*x2330))+((r00*x2332))+(((-1.0)*x2334*x2335))), (((sj0*x2335))+((r12*x2330))+(((-1.0)*r02*x2331))+(((-1.0)*r00*x2333))+((r10*x2332))+(((-1.0)*x2334*x2336))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x2337=((0.5)*cj0);
IkReal x2338=((0.5)*sj0);
IkReal x2339=((0.866025403784439)*cj0*cj5);
IkReal x2340=((0.866025403784439)*cj0*sj5);
IkReal x2341=((0.866025403784439)*cj5*sj0);
IkReal x2342=((0.866025403784439)*sj0*sj5);
evalcond[0]=(((r00*x2341))+(((-1.0)*r12*x2337))+((r11*x2340))+(((-1.0)*r01*x2342))+(((-1.0)*r10*x2339))+(((0.866025403784439)*(IKcos(j3))))+((r02*x2338)));
evalcond[1]=(((r01*x2340))+((r11*x2342))+(((-1.0)*r10*x2341))+(((-1.0)*r00*x2339))+(((-1.0)*r02*x2337))+(((0.866025403784439)*(IKsin(j3))))+(((-1.0)*r12*x2338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2343=(cj0*r02);
IkReal x2344=(r12*sj0);
IkReal x2345=(cj0*cj5*r00);
IkReal x2346=(cj0*r01*sj5);
IkReal x2347=(cj5*r10*sj0);
IkReal x2348=(r11*sj0*sj5);
IkReal x2349=(cj5*sj3);
IkReal x2350=(sj3*sj5);
j4eval[0]=((((1.73205080756888)*x2345))+(((-1.73205080756888)*x2346))+x2343+x2344+(((-1.73205080756888)*x2348))+(((1.73205080756888)*x2347)));
j4eval[1]=((IKabs((((r21*x2349))+((r20*x2350)))))+(((0.5)*(IKabs(((((-1.0)*r21*x2350))+((r20*x2349))+(((-1.0)*(1.73205080756888)*r22*sj3))))))));
j4eval[2]=IKsign(((((0.866025403784439)*x2345))+(((0.5)*x2343))+(((0.866025403784439)*x2347))+(((0.5)*x2344))+(((-0.866025403784439)*x2348))+(((-0.866025403784439)*x2346))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2351=r20*r20;
IkReal x2352=r21*r21;
IkReal x2353=r22*r22;
IkReal x2354=(cj5*r20*r22);
IkReal x2355=(r21*r22*sj5);
IkReal x2356=(cj5*r20*r21*sj5);
IkReal x2357=cj5*cj5;
IkReal x2358=(x2351*x2357);
IkReal x2359=(x2352*x2357);
j4eval[0]=((((-1.0)*x2352))+(((-3.0)*x2359))+(((3.0)*x2358))+(((-3.46410161513775)*x2355))+(((-3.0)*x2353))+(((-4.0)*x2351))+(((-6.0)*x2356))+(((3.46410161513775)*x2354)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-2.0)*x2351))+(((-1.5)*x2359))+(((1.73205080756888)*x2354))+(((-0.5)*x2352))+(((1.5)*x2358))+(((-3.0)*x2356))+(((-1.5)*x2353))+(((-1.73205080756888)*x2355))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2360=(cj0*r00*r20);
IkReal x2361=(cj0*r01*r21);
IkReal x2362=(cj0*r02*r22);
IkReal x2363=(r10*r20*sj0);
IkReal x2364=(r11*r21*sj0);
IkReal x2365=(r12*r22*sj0);
IkReal x2366=((1.73205080756888)*r22);
IkReal x2367=(cj0*cj5*r00);
IkReal x2368=(cj0*cj5*r02*r20);
IkReal x2369=(cj0*r01*sj5);
IkReal x2370=(cj0*r02*r21*sj5);
IkReal x2371=(cj5*r10*sj0);
IkReal x2372=(cj5*r12*r20*sj0);
IkReal x2373=(r11*sj0*sj5);
IkReal x2374=(r12*r21*sj0*sj5);
IkReal x2375=(cj0*cj5*r00*r21*sj5);
IkReal x2376=(cj0*cj5*r01*r20*sj5);
IkReal x2377=(cj5*r10*r21*sj0*sj5);
IkReal x2378=(cj5*r11*r20*sj0*sj5);
IkReal x2379=cj5*cj5;
IkReal x2380=(cj0*r00*r20*x2379);
IkReal x2381=(cj0*r01*r21*x2379);
IkReal x2382=(r10*r20*sj0*x2379);
IkReal x2383=(r11*r21*sj0*x2379);
IkReal x2384=(r21*sj3);
IkReal x2385=(r20*sj3);
IkReal x2386=((0.866025403784439)*r22);
j4eval[0]=((((-1.0)*x2364))+(((-3.0)*x2362))+(((3.0)*x2380))+(((-3.0)*x2383))+(((-3.0)*x2376))+((x2366*x2367))+(((1.73205080756888)*x2368))+(((-3.0)*x2377))+(((-3.0)*x2365))+(((-1.73205080756888)*x2370))+(((-1.0)*x2366*x2369))+(((3.0)*x2382))+((x2366*x2371))+(((-1.73205080756888)*x2374))+(((1.73205080756888)*x2372))+(((-3.0)*x2378))+(((-1.0)*x2361))+(((-1.0)*x2366*x2373))+(((-3.0)*x2381))+(((-4.0)*x2360))+(((-3.0)*x2375))+(((-4.0)*x2363)));
j4eval[1]=((((0.5)*(IKabs((((sj5*x2384))+((sj3*x2366))+(((-1.0)*cj5*x2385)))))))+(IKabs((((sj5*x2385))+((cj5*x2384))))));
j4eval[2]=IKsign(((((-2.0)*x2363))+(((-0.866025403784439)*x2370))+(((-0.5)*x2364))+(((-1.0)*x2373*x2386))+(((-1.5)*x2383))+(((-1.5)*x2378))+(((-1.5)*x2365))+(((-1.5)*x2375))+(((-1.5)*x2381))+(((1.5)*x2380))+(((0.866025403784439)*x2372))+(((-1.5)*x2362))+((x2371*x2386))+(((0.866025403784439)*x2368))+(((-1.5)*x2376))+(((-1.5)*x2377))+(((-1.0)*x2369*x2386))+(((-2.0)*x2360))+(((-0.866025403784439)*x2374))+((x2367*x2386))+(((1.5)*x2382))+(((-0.5)*x2361))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x2387=(r02*sj0);
IkReal x2388=(cj0*r12);
IkReal x2389=(cj0*cj5*r10);
IkReal x2390=(cj0*r11*sj5);
IkReal x2391=(cj5*r00*sj0);
IkReal x2392=(r01*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x2391))+(((1.73205080756888)*x2390))+(((-1.0)*x2388))+(((-1.73205080756888)*x2392))+x2387+(((-1.73205080756888)*x2389)));
j4eval[1]=IKsign(((((-0.5)*x2388))+(((-0.866025403784439)*x2389))+(((-0.866025403784439)*x2392))+(((0.866025403784439)*x2390))+(((0.866025403784439)*x2391))+(((0.5)*x2387))));
j4eval[2]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x2393=r20*r20;
IkReal x2394=r21*r21;
IkReal x2395=r22*r22;
IkReal x2396=(cj5*r20*r22);
IkReal x2397=(r21*r22*sj5);
IkReal x2398=(cj5*r20*r21*sj5);
IkReal x2399=cj5*cj5;
IkReal x2400=(x2393*x2399);
IkReal x2401=(x2394*x2399);
j4eval[0]=((((-4.0)*x2393))+(((-6.0)*x2398))+(((-3.46410161513775)*x2397))+(((-3.0)*x2401))+(((-1.0)*x2394))+(((-3.0)*x2395))+(((3.0)*x2400))+(((3.46410161513775)*x2396)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-0.5)*x2394))+(((-1.73205080756888)*x2397))+(((-1.5)*x2401))+(((1.73205080756888)*x2396))+(((-3.0)*x2398))+(((-1.5)*x2395))+(((1.5)*x2400))+(((-2.0)*x2393))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x2402=((1.73205080756888)*cj0);
IkReal x2403=((1.73205080756888)*sj0);
IkReal x2404=(((r11*sj5*x2402))+(((-1.0)*r01*sj5*x2403))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*cj5*r10*x2402))+((cj5*r00*x2403)));
j4eval[0]=x2404;
j4eval[1]=IKsign(x2404);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2405=((1.73205080756888)*cj0*cj5);
IkReal x2406=((1.73205080756888)*cj0*sj5);
IkReal x2407=((1.73205080756888)*cj5*sj0);
IkReal x2408=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x2409 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r01))*((cj0*sj5))))+(((-0.866025403784439)*cj5*r10*sj0))+(((0.866025403784439)*r11*sj0*sj5))+(((-0.866025403784439)*cj0*cj5*r00))+(((1.5)*cj0*r02))+(((1.5)*r12*sj0)))),IkReal(((((-1.0)*r00*x2406))+(((-1.0)*r11*x2407))+(((-1.0)*r10*x2408))+(((-1.0)*r01*x2405)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2409.valid){
continue;
}
CheckValue<IkReal> x2410=IKPowWithIntegerCheck(IKsign((((r00*x2407))+((r11*x2406))+(((-1.0)*r10*x2405))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*x2408)))),-1);
if(!x2410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2409.value)+(((1.5707963267949)*(x2410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2411=IKsin(j4);
IkReal x2412=((0.866025403784439)*r22);
IkReal x2413=((0.5)*r20);
IkReal x2414=(cj5*x2411);
IkReal x2415=IKcos(j4);
IkReal x2416=((1.0)*cj5*x2415);
IkReal x2417=(r20*sj5);
IkReal x2418=((0.5)*r21*sj5);
IkReal x2419=((0.866025403784439)*cj0*r02);
IkReal x2420=((0.866025403784439)*r12*sj0);
IkReal x2421=(cj0*cj5*x2411);
IkReal x2422=(cj0*sj5*x2411);
IkReal x2423=(cj5*sj0*x2411);
IkReal x2424=(sj0*sj5*x2411);
IkReal x2425=((0.5)*r00);
IkReal x2426=(cj0*cj5*x2415);
IkReal x2427=((0.5)*r01);
IkReal x2428=(cj0*sj5*x2415);
IkReal x2429=((0.5)*r10);
IkReal x2430=(cj5*sj0*x2415);
IkReal x2431=((0.5)*r11);
IkReal x2432=(sj0*sj5*x2415);
IkReal x2433=((0.866025403784439)*cj0*r12);
IkReal x2434=((0.866025403784439)*r02*sj0);
IkReal x2435=(r00*sj0*sj5);
IkReal x2436=((1.0)*cj0*cj5*x2415);
IkReal x2437=((1.0)*cj0*sj5*x2415);
evalcond[0]=((((-1.0)*x2415*x2417))+(((-1.0)*r21*x2416))+(((-1.0)*x2413*x2414))+((x2411*x2412))+((x2411*x2418)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x2413*x2415))+((x2411*x2417))+((x2412*x2415))+((x2415*x2418))+((r21*x2414)));
evalcond[2]=(((r01*x2421))+(((-1.0)*x2429*x2430))+((r11*x2423))+((x2415*x2420))+((x2427*x2428))+((r10*x2424))+((r00*x2422))+(((-1.0)*x2425*x2426))+((x2415*x2419))+((x2431*x2432)));
evalcond[3]=(((x2423*x2425))+((r01*x2430))+(((-1.0)*r10*x2437))+((x2415*x2435))+(((-1.0)*r11*x2436))+(((-1.0)*x2421*x2429))+((x2411*x2433))+(((-1.0)*x2424*x2427))+((x2422*x2431))+(((-1.0)*x2411*x2434)));
evalcond[4]=((0.5)+(((-1.0)*x2427*x2432))+(((-1.0)*r01*x2423))+(((-1.0)*x2426*x2429))+(((-1.0)*x2411*x2435))+((x2428*x2431))+((x2425*x2430))+(((-1.0)*x2415*x2434))+((r10*x2422))+((r11*x2421))+((x2415*x2433)));
evalcond[5]=((1.0)+((x2424*x2431))+(((-1.0)*r10*sj0*sj5*x2415))+(((-1.0)*r00*x2437))+(((-1.0)*x2423*x2429))+((x2411*x2419))+((x2411*x2420))+(((-1.0)*r01*x2436))+(((-1.0)*r11*sj0*x2416))+((x2422*x2427))+(((-1.0)*x2421*x2425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2438=((1.73205080756888)*r21);
IkReal x2439=(cj5*r20);
IkReal x2440=(r21*sj5);
IkReal x2441=r20*r20;
IkReal x2442=r21*r21;
IkReal x2443=((1.5)*(cj5*cj5));
CheckValue<IkReal> x2444=IKPowWithIntegerCheck(IKsign((((x2441*x2443))+(((-0.5)*x2442))+(((-3.0)*cj5*r20*x2440))+(((-1.0)*x2442*x2443))+(((1.73205080756888)*r22*x2439))+(((-2.0)*x2441))+(((-1.0)*r22*sj5*x2438))+(((-1.0)*(1.5)*(r22*r22))))),-1);
if(!x2444.valid){
continue;
}
CheckValue<IkReal> x2445 = IKatan2WithCheck(IkReal(((((1.73205080756888)*r20*sj5))+((cj5*x2438)))),IkReal(((((0.866025403784439)*x2440))+(((-0.866025403784439)*x2439))+(((1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2444.value)))+(x2445.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2446=IKsin(j4);
IkReal x2447=((0.866025403784439)*r22);
IkReal x2448=((0.5)*r20);
IkReal x2449=(cj5*x2446);
IkReal x2450=IKcos(j4);
IkReal x2451=((1.0)*cj5*x2450);
IkReal x2452=(r20*sj5);
IkReal x2453=((0.5)*r21*sj5);
IkReal x2454=((0.866025403784439)*cj0*r02);
IkReal x2455=((0.866025403784439)*r12*sj0);
IkReal x2456=(cj0*cj5*x2446);
IkReal x2457=(cj0*sj5*x2446);
IkReal x2458=(cj5*sj0*x2446);
IkReal x2459=(sj0*sj5*x2446);
IkReal x2460=((0.5)*r00);
IkReal x2461=(cj0*cj5*x2450);
IkReal x2462=((0.5)*r01);
IkReal x2463=(cj0*sj5*x2450);
IkReal x2464=((0.5)*r10);
IkReal x2465=(cj5*sj0*x2450);
IkReal x2466=((0.5)*r11);
IkReal x2467=(sj0*sj5*x2450);
IkReal x2468=((0.866025403784439)*cj0*r12);
IkReal x2469=((0.866025403784439)*r02*sj0);
IkReal x2470=(r00*sj0*sj5);
IkReal x2471=((1.0)*cj0*cj5*x2450);
IkReal x2472=((1.0)*cj0*sj5*x2450);
evalcond[0]=((((-1.0)*x2448*x2449))+(((-1.0)*r21*x2451))+((x2446*x2447))+((x2446*x2453))+(((-1.0)*x2450*x2452)));
evalcond[1]=((0.866025403784439)+((x2447*x2450))+((x2450*x2453))+(((-1.0)*cj5*x2448*x2450))+((r21*x2449))+((x2446*x2452)));
evalcond[2]=(((x2466*x2467))+(((-1.0)*x2464*x2465))+((r01*x2456))+((r10*x2459))+((x2462*x2463))+(((-1.0)*x2460*x2461))+((r00*x2457))+((r11*x2458))+((x2450*x2454))+((x2450*x2455)));
evalcond[3]=((((-1.0)*x2446*x2469))+(((-1.0)*x2459*x2462))+(((-1.0)*r10*x2472))+((x2458*x2460))+((x2446*x2468))+((x2450*x2470))+((x2457*x2466))+(((-1.0)*r11*x2471))+((r01*x2465))+(((-1.0)*x2456*x2464)));
evalcond[4]=((0.5)+((r10*x2457))+(((-1.0)*x2446*x2470))+(((-1.0)*x2462*x2467))+((x2463*x2466))+(((-1.0)*r01*x2458))+((x2460*x2465))+((x2450*x2468))+(((-1.0)*x2450*x2469))+(((-1.0)*x2461*x2464))+((r11*x2456)));
evalcond[5]=((1.0)+(((-1.0)*x2458*x2464))+(((-1.0)*x2456*x2460))+((x2459*x2466))+((x2457*x2462))+(((-1.0)*r10*sj0*sj5*x2450))+(((-1.0)*r01*x2471))+((x2446*x2454))+((x2446*x2455))+(((-1.0)*r00*x2472))+(((-1.0)*r11*sj0*x2451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2473=((0.866025403784439)*cj0);
IkReal x2474=((0.866025403784439)*sj0);
CheckValue<IkReal> x2475 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2475.valid){
continue;
}
CheckValue<IkReal> x2476=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x2474))+((r11*sj5*x2473))+(((-1.0)*(0.5)*cj0*r12))+((cj5*r00*x2474))+(((-1.0)*cj5*r10*x2473))+(((0.5)*r02*sj0)))),-1);
if(!x2476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2475.value)+(((1.5707963267949)*(x2476.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2477=IKsin(j4);
IkReal x2478=((0.866025403784439)*r22);
IkReal x2479=((0.5)*r20);
IkReal x2480=(cj5*x2477);
IkReal x2481=IKcos(j4);
IkReal x2482=((1.0)*cj5*x2481);
IkReal x2483=(r20*sj5);
IkReal x2484=((0.5)*r21*sj5);
IkReal x2485=((0.866025403784439)*cj0*r02);
IkReal x2486=((0.866025403784439)*r12*sj0);
IkReal x2487=(cj0*cj5*x2477);
IkReal x2488=(cj0*sj5*x2477);
IkReal x2489=(cj5*sj0*x2477);
IkReal x2490=(sj0*sj5*x2477);
IkReal x2491=((0.5)*r00);
IkReal x2492=(cj0*cj5*x2481);
IkReal x2493=((0.5)*r01);
IkReal x2494=(cj0*sj5*x2481);
IkReal x2495=((0.5)*r10);
IkReal x2496=(cj5*sj0*x2481);
IkReal x2497=((0.5)*r11);
IkReal x2498=(sj0*sj5*x2481);
IkReal x2499=((0.866025403784439)*cj0*r12);
IkReal x2500=((0.866025403784439)*r02*sj0);
IkReal x2501=(r00*sj0*sj5);
IkReal x2502=((1.0)*cj0*cj5*x2481);
IkReal x2503=((1.0)*cj0*sj5*x2481);
evalcond[0]=((((-1.0)*x2479*x2480))+((x2477*x2478))+(((-1.0)*r21*x2482))+(((-1.0)*x2481*x2483))+((x2477*x2484)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x2479*x2481))+((x2481*x2484))+((r21*x2480))+((x2478*x2481))+((x2477*x2483)));
evalcond[2]=(((r00*x2488))+((r01*x2487))+((x2481*x2486))+((x2497*x2498))+((r10*x2490))+((x2493*x2494))+((x2481*x2485))+(((-1.0)*x2491*x2492))+((r11*x2489))+(((-1.0)*x2495*x2496)));
evalcond[3]=(((x2477*x2499))+((x2488*x2497))+((r01*x2496))+(((-1.0)*r11*x2502))+(((-1.0)*x2487*x2495))+(((-1.0)*r10*x2503))+((x2489*x2491))+(((-1.0)*x2490*x2493))+(((-1.0)*x2477*x2500))+((x2481*x2501)));
evalcond[4]=((0.5)+(((-1.0)*x2477*x2501))+(((-1.0)*x2493*x2498))+(((-1.0)*x2481*x2500))+(((-1.0)*r01*x2489))+((x2491*x2496))+((x2481*x2499))+((x2494*x2497))+((r10*x2488))+((r11*x2487))+(((-1.0)*x2492*x2495)));
evalcond[5]=((1.0)+(((-1.0)*r00*x2503))+(((-1.0)*x2489*x2495))+((x2490*x2497))+(((-1.0)*r10*sj0*sj5*x2481))+(((-1.0)*r01*x2502))+(((-1.0)*x2487*x2491))+((x2477*x2485))+((x2477*x2486))+(((-1.0)*r11*sj0*x2482))+((x2488*x2493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2504=(r02*sj0);
IkReal x2505=(cj0*r12);
IkReal x2506=(cj0*cj5*r10);
IkReal x2507=(cj0*r11*sj5);
IkReal x2508=(cj5*r00*sj0);
IkReal x2509=(r01*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x2507))+(((-1.0)*x2505))+(((1.73205080756888)*x2508))+x2504+(((-1.73205080756888)*x2509))+(((-1.73205080756888)*x2506)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.866025403784439)*x2508))+(((-0.866025403784439)*x2509))+(((0.866025403784439)*x2507))+(((-0.5)*x2505))+(((-0.866025403784439)*x2506))+(((0.5)*x2504))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2510=r20*r20;
IkReal x2511=r21*r21;
IkReal x2512=r22*r22;
IkReal x2513=(cj5*r20*r22);
IkReal x2514=(r21*r22*sj5);
IkReal x2515=(cj5*r20*r21*sj5);
IkReal x2516=cj5*cj5;
IkReal x2517=(x2510*x2516);
IkReal x2518=(x2511*x2516);
j4eval[0]=((((-4.0)*x2510))+(((-3.46410161513775)*x2514))+(((-3.0)*x2518))+(((-3.0)*x2512))+(((3.46410161513775)*x2513))+(((-6.0)*x2515))+(((-1.0)*x2511))+(((3.0)*x2517)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-3.0)*x2515))+(((-1.73205080756888)*x2514))+(((1.5)*x2517))+(((-1.5)*x2512))+(((-2.0)*x2510))+(((-1.5)*x2518))+(((-0.5)*x2511))+(((1.73205080756888)*x2513))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2519=((1.73205080756888)*cj0);
IkReal x2520=((1.73205080756888)*sj0);
IkReal x2521=(((r11*sj5*x2519))+((cj5*r00*x2520))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*sj5*x2520))+(((-1.0)*cj5*r10*x2519)));
j4eval[0]=x2521;
j4eval[1]=IKsign(x2521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2522=((1.73205080756888)*cj0*cj5);
IkReal x2523=((1.73205080756888)*cj0*sj5);
IkReal x2524=((1.73205080756888)*cj5*sj0);
IkReal x2525=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x2526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2522))+((r11*x2523))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r00*x2524))+(((-1.0)*r01*x2525)))),-1);
if(!x2526.valid){
continue;
}
CheckValue<IkReal> x2527 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r01))*((cj0*sj5))))+(((-0.866025403784439)*cj5*r10*sj0))+(((0.866025403784439)*r11*sj0*sj5))+(((-0.866025403784439)*cj0*cj5*r00))+(((1.5)*cj0*r02))+(((1.5)*r12*sj0)))),IkReal(((((-1.0)*r00*x2523))+(((-1.0)*r01*x2522))+(((-1.0)*r11*x2524))+(((-1.0)*r10*x2525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2526.value)))+(x2527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2528=IKsin(j4);
IkReal x2529=((0.866025403784439)*r22);
IkReal x2530=((0.5)*r20);
IkReal x2531=(cj5*x2528);
IkReal x2532=IKcos(j4);
IkReal x2533=((1.0)*cj5*x2532);
IkReal x2534=(r20*sj5);
IkReal x2535=((0.5)*r21*sj5);
IkReal x2536=((0.866025403784439)*cj0*r02);
IkReal x2537=((0.866025403784439)*r12*sj0);
IkReal x2538=(cj0*cj5*x2528);
IkReal x2539=(cj0*sj5*x2528);
IkReal x2540=(cj5*sj0*x2528);
IkReal x2541=(sj0*sj5*x2528);
IkReal x2542=((0.5)*r00);
IkReal x2543=(cj0*cj5*x2532);
IkReal x2544=((0.5)*r01);
IkReal x2545=(cj0*sj5*x2532);
IkReal x2546=((0.5)*r10);
IkReal x2547=(cj5*sj0*x2532);
IkReal x2548=((0.5)*r11);
IkReal x2549=(sj0*sj5*x2532);
IkReal x2550=((0.866025403784439)*cj0*r12);
IkReal x2551=((0.866025403784439)*r02*sj0);
IkReal x2552=(r00*sj0*sj5);
IkReal x2553=((1.0)*cj0*cj5*x2532);
IkReal x2554=((1.0)*cj0*sj5*x2532);
evalcond[0]=((((-1.0)*r21*x2533))+(((-1.0)*x2530*x2531))+((x2528*x2535))+(((-1.0)*x2532*x2534))+((x2528*x2529)));
evalcond[1]=((0.866025403784439)+((r21*x2531))+((x2528*x2534))+((x2529*x2532))+(((-1.0)*cj5*x2530*x2532))+((x2532*x2535)));
evalcond[2]=((((-1.0)*x2542*x2543))+((x2532*x2537))+((x2544*x2545))+((x2532*x2536))+((r11*x2540))+((r01*x2538))+(((-1.0)*x2546*x2547))+((r10*x2541))+((r00*x2539))+((x2548*x2549)));
evalcond[3]=(((r01*x2547))+(((-1.0)*x2528*x2551))+(((-1.0)*r11*x2553))+((x2539*x2548))+(((-1.0)*x2538*x2546))+(((-1.0)*r10*x2554))+((x2528*x2550))+((x2532*x2552))+(((-1.0)*x2541*x2544))+((x2540*x2542)));
evalcond[4]=((-0.5)+(((-1.0)*x2528*x2552))+((r10*x2539))+((r11*x2538))+(((-1.0)*x2532*x2551))+((x2542*x2547))+(((-1.0)*x2543*x2546))+(((-1.0)*x2544*x2549))+((x2532*x2550))+(((-1.0)*r01*x2540))+((x2545*x2548)));
evalcond[5]=((-1.0)+((x2528*x2536))+((x2539*x2544))+((x2528*x2537))+(((-1.0)*r10*sj0*sj5*x2532))+(((-1.0)*r11*sj0*x2533))+(((-1.0)*x2538*x2542))+((x2541*x2548))+(((-1.0)*r00*x2554))+(((-1.0)*r01*x2553))+(((-1.0)*x2540*x2546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2555=((1.73205080756888)*r21);
IkReal x2556=(cj5*r20);
IkReal x2557=(r21*sj5);
IkReal x2558=r20*r20;
IkReal x2559=r21*r21;
IkReal x2560=((1.5)*(cj5*cj5));
CheckValue<IkReal> x2561 = IKatan2WithCheck(IkReal(((((1.73205080756888)*r20*sj5))+((cj5*x2555)))),IkReal(((((0.866025403784439)*x2557))+(((-0.866025403784439)*x2556))+(((1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2561.valid){
continue;
}
CheckValue<IkReal> x2562=IKPowWithIntegerCheck(IKsign(((((-0.5)*x2559))+((x2558*x2560))+(((-1.0)*x2559*x2560))+(((-2.0)*x2558))+(((-3.0)*cj5*r20*x2557))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*r22*sj5*x2555))+(((1.73205080756888)*r22*x2556)))),-1);
if(!x2562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2561.value)+(((1.5707963267949)*(x2562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2563=IKsin(j4);
IkReal x2564=((0.866025403784439)*r22);
IkReal x2565=((0.5)*r20);
IkReal x2566=(cj5*x2563);
IkReal x2567=IKcos(j4);
IkReal x2568=((1.0)*cj5*x2567);
IkReal x2569=(r20*sj5);
IkReal x2570=((0.5)*r21*sj5);
IkReal x2571=((0.866025403784439)*cj0*r02);
IkReal x2572=((0.866025403784439)*r12*sj0);
IkReal x2573=(cj0*cj5*x2563);
IkReal x2574=(cj0*sj5*x2563);
IkReal x2575=(cj5*sj0*x2563);
IkReal x2576=(sj0*sj5*x2563);
IkReal x2577=((0.5)*r00);
IkReal x2578=(cj0*cj5*x2567);
IkReal x2579=((0.5)*r01);
IkReal x2580=(cj0*sj5*x2567);
IkReal x2581=((0.5)*r10);
IkReal x2582=(cj5*sj0*x2567);
IkReal x2583=((0.5)*r11);
IkReal x2584=(sj0*sj5*x2567);
IkReal x2585=((0.866025403784439)*cj0*r12);
IkReal x2586=((0.866025403784439)*r02*sj0);
IkReal x2587=(r00*sj0*sj5);
IkReal x2588=((1.0)*cj0*cj5*x2567);
IkReal x2589=((1.0)*cj0*sj5*x2567);
evalcond[0]=((((-1.0)*x2565*x2566))+((x2563*x2570))+(((-1.0)*x2567*x2569))+(((-1.0)*r21*x2568))+((x2563*x2564)));
evalcond[1]=((0.866025403784439)+((x2563*x2569))+((x2564*x2567))+((r21*x2566))+((x2567*x2570))+(((-1.0)*cj5*x2565*x2567)));
evalcond[2]=(((x2567*x2572))+(((-1.0)*x2581*x2582))+(((-1.0)*x2577*x2578))+((x2579*x2580))+((x2583*x2584))+((r10*x2576))+((r00*x2574))+((x2567*x2571))+((r01*x2573))+((r11*x2575)));
evalcond[3]=(((x2567*x2587))+((x2574*x2583))+((r01*x2582))+(((-1.0)*r10*x2589))+(((-1.0)*x2576*x2579))+((x2563*x2585))+((x2575*x2577))+(((-1.0)*x2573*x2581))+(((-1.0)*x2563*x2586))+(((-1.0)*r11*x2588)));
evalcond[4]=((-0.5)+(((-1.0)*x2563*x2587))+(((-1.0)*x2578*x2581))+(((-1.0)*x2579*x2584))+((x2567*x2585))+((r11*x2573))+((r10*x2574))+((x2577*x2582))+((x2580*x2583))+(((-1.0)*x2567*x2586))+(((-1.0)*r01*x2575)));
evalcond[5]=((-1.0)+(((-1.0)*r10*sj0*sj5*x2567))+((x2574*x2579))+(((-1.0)*x2573*x2577))+((x2576*x2583))+(((-1.0)*x2575*x2581))+(((-1.0)*r00*x2589))+((x2563*x2572))+(((-1.0)*r11*sj0*x2568))+(((-1.0)*r01*x2588))+((x2563*x2571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2590=((0.866025403784439)*cj0);
IkReal x2591=((0.866025403784439)*sj0);
CheckValue<IkReal> x2592=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x2591))+((cj5*r00*x2591))+((r11*sj5*x2590))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0))+(((-1.0)*cj5*r10*x2590)))),-1);
if(!x2592.valid){
continue;
}
CheckValue<IkReal> x2593 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2592.value)))+(x2593.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2594=IKsin(j4);
IkReal x2595=((0.866025403784439)*r22);
IkReal x2596=((0.5)*r20);
IkReal x2597=(cj5*x2594);
IkReal x2598=IKcos(j4);
IkReal x2599=((1.0)*cj5*x2598);
IkReal x2600=(r20*sj5);
IkReal x2601=((0.5)*r21*sj5);
IkReal x2602=((0.866025403784439)*cj0*r02);
IkReal x2603=((0.866025403784439)*r12*sj0);
IkReal x2604=(cj0*cj5*x2594);
IkReal x2605=(cj0*sj5*x2594);
IkReal x2606=(cj5*sj0*x2594);
IkReal x2607=(sj0*sj5*x2594);
IkReal x2608=((0.5)*r00);
IkReal x2609=(cj0*cj5*x2598);
IkReal x2610=((0.5)*r01);
IkReal x2611=(cj0*sj5*x2598);
IkReal x2612=((0.5)*r10);
IkReal x2613=(cj5*sj0*x2598);
IkReal x2614=((0.5)*r11);
IkReal x2615=(sj0*sj5*x2598);
IkReal x2616=((0.866025403784439)*cj0*r12);
IkReal x2617=((0.866025403784439)*r02*sj0);
IkReal x2618=(r00*sj0*sj5);
IkReal x2619=((1.0)*cj0*cj5*x2598);
IkReal x2620=((1.0)*cj0*sj5*x2598);
evalcond[0]=((((-1.0)*r21*x2599))+(((-1.0)*x2596*x2597))+(((-1.0)*x2598*x2600))+((x2594*x2595))+((x2594*x2601)));
evalcond[1]=((0.866025403784439)+((r21*x2597))+((x2598*x2601))+((x2594*x2600))+(((-1.0)*cj5*x2596*x2598))+((x2595*x2598)));
evalcond[2]=(((x2598*x2602))+((r10*x2607))+((r11*x2606))+((x2598*x2603))+((r00*x2605))+(((-1.0)*x2612*x2613))+(((-1.0)*x2608*x2609))+((x2614*x2615))+((r01*x2604))+((x2610*x2611)));
evalcond[3]=((((-1.0)*x2604*x2612))+((x2606*x2608))+((x2605*x2614))+(((-1.0)*r11*x2619))+((x2594*x2616))+((r01*x2613))+(((-1.0)*x2607*x2610))+(((-1.0)*x2594*x2617))+(((-1.0)*r10*x2620))+((x2598*x2618)));
evalcond[4]=((-0.5)+(((-1.0)*x2594*x2618))+((x2608*x2613))+((r11*x2604))+(((-1.0)*x2598*x2617))+(((-1.0)*x2609*x2612))+((x2598*x2616))+(((-1.0)*r01*x2606))+((x2611*x2614))+(((-1.0)*x2610*x2615))+((r10*x2605)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x2619))+(((-1.0)*x2604*x2608))+((x2594*x2603))+(((-1.0)*r00*x2620))+(((-1.0)*r11*sj0*x2599))+(((-1.0)*x2606*x2612))+((x2594*x2602))+((x2605*x2610))+((x2607*x2614))+(((-1.0)*r10*sj0*sj5*x2598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2621=(cj5*sj3);
IkReal x2622=(sj3*sj5);
IkReal x2623=((0.5)*r21);
IkReal x2624=((2.0)*r20);
IkReal x2625=(cj0*r00);
IkReal x2626=(cj0*r01);
IkReal x2627=((1.5)*r22);
IkReal x2628=(r10*sj0);
IkReal x2629=(r11*sj0);
IkReal x2630=((0.866025403784439)*cj5*r22);
IkReal x2631=(cj5*r20);
IkReal x2632=((0.866025403784439)*cj0*r02);
IkReal x2633=((0.866025403784439)*r22*sj5);
IkReal x2634=(r21*sj5);
IkReal x2635=((0.866025403784439)*r12*sj0);
IkReal x2636=((1.5)*cj5*r21*sj5);
IkReal x2637=((1.5)*cj5*r20*sj5);
IkReal x2638=cj5*cj5;
IkReal x2639=((1.5)*r20*x2638);
IkReal x2640=((1.5)*r21*x2638);
CheckValue<IkReal> x2641 = IKatan2WithCheck(IkReal((((r20*x2622))+((r21*x2621)))),IkReal((((sj3*(((0.866025403784439)*r22))))+((x2622*x2623))+(((-0.5)*r20*x2621)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2641.valid){
continue;
}
CheckValue<IkReal> x2642=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2623*x2629))+(((-1.0)*x2626*x2640))+(((-1.0)*x2625*x2636))+(((-1.0)*r12*sj0*x2627))+(((-1.0)*x2634*x2635))+((x2631*x2632))+((x2631*x2635))+(((-1.0)*x2623*x2626))+(((-1.0)*x2624*x2625))+((x2628*x2630))+(((-1.0)*x2626*x2637))+((x2625*x2630))+(((-1.0)*x2624*x2628))+(((-1.0)*x2629*x2633))+(((-1.0)*x2629*x2637))+(((-1.0)*x2632*x2634))+(((-1.0)*x2628*x2636))+((x2625*x2639))+(((-1.0)*x2629*x2640))+(((-1.0)*cj0*r02*x2627))+(((-1.0)*x2626*x2633))+((x2628*x2639)))),-1);
if(!x2642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2641.value)+(((1.5707963267949)*(x2642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2643=IKsin(j4);
IkReal x2644=((0.866025403784439)*r22);
IkReal x2645=((0.5)*r20);
IkReal x2646=(cj5*x2643);
IkReal x2647=IKcos(j4);
IkReal x2648=((1.0)*cj5*x2647);
IkReal x2649=(r20*sj5);
IkReal x2650=((0.5)*r21*sj5);
IkReal x2651=((0.866025403784439)*cj0*r02);
IkReal x2652=((0.866025403784439)*r12*sj0);
IkReal x2653=(cj0*cj5*x2643);
IkReal x2654=(cj0*sj5*x2643);
IkReal x2655=(cj5*sj0*x2643);
IkReal x2656=(sj0*sj5*x2643);
IkReal x2657=((0.5)*r00);
IkReal x2658=(cj0*cj5*x2647);
IkReal x2659=((0.5)*r01);
IkReal x2660=(cj0*sj5*x2647);
IkReal x2661=((0.5)*r10);
IkReal x2662=(cj5*sj0*x2647);
IkReal x2663=((0.5)*r11);
IkReal x2664=(sj0*sj5*x2647);
IkReal x2665=((0.866025403784439)*cj0*r12);
IkReal x2666=((0.866025403784439)*r02*sj0);
IkReal x2667=(r00*sj0*sj5);
IkReal x2668=((1.0)*cj0*cj5*x2647);
IkReal x2669=((1.0)*cj0*sj5*x2647);
evalcond[0]=((((-1.0)*r21*x2648))+((x2643*x2644))+((x2643*x2650))+(((-1.0)*x2645*x2646))+(((-1.0)*x2647*x2649)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x2645*x2647))+((x2643*x2649))+((x2647*x2650))+((x2644*x2647))+((r21*x2646)));
evalcond[2]=((((-1.0)*x2657*x2658))+((x2659*x2660))+((r01*x2653))+(((0.5)*sj3))+((r11*x2655))+((r00*x2654))+(((-1.0)*x2661*x2662))+((x2663*x2664))+((x2647*x2652))+((x2647*x2651))+((r10*x2656)));
evalcond[3]=(((x2657*x2662))+(((-1.0)*r01*x2655))+(((-1.0)*x2659*x2664))+((r10*x2654))+(((-1.0)*x2643*x2667))+(((-1.0)*x2647*x2666))+((r11*x2653))+(((-1.0)*x2658*x2661))+((x2660*x2663))+(((0.5)*cj3))+((x2647*x2665)));
evalcond[4]=(((x2647*x2667))+(((-1.0)*r11*x2668))+((x2643*x2665))+(((-1.0)*x2653*x2661))+(((-1.0)*x2643*x2666))+(((-1.0)*x2656*x2659))+(((-1.0)*r10*x2669))+((x2655*x2657))+((r01*x2662))+((x2654*x2663))+(((-1.0)*(1.0)*sj3)));
evalcond[5]=((((-1.0)*r10*sj0*sj5*x2647))+(((-1.0)*x2653*x2657))+(((-1.0)*r00*x2669))+((x2654*x2659))+((x2643*x2652))+(((-1.0)*r11*sj0*x2648))+cj3+(((-1.0)*x2655*x2661))+(((-1.0)*r01*x2668))+((x2656*x2663))+((x2643*x2651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2670=((1.73205080756888)*r21);
IkReal x2671=(cj5*r20);
IkReal x2672=(r21*sj5);
IkReal x2673=r20*r20;
IkReal x2674=r21*r21;
IkReal x2675=((1.5)*(cj5*cj5));
CheckValue<IkReal> x2676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*sj5*x2670))+(((-1.0)*x2674*x2675))+(((1.73205080756888)*r22*x2671))+((x2673*x2675))+(((-3.0)*cj5*r20*x2672))+(((-0.5)*x2674))+(((-2.0)*x2673))+(((-1.0)*(1.5)*(r22*r22))))),-1);
if(!x2676.valid){
continue;
}
CheckValue<IkReal> x2677 = IKatan2WithCheck(IkReal((((cj5*x2670))+(((1.73205080756888)*r20*sj5)))),IkReal(((((0.866025403784439)*x2672))+(((-0.866025403784439)*x2671))+(((1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2676.value)))+(x2677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2678=IKsin(j4);
IkReal x2679=((0.866025403784439)*r22);
IkReal x2680=((0.5)*r20);
IkReal x2681=(cj5*x2678);
IkReal x2682=IKcos(j4);
IkReal x2683=((1.0)*cj5*x2682);
IkReal x2684=(r20*sj5);
IkReal x2685=((0.5)*r21*sj5);
IkReal x2686=((0.866025403784439)*cj0*r02);
IkReal x2687=((0.866025403784439)*r12*sj0);
IkReal x2688=(cj0*cj5*x2678);
IkReal x2689=(cj0*sj5*x2678);
IkReal x2690=(cj5*sj0*x2678);
IkReal x2691=(sj0*sj5*x2678);
IkReal x2692=((0.5)*r00);
IkReal x2693=(cj0*cj5*x2682);
IkReal x2694=((0.5)*r01);
IkReal x2695=(cj0*sj5*x2682);
IkReal x2696=((0.5)*r10);
IkReal x2697=(cj5*sj0*x2682);
IkReal x2698=((0.5)*r11);
IkReal x2699=(sj0*sj5*x2682);
IkReal x2700=((0.866025403784439)*cj0*r12);
IkReal x2701=((0.866025403784439)*r02*sj0);
IkReal x2702=(r00*sj0*sj5);
IkReal x2703=((1.0)*cj0*cj5*x2682);
IkReal x2704=((1.0)*cj0*sj5*x2682);
evalcond[0]=((((-1.0)*x2682*x2684))+((x2678*x2679))+((x2678*x2685))+(((-1.0)*r21*x2683))+(((-1.0)*x2680*x2681)));
evalcond[1]=((0.866025403784439)+((x2678*x2684))+((x2679*x2682))+((r21*x2681))+(((-1.0)*cj5*x2680*x2682))+((x2682*x2685)));
evalcond[2]=(((r10*x2691))+((x2694*x2695))+((r00*x2689))+(((0.5)*sj3))+((x2698*x2699))+((x2682*x2686))+((r01*x2688))+(((-1.0)*x2692*x2693))+(((-1.0)*x2696*x2697))+((r11*x2690))+((x2682*x2687)));
evalcond[3]=((((-1.0)*x2678*x2702))+((r11*x2688))+((x2682*x2700))+(((-1.0)*x2682*x2701))+((r10*x2689))+(((-1.0)*x2693*x2696))+((x2695*x2698))+(((-1.0)*x2694*x2699))+(((0.5)*cj3))+((x2692*x2697))+(((-1.0)*r01*x2690)));
evalcond[4]=(((x2682*x2702))+((x2678*x2700))+((r01*x2697))+((x2689*x2698))+(((-1.0)*x2688*x2696))+(((-1.0)*x2678*x2701))+(((-1.0)*r11*x2703))+(((-1.0)*(1.0)*sj3))+((x2690*x2692))+(((-1.0)*x2691*x2694))+(((-1.0)*r10*x2704)));
evalcond[5]=(((x2689*x2694))+(((-1.0)*r00*x2704))+(((-1.0)*x2690*x2696))+(((-1.0)*x2688*x2692))+(((-1.0)*r01*x2703))+cj3+((x2678*x2687))+((x2691*x2698))+(((-1.0)*r11*sj0*x2683))+((x2678*x2686))+(((-1.0)*r10*sj0*sj5*x2682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2705=(cj5*sj3);
IkReal x2706=(sj3*sj5);
IkReal x2707=((0.866025403784439)*cj0);
IkReal x2708=((0.866025403784439)*sj0);
CheckValue<IkReal> x2709=IKPowWithIntegerCheck(IKsign((((cj5*r00*x2707))+((cj5*r10*x2708))+(((0.5)*r12*sj0))+(((-1.0)*r01*sj5*x2707))+(((-1.0)*r11*sj5*x2708))+(((0.5)*cj0*r02)))),-1);
if(!x2709.valid){
continue;
}
CheckValue<IkReal> x2710 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2705))+(((-1.0)*r20*x2706)))),IkReal(((((0.5)*r20*x2705))+(((-1.0)*(0.866025403784439)*r22*sj3))+(((-0.5)*r21*x2706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2709.value)))+(x2710.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2711=IKsin(j4);
IkReal x2712=((0.866025403784439)*r22);
IkReal x2713=((0.5)*r20);
IkReal x2714=(cj5*x2711);
IkReal x2715=IKcos(j4);
IkReal x2716=((1.0)*cj5*x2715);
IkReal x2717=(r20*sj5);
IkReal x2718=((0.5)*r21*sj5);
IkReal x2719=((0.866025403784439)*cj0*r02);
IkReal x2720=((0.866025403784439)*r12*sj0);
IkReal x2721=(cj0*cj5*x2711);
IkReal x2722=(cj0*sj5*x2711);
IkReal x2723=(cj5*sj0*x2711);
IkReal x2724=(sj0*sj5*x2711);
IkReal x2725=((0.5)*r00);
IkReal x2726=(cj0*cj5*x2715);
IkReal x2727=((0.5)*r01);
IkReal x2728=(cj0*sj5*x2715);
IkReal x2729=((0.5)*r10);
IkReal x2730=(cj5*sj0*x2715);
IkReal x2731=((0.5)*r11);
IkReal x2732=(sj0*sj5*x2715);
IkReal x2733=((0.866025403784439)*cj0*r12);
IkReal x2734=((0.866025403784439)*r02*sj0);
IkReal x2735=(r00*sj0*sj5);
IkReal x2736=((1.0)*cj0*cj5*x2715);
IkReal x2737=((1.0)*cj0*sj5*x2715);
evalcond[0]=((((-1.0)*x2713*x2714))+(((-1.0)*x2715*x2717))+((x2711*x2718))+(((-1.0)*r21*x2716))+((x2711*x2712)));
evalcond[1]=((0.866025403784439)+((r21*x2714))+(((-1.0)*cj5*x2713*x2715))+((x2711*x2717))+((x2712*x2715))+((x2715*x2718)));
evalcond[2]=(((r10*x2724))+((r01*x2721))+(((0.5)*sj3))+(((-1.0)*x2729*x2730))+((r00*x2722))+(((-1.0)*x2725*x2726))+((r11*x2723))+((x2715*x2720))+((x2727*x2728))+((x2715*x2719))+((x2731*x2732)));
evalcond[3]=((((-1.0)*x2727*x2732))+(((-1.0)*r01*x2723))+((x2728*x2731))+((x2725*x2730))+((x2715*x2733))+((r10*x2722))+(((-1.0)*x2711*x2735))+((r11*x2721))+(((0.5)*cj3))+(((-1.0)*x2726*x2729))+(((-1.0)*x2715*x2734)));
evalcond[4]=(((x2722*x2731))+((r01*x2730))+(((-1.0)*r11*x2736))+((x2711*x2733))+(((-1.0)*r10*x2737))+(((-1.0)*x2721*x2729))+(((-1.0)*x2711*x2734))+(((-1.0)*(1.0)*sj3))+((x2723*x2725))+((x2715*x2735))+(((-1.0)*x2724*x2727)));
evalcond[5]=(((x2722*x2727))+(((-1.0)*r11*sj0*x2716))+(((-1.0)*r00*x2737))+((x2711*x2719))+(((-1.0)*r10*sj0*sj5*x2715))+((x2711*x2720))+((x2724*x2731))+cj3+(((-1.0)*x2721*x2725))+(((-1.0)*r01*x2736))+(((-1.0)*x2723*x2729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2738=((0.577350269189626)*cj0);
IkReal x2739=((0.577350269189626)*sj0);
IkReal x2740=(r01*sj5);
IkReal x2741=(r11*sj5);
IkReal x2742=((1.0)*r00);
IkReal x2743=(cj0*cj5);
IkReal x2744=(cj5*sj0);
if( IKabs(((((-1.0)*x2742*x2743))+((sj0*x2741))+(((-1.0)*r12*x2739))+(((-1.0)*r10*x2744))+((cj0*x2740))+(((-1.0)*r02*x2738)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2742*x2744))+((r12*x2738))+((sj0*x2740))+(((-1.0)*cj0*x2741))+(((-1.0)*r02*x2739))+((r10*x2743)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2742*x2743))+((sj0*x2741))+(((-1.0)*r12*x2739))+(((-1.0)*r10*x2744))+((cj0*x2740))+(((-1.0)*r02*x2738))))+IKsqr(((((-1.0)*x2742*x2744))+((r12*x2738))+((sj0*x2740))+(((-1.0)*cj0*x2741))+(((-1.0)*r02*x2739))+((r10*x2743))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x2742*x2743))+((sj0*x2741))+(((-1.0)*r12*x2739))+(((-1.0)*r10*x2744))+((cj0*x2740))+(((-1.0)*r02*x2738))), ((((-1.0)*x2742*x2744))+((r12*x2738))+((sj0*x2740))+(((-1.0)*cj0*x2741))+(((-1.0)*r02*x2739))+((r10*x2743))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x2745=((0.5)*cj0);
IkReal x2746=((0.5)*sj0);
IkReal x2747=((0.866025403784439)*cj0*cj5);
IkReal x2748=((0.866025403784439)*cj0*sj5);
IkReal x2749=((0.866025403784439)*cj5*sj0);
IkReal x2750=((0.866025403784439)*sj0*sj5);
evalcond[0]=((((-1.0)*r12*x2745))+((r02*x2746))+(((-1.0)*r01*x2750))+((r00*x2749))+(((-1.0)*r10*x2747))+((r11*x2748))+(((0.866025403784439)*(IKcos(j3)))));
evalcond[1]=((((-1.0)*r12*x2746))+(((-1.0)*r02*x2745))+(((-1.0)*(0.866025403784439)*(IKsin(j3))))+((r01*x2748))+(((-1.0)*r10*x2749))+(((-1.0)*r00*x2747))+((r11*x2750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2751=(cj0*r02);
IkReal x2752=(r12*sj0);
IkReal x2753=(cj0*cj5*r00);
IkReal x2754=(cj0*r01*sj5);
IkReal x2755=(cj5*r10*sj0);
IkReal x2756=(r11*sj0*sj5);
IkReal x2757=(cj5*sj3);
IkReal x2758=(sj3*sj5);
j4eval[0]=((((-1.73205080756888)*x2754))+(((1.73205080756888)*x2755))+x2751+x2752+(((-1.73205080756888)*x2756))+(((1.73205080756888)*x2753)));
j4eval[1]=((IKabs((((r21*x2757))+((r20*x2758)))))+(((0.5)*(IKabs(((((-1.0)*r21*x2758))+(((-1.0)*(1.73205080756888)*r22*sj3))+((r20*x2757))))))));
j4eval[2]=IKsign(((((0.866025403784439)*x2755))+(((-0.866025403784439)*x2754))+(((0.5)*x2752))+(((0.5)*x2751))+(((-0.866025403784439)*x2756))+(((0.866025403784439)*x2753))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2759=r20*r20;
IkReal x2760=r21*r21;
IkReal x2761=r22*r22;
IkReal x2762=(cj5*r20*r22);
IkReal x2763=(r21*r22*sj5);
IkReal x2764=(cj5*r20*r21*sj5);
IkReal x2765=cj5*cj5;
IkReal x2766=(x2759*x2765);
IkReal x2767=(x2760*x2765);
j4eval[0]=((((-6.0)*x2764))+(((-4.0)*x2759))+(((3.0)*x2766))+(((-3.46410161513775)*x2763))+(((-3.0)*x2767))+(((-3.0)*x2761))+(((-1.0)*x2760))+(((3.46410161513775)*x2762)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-2.0)*x2759))+(((-1.5)*x2767))+(((-1.5)*x2761))+(((1.5)*x2766))+(((-1.73205080756888)*x2763))+(((-0.5)*x2760))+(((-3.0)*x2764))+(((1.73205080756888)*x2762))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2768=(r01*r21*sj0);
IkReal x2769=(cj0*r10*r20);
IkReal x2770=(cj0*r11*r21);
IkReal x2771=(cj0*r12*r22);
IkReal x2772=(r00*r20*sj0);
IkReal x2773=(r02*r22*sj0);
IkReal x2774=((1.73205080756888)*r22);
IkReal x2775=(cj0*cj5*r10);
IkReal x2776=(cj0*cj5*r12*r20);
IkReal x2777=(cj0*r11*sj5);
IkReal x2778=(cj0*r12*r21*sj5);
IkReal x2779=(cj5*r00*sj0);
IkReal x2780=(cj5*r02*r20*sj0);
IkReal x2781=(r01*sj0*sj5);
IkReal x2782=(r02*r21*sj0*sj5);
IkReal x2783=(cj0*cj5*r10*r21*sj5);
IkReal x2784=(cj0*cj5*r11*r20*sj5);
IkReal x2785=(cj5*r00*r21*sj0*sj5);
IkReal x2786=(cj5*r01*r20*sj0*sj5);
IkReal x2787=cj5*cj5;
IkReal x2788=(cj0*r10*r20*x2787);
IkReal x2789=(cj0*r11*r21*x2787);
IkReal x2790=(r00*r20*sj0*x2787);
IkReal x2791=(r01*r21*sj0*x2787);
IkReal x2792=((0.866025403784439)*r22);
IkReal x2793=(cj3*r21);
IkReal x2794=(cj3*r20);
j4eval[0]=((((1.73205080756888)*x2782))+(((4.0)*x2772))+(((-3.0)*x2783))+(((3.0)*x2785))+(((-1.73205080756888)*x2780))+(((-3.0)*x2784))+(((3.0)*x2786))+(((-1.73205080756888)*x2778))+(((3.0)*x2788))+(((-1.0)*x2774*x2779))+(((1.73205080756888)*x2776))+(((3.0)*x2773))+(((-3.0)*x2789))+((x2774*x2775))+(((3.0)*x2791))+(((-3.0)*x2790))+(((-1.0)*x2774*x2777))+x2768+((x2774*x2781))+(((-1.0)*x2770))+(((-4.0)*x2769))+(((-3.0)*x2771)));
j4eval[1]=IKsign(((((1.5)*x2773))+(((1.5)*x2791))+(((0.866025403784439)*x2782))+(((-0.5)*x2770))+(((-0.866025403784439)*x2780))+(((-1.5)*x2790))+(((0.866025403784439)*x2776))+(((2.0)*x2772))+(((-1.5)*x2771))+(((1.5)*x2786))+((x2781*x2792))+((x2775*x2792))+(((-1.0)*x2779*x2792))+(((-2.0)*x2769))+(((-1.5)*x2783))+(((-1.5)*x2784))+(((-1.0)*x2777*x2792))+(((0.5)*x2768))+(((1.5)*x2788))+(((1.5)*x2785))+(((-1.5)*x2789))+(((-0.866025403784439)*x2778))));
j4eval[2]=((IKabs((((cj5*x2793))+((sj5*x2794)))))+(((0.5)*(IKabs((((sj5*x2793))+(((-1.0)*cj5*x2794))+((cj3*x2774))))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2795=(cj0*r02);
IkReal x2796=(r12*sj0);
IkReal x2797=(cj0*cj5*r00);
IkReal x2798=(cj0*r01*sj5);
IkReal x2799=(cj5*r10*sj0);
IkReal x2800=(r11*sj0*sj5);
j4eval[0]=(x2796+x2795+(((-1.73205080756888)*x2800))+(((-1.73205080756888)*x2798))+(((1.73205080756888)*x2797))+(((1.73205080756888)*x2799)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.5)*x2795))+(((0.866025403784439)*x2799))+(((-0.866025403784439)*x2800))+(((0.5)*x2796))+(((-0.866025403784439)*x2798))+(((0.866025403784439)*x2797))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2801=r20*r20;
IkReal x2802=r21*r21;
IkReal x2803=r22*r22;
IkReal x2804=(cj5*r20*r22);
IkReal x2805=(r21*r22*sj5);
IkReal x2806=(cj5*r20*r21*sj5);
IkReal x2807=cj5*cj5;
IkReal x2808=(x2801*x2807);
IkReal x2809=(x2802*x2807);
j4eval[0]=((((3.0)*x2808))+(((-3.0)*x2803))+(((-6.0)*x2806))+(((-3.46410161513775)*x2805))+(((-1.0)*x2802))+(((-3.0)*x2809))+(((-4.0)*x2801))+(((3.46410161513775)*x2804)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.73205080756888)*x2805))+(((-3.0)*x2806))+(((-2.0)*x2801))+(((-0.5)*x2802))+(((1.5)*x2808))+(((-1.5)*x2803))+(((1.73205080756888)*x2804))+(((-1.5)*x2809))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2810=((1.73205080756888)*cj0);
IkReal x2811=((1.73205080756888)*sj0);
IkReal x2812=(((cj5*r00*x2811))+(((-1.0)*cj5*r10*x2810))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*sj5*x2811))+((r11*sj5*x2810)));
j4eval[0]=x2812;
j4eval[1]=IKsign(x2812);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2813=((1.73205080756888)*cj0*cj5);
IkReal x2814=((1.73205080756888)*cj0*sj5);
IkReal x2815=((1.73205080756888)*cj5*sj0);
IkReal x2816=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x2817=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2816))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*x2814))+((r00*x2815))+(((-1.0)*r10*x2813)))),-1);
if(!x2817.valid){
continue;
}
CheckValue<IkReal> x2818 = IKatan2WithCheck(IkReal(((((-1.0)*(0.5)*cj5*r20))+(((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((0.866025403784439)*r22))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5))+(((0.5)*r21*sj5)))),IkReal((((r10*x2816))+((r01*x2813))+(((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21))+((r11*x2815))+((r00*x2814)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2817.value)))+(x2818.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2819=IKsin(j4);
IkReal x2820=((0.866025403784439)*r22);
IkReal x2821=((0.5)*r20);
IkReal x2822=(cj5*x2819);
IkReal x2823=IKcos(j4);
IkReal x2824=((1.0)*cj5*x2823);
IkReal x2825=(r20*sj5);
IkReal x2826=((0.5)*r21*sj5);
IkReal x2827=((0.866025403784439)*cj0*r02);
IkReal x2828=((0.866025403784439)*r12*sj0);
IkReal x2829=(cj0*cj5*x2819);
IkReal x2830=(cj0*sj5*x2819);
IkReal x2831=(cj5*sj0*x2819);
IkReal x2832=(sj0*sj5*x2819);
IkReal x2833=((0.5)*r00);
IkReal x2834=(cj0*cj5*x2823);
IkReal x2835=((0.5)*r01);
IkReal x2836=(cj0*sj5*x2823);
IkReal x2837=((0.5)*r10);
IkReal x2838=(cj5*sj0*x2823);
IkReal x2839=((0.5)*r11);
IkReal x2840=(sj0*sj5*x2823);
IkReal x2841=((0.866025403784439)*cj0*r12);
IkReal x2842=((0.866025403784439)*r02*sj0);
IkReal x2843=(r00*sj0*sj5);
IkReal x2844=((1.0)*cj0*cj5*x2823);
IkReal x2845=((1.0)*cj0*sj5*x2823);
evalcond[0]=((((-1.0)*x2821*x2822))+((x2819*x2826))+(((-1.0)*r21*x2824))+((x2819*x2820))+(((-1.0)*x2823*x2825)));
evalcond[1]=((-0.866025403784439)+((x2823*x2826))+((r21*x2822))+((x2820*x2823))+(((-1.0)*cj5*x2821*x2823))+((x2819*x2825)));
evalcond[2]=((-0.5)+((x2823*x2828))+((x2835*x2836))+((r01*x2829))+((r11*x2831))+((x2823*x2827))+((r10*x2832))+(((-1.0)*x2837*x2838))+((x2839*x2840))+((r00*x2830))+(((-1.0)*x2833*x2834)));
evalcond[3]=(((r10*x2830))+(((-1.0)*x2819*x2843))+(((-1.0)*x2835*x2840))+(((-1.0)*r01*x2831))+((r11*x2829))+((x2823*x2841))+(((-1.0)*x2834*x2837))+((x2836*x2839))+(((-1.0)*x2823*x2842))+((x2833*x2838)));
evalcond[4]=((-1.0)+((r01*x2838))+(((-1.0)*r10*x2845))+(((-1.0)*x2832*x2835))+((x2830*x2839))+((x2823*x2843))+(((-1.0)*x2819*x2842))+(((-1.0)*r11*x2844))+((x2819*x2841))+((x2831*x2833))+(((-1.0)*x2829*x2837)));
evalcond[5]=(((x2819*x2828))+(((-1.0)*r10*sj0*sj5*x2823))+(((-1.0)*r11*sj0*x2824))+(((-1.0)*x2831*x2837))+((x2830*x2835))+((x2819*x2827))+(((-1.0)*x2829*x2833))+((x2832*x2839))+(((-1.0)*r00*x2845))+(((-1.0)*r01*x2844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2846=((1.73205080756888)*r21);
IkReal x2847=(cj5*r20);
IkReal x2848=(r21*sj5);
IkReal x2849=r20*r20;
IkReal x2850=r21*r21;
IkReal x2851=((1.5)*(cj5*cj5));
CheckValue<IkReal> x2852=IKPowWithIntegerCheck(IKsign(((((-3.0)*cj5*r20*x2848))+(((1.73205080756888)*r22*x2847))+((x2849*x2851))+(((-2.0)*x2849))+(((-0.5)*x2850))+(((-1.0)*r22*sj5*x2846))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*x2850*x2851)))),-1);
if(!x2852.valid){
continue;
}
CheckValue<IkReal> x2853 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x2846))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x2848))+(((0.866025403784439)*x2847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2852.value)))+(x2853.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2854=IKsin(j4);
IkReal x2855=((0.866025403784439)*r22);
IkReal x2856=((0.5)*r20);
IkReal x2857=(cj5*x2854);
IkReal x2858=IKcos(j4);
IkReal x2859=((1.0)*cj5*x2858);
IkReal x2860=(r20*sj5);
IkReal x2861=((0.5)*r21*sj5);
IkReal x2862=((0.866025403784439)*cj0*r02);
IkReal x2863=((0.866025403784439)*r12*sj0);
IkReal x2864=(cj0*cj5*x2854);
IkReal x2865=(cj0*sj5*x2854);
IkReal x2866=(cj5*sj0*x2854);
IkReal x2867=(sj0*sj5*x2854);
IkReal x2868=((0.5)*r00);
IkReal x2869=(cj0*cj5*x2858);
IkReal x2870=((0.5)*r01);
IkReal x2871=(cj0*sj5*x2858);
IkReal x2872=((0.5)*r10);
IkReal x2873=(cj5*sj0*x2858);
IkReal x2874=((0.5)*r11);
IkReal x2875=(sj0*sj5*x2858);
IkReal x2876=((0.866025403784439)*cj0*r12);
IkReal x2877=((0.866025403784439)*r02*sj0);
IkReal x2878=(r00*sj0*sj5);
IkReal x2879=((1.0)*cj0*cj5*x2858);
IkReal x2880=((1.0)*cj0*sj5*x2858);
evalcond[0]=((((-1.0)*r21*x2859))+((x2854*x2861))+(((-1.0)*x2858*x2860))+((x2854*x2855))+(((-1.0)*x2856*x2857)));
evalcond[1]=((-0.866025403784439)+((x2854*x2860))+((x2858*x2861))+(((-1.0)*cj5*x2856*x2858))+((x2855*x2858))+((r21*x2857)));
evalcond[2]=((-0.5)+((x2858*x2863))+(((-1.0)*x2868*x2869))+((x2858*x2862))+((x2870*x2871))+((x2874*x2875))+((r00*x2865))+((r10*x2867))+((r01*x2864))+(((-1.0)*x2872*x2873))+((r11*x2866)));
evalcond[3]=(((x2871*x2874))+(((-1.0)*x2854*x2878))+(((-1.0)*x2858*x2877))+(((-1.0)*x2870*x2875))+((x2868*x2873))+((x2858*x2876))+(((-1.0)*r01*x2866))+((r11*x2864))+((r10*x2865))+(((-1.0)*x2869*x2872)));
evalcond[4]=((-1.0)+(((-1.0)*x2854*x2877))+(((-1.0)*r10*x2880))+((x2854*x2876))+(((-1.0)*x2867*x2870))+((x2866*x2868))+((x2865*x2874))+(((-1.0)*r11*x2879))+((r01*x2873))+((x2858*x2878))+(((-1.0)*x2864*x2872)));
evalcond[5]=((((-1.0)*x2866*x2872))+((x2854*x2862))+((x2854*x2863))+(((-1.0)*x2864*x2868))+(((-1.0)*r11*sj0*x2859))+(((-1.0)*r01*x2879))+((x2865*x2870))+((x2867*x2874))+(((-1.0)*r10*sj0*sj5*x2858))+(((-1.0)*r00*x2880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2881=((0.866025403784439)*cj0);
IkReal x2882=((0.866025403784439)*sj0);
CheckValue<IkReal> x2883=IKPowWithIntegerCheck(IKsign((((cj5*r10*x2882))+((cj5*r00*x2881))+(((-1.0)*r01*sj5*x2881))+(((0.5)*r12*sj0))+(((-1.0)*r11*sj5*x2882))+(((0.5)*cj0*r02)))),-1);
if(!x2883.valid){
continue;
}
CheckValue<IkReal> x2884 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2883.value)))+(x2884.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2885=IKsin(j4);
IkReal x2886=((0.866025403784439)*r22);
IkReal x2887=((0.5)*r20);
IkReal x2888=(cj5*x2885);
IkReal x2889=IKcos(j4);
IkReal x2890=((1.0)*cj5*x2889);
IkReal x2891=(r20*sj5);
IkReal x2892=((0.5)*r21*sj5);
IkReal x2893=((0.866025403784439)*cj0*r02);
IkReal x2894=((0.866025403784439)*r12*sj0);
IkReal x2895=(cj0*cj5*x2885);
IkReal x2896=(cj0*sj5*x2885);
IkReal x2897=(cj5*sj0*x2885);
IkReal x2898=(sj0*sj5*x2885);
IkReal x2899=((0.5)*r00);
IkReal x2900=(cj0*cj5*x2889);
IkReal x2901=((0.5)*r01);
IkReal x2902=(cj0*sj5*x2889);
IkReal x2903=((0.5)*r10);
IkReal x2904=(cj5*sj0*x2889);
IkReal x2905=((0.5)*r11);
IkReal x2906=(sj0*sj5*x2889);
IkReal x2907=((0.866025403784439)*cj0*r12);
IkReal x2908=((0.866025403784439)*r02*sj0);
IkReal x2909=(r00*sj0*sj5);
IkReal x2910=((1.0)*cj0*cj5*x2889);
IkReal x2911=((1.0)*cj0*sj5*x2889);
evalcond[0]=(((x2885*x2886))+(((-1.0)*r21*x2890))+(((-1.0)*x2887*x2888))+(((-1.0)*x2889*x2891))+((x2885*x2892)));
evalcond[1]=((-0.866025403784439)+((x2885*x2891))+((r21*x2888))+(((-1.0)*cj5*x2887*x2889))+((x2886*x2889))+((x2889*x2892)));
evalcond[2]=((-0.5)+(((-1.0)*x2899*x2900))+((x2889*x2894))+((r00*x2896))+((r01*x2895))+((x2889*x2893))+((r10*x2898))+(((-1.0)*x2903*x2904))+((r11*x2897))+((x2901*x2902))+((x2905*x2906)));
evalcond[3]=(((x2902*x2905))+(((-1.0)*x2901*x2906))+(((-1.0)*x2885*x2909))+((r10*x2896))+(((-1.0)*x2889*x2908))+((x2899*x2904))+(((-1.0)*r01*x2897))+((x2889*x2907))+(((-1.0)*x2900*x2903))+((r11*x2895)));
evalcond[4]=((-1.0)+(((-1.0)*x2895*x2903))+((x2897*x2899))+(((-1.0)*r10*x2911))+(((-1.0)*x2885*x2908))+((x2889*x2909))+(((-1.0)*x2898*x2901))+((x2885*x2907))+((r01*x2904))+((x2896*x2905))+(((-1.0)*r11*x2910)));
evalcond[5]=(((x2885*x2894))+((x2898*x2905))+((x2896*x2901))+(((-1.0)*r11*sj0*x2890))+(((-1.0)*r01*x2910))+(((-1.0)*r10*sj0*sj5*x2889))+(((-1.0)*r00*x2911))+(((-1.0)*x2895*x2899))+((x2885*x2893))+(((-1.0)*x2897*x2903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2912=(cj0*r02);
IkReal x2913=(r12*sj0);
IkReal x2914=(cj0*cj5*r00);
IkReal x2915=(cj0*r01*sj5);
IkReal x2916=(cj5*r10*sj0);
IkReal x2917=(r11*sj0*sj5);
j4eval[0]=((((-1.73205080756888)*x2915))+(((1.73205080756888)*x2916))+(((-1.73205080756888)*x2917))+x2912+x2913+(((1.73205080756888)*x2914)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((-0.866025403784439)*x2917))+(((0.866025403784439)*x2914))+(((0.866025403784439)*x2916))+(((-0.866025403784439)*x2915))+(((0.5)*x2913))+(((0.5)*x2912))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2918=r20*r20;
IkReal x2919=r21*r21;
IkReal x2920=r22*r22;
IkReal x2921=(cj5*r20*r22);
IkReal x2922=(r21*r22*sj5);
IkReal x2923=(cj5*r20*r21*sj5);
IkReal x2924=cj5*cj5;
IkReal x2925=(x2918*x2924);
IkReal x2926=(x2919*x2924);
j4eval[0]=((((-4.0)*x2918))+(((3.0)*x2925))+(((3.46410161513775)*x2921))+(((-6.0)*x2923))+(((-3.0)*x2920))+(((-3.0)*x2926))+(((-3.46410161513775)*x2922))+(((-1.0)*x2919)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.73205080756888)*x2922))+(((1.5)*x2925))+(((1.73205080756888)*x2921))+(((-1.5)*x2920))+(((-1.5)*x2926))+(((-3.0)*x2923))+(((-0.5)*x2919))+(((-2.0)*x2918))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2927=((1.73205080756888)*cj0);
IkReal x2928=((1.73205080756888)*sj0);
IkReal x2929=(((cj5*r00*x2928))+(((-1.0)*cj5*r10*x2927))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*sj5*x2927))+(((-1.0)*r01*sj5*x2928)));
j4eval[0]=x2929;
j4eval[1]=IKsign(x2929);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2930=((1.73205080756888)*cj0*cj5);
IkReal x2931=((1.73205080756888)*cj0*sj5);
IkReal x2932=((1.73205080756888)*cj5*sj0);
IkReal x2933=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x2934=IKPowWithIntegerCheck(IKsign((((r00*x2932))+((r11*x2931))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r10*x2930))+(((-1.0)*r01*x2933)))),-1);
if(!x2934.valid){
continue;
}
CheckValue<IkReal> x2935 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r20*sj5))+((cj5*r21))+((r00*x2931))+((r10*x2933))+((r01*x2930))+((r11*x2932)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2934.value)))+(x2935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2936=IKsin(j4);
IkReal x2937=((0.866025403784439)*r22);
IkReal x2938=((0.5)*r20);
IkReal x2939=(cj5*x2936);
IkReal x2940=IKcos(j4);
IkReal x2941=((1.0)*cj5*x2940);
IkReal x2942=(r20*sj5);
IkReal x2943=((0.5)*r21*sj5);
IkReal x2944=((0.866025403784439)*cj0*r02);
IkReal x2945=((0.866025403784439)*r12*sj0);
IkReal x2946=(cj0*cj5*x2936);
IkReal x2947=(cj0*sj5*x2936);
IkReal x2948=(cj5*sj0*x2936);
IkReal x2949=(sj0*sj5*x2936);
IkReal x2950=((0.5)*r00);
IkReal x2951=(cj0*cj5*x2940);
IkReal x2952=((0.5)*r01);
IkReal x2953=(cj0*sj5*x2940);
IkReal x2954=((0.5)*r10);
IkReal x2955=(cj5*sj0*x2940);
IkReal x2956=((0.5)*r11);
IkReal x2957=(sj0*sj5*x2940);
IkReal x2958=((0.866025403784439)*cj0*r12);
IkReal x2959=((0.866025403784439)*r02*sj0);
IkReal x2960=(r00*sj0*sj5);
IkReal x2961=((1.0)*cj0*cj5*x2940);
IkReal x2962=((1.0)*cj0*sj5*x2940);
evalcond[0]=((((-1.0)*x2938*x2939))+((x2936*x2937))+(((-1.0)*x2940*x2942))+((x2936*x2943))+(((-1.0)*r21*x2941)));
evalcond[1]=((-0.866025403784439)+((x2940*x2943))+((r21*x2939))+(((-1.0)*cj5*x2938*x2940))+((x2937*x2940))+((x2936*x2942)));
evalcond[2]=((0.5)+(((-1.0)*x2954*x2955))+((r00*x2947))+((x2952*x2953))+(((-1.0)*x2950*x2951))+((x2956*x2957))+((r01*x2946))+((x2940*x2945))+((x2940*x2944))+((r11*x2948))+((r10*x2949)));
evalcond[3]=(((x2950*x2955))+((r10*x2947))+(((-1.0)*x2951*x2954))+((r11*x2946))+((x2940*x2958))+(((-1.0)*r01*x2948))+(((-1.0)*x2936*x2960))+((x2953*x2956))+(((-1.0)*x2952*x2957))+(((-1.0)*x2940*x2959)));
evalcond[4]=((1.0)+((x2940*x2960))+(((-1.0)*x2936*x2959))+(((-1.0)*x2946*x2954))+((r01*x2955))+((x2947*x2956))+(((-1.0)*r11*x2961))+((x2936*x2958))+((x2948*x2950))+(((-1.0)*x2949*x2952))+(((-1.0)*r10*x2962)));
evalcond[5]=((((-1.0)*x2946*x2950))+((x2949*x2956))+(((-1.0)*x2948*x2954))+(((-1.0)*r10*sj0*sj5*x2940))+(((-1.0)*r11*sj0*x2941))+((x2947*x2952))+((x2936*x2945))+(((-1.0)*r00*x2962))+((x2936*x2944))+(((-1.0)*r01*x2961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2963=((1.73205080756888)*r21);
IkReal x2964=(cj5*r20);
IkReal x2965=(r21*sj5);
IkReal x2966=r20*r20;
IkReal x2967=r21*r21;
IkReal x2968=((1.5)*(cj5*cj5));
CheckValue<IkReal> x2969=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*sj5*x2963))+(((-0.5)*x2967))+(((-1.0)*x2967*x2968))+(((-2.0)*x2966))+(((-3.0)*cj5*r20*x2965))+(((1.73205080756888)*r22*x2964))+(((-1.0)*(1.5)*(r22*r22)))+((x2966*x2968)))),-1);
if(!x2969.valid){
continue;
}
CheckValue<IkReal> x2970 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x2963)))),IkReal(((((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x2965))+(((0.866025403784439)*x2964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2969.value)))+(x2970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2971=IKsin(j4);
IkReal x2972=((0.866025403784439)*r22);
IkReal x2973=((0.5)*r20);
IkReal x2974=(cj5*x2971);
IkReal x2975=IKcos(j4);
IkReal x2976=((1.0)*cj5*x2975);
IkReal x2977=(r20*sj5);
IkReal x2978=((0.5)*r21*sj5);
IkReal x2979=((0.866025403784439)*cj0*r02);
IkReal x2980=((0.866025403784439)*r12*sj0);
IkReal x2981=(cj0*cj5*x2971);
IkReal x2982=(cj0*sj5*x2971);
IkReal x2983=(cj5*sj0*x2971);
IkReal x2984=(sj0*sj5*x2971);
IkReal x2985=((0.5)*r00);
IkReal x2986=(cj0*cj5*x2975);
IkReal x2987=((0.5)*r01);
IkReal x2988=(cj0*sj5*x2975);
IkReal x2989=((0.5)*r10);
IkReal x2990=(cj5*sj0*x2975);
IkReal x2991=((0.5)*r11);
IkReal x2992=(sj0*sj5*x2975);
IkReal x2993=((0.866025403784439)*cj0*r12);
IkReal x2994=((0.866025403784439)*r02*sj0);
IkReal x2995=(r00*sj0*sj5);
IkReal x2996=((1.0)*cj0*cj5*x2975);
IkReal x2997=((1.0)*cj0*sj5*x2975);
evalcond[0]=((((-1.0)*r21*x2976))+(((-1.0)*x2973*x2974))+((x2971*x2972))+(((-1.0)*x2975*x2977))+((x2971*x2978)));
evalcond[1]=((-0.866025403784439)+((r21*x2974))+((x2971*x2977))+((x2975*x2978))+(((-1.0)*cj5*x2973*x2975))+((x2972*x2975)));
evalcond[2]=((0.5)+((x2991*x2992))+(((-1.0)*x2989*x2990))+((r10*x2984))+((r00*x2982))+((x2975*x2980))+((x2975*x2979))+((r11*x2983))+(((-1.0)*x2985*x2986))+((x2987*x2988))+((r01*x2981)));
evalcond[3]=((((-1.0)*x2987*x2992))+((x2985*x2990))+((x2975*x2993))+(((-1.0)*x2975*x2994))+((x2988*x2991))+((r10*x2982))+((r11*x2981))+(((-1.0)*x2986*x2989))+(((-1.0)*r01*x2983))+(((-1.0)*x2971*x2995)));
evalcond[4]=((1.0)+((r01*x2990))+((x2982*x2991))+(((-1.0)*x2981*x2989))+(((-1.0)*x2984*x2987))+(((-1.0)*r10*x2997))+(((-1.0)*x2971*x2994))+((x2975*x2995))+(((-1.0)*r11*x2996))+((x2971*x2993))+((x2983*x2985)));
evalcond[5]=(((x2971*x2979))+(((-1.0)*r01*x2996))+((x2982*x2987))+((x2971*x2980))+(((-1.0)*x2981*x2985))+(((-1.0)*r10*sj0*sj5*x2975))+(((-1.0)*r00*x2997))+((x2984*x2991))+(((-1.0)*x2983*x2989))+(((-1.0)*r11*sj0*x2976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2998=((0.866025403784439)*cj0);
IkReal x2999=((0.866025403784439)*sj0);
CheckValue<IkReal> x3000=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x2998))+((cj5*r00*x2998))+(((0.5)*r12*sj0))+((cj5*r10*x2999))+(((0.5)*cj0*r02))+(((-1.0)*r11*sj5*x2999)))),-1);
if(!x3000.valid){
continue;
}
CheckValue<IkReal> x3001 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3000.value)))+(x3001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3002=IKsin(j4);
IkReal x3003=((0.866025403784439)*r22);
IkReal x3004=((0.5)*r20);
IkReal x3005=(cj5*x3002);
IkReal x3006=IKcos(j4);
IkReal x3007=((1.0)*cj5*x3006);
IkReal x3008=(r20*sj5);
IkReal x3009=((0.5)*r21*sj5);
IkReal x3010=((0.866025403784439)*cj0*r02);
IkReal x3011=((0.866025403784439)*r12*sj0);
IkReal x3012=(cj0*cj5*x3002);
IkReal x3013=(cj0*sj5*x3002);
IkReal x3014=(cj5*sj0*x3002);
IkReal x3015=(sj0*sj5*x3002);
IkReal x3016=((0.5)*r00);
IkReal x3017=(cj0*cj5*x3006);
IkReal x3018=((0.5)*r01);
IkReal x3019=(cj0*sj5*x3006);
IkReal x3020=((0.5)*r10);
IkReal x3021=(cj5*sj0*x3006);
IkReal x3022=((0.5)*r11);
IkReal x3023=(sj0*sj5*x3006);
IkReal x3024=((0.866025403784439)*cj0*r12);
IkReal x3025=((0.866025403784439)*r02*sj0);
IkReal x3026=(r00*sj0*sj5);
IkReal x3027=((1.0)*cj0*cj5*x3006);
IkReal x3028=((1.0)*cj0*sj5*x3006);
evalcond[0]=((((-1.0)*x3006*x3008))+((x3002*x3009))+(((-1.0)*x3004*x3005))+((x3002*x3003))+(((-1.0)*r21*x3007)));
evalcond[1]=((-0.866025403784439)+((r21*x3005))+(((-1.0)*cj5*x3004*x3006))+((x3006*x3009))+((x3002*x3008))+((x3003*x3006)));
evalcond[2]=((0.5)+((r11*x3014))+((x3022*x3023))+((r10*x3015))+(((-1.0)*x3016*x3017))+((r01*x3012))+((x3006*x3011))+((r00*x3013))+(((-1.0)*x3020*x3021))+((x3006*x3010))+((x3018*x3019)));
evalcond[3]=((((-1.0)*x3002*x3026))+((x3006*x3024))+((r11*x3012))+(((-1.0)*x3006*x3025))+(((-1.0)*x3017*x3020))+((r10*x3013))+(((-1.0)*r01*x3014))+((x3019*x3022))+((x3016*x3021))+(((-1.0)*x3018*x3023)));
evalcond[4]=((1.0)+((x3013*x3022))+(((-1.0)*r10*x3028))+(((-1.0)*r11*x3027))+(((-1.0)*x3012*x3020))+((x3002*x3024))+(((-1.0)*x3015*x3018))+(((-1.0)*x3002*x3025))+((x3006*x3026))+((r01*x3021))+((x3014*x3016)));
evalcond[5]=((((-1.0)*r10*sj0*sj5*x3006))+((x3013*x3018))+((x3002*x3011))+(((-1.0)*r00*x3028))+(((-1.0)*r11*sj0*x3007))+(((-1.0)*r01*x3027))+(((-1.0)*x3012*x3016))+((x3002*x3010))+(((-1.0)*x3014*x3020))+((x3015*x3022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3029=(r02*sj0);
IkReal x3030=(cj0*r12);
IkReal x3031=(cj0*cj5*r10);
IkReal x3032=(cj0*r11*sj5);
IkReal x3033=(cj5*r00*sj0);
IkReal x3034=(r01*sj0*sj5);
j4eval[0]=(x3029+(((-1.73205080756888)*x3034))+(((1.73205080756888)*x3032))+(((1.73205080756888)*x3033))+(((-1.73205080756888)*x3031))+(((-1.0)*x3030)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((-0.5)*x3030))+(((-0.866025403784439)*x3034))+(((0.866025403784439)*x3033))+(((-0.866025403784439)*x3031))+(((0.866025403784439)*x3032))+(((0.5)*x3029))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3035=r20*r20;
IkReal x3036=r21*r21;
IkReal x3037=r22*r22;
IkReal x3038=(cj5*r20*r22);
IkReal x3039=(r21*r22*sj5);
IkReal x3040=(cj5*r20*r21*sj5);
IkReal x3041=cj5*cj5;
IkReal x3042=(x3035*x3041);
IkReal x3043=(x3036*x3041);
j4eval[0]=((((-3.0)*x3037))+(((-4.0)*x3035))+(((-1.0)*x3036))+(((3.0)*x3042))+(((-3.46410161513775)*x3039))+(((3.46410161513775)*x3038))+(((-6.0)*x3040))+(((-3.0)*x3043)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.5)*x3037))+(((-2.0)*x3035))+(((-3.0)*x3040))+(((1.73205080756888)*x3038))+(((-0.5)*x3036))+(((1.5)*x3042))+(((-1.5)*x3043))+(((-1.73205080756888)*x3039))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3044=((1.73205080756888)*cj0);
IkReal x3045=((1.73205080756888)*sj0);
IkReal x3046=(((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((cj5*r00*x3045))+(((-1.0)*r01*sj5*x3045))+((r11*sj5*x3044))+(((-1.0)*cj5*r10*x3044)));
j4eval[0]=x3046;
j4eval[1]=IKsign(x3046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3047=((1.73205080756888)*cj0*cj5);
IkReal x3048=((1.73205080756888)*cj0*sj5);
IkReal x3049=((1.73205080756888)*cj5*sj0);
IkReal x3050=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x3051=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3047))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r00*x3049))+((r11*x3048))+(((-1.0)*r01*x3050)))),-1);
if(!x3051.valid){
continue;
}
CheckValue<IkReal> x3052 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r10*x3050))+((r00*x3048))+((r01*x3047))+((r11*x3049)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3051.value)))+(x3052.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3053=IKsin(j4);
IkReal x3054=((0.866025403784439)*r22);
IkReal x3055=((0.5)*r20);
IkReal x3056=(cj5*x3053);
IkReal x3057=IKcos(j4);
IkReal x3058=((1.0)*cj5*x3057);
IkReal x3059=(r20*sj5);
IkReal x3060=((0.5)*r21*sj5);
IkReal x3061=((0.866025403784439)*cj0*r02);
IkReal x3062=((0.866025403784439)*r12*sj0);
IkReal x3063=(cj0*cj5*x3053);
IkReal x3064=(cj0*sj5*x3053);
IkReal x3065=(cj5*sj0*x3053);
IkReal x3066=(sj0*sj5*x3053);
IkReal x3067=((0.5)*r00);
IkReal x3068=(cj0*cj5*x3057);
IkReal x3069=((0.5)*r01);
IkReal x3070=(cj0*sj5*x3057);
IkReal x3071=((0.5)*r10);
IkReal x3072=(cj5*sj0*x3057);
IkReal x3073=((0.5)*r11);
IkReal x3074=(sj0*sj5*x3057);
IkReal x3075=((0.866025403784439)*cj0*r12);
IkReal x3076=((0.866025403784439)*r02*sj0);
IkReal x3077=(r00*sj0*sj5);
IkReal x3078=((1.0)*cj0*cj5*x3057);
IkReal x3079=((1.0)*cj0*sj5*x3057);
evalcond[0]=((((-1.0)*x3057*x3059))+((x3053*x3060))+(((-1.0)*x3055*x3056))+((x3053*x3054))+(((-1.0)*r21*x3058)));
evalcond[1]=((-0.866025403784439)+((x3057*x3060))+((r21*x3056))+((x3054*x3057))+(((-1.0)*cj5*x3055*x3057))+((x3053*x3059)));
evalcond[2]=((((-1.0)*x3067*x3068))+((x3057*x3061))+(((-1.0)*x3071*x3072))+((x3069*x3070))+((r11*x3065))+((x3073*x3074))+((r01*x3063))+((x3057*x3062))+((r00*x3064))+((r10*x3066)));
evalcond[3]=(((r01*x3072))+(((-1.0)*r10*x3079))+((x3064*x3073))+(((-1.0)*r11*x3078))+(((-1.0)*x3063*x3071))+(((-1.0)*x3066*x3069))+(((-1.0)*x3053*x3076))+((x3065*x3067))+((x3057*x3077))+((x3053*x3075)));
evalcond[4]=((0.5)+(((-1.0)*r01*x3065))+((x3067*x3072))+((r11*x3063))+(((-1.0)*x3069*x3074))+((r10*x3064))+(((-1.0)*x3068*x3071))+(((-1.0)*x3053*x3077))+(((-1.0)*x3057*x3076))+((x3070*x3073))+((x3057*x3075)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x3079))+(((-1.0)*x3065*x3071))+(((-1.0)*r10*sj0*sj5*x3057))+(((-1.0)*r11*sj0*x3058))+(((-1.0)*r01*x3078))+((x3066*x3073))+((x3053*x3061))+((x3053*x3062))+(((-1.0)*x3063*x3067))+((x3064*x3069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3080=((1.73205080756888)*r21);
IkReal x3081=(cj5*r20);
IkReal x3082=(r21*sj5);
IkReal x3083=r20*r20;
IkReal x3084=r21*r21;
IkReal x3085=((1.5)*(cj5*cj5));
CheckValue<IkReal> x3086=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3084*x3085))+(((-2.0)*x3083))+(((-0.5)*x3084))+(((-1.0)*r22*sj5*x3080))+(((-3.0)*cj5*r20*x3082))+(((-1.0)*(1.5)*(r22*r22)))+((x3083*x3085))+(((1.73205080756888)*r22*x3081)))),-1);
if(!x3086.valid){
continue;
}
CheckValue<IkReal> x3087 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x3080)))),IkReal(((((-0.866025403784439)*x3082))+(((-1.0)*(1.5)*r22))+(((0.866025403784439)*x3081)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3086.value)))+(x3087.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3088=IKsin(j4);
IkReal x3089=((0.866025403784439)*r22);
IkReal x3090=((0.5)*r20);
IkReal x3091=(cj5*x3088);
IkReal x3092=IKcos(j4);
IkReal x3093=((1.0)*cj5*x3092);
IkReal x3094=(r20*sj5);
IkReal x3095=((0.5)*r21*sj5);
IkReal x3096=((0.866025403784439)*cj0*r02);
IkReal x3097=((0.866025403784439)*r12*sj0);
IkReal x3098=(cj0*cj5*x3088);
IkReal x3099=(cj0*sj5*x3088);
IkReal x3100=(cj5*sj0*x3088);
IkReal x3101=(sj0*sj5*x3088);
IkReal x3102=((0.5)*r00);
IkReal x3103=(cj0*cj5*x3092);
IkReal x3104=((0.5)*r01);
IkReal x3105=(cj0*sj5*x3092);
IkReal x3106=((0.5)*r10);
IkReal x3107=(cj5*sj0*x3092);
IkReal x3108=((0.5)*r11);
IkReal x3109=(sj0*sj5*x3092);
IkReal x3110=((0.866025403784439)*cj0*r12);
IkReal x3111=((0.866025403784439)*r02*sj0);
IkReal x3112=(r00*sj0*sj5);
IkReal x3113=((1.0)*cj0*cj5*x3092);
IkReal x3114=((1.0)*cj0*sj5*x3092);
evalcond[0]=((((-1.0)*x3092*x3094))+(((-1.0)*r21*x3093))+((x3088*x3095))+((x3088*x3089))+(((-1.0)*x3090*x3091)));
evalcond[1]=((-0.866025403784439)+((x3089*x3092))+((x3092*x3095))+((x3088*x3094))+((r21*x3091))+(((-1.0)*cj5*x3090*x3092)));
evalcond[2]=(((x3108*x3109))+((r11*x3100))+((r10*x3101))+((r01*x3098))+(((-1.0)*x3106*x3107))+(((-1.0)*x3102*x3103))+((x3092*x3097))+((x3092*x3096))+((r00*x3099))+((x3104*x3105)));
evalcond[3]=((((-1.0)*x3101*x3104))+(((-1.0)*r11*x3113))+(((-1.0)*r10*x3114))+(((-1.0)*x3098*x3106))+(((-1.0)*x3088*x3111))+((x3099*x3108))+((r01*x3107))+((x3092*x3112))+((x3088*x3110))+((x3100*x3102)));
evalcond[4]=((0.5)+(((-1.0)*x3104*x3109))+(((-1.0)*x3103*x3106))+(((-1.0)*r01*x3100))+(((-1.0)*x3088*x3112))+((r10*x3099))+((r11*x3098))+(((-1.0)*x3092*x3111))+((x3102*x3107))+((x3105*x3108))+((x3092*x3110)));
evalcond[5]=((-1.0)+(((-1.0)*x3098*x3102))+(((-1.0)*r10*sj0*sj5*x3092))+((x3101*x3108))+(((-1.0)*x3100*x3106))+(((-1.0)*r01*x3113))+(((-1.0)*r11*sj0*x3093))+((x3099*x3104))+(((-1.0)*r00*x3114))+((x3088*x3097))+((x3088*x3096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3115=((0.866025403784439)*cj0);
IkReal x3116=((0.866025403784439)*sj0);
CheckValue<IkReal> x3117 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3117.valid){
continue;
}
CheckValue<IkReal> x3118=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x3116))+((r11*sj5*x3115))+(((-1.0)*(0.5)*cj0*r12))+(((-1.0)*cj5*r10*x3115))+(((0.5)*r02*sj0))+((cj5*r00*x3116)))),-1);
if(!x3118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3117.value)+(((1.5707963267949)*(x3118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3119=IKsin(j4);
IkReal x3120=((0.866025403784439)*r22);
IkReal x3121=((0.5)*r20);
IkReal x3122=(cj5*x3119);
IkReal x3123=IKcos(j4);
IkReal x3124=((1.0)*cj5*x3123);
IkReal x3125=(r20*sj5);
IkReal x3126=((0.5)*r21*sj5);
IkReal x3127=((0.866025403784439)*cj0*r02);
IkReal x3128=((0.866025403784439)*r12*sj0);
IkReal x3129=(cj0*cj5*x3119);
IkReal x3130=(cj0*sj5*x3119);
IkReal x3131=(cj5*sj0*x3119);
IkReal x3132=(sj0*sj5*x3119);
IkReal x3133=((0.5)*r00);
IkReal x3134=(cj0*cj5*x3123);
IkReal x3135=((0.5)*r01);
IkReal x3136=(cj0*sj5*x3123);
IkReal x3137=((0.5)*r10);
IkReal x3138=(cj5*sj0*x3123);
IkReal x3139=((0.5)*r11);
IkReal x3140=(sj0*sj5*x3123);
IkReal x3141=((0.866025403784439)*cj0*r12);
IkReal x3142=((0.866025403784439)*r02*sj0);
IkReal x3143=(r00*sj0*sj5);
IkReal x3144=((1.0)*cj0*cj5*x3123);
IkReal x3145=((1.0)*cj0*sj5*x3123);
evalcond[0]=((((-1.0)*r21*x3124))+((x3119*x3120))+(((-1.0)*x3121*x3122))+(((-1.0)*x3123*x3125))+((x3119*x3126)));
evalcond[1]=((-0.866025403784439)+((x3123*x3126))+(((-1.0)*cj5*x3121*x3123))+((x3119*x3125))+((x3120*x3123))+((r21*x3122)));
evalcond[2]=(((x3139*x3140))+((r11*x3131))+(((-1.0)*x3137*x3138))+((r00*x3130))+((r01*x3129))+((x3123*x3128))+((x3135*x3136))+((r10*x3132))+((x3123*x3127))+(((-1.0)*x3133*x3134)));
evalcond[3]=((((-1.0)*x3119*x3142))+(((-1.0)*r11*x3144))+(((-1.0)*x3129*x3137))+((r01*x3138))+((x3130*x3139))+((x3123*x3143))+(((-1.0)*x3132*x3135))+((x3131*x3133))+(((-1.0)*r10*x3145))+((x3119*x3141)));
evalcond[4]=((0.5)+(((-1.0)*x3119*x3143))+((r10*x3130))+(((-1.0)*x3123*x3142))+((x3136*x3139))+(((-1.0)*x3134*x3137))+((x3123*x3141))+((x3133*x3138))+(((-1.0)*x3135*x3140))+(((-1.0)*r01*x3131))+((r11*x3129)));
evalcond[5]=((-1.0)+((x3119*x3127))+(((-1.0)*r00*x3145))+((x3119*x3128))+(((-1.0)*r11*sj0*x3124))+(((-1.0)*x3131*x3137))+((x3130*x3135))+(((-1.0)*x3129*x3133))+(((-1.0)*r10*sj0*sj5*x3123))+(((-1.0)*r01*x3144))+((x3132*x3139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3146=(r02*sj0);
IkReal x3147=(cj0*r12);
IkReal x3148=(cj0*cj5*r10);
IkReal x3149=(cj0*r11*sj5);
IkReal x3150=(cj5*r00*sj0);
IkReal x3151=(r01*sj0*sj5);
j4eval[0]=((((-1.73205080756888)*x3151))+(((-1.0)*x3147))+(((1.73205080756888)*x3150))+(((1.73205080756888)*x3149))+(((-1.73205080756888)*x3148))+x3146);
j4eval[1]=IKsign(((((-0.866025403784439)*x3151))+(((0.866025403784439)*x3150))+(((-0.5)*x3147))+(((0.5)*x3146))+(((0.866025403784439)*x3149))+(((-0.866025403784439)*x3148))));
j4eval[2]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3152=r20*r20;
IkReal x3153=r21*r21;
IkReal x3154=r22*r22;
IkReal x3155=(cj5*r20*r22);
IkReal x3156=(r21*r22*sj5);
IkReal x3157=(cj5*r20*r21*sj5);
IkReal x3158=cj5*cj5;
IkReal x3159=(x3152*x3158);
IkReal x3160=(x3153*x3158);
j4eval[0]=((((3.46410161513775)*x3155))+(((-3.0)*x3160))+(((-3.0)*x3154))+(((-1.0)*x3153))+(((3.0)*x3159))+(((-6.0)*x3157))+(((-3.46410161513775)*x3156))+(((-4.0)*x3152)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.5)*x3160))+(((1.73205080756888)*x3155))+(((1.5)*x3159))+(((-1.73205080756888)*x3156))+(((-1.5)*x3154))+(((-2.0)*x3152))+(((-3.0)*x3157))+(((-0.5)*x3153))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3161=((1.73205080756888)*cj0);
IkReal x3162=((1.73205080756888)*sj0);
IkReal x3163=(((cj5*r00*x3162))+((r11*sj5*x3161))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*cj5*r10*x3161))+(((-1.0)*r01*sj5*x3162)));
j4eval[0]=x3163;
j4eval[1]=IKsign(x3163);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3164=((1.73205080756888)*cj0*cj5);
IkReal x3165=((1.73205080756888)*cj0*sj5);
IkReal x3166=((1.73205080756888)*cj5*sj0);
IkReal x3167=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x3168=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3164))+(((-1.0)*r01*x3167))+((r00*x3166))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*x3165)))),-1);
if(!x3168.valid){
continue;
}
CheckValue<IkReal> x3169 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r00*x3165))+((r10*x3167))+((r01*x3164))+((r11*x3166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3168.value)))+(x3169.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3170=IKsin(j4);
IkReal x3171=((0.866025403784439)*r22);
IkReal x3172=((0.5)*r20);
IkReal x3173=(cj5*x3170);
IkReal x3174=IKcos(j4);
IkReal x3175=((1.0)*cj5*x3174);
IkReal x3176=(r20*sj5);
IkReal x3177=((0.5)*r21*sj5);
IkReal x3178=((0.866025403784439)*cj0*r02);
IkReal x3179=((0.866025403784439)*r12*sj0);
IkReal x3180=(cj0*cj5*x3170);
IkReal x3181=(cj0*sj5*x3170);
IkReal x3182=(cj5*sj0*x3170);
IkReal x3183=(sj0*sj5*x3170);
IkReal x3184=((0.5)*r00);
IkReal x3185=(cj0*cj5*x3174);
IkReal x3186=((0.5)*r01);
IkReal x3187=(cj0*sj5*x3174);
IkReal x3188=((0.5)*r10);
IkReal x3189=(cj5*sj0*x3174);
IkReal x3190=((0.5)*r11);
IkReal x3191=(sj0*sj5*x3174);
IkReal x3192=((0.866025403784439)*cj0*r12);
IkReal x3193=((0.866025403784439)*r02*sj0);
IkReal x3194=(r00*sj0*sj5);
IkReal x3195=((1.0)*cj0*cj5*x3174);
IkReal x3196=((1.0)*cj0*sj5*x3174);
evalcond[0]=(((x3170*x3171))+((x3170*x3177))+(((-1.0)*x3172*x3173))+(((-1.0)*r21*x3175))+(((-1.0)*x3174*x3176)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x3172*x3174))+((x3171*x3174))+((x3174*x3177))+((x3170*x3176))+((r21*x3173)));
evalcond[2]=(((r10*x3183))+((r01*x3180))+(((-1.0)*x3188*x3189))+(((-1.0)*x3184*x3185))+((r00*x3181))+((x3190*x3191))+((x3174*x3178))+((x3186*x3187))+((r11*x3182))+((x3174*x3179)));
evalcond[3]=(((x3181*x3190))+(((-1.0)*r11*x3195))+(((-1.0)*x3170*x3193))+((x3170*x3192))+(((-1.0)*x3180*x3188))+((x3182*x3184))+((r01*x3189))+(((-1.0)*r10*x3196))+((x3174*x3194))+(((-1.0)*x3183*x3186)));
evalcond[4]=((-0.5)+(((-1.0)*x3186*x3191))+((x3184*x3189))+(((-1.0)*x3170*x3194))+((x3187*x3190))+(((-1.0)*r01*x3182))+(((-1.0)*x3185*x3188))+((r11*x3180))+((x3174*x3192))+((r10*x3181))+(((-1.0)*x3174*x3193)));
evalcond[5]=((1.0)+(((-1.0)*x3180*x3184))+((x3170*x3178))+((x3181*x3186))+(((-1.0)*r11*sj0*x3175))+((x3183*x3190))+((x3170*x3179))+(((-1.0)*r01*x3195))+(((-1.0)*r00*x3196))+(((-1.0)*r10*sj0*sj5*x3174))+(((-1.0)*x3182*x3188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3197=((1.73205080756888)*r21);
IkReal x3198=(cj5*r20);
IkReal x3199=(r21*sj5);
IkReal x3200=r20*r20;
IkReal x3201=r21*r21;
IkReal x3202=((1.5)*(cj5*cj5));
CheckValue<IkReal> x3203=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3201*x3202))+(((-1.0)*r22*sj5*x3197))+(((-0.5)*x3201))+(((-2.0)*x3200))+(((-3.0)*cj5*r20*x3199))+(((-1.0)*(1.5)*(r22*r22)))+((x3200*x3202))+(((1.73205080756888)*r22*x3198)))),-1);
if(!x3203.valid){
continue;
}
CheckValue<IkReal> x3204 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x3197)))),IkReal(((((-0.866025403784439)*x3199))+(((-1.0)*(1.5)*r22))+(((0.866025403784439)*x3198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3203.value)))+(x3204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3205=IKsin(j4);
IkReal x3206=((0.866025403784439)*r22);
IkReal x3207=((0.5)*r20);
IkReal x3208=(cj5*x3205);
IkReal x3209=IKcos(j4);
IkReal x3210=((1.0)*cj5*x3209);
IkReal x3211=(r20*sj5);
IkReal x3212=((0.5)*r21*sj5);
IkReal x3213=((0.866025403784439)*cj0*r02);
IkReal x3214=((0.866025403784439)*r12*sj0);
IkReal x3215=(cj0*cj5*x3205);
IkReal x3216=(cj0*sj5*x3205);
IkReal x3217=(cj5*sj0*x3205);
IkReal x3218=(sj0*sj5*x3205);
IkReal x3219=((0.5)*r00);
IkReal x3220=(cj0*cj5*x3209);
IkReal x3221=((0.5)*r01);
IkReal x3222=(cj0*sj5*x3209);
IkReal x3223=((0.5)*r10);
IkReal x3224=(cj5*sj0*x3209);
IkReal x3225=((0.5)*r11);
IkReal x3226=(sj0*sj5*x3209);
IkReal x3227=((0.866025403784439)*cj0*r12);
IkReal x3228=((0.866025403784439)*r02*sj0);
IkReal x3229=(r00*sj0*sj5);
IkReal x3230=((1.0)*cj0*cj5*x3209);
IkReal x3231=((1.0)*cj0*sj5*x3209);
evalcond[0]=((((-1.0)*x3207*x3208))+((x3205*x3206))+(((-1.0)*r21*x3210))+((x3205*x3212))+(((-1.0)*x3209*x3211)));
evalcond[1]=((-0.866025403784439)+((x3205*x3211))+((x3206*x3209))+((x3209*x3212))+((r21*x3208))+(((-1.0)*cj5*x3207*x3209)));
evalcond[2]=(((x3221*x3222))+(((-1.0)*x3219*x3220))+((r10*x3218))+((x3209*x3213))+((x3225*x3226))+((r11*x3217))+((r00*x3216))+(((-1.0)*x3223*x3224))+((x3209*x3214))+((r01*x3215)));
evalcond[3]=(((r01*x3224))+(((-1.0)*r11*x3230))+((x3209*x3229))+((x3216*x3225))+(((-1.0)*r10*x3231))+(((-1.0)*x3215*x3223))+((x3205*x3227))+(((-1.0)*x3218*x3221))+((x3217*x3219))+(((-1.0)*x3205*x3228)));
evalcond[4]=((-0.5)+(((-1.0)*x3205*x3229))+(((-1.0)*x3220*x3223))+((r11*x3215))+(((-1.0)*x3221*x3226))+((r10*x3216))+((x3219*x3224))+(((-1.0)*x3209*x3228))+(((-1.0)*r01*x3217))+((x3209*x3227))+((x3222*x3225)));
evalcond[5]=((1.0)+((x3205*x3213))+(((-1.0)*r11*sj0*x3210))+((x3218*x3225))+((x3216*x3221))+(((-1.0)*x3217*x3223))+(((-1.0)*r01*x3230))+(((-1.0)*r00*x3231))+(((-1.0)*x3215*x3219))+((x3205*x3214))+(((-1.0)*r10*sj0*sj5*x3209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3232=((0.866025403784439)*cj0);
IkReal x3233=((0.866025403784439)*sj0);
CheckValue<IkReal> x3234=IKPowWithIntegerCheck(IKsign((((r11*sj5*x3232))+(((-1.0)*(0.5)*cj0*r12))+(((-1.0)*cj5*r10*x3232))+(((0.5)*r02*sj0))+(((-1.0)*r01*sj5*x3233))+((cj5*r00*x3233)))),-1);
if(!x3234.valid){
continue;
}
CheckValue<IkReal> x3235 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3234.value)))+(x3235.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3236=IKsin(j4);
IkReal x3237=((0.866025403784439)*r22);
IkReal x3238=((0.5)*r20);
IkReal x3239=(cj5*x3236);
IkReal x3240=IKcos(j4);
IkReal x3241=((1.0)*cj5*x3240);
IkReal x3242=(r20*sj5);
IkReal x3243=((0.5)*r21*sj5);
IkReal x3244=((0.866025403784439)*cj0*r02);
IkReal x3245=((0.866025403784439)*r12*sj0);
IkReal x3246=(cj0*cj5*x3236);
IkReal x3247=(cj0*sj5*x3236);
IkReal x3248=(cj5*sj0*x3236);
IkReal x3249=(sj0*sj5*x3236);
IkReal x3250=((0.5)*r00);
IkReal x3251=(cj0*cj5*x3240);
IkReal x3252=((0.5)*r01);
IkReal x3253=(cj0*sj5*x3240);
IkReal x3254=((0.5)*r10);
IkReal x3255=(cj5*sj0*x3240);
IkReal x3256=((0.5)*r11);
IkReal x3257=(sj0*sj5*x3240);
IkReal x3258=((0.866025403784439)*cj0*r12);
IkReal x3259=((0.866025403784439)*r02*sj0);
IkReal x3260=(r00*sj0*sj5);
IkReal x3261=((1.0)*cj0*cj5*x3240);
IkReal x3262=((1.0)*cj0*sj5*x3240);
evalcond[0]=(((x3236*x3237))+(((-1.0)*x3240*x3242))+((x3236*x3243))+(((-1.0)*x3238*x3239))+(((-1.0)*r21*x3241)));
evalcond[1]=((-0.866025403784439)+((x3240*x3243))+(((-1.0)*cj5*x3238*x3240))+((x3236*x3242))+((r21*x3239))+((x3237*x3240)));
evalcond[2]=((((-1.0)*x3250*x3251))+((r01*x3246))+((x3240*x3244))+((r00*x3247))+((x3240*x3245))+((x3252*x3253))+((r11*x3248))+((r10*x3249))+(((-1.0)*x3254*x3255))+((x3256*x3257)));
evalcond[3]=(((x3240*x3260))+(((-1.0)*x3246*x3254))+(((-1.0)*x3236*x3259))+(((-1.0)*r11*x3261))+((x3248*x3250))+(((-1.0)*x3249*x3252))+((x3247*x3256))+(((-1.0)*r10*x3262))+((r01*x3255))+((x3236*x3258)));
evalcond[4]=((-0.5)+(((-1.0)*x3240*x3259))+((x3240*x3258))+((r11*x3246))+(((-1.0)*x3251*x3254))+(((-1.0)*x3252*x3257))+(((-1.0)*r01*x3248))+(((-1.0)*x3236*x3260))+((x3253*x3256))+((r10*x3247))+((x3250*x3255)));
evalcond[5]=((1.0)+((x3247*x3252))+((x3249*x3256))+(((-1.0)*r11*sj0*x3241))+(((-1.0)*r01*x3261))+((x3236*x3244))+(((-1.0)*x3248*x3254))+(((-1.0)*r10*sj0*sj5*x3240))+(((-1.0)*x3246*x3250))+(((-1.0)*r00*x3262))+((x3236*x3245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3263=(cj3*cj5);
IkReal x3264=(cj3*sj5);
IkReal x3265=((0.5)*r21);
IkReal x3266=((2.0)*r20);
IkReal x3267=(cj0*r10);
IkReal x3268=(cj0*r11);
IkReal x3269=((1.5)*r22);
IkReal x3270=(r00*sj0);
IkReal x3271=(r01*sj0);
IkReal x3272=((0.866025403784439)*cj5*r22);
IkReal x3273=(cj5*r20);
IkReal x3274=((0.866025403784439)*cj0*r12);
IkReal x3275=((0.866025403784439)*r22*sj5);
IkReal x3276=(r21*sj5);
IkReal x3277=((0.866025403784439)*r02*sj0);
IkReal x3278=((1.5)*cj5*r21*sj5);
IkReal x3279=((1.5)*cj5*r20*sj5);
IkReal x3280=cj5*cj5;
IkReal x3281=((1.5)*r20*x3280);
IkReal x3282=((1.5)*r21*x3280);
CheckValue<IkReal> x3283 = IKatan2WithCheck(IkReal((((r21*x3263))+((r20*x3264)))),IkReal((((x3264*x3265))+(((-0.5)*r20*x3263))+((cj3*(((0.866025403784439)*r22)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3283.valid){
continue;
}
CheckValue<IkReal> x3284=IKPowWithIntegerCheck(IKsign((((x3266*x3270))+(((-1.0)*x3270*x3281))+((x3273*x3274))+(((-1.0)*x3265*x3268))+(((-1.0)*x3268*x3275))+((x3267*x3272))+((x3271*x3275))+(((-1.0)*x3268*x3282))+((r02*sj0*x3269))+(((-1.0)*x3266*x3267))+(((-1.0)*cj0*r12*x3269))+(((-1.0)*x3270*x3272))+((x3267*x3281))+(((-1.0)*x3274*x3276))+(((-1.0)*x3273*x3277))+((x3265*x3271))+((x3270*x3278))+((x3271*x3279))+((x3276*x3277))+((x3271*x3282))+(((-1.0)*x3268*x3279))+(((-1.0)*x3267*x3278)))),-1);
if(!x3284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3283.value)+(((1.5707963267949)*(x3284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3285=IKsin(j4);
IkReal x3286=((0.866025403784439)*r22);
IkReal x3287=((0.5)*r20);
IkReal x3288=(cj5*x3285);
IkReal x3289=IKcos(j4);
IkReal x3290=((1.0)*cj5*x3289);
IkReal x3291=(r20*sj5);
IkReal x3292=((0.5)*r21*sj5);
IkReal x3293=((0.866025403784439)*cj0*r02);
IkReal x3294=((0.866025403784439)*r12*sj0);
IkReal x3295=(cj0*cj5*x3285);
IkReal x3296=(cj0*sj5*x3285);
IkReal x3297=(cj5*sj0*x3285);
IkReal x3298=(sj0*sj5*x3285);
IkReal x3299=((0.5)*r00);
IkReal x3300=(cj0*cj5*x3289);
IkReal x3301=((0.5)*r01);
IkReal x3302=(cj0*sj5*x3289);
IkReal x3303=((0.5)*r10);
IkReal x3304=(cj5*sj0*x3289);
IkReal x3305=((0.5)*r11);
IkReal x3306=(sj0*sj5*x3289);
IkReal x3307=((0.866025403784439)*cj0*r12);
IkReal x3308=((0.866025403784439)*r02*sj0);
IkReal x3309=(r00*sj0*sj5);
IkReal x3310=((1.0)*cj0*cj5*x3289);
IkReal x3311=((1.0)*cj0*sj5*x3289);
evalcond[0]=((((-1.0)*r21*x3290))+((x3285*x3292))+(((-1.0)*x3287*x3288))+(((-1.0)*x3289*x3291))+((x3285*x3286)));
evalcond[1]=((-0.866025403784439)+((x3289*x3292))+((x3285*x3291))+((r21*x3288))+((x3286*x3289))+(((-1.0)*cj5*x3287*x3289)));
evalcond[2]=(((r00*x3296))+((x3289*x3293))+((x3301*x3302))+(((-1.0)*(0.5)*sj3))+((x3305*x3306))+((r10*x3298))+((r11*x3297))+((x3289*x3294))+((r01*x3295))+(((-1.0)*x3303*x3304))+(((-1.0)*x3299*x3300)));
evalcond[3]=(((r11*x3295))+((x3302*x3305))+(((-1.0)*x3301*x3306))+(((-1.0)*x3285*x3309))+((x3289*x3307))+((r10*x3296))+((x3299*x3304))+(((0.5)*cj3))+(((-1.0)*x3289*x3308))+(((-1.0)*r01*x3297))+(((-1.0)*x3300*x3303)));
evalcond[4]=(((x3297*x3299))+((x3289*x3309))+((r01*x3304))+(((-1.0)*r11*x3310))+(((-1.0)*r10*x3311))+(((-1.0)*x3295*x3303))+(((-1.0)*x3298*x3301))+((x3296*x3305))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x3285*x3308))+((x3285*x3307)));
evalcond[5]=((((-1.0)*(1.0)*cj3))+(((-1.0)*x3297*x3303))+((x3285*x3293))+(((-1.0)*r11*sj0*x3290))+((x3285*x3294))+((x3296*x3301))+((x3298*x3305))+(((-1.0)*r01*x3310))+(((-1.0)*x3295*x3299))+(((-1.0)*r10*sj0*sj5*x3289))+(((-1.0)*r00*x3311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3312=((1.73205080756888)*r21);
IkReal x3313=(cj5*r20);
IkReal x3314=(r21*sj5);
IkReal x3315=r20*r20;
IkReal x3316=r21*r21;
IkReal x3317=((1.5)*(cj5*cj5));
CheckValue<IkReal> x3318 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x3312)))),IkReal(((((-0.866025403784439)*x3314))+(((-1.0)*(1.5)*r22))+(((0.866025403784439)*x3313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3318.valid){
continue;
}
CheckValue<IkReal> x3319=IKPowWithIntegerCheck(IKsign(((((1.73205080756888)*r22*x3313))+(((-2.0)*x3315))+((x3315*x3317))+(((-0.5)*x3316))+(((-1.0)*x3316*x3317))+(((-1.0)*r22*sj5*x3312))+(((-1.0)*(1.5)*(r22*r22)))+(((-3.0)*cj5*r20*x3314)))),-1);
if(!x3319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3318.value)+(((1.5707963267949)*(x3319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3320=IKsin(j4);
IkReal x3321=((0.866025403784439)*r22);
IkReal x3322=((0.5)*r20);
IkReal x3323=(cj5*x3320);
IkReal x3324=IKcos(j4);
IkReal x3325=((1.0)*cj5*x3324);
IkReal x3326=(r20*sj5);
IkReal x3327=((0.5)*r21*sj5);
IkReal x3328=((0.866025403784439)*cj0*r02);
IkReal x3329=((0.866025403784439)*r12*sj0);
IkReal x3330=(cj0*cj5*x3320);
IkReal x3331=(cj0*sj5*x3320);
IkReal x3332=(cj5*sj0*x3320);
IkReal x3333=(sj0*sj5*x3320);
IkReal x3334=((0.5)*r00);
IkReal x3335=(cj0*cj5*x3324);
IkReal x3336=((0.5)*r01);
IkReal x3337=(cj0*sj5*x3324);
IkReal x3338=((0.5)*r10);
IkReal x3339=(cj5*sj0*x3324);
IkReal x3340=((0.5)*r11);
IkReal x3341=(sj0*sj5*x3324);
IkReal x3342=((0.866025403784439)*cj0*r12);
IkReal x3343=((0.866025403784439)*r02*sj0);
IkReal x3344=(r00*sj0*sj5);
IkReal x3345=((1.0)*cj0*cj5*x3324);
IkReal x3346=((1.0)*cj0*sj5*x3324);
evalcond[0]=((((-1.0)*x3324*x3326))+((x3320*x3321))+(((-1.0)*r21*x3325))+((x3320*x3327))+(((-1.0)*x3322*x3323)));
evalcond[1]=((-0.866025403784439)+((x3320*x3326))+((x3324*x3327))+((r21*x3323))+(((-1.0)*cj5*x3322*x3324))+((x3321*x3324)));
evalcond[2]=(((x3324*x3328))+((r10*x3333))+((x3324*x3329))+(((-1.0)*x3338*x3339))+(((-1.0)*x3334*x3335))+((x3336*x3337))+(((-1.0)*(0.5)*sj3))+((x3340*x3341))+((r01*x3330))+((r00*x3331))+((r11*x3332)));
evalcond[3]=((((-1.0)*x3320*x3344))+((x3324*x3342))+((r11*x3330))+(((-1.0)*x3335*x3338))+((x3334*x3339))+(((-1.0)*x3336*x3341))+(((-1.0)*x3324*x3343))+(((-1.0)*r01*x3332))+((x3337*x3340))+(((0.5)*cj3))+((r10*x3331)));
evalcond[4]=((((-1.0)*x3333*x3336))+(((-1.0)*x3330*x3338))+((x3332*x3334))+(((-1.0)*r10*x3346))+((r01*x3339))+((x3320*x3342))+(((-1.0)*r11*x3345))+((x3331*x3340))+(((-1.0)*(1.0)*sj3))+((x3324*x3344))+(((-1.0)*x3320*x3343)));
evalcond[5]=(((x3320*x3329))+((x3320*x3328))+(((-1.0)*(1.0)*cj3))+((x3331*x3336))+(((-1.0)*r00*x3346))+(((-1.0)*x3330*x3334))+((x3333*x3340))+(((-1.0)*x3332*x3338))+(((-1.0)*r01*x3345))+(((-1.0)*r11*sj0*x3325))+(((-1.0)*r10*sj0*sj5*x3324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3347=(cj5*sj3);
IkReal x3348=(sj3*sj5);
IkReal x3349=((0.866025403784439)*cj0);
IkReal x3350=((0.866025403784439)*sj0);
CheckValue<IkReal> x3351=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x3350))+(((0.5)*r12*sj0))+((cj5*r00*x3349))+((cj5*r10*x3350))+(((-1.0)*r01*sj5*x3349))+(((0.5)*cj0*r02)))),-1);
if(!x3351.valid){
continue;
}
CheckValue<IkReal> x3352 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3347))+(((-1.0)*r20*x3348)))),IkReal(((((-1.0)*(0.866025403784439)*r22*sj3))+(((-0.5)*r21*x3348))+(((0.5)*r20*x3347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3351.value)))+(x3352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3353=IKsin(j4);
IkReal x3354=((0.866025403784439)*r22);
IkReal x3355=((0.5)*r20);
IkReal x3356=(cj5*x3353);
IkReal x3357=IKcos(j4);
IkReal x3358=((1.0)*cj5*x3357);
IkReal x3359=(r20*sj5);
IkReal x3360=((0.5)*r21*sj5);
IkReal x3361=((0.866025403784439)*cj0*r02);
IkReal x3362=((0.866025403784439)*r12*sj0);
IkReal x3363=(cj0*cj5*x3353);
IkReal x3364=(cj0*sj5*x3353);
IkReal x3365=(cj5*sj0*x3353);
IkReal x3366=(sj0*sj5*x3353);
IkReal x3367=((0.5)*r00);
IkReal x3368=(cj0*cj5*x3357);
IkReal x3369=((0.5)*r01);
IkReal x3370=(cj0*sj5*x3357);
IkReal x3371=((0.5)*r10);
IkReal x3372=(cj5*sj0*x3357);
IkReal x3373=((0.5)*r11);
IkReal x3374=(sj0*sj5*x3357);
IkReal x3375=((0.866025403784439)*cj0*r12);
IkReal x3376=((0.866025403784439)*r02*sj0);
IkReal x3377=(r00*sj0*sj5);
IkReal x3378=((1.0)*cj0*cj5*x3357);
IkReal x3379=((1.0)*cj0*sj5*x3357);
evalcond[0]=((((-1.0)*x3357*x3359))+((x3353*x3360))+((x3353*x3354))+(((-1.0)*r21*x3358))+(((-1.0)*x3355*x3356)));
evalcond[1]=((-0.866025403784439)+((r21*x3356))+((x3353*x3359))+(((-1.0)*cj5*x3355*x3357))+((x3357*x3360))+((x3354*x3357)));
evalcond[2]=(((x3357*x3361))+(((-1.0)*x3367*x3368))+((r10*x3366))+((r00*x3364))+((x3357*x3362))+((r01*x3363))+(((-1.0)*x3371*x3372))+(((-1.0)*(0.5)*sj3))+((x3373*x3374))+((r11*x3365))+((x3369*x3370)));
evalcond[3]=((((-1.0)*r01*x3365))+((r10*x3364))+((r11*x3363))+(((-1.0)*x3369*x3374))+((x3357*x3375))+(((0.5)*cj3))+(((-1.0)*x3357*x3376))+((x3367*x3372))+(((-1.0)*x3368*x3371))+((x3370*x3373))+(((-1.0)*x3353*x3377)));
evalcond[4]=(((x3365*x3367))+(((-1.0)*x3366*x3369))+((x3357*x3377))+(((-1.0)*x3353*x3376))+(((-1.0)*r10*x3379))+(((-1.0)*x3363*x3371))+((x3353*x3375))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r11*x3378))+((r01*x3372))+((x3364*x3373)));
evalcond[5]=(((x3364*x3369))+(((-1.0)*(1.0)*cj3))+(((-1.0)*r10*sj0*sj5*x3357))+(((-1.0)*r01*x3378))+(((-1.0)*r11*sj0*x3358))+(((-1.0)*r00*x3379))+((x3353*x3361))+(((-1.0)*x3363*x3367))+(((-1.0)*x3365*x3371))+((x3353*x3362))+((x3366*x3373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3380=((0.577350269189626)*cj0);
IkReal x3381=((0.577350269189626)*sj0);
IkReal x3382=(cj0*cj5);
IkReal x3383=(cj5*sj0);
IkReal x3384=((1.0)*cj0);
IkReal x3385=(r01*sj5);
IkReal x3386=(r11*sj5);
if( IKabs(((((-1.0)*sj0*x3386))+((r02*x3380))+(((-1.0)*x3384*x3385))+((r12*x3381))+((r10*x3383))+((r00*x3382)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x3385))+(((-1.0)*r02*x3381))+(((-1.0)*x3384*x3386))+((r12*x3380))+((r10*x3382))+(((-1.0)*r00*x3383)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x3386))+((r02*x3380))+(((-1.0)*x3384*x3385))+((r12*x3381))+((r10*x3383))+((r00*x3382))))+IKsqr((((sj0*x3385))+(((-1.0)*r02*x3381))+(((-1.0)*x3384*x3386))+((r12*x3380))+((r10*x3382))+(((-1.0)*r00*x3383))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj0*x3386))+((r02*x3380))+(((-1.0)*x3384*x3385))+((r12*x3381))+((r10*x3383))+((r00*x3382))), (((sj0*x3385))+(((-1.0)*r02*x3381))+(((-1.0)*x3384*x3386))+((r12*x3380))+((r10*x3382))+(((-1.0)*r00*x3383))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x3387=((0.5)*cj0);
IkReal x3388=((0.5)*sj0);
IkReal x3389=((0.866025403784439)*cj0*cj5);
IkReal x3390=((0.866025403784439)*cj0*sj5);
IkReal x3391=((0.866025403784439)*cj5*sj0);
IkReal x3392=((0.866025403784439)*sj0*sj5);
evalcond[0]=((((-1.0)*r01*x3392))+(((-1.0)*r10*x3389))+(((-1.0)*r12*x3387))+((r00*x3391))+(((0.866025403784439)*(IKcos(j3))))+((r11*x3390))+((r02*x3388)));
evalcond[1]=((((-1.0)*r10*x3391))+(((-1.0)*r02*x3387))+((r01*x3390))+(((-1.0)*r12*x3388))+((r11*x3392))+(((-1.0)*r00*x3389))+(((0.866025403784439)*(IKsin(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3393=(cj0*r02);
IkReal x3394=(r12*sj0);
IkReal x3395=(cj0*cj5*r00);
IkReal x3396=(cj0*r01*sj5);
IkReal x3397=(cj5*r10*sj0);
IkReal x3398=(r11*sj0*sj5);
IkReal x3399=(cj5*sj3);
IkReal x3400=(sj3*sj5);
j4eval[0]=((((1.73205080756888)*x3397))+x3394+x3393+(((1.73205080756888)*x3395))+(((-1.73205080756888)*x3398))+(((-1.73205080756888)*x3396)));
j4eval[1]=((((0.5)*(IKabs(((((-1.0)*(1.73205080756888)*r22*sj3))+((r20*x3399))+(((-1.0)*r21*x3400)))))))+(IKabs((((r21*x3399))+((r20*x3400))))));
j4eval[2]=IKsign(((((0.5)*x3393))+(((0.5)*x3394))+(((0.866025403784439)*x3395))+(((-0.866025403784439)*x3398))+(((0.866025403784439)*x3397))+(((-0.866025403784439)*x3396))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3401=r20*r20;
IkReal x3402=r21*r21;
IkReal x3403=r22*r22;
IkReal x3404=(cj5*r20*r22);
IkReal x3405=(r21*r22*sj5);
IkReal x3406=(cj5*r20*r21*sj5);
IkReal x3407=cj5*cj5;
IkReal x3408=(x3401*x3407);
IkReal x3409=(x3402*x3407);
j4eval[0]=((((-4.0)*x3401))+(((-3.46410161513775)*x3405))+(((3.0)*x3408))+(((-6.0)*x3406))+(((3.46410161513775)*x3404))+(((-3.0)*x3409))+(((-1.0)*x3402))+(((-3.0)*x3403)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((1.5)*x3408))+(((-1.5)*x3409))+(((-1.5)*x3403))+(((-2.0)*x3401))+(((-0.5)*x3402))+(((-3.0)*x3406))+(((-1.73205080756888)*x3405))+(((1.73205080756888)*x3404))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3410=(cj0*r00*r20);
IkReal x3411=(cj0*r01*r21);
IkReal x3412=(cj0*r02*r22);
IkReal x3413=(r10*r20*sj0);
IkReal x3414=(r11*r21*sj0);
IkReal x3415=(r12*r22*sj0);
IkReal x3416=((1.73205080756888)*r22);
IkReal x3417=(cj0*cj5*r00);
IkReal x3418=(cj0*cj5*r02*r20);
IkReal x3419=(cj0*r01*sj5);
IkReal x3420=(cj0*r02*r21*sj5);
IkReal x3421=(cj5*r10*sj0);
IkReal x3422=(cj5*r12*r20*sj0);
IkReal x3423=(r11*sj0*sj5);
IkReal x3424=(r12*r21*sj0*sj5);
IkReal x3425=(cj0*cj5*r00*r21*sj5);
IkReal x3426=(cj0*cj5*r01*r20*sj5);
IkReal x3427=(cj5*r10*r21*sj0*sj5);
IkReal x3428=(cj5*r11*r20*sj0*sj5);
IkReal x3429=cj5*cj5;
IkReal x3430=(cj0*r00*r20*x3429);
IkReal x3431=(cj0*r01*r21*x3429);
IkReal x3432=(r10*r20*sj0*x3429);
IkReal x3433=(r11*r21*sj0*x3429);
IkReal x3434=(r21*sj3);
IkReal x3435=(r20*sj3);
IkReal x3436=((0.866025403784439)*r22);
j4eval[0]=((((-3.0)*x3412))+(((1.73205080756888)*x3422))+(((-4.0)*x3410))+(((-1.0)*x3414))+(((-3.0)*x3431))+(((-4.0)*x3413))+(((-1.0)*x3416*x3419))+(((-3.0)*x3425))+((x3416*x3421))+(((1.73205080756888)*x3418))+(((-1.0)*x3411))+(((-3.0)*x3427))+(((-1.73205080756888)*x3424))+(((-3.0)*x3426))+((x3416*x3417))+(((-3.0)*x3433))+(((-3.0)*x3415))+(((-1.0)*x3416*x3423))+(((3.0)*x3432))+(((-1.73205080756888)*x3420))+(((3.0)*x3430))+(((-3.0)*x3428)));
j4eval[1]=((((0.5)*(IKabs((((sj5*x3434))+((sj3*x3416))+(((-1.0)*cj5*x3435)))))))+(IKabs((((sj5*x3435))+((cj5*x3434))))));
j4eval[2]=IKsign(((((-1.0)*x3423*x3436))+(((-1.5)*x3431))+(((-0.5)*x3414))+(((-1.5)*x3412))+(((-1.5)*x3425))+((x3421*x3436))+(((-0.866025403784439)*x3424))+(((-2.0)*x3413))+(((-1.5)*x3433))+((x3417*x3436))+(((-2.0)*x3410))+(((0.866025403784439)*x3418))+(((-0.5)*x3411))+(((-1.5)*x3428))+(((0.866025403784439)*x3422))+(((-1.5)*x3415))+(((1.5)*x3432))+(((1.5)*x3430))+(((-1.5)*x3426))+(((-1.0)*x3419*x3436))+(((-1.5)*x3427))+(((-0.866025403784439)*x3420))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3437=(r02*sj0);
IkReal x3438=(cj0*r12);
IkReal x3439=(cj0*cj5*r10);
IkReal x3440=(cj0*r11*sj5);
IkReal x3441=(cj5*r00*sj0);
IkReal x3442=(r01*sj0*sj5);
j4eval[0]=((((-1.0)*x3438))+x3437+(((-1.73205080756888)*x3439))+(((1.73205080756888)*x3440))+(((-1.73205080756888)*x3442))+(((1.73205080756888)*x3441)));
j4eval[1]=IKsign(((((0.5)*x3437))+(((0.866025403784439)*x3441))+(((-0.866025403784439)*x3442))+(((-0.5)*x3438))+(((-0.866025403784439)*x3439))+(((0.866025403784439)*x3440))));
j4eval[2]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3443=r20*r20;
IkReal x3444=r21*r21;
IkReal x3445=r22*r22;
IkReal x3446=(cj5*r20*r22);
IkReal x3447=(r21*r22*sj5);
IkReal x3448=(cj5*r20*r21*sj5);
IkReal x3449=cj5*cj5;
IkReal x3450=(x3443*x3449);
IkReal x3451=(x3444*x3449);
j4eval[0]=((((-6.0)*x3448))+(((-3.0)*x3451))+(((-4.0)*x3443))+(((-1.0)*x3444))+(((-3.46410161513775)*x3447))+(((3.46410161513775)*x3446))+(((-3.0)*x3445))+(((3.0)*x3450)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-1.5)*x3445))+(((-1.5)*x3451))+(((-3.0)*x3448))+(((-0.5)*x3444))+(((1.5)*x3450))+(((-1.73205080756888)*x3447))+(((1.73205080756888)*x3446))+(((-2.0)*x3443))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3452=((1.73205080756888)*cj0);
IkReal x3453=((1.73205080756888)*sj0);
IkReal x3454=(((cj5*r00*x3453))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*sj5*x3452))+(((-1.0)*cj5*r10*x3452))+(((-1.0)*r01*sj5*x3453)));
j4eval[0]=x3454;
j4eval[1]=IKsign(x3454);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3455=((1.73205080756888)*cj0*cj5);
IkReal x3456=((1.73205080756888)*cj0*sj5);
IkReal x3457=((1.73205080756888)*cj5*sj0);
IkReal x3458=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x3459=IKPowWithIntegerCheck(IKsign((((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*x3456))+(((-1.0)*r01*x3458))+((r00*x3457))+(((-1.0)*r10*x3455)))),-1);
if(!x3459.valid){
continue;
}
CheckValue<IkReal> x3460 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r01))*((cj0*sj5))))+(((-0.866025403784439)*cj5*r10*sj0))+(((0.866025403784439)*r11*sj0*sj5))+(((-0.866025403784439)*cj0*cj5*r00))+(((1.5)*cj0*r02))+(((1.5)*r12*sj0)))),IkReal(((((-1.0)*r00*x3456))+(((-1.0)*r01*x3455))+(((-1.0)*r10*x3458))+(((-1.0)*r11*x3457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3459.value)))+(x3460.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3461=IKsin(j4);
IkReal x3462=((0.866025403784439)*r22);
IkReal x3463=((0.5)*r20);
IkReal x3464=(cj5*x3461);
IkReal x3465=IKcos(j4);
IkReal x3466=((1.0)*cj5*x3465);
IkReal x3467=(r20*sj5);
IkReal x3468=((0.5)*r21*sj5);
IkReal x3469=((0.866025403784439)*cj0*r02);
IkReal x3470=((0.866025403784439)*r12*sj0);
IkReal x3471=(cj0*cj5*x3461);
IkReal x3472=(cj0*sj5*x3461);
IkReal x3473=(cj5*sj0*x3461);
IkReal x3474=(sj0*sj5*x3461);
IkReal x3475=((0.5)*r00);
IkReal x3476=(cj0*cj5*x3465);
IkReal x3477=((0.5)*r01);
IkReal x3478=(cj0*sj5*x3465);
IkReal x3479=((0.5)*r10);
IkReal x3480=(cj5*sj0*x3465);
IkReal x3481=((0.5)*r11);
IkReal x3482=(sj0*sj5*x3465);
IkReal x3483=((0.866025403784439)*cj0*r12);
IkReal x3484=((0.866025403784439)*r02*sj0);
IkReal x3485=(r00*sj0*sj5);
IkReal x3486=((1.0)*cj0*cj5*x3465);
IkReal x3487=((1.0)*cj0*sj5*x3465);
evalcond[0]=((((-1.0)*r21*x3466))+(((-1.0)*x3463*x3464))+((x3461*x3462))+(((-1.0)*x3465*x3467))+((x3461*x3468)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x3463*x3465))+((x3461*x3467))+((x3465*x3468))+((x3462*x3465))+((r21*x3464)));
evalcond[2]=(((r11*x3473))+(((-1.0)*x3475*x3476))+((x3477*x3478))+((r10*x3474))+((x3465*x3469))+(((-1.0)*x3479*x3480))+((x3465*x3470))+((r01*x3471))+((r00*x3472))+((x3481*x3482)));
evalcond[3]=((((-1.0)*r10*x3487))+((r01*x3480))+(((-1.0)*r11*x3486))+((x3465*x3485))+(((-1.0)*x3461*x3484))+((x3472*x3481))+((x3461*x3483))+(((-1.0)*x3471*x3479))+((x3473*x3475))+(((-1.0)*x3474*x3477)));
evalcond[4]=((0.5)+(((-1.0)*x3477*x3482))+((r10*x3472))+(((-1.0)*x3465*x3484))+((r11*x3471))+(((-1.0)*r01*x3473))+((x3465*x3483))+((x3478*x3481))+((x3475*x3480))+(((-1.0)*x3476*x3479))+(((-1.0)*x3461*x3485)));
evalcond[5]=((1.0)+(((-1.0)*r00*x3487))+(((-1.0)*x3471*x3475))+(((-1.0)*x3473*x3479))+((x3472*x3477))+(((-1.0)*r10*sj0*sj5*x3465))+((x3474*x3481))+(((-1.0)*r11*sj0*x3466))+((x3461*x3469))+((x3461*x3470))+(((-1.0)*r01*x3486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3488=((1.73205080756888)*r21);
IkReal x3489=(cj5*r20);
IkReal x3490=(r21*sj5);
IkReal x3491=r20*r20;
IkReal x3492=r21*r21;
IkReal x3493=((1.5)*(cj5*cj5));
CheckValue<IkReal> x3494 = IKatan2WithCheck(IkReal(((((1.73205080756888)*r20*sj5))+((cj5*x3488)))),IkReal(((((0.866025403784439)*x3490))+(((-0.866025403784439)*x3489))+(((1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3494.valid){
continue;
}
CheckValue<IkReal> x3495=IKPowWithIntegerCheck(IKsign(((((1.73205080756888)*r22*x3489))+(((-3.0)*cj5*r20*x3490))+(((-2.0)*x3491))+(((-1.0)*x3492*x3493))+((x3491*x3493))+(((-0.5)*x3492))+(((-1.0)*r22*sj5*x3488))+(((-1.0)*(1.5)*(r22*r22))))),-1);
if(!x3495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3494.value)+(((1.5707963267949)*(x3495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3496=IKsin(j4);
IkReal x3497=((0.866025403784439)*r22);
IkReal x3498=((0.5)*r20);
IkReal x3499=(cj5*x3496);
IkReal x3500=IKcos(j4);
IkReal x3501=((1.0)*cj5*x3500);
IkReal x3502=(r20*sj5);
IkReal x3503=((0.5)*r21*sj5);
IkReal x3504=((0.866025403784439)*cj0*r02);
IkReal x3505=((0.866025403784439)*r12*sj0);
IkReal x3506=(cj0*cj5*x3496);
IkReal x3507=(cj0*sj5*x3496);
IkReal x3508=(cj5*sj0*x3496);
IkReal x3509=(sj0*sj5*x3496);
IkReal x3510=((0.5)*r00);
IkReal x3511=(cj0*cj5*x3500);
IkReal x3512=((0.5)*r01);
IkReal x3513=(cj0*sj5*x3500);
IkReal x3514=((0.5)*r10);
IkReal x3515=(cj5*sj0*x3500);
IkReal x3516=((0.5)*r11);
IkReal x3517=(sj0*sj5*x3500);
IkReal x3518=((0.866025403784439)*cj0*r12);
IkReal x3519=((0.866025403784439)*r02*sj0);
IkReal x3520=(r00*sj0*sj5);
IkReal x3521=((1.0)*cj0*cj5*x3500);
IkReal x3522=((1.0)*cj0*sj5*x3500);
evalcond[0]=((((-1.0)*r21*x3501))+(((-1.0)*x3500*x3502))+((x3496*x3497))+((x3496*x3503))+(((-1.0)*x3498*x3499)));
evalcond[1]=((0.866025403784439)+((r21*x3499))+((x3496*x3502))+((x3497*x3500))+(((-1.0)*cj5*x3498*x3500))+((x3500*x3503)));
evalcond[2]=(((x3512*x3513))+((r01*x3506))+((r00*x3507))+((r10*x3509))+(((-1.0)*x3514*x3515))+((x3516*x3517))+(((-1.0)*x3510*x3511))+((x3500*x3504))+((r11*x3508))+((x3500*x3505)));
evalcond[3]=((((-1.0)*r11*x3521))+((x3500*x3520))+((x3508*x3510))+(((-1.0)*x3496*x3519))+((x3507*x3516))+((x3496*x3518))+(((-1.0)*x3506*x3514))+((r01*x3515))+(((-1.0)*x3509*x3512))+(((-1.0)*r10*x3522)));
evalcond[4]=((0.5)+(((-1.0)*x3512*x3517))+(((-1.0)*x3500*x3519))+((r10*x3507))+(((-1.0)*x3496*x3520))+((x3500*x3518))+(((-1.0)*r01*x3508))+((r11*x3506))+(((-1.0)*x3511*x3514))+((x3510*x3515))+((x3513*x3516)));
evalcond[5]=((1.0)+((x3496*x3504))+((x3507*x3512))+(((-1.0)*x3508*x3514))+((x3509*x3516))+((x3496*x3505))+(((-1.0)*r11*sj0*x3501))+(((-1.0)*r10*sj0*sj5*x3500))+(((-1.0)*r01*x3521))+(((-1.0)*x3506*x3510))+(((-1.0)*r00*x3522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3523=((0.866025403784439)*cj0);
IkReal x3524=((0.866025403784439)*sj0);
CheckValue<IkReal> x3525=IKPowWithIntegerCheck(IKsign((((r11*sj5*x3523))+((cj5*r00*x3524))+(((-1.0)*r01*sj5*x3524))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0))+(((-1.0)*cj5*r10*x3523)))),-1);
if(!x3525.valid){
continue;
}
CheckValue<IkReal> x3526 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3525.value)))+(x3526.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3527=IKsin(j4);
IkReal x3528=((0.866025403784439)*r22);
IkReal x3529=((0.5)*r20);
IkReal x3530=(cj5*x3527);
IkReal x3531=IKcos(j4);
IkReal x3532=((1.0)*cj5*x3531);
IkReal x3533=(r20*sj5);
IkReal x3534=((0.5)*r21*sj5);
IkReal x3535=((0.866025403784439)*cj0*r02);
IkReal x3536=((0.866025403784439)*r12*sj0);
IkReal x3537=(cj0*cj5*x3527);
IkReal x3538=(cj0*sj5*x3527);
IkReal x3539=(cj5*sj0*x3527);
IkReal x3540=(sj0*sj5*x3527);
IkReal x3541=((0.5)*r00);
IkReal x3542=(cj0*cj5*x3531);
IkReal x3543=((0.5)*r01);
IkReal x3544=(cj0*sj5*x3531);
IkReal x3545=((0.5)*r10);
IkReal x3546=(cj5*sj0*x3531);
IkReal x3547=((0.5)*r11);
IkReal x3548=(sj0*sj5*x3531);
IkReal x3549=((0.866025403784439)*cj0*r12);
IkReal x3550=((0.866025403784439)*r02*sj0);
IkReal x3551=(r00*sj0*sj5);
IkReal x3552=((1.0)*cj0*cj5*x3531);
IkReal x3553=((1.0)*cj0*sj5*x3531);
evalcond[0]=(((x3527*x3534))+(((-1.0)*x3529*x3530))+(((-1.0)*x3531*x3533))+(((-1.0)*r21*x3532))+((x3527*x3528)));
evalcond[1]=((0.866025403784439)+((x3527*x3533))+((x3531*x3534))+(((-1.0)*cj5*x3529*x3531))+((r21*x3530))+((x3528*x3531)));
evalcond[2]=(((r10*x3540))+((x3531*x3536))+((r11*x3539))+(((-1.0)*x3541*x3542))+((x3547*x3548))+(((-1.0)*x3545*x3546))+((x3531*x3535))+((r00*x3538))+((r01*x3537))+((x3543*x3544)));
evalcond[3]=(((x3539*x3541))+((r01*x3546))+(((-1.0)*x3537*x3545))+((x3538*x3547))+(((-1.0)*r10*x3553))+(((-1.0)*r11*x3552))+(((-1.0)*x3540*x3543))+((x3531*x3551))+(((-1.0)*x3527*x3550))+((x3527*x3549)));
evalcond[4]=((0.5)+((x3541*x3546))+((r11*x3537))+(((-1.0)*x3527*x3551))+((x3544*x3547))+(((-1.0)*x3543*x3548))+((x3531*x3549))+(((-1.0)*x3531*x3550))+(((-1.0)*r01*x3539))+((r10*x3538))+(((-1.0)*x3542*x3545)));
evalcond[5]=((1.0)+(((-1.0)*r10*sj0*sj5*x3531))+(((-1.0)*r01*x3552))+(((-1.0)*r00*x3553))+(((-1.0)*r11*sj0*x3532))+((x3527*x3535))+((x3527*x3536))+((x3538*x3543))+((x3540*x3547))+(((-1.0)*x3537*x3541))+(((-1.0)*x3539*x3545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3554=(r02*sj0);
IkReal x3555=(cj0*r12);
IkReal x3556=(cj0*cj5*r10);
IkReal x3557=(cj0*r11*sj5);
IkReal x3558=(cj5*r00*sj0);
IkReal x3559=(r01*sj0*sj5);
j4eval[0]=(x3554+(((-1.0)*x3555))+(((-1.73205080756888)*x3556))+(((1.73205080756888)*x3557))+(((1.73205080756888)*x3558))+(((-1.73205080756888)*x3559)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((-0.5)*x3555))+(((0.866025403784439)*x3557))+(((-0.866025403784439)*x3559))+(((0.866025403784439)*x3558))+(((-0.866025403784439)*x3556))+(((0.5)*x3554))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3560=r20*r20;
IkReal x3561=r21*r21;
IkReal x3562=r22*r22;
IkReal x3563=(cj5*r20*r22);
IkReal x3564=(r21*r22*sj5);
IkReal x3565=(cj5*r20*r21*sj5);
IkReal x3566=cj5*cj5;
IkReal x3567=(x3560*x3566);
IkReal x3568=(x3561*x3566);
j4eval[0]=((((-3.46410161513775)*x3564))+(((3.0)*x3567))+(((3.46410161513775)*x3563))+(((-1.0)*x3561))+(((-3.0)*x3568))+(((-3.0)*x3562))+(((-6.0)*x3565))+(((-4.0)*x3560)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-3.0)*x3565))+(((1.73205080756888)*x3563))+(((-2.0)*x3560))+(((-1.5)*x3568))+(((-1.73205080756888)*x3564))+(((-1.5)*x3562))+(((-0.5)*x3561))+(((1.5)*x3567))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3569=((1.73205080756888)*cj0);
IkReal x3570=((1.73205080756888)*sj0);
IkReal x3571=(((cj5*r00*x3570))+(((-1.0)*cj5*r10*x3569))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*sj5*x3569))+(((-1.0)*r01*sj5*x3570)));
j4eval[0]=x3571;
j4eval[1]=IKsign(x3571);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3572=((1.73205080756888)*cj0*cj5);
IkReal x3573=((1.73205080756888)*cj0*sj5);
IkReal x3574=((1.73205080756888)*cj5*sj0);
IkReal x3575=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x3576=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3572))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r00*x3574))+(((-1.0)*r01*x3575))+((r11*x3573)))),-1);
if(!x3576.valid){
continue;
}
CheckValue<IkReal> x3577 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r01))*((cj0*sj5))))+(((-0.866025403784439)*cj5*r10*sj0))+(((0.866025403784439)*r11*sj0*sj5))+(((-0.866025403784439)*cj0*cj5*r00))+(((1.5)*cj0*r02))+(((1.5)*r12*sj0)))),IkReal(((((-1.0)*r10*x3575))+(((-1.0)*r11*x3574))+(((-1.0)*r01*x3572))+(((-1.0)*r00*x3573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3576.value)))+(x3577.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3578=IKsin(j4);
IkReal x3579=((0.866025403784439)*r22);
IkReal x3580=((0.5)*r20);
IkReal x3581=(cj5*x3578);
IkReal x3582=IKcos(j4);
IkReal x3583=((1.0)*cj5*x3582);
IkReal x3584=(r20*sj5);
IkReal x3585=((0.5)*r21*sj5);
IkReal x3586=((0.866025403784439)*cj0*r02);
IkReal x3587=((0.866025403784439)*r12*sj0);
IkReal x3588=(cj0*cj5*x3578);
IkReal x3589=(cj0*sj5*x3578);
IkReal x3590=(cj5*sj0*x3578);
IkReal x3591=(sj0*sj5*x3578);
IkReal x3592=((0.5)*r00);
IkReal x3593=(cj0*cj5*x3582);
IkReal x3594=((0.5)*r01);
IkReal x3595=(cj0*sj5*x3582);
IkReal x3596=((0.5)*r10);
IkReal x3597=(cj5*sj0*x3582);
IkReal x3598=((0.5)*r11);
IkReal x3599=(sj0*sj5*x3582);
IkReal x3600=((0.866025403784439)*cj0*r12);
IkReal x3601=((0.866025403784439)*r02*sj0);
IkReal x3602=(r00*sj0*sj5);
IkReal x3603=((1.0)*cj0*cj5*x3582);
IkReal x3604=((1.0)*cj0*sj5*x3582);
evalcond[0]=(((x3578*x3579))+(((-1.0)*x3582*x3584))+((x3578*x3585))+(((-1.0)*r21*x3583))+(((-1.0)*x3580*x3581)));
evalcond[1]=((0.866025403784439)+((x3578*x3584))+((x3582*x3585))+(((-1.0)*cj5*x3580*x3582))+((r21*x3581))+((x3579*x3582)));
evalcond[2]=(((r00*x3589))+((x3582*x3587))+(((-1.0)*x3596*x3597))+((x3582*x3586))+((r01*x3588))+((x3594*x3595))+(((-1.0)*x3592*x3593))+((x3598*x3599))+((r10*x3591))+((r11*x3590)));
evalcond[3]=(((x3590*x3592))+((r01*x3597))+((x3578*x3600))+(((-1.0)*x3578*x3601))+(((-1.0)*r10*x3604))+((x3582*x3602))+(((-1.0)*x3591*x3594))+((x3589*x3598))+(((-1.0)*r11*x3603))+(((-1.0)*x3588*x3596)));
evalcond[4]=((-0.5)+(((-1.0)*x3594*x3599))+(((-1.0)*x3578*x3602))+((x3595*x3598))+((r11*x3588))+(((-1.0)*x3582*x3601))+((r10*x3589))+(((-1.0)*x3593*x3596))+((x3582*x3600))+(((-1.0)*r01*x3590))+((x3592*x3597)));
evalcond[5]=((-1.0)+((x3578*x3587))+(((-1.0)*r11*sj0*x3583))+(((-1.0)*x3590*x3596))+(((-1.0)*x3588*x3592))+(((-1.0)*r01*x3603))+(((-1.0)*r00*x3604))+(((-1.0)*r10*sj0*sj5*x3582))+((x3589*x3594))+((x3591*x3598))+((x3578*x3586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3605=((1.73205080756888)*r21);
IkReal x3606=(cj5*r20);
IkReal x3607=(r21*sj5);
IkReal x3608=r20*r20;
IkReal x3609=r21*r21;
IkReal x3610=((1.5)*(cj5*cj5));
CheckValue<IkReal> x3611=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*sj5*x3605))+(((-0.5)*x3609))+(((-1.0)*x3609*x3610))+(((-3.0)*cj5*r20*x3607))+(((1.73205080756888)*r22*x3606))+(((-1.0)*(1.5)*(r22*r22)))+(((-2.0)*x3608))+((x3608*x3610)))),-1);
if(!x3611.valid){
continue;
}
CheckValue<IkReal> x3612 = IKatan2WithCheck(IkReal(((((1.73205080756888)*r20*sj5))+((cj5*x3605)))),IkReal(((((0.866025403784439)*x3607))+(((1.5)*r22))+(((-0.866025403784439)*x3606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3611.value)))+(x3612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3613=IKsin(j4);
IkReal x3614=((0.866025403784439)*r22);
IkReal x3615=((0.5)*r20);
IkReal x3616=(cj5*x3613);
IkReal x3617=IKcos(j4);
IkReal x3618=((1.0)*cj5*x3617);
IkReal x3619=(r20*sj5);
IkReal x3620=((0.5)*r21*sj5);
IkReal x3621=((0.866025403784439)*cj0*r02);
IkReal x3622=((0.866025403784439)*r12*sj0);
IkReal x3623=(cj0*cj5*x3613);
IkReal x3624=(cj0*sj5*x3613);
IkReal x3625=(cj5*sj0*x3613);
IkReal x3626=(sj0*sj5*x3613);
IkReal x3627=((0.5)*r00);
IkReal x3628=(cj0*cj5*x3617);
IkReal x3629=((0.5)*r01);
IkReal x3630=(cj0*sj5*x3617);
IkReal x3631=((0.5)*r10);
IkReal x3632=(cj5*sj0*x3617);
IkReal x3633=((0.5)*r11);
IkReal x3634=(sj0*sj5*x3617);
IkReal x3635=((0.866025403784439)*cj0*r12);
IkReal x3636=((0.866025403784439)*r02*sj0);
IkReal x3637=(r00*sj0*sj5);
IkReal x3638=((1.0)*cj0*cj5*x3617);
IkReal x3639=((1.0)*cj0*sj5*x3617);
evalcond[0]=(((x3613*x3620))+(((-1.0)*x3615*x3616))+((x3613*x3614))+(((-1.0)*x3617*x3619))+(((-1.0)*r21*x3618)));
evalcond[1]=((0.866025403784439)+((x3613*x3619))+((x3617*x3620))+((x3614*x3617))+(((-1.0)*cj5*x3615*x3617))+((r21*x3616)));
evalcond[2]=(((r11*x3625))+((x3629*x3630))+((r10*x3626))+((x3617*x3621))+(((-1.0)*x3631*x3632))+((r01*x3623))+((x3633*x3634))+((r00*x3624))+((x3617*x3622))+(((-1.0)*x3627*x3628)));
evalcond[3]=(((x3624*x3633))+(((-1.0)*r10*x3639))+((x3617*x3637))+(((-1.0)*x3626*x3629))+((x3625*x3627))+(((-1.0)*x3623*x3631))+((x3613*x3635))+((r01*x3632))+(((-1.0)*x3613*x3636))+(((-1.0)*r11*x3638)));
evalcond[4]=((-0.5)+(((-1.0)*x3629*x3634))+(((-1.0)*x3613*x3637))+((r10*x3624))+((x3630*x3633))+(((-1.0)*x3617*x3636))+((x3627*x3632))+((x3617*x3635))+(((-1.0)*x3628*x3631))+(((-1.0)*r01*x3625))+((r11*x3623)));
evalcond[5]=((-1.0)+((x3626*x3633))+(((-1.0)*r00*x3639))+((x3613*x3621))+(((-1.0)*x3625*x3631))+((x3624*x3629))+(((-1.0)*r10*sj0*sj5*x3617))+(((-1.0)*r01*x3638))+(((-1.0)*r11*sj0*x3618))+((x3613*x3622))+(((-1.0)*x3623*x3627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3640=((0.866025403784439)*cj0);
IkReal x3641=((0.866025403784439)*sj0);
CheckValue<IkReal> x3642 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3642.valid){
continue;
}
CheckValue<IkReal> x3643=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x3641))+(((-1.0)*(0.5)*cj0*r12))+(((-1.0)*cj5*r10*x3640))+(((0.5)*r02*sj0))+((cj5*r00*x3641))+((r11*sj5*x3640)))),-1);
if(!x3643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3642.value)+(((1.5707963267949)*(x3643.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3644=IKsin(j4);
IkReal x3645=((0.866025403784439)*r22);
IkReal x3646=((0.5)*r20);
IkReal x3647=(cj5*x3644);
IkReal x3648=IKcos(j4);
IkReal x3649=((1.0)*cj5*x3648);
IkReal x3650=(r20*sj5);
IkReal x3651=((0.5)*r21*sj5);
IkReal x3652=((0.866025403784439)*cj0*r02);
IkReal x3653=((0.866025403784439)*r12*sj0);
IkReal x3654=(cj0*cj5*x3644);
IkReal x3655=(cj0*sj5*x3644);
IkReal x3656=(cj5*sj0*x3644);
IkReal x3657=(sj0*sj5*x3644);
IkReal x3658=((0.5)*r00);
IkReal x3659=(cj0*cj5*x3648);
IkReal x3660=((0.5)*r01);
IkReal x3661=(cj0*sj5*x3648);
IkReal x3662=((0.5)*r10);
IkReal x3663=(cj5*sj0*x3648);
IkReal x3664=((0.5)*r11);
IkReal x3665=(sj0*sj5*x3648);
IkReal x3666=((0.866025403784439)*cj0*r12);
IkReal x3667=((0.866025403784439)*r02*sj0);
IkReal x3668=(r00*sj0*sj5);
IkReal x3669=((1.0)*cj0*cj5*x3648);
IkReal x3670=((1.0)*cj0*sj5*x3648);
evalcond[0]=((((-1.0)*x3646*x3647))+(((-1.0)*x3648*x3650))+((x3644*x3645))+((x3644*x3651))+(((-1.0)*r21*x3649)));
evalcond[1]=((0.866025403784439)+((x3648*x3651))+((x3644*x3650))+((x3645*x3648))+((r21*x3647))+(((-1.0)*cj5*x3646*x3648)));
evalcond[2]=(((r10*x3657))+((x3648*x3652))+(((-1.0)*x3662*x3663))+(((-1.0)*x3658*x3659))+((x3648*x3653))+((r01*x3654))+((r00*x3655))+((x3660*x3661))+((x3664*x3665))+((r11*x3656)));
evalcond[3]=((((-1.0)*x3657*x3660))+((x3656*x3658))+(((-1.0)*x3644*x3667))+((r01*x3663))+((x3648*x3668))+(((-1.0)*r10*x3670))+(((-1.0)*r11*x3669))+((x3655*x3664))+(((-1.0)*x3654*x3662))+((x3644*x3666)));
evalcond[4]=((-0.5)+((r10*x3655))+(((-1.0)*x3659*x3662))+((x3661*x3664))+(((-1.0)*x3644*x3668))+((x3658*x3663))+(((-1.0)*x3648*x3667))+((r11*x3654))+(((-1.0)*r01*x3656))+(((-1.0)*x3660*x3665))+((x3648*x3666)));
evalcond[5]=((-1.0)+((x3657*x3664))+((x3644*x3653))+(((-1.0)*r10*sj0*sj5*x3648))+(((-1.0)*r11*sj0*x3649))+((x3644*x3652))+((x3655*x3660))+(((-1.0)*x3656*x3662))+(((-1.0)*x3654*x3658))+(((-1.0)*r00*x3670))+(((-1.0)*r01*x3669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3671=(cj5*sj3);
IkReal x3672=(sj3*sj5);
IkReal x3673=((0.5)*r21);
IkReal x3674=((2.0)*r20);
IkReal x3675=(cj0*r00);
IkReal x3676=(cj0*r01);
IkReal x3677=((1.5)*r22);
IkReal x3678=(r10*sj0);
IkReal x3679=(r11*sj0);
IkReal x3680=((0.866025403784439)*cj5*r22);
IkReal x3681=(cj5*r20);
IkReal x3682=((0.866025403784439)*cj0*r02);
IkReal x3683=((0.866025403784439)*r22*sj5);
IkReal x3684=(r21*sj5);
IkReal x3685=((0.866025403784439)*r12*sj0);
IkReal x3686=((1.5)*cj5*r21*sj5);
IkReal x3687=((1.5)*cj5*r20*sj5);
IkReal x3688=cj5*cj5;
IkReal x3689=((1.5)*r20*x3688);
IkReal x3690=((1.5)*r21*x3688);
CheckValue<IkReal> x3691=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3682*x3684))+((x3678*x3689))+(((-1.0)*x3675*x3686))+(((-1.0)*x3674*x3675))+(((-1.0)*cj0*r02*x3677))+(((-1.0)*x3673*x3676))+((x3681*x3685))+(((-1.0)*x3674*x3678))+((x3678*x3680))+(((-1.0)*x3673*x3679))+(((-1.0)*x3684*x3685))+(((-1.0)*x3676*x3690))+((x3675*x3689))+(((-1.0)*x3676*x3687))+(((-1.0)*x3676*x3683))+((x3681*x3682))+((x3675*x3680))+(((-1.0)*x3678*x3686))+(((-1.0)*x3679*x3690))+(((-1.0)*r12*sj0*x3677))+(((-1.0)*x3679*x3683))+(((-1.0)*x3679*x3687)))),-1);
if(!x3691.valid){
continue;
}
CheckValue<IkReal> x3692 = IKatan2WithCheck(IkReal((((r21*x3671))+((r20*x3672)))),IkReal(((((-0.5)*r20*x3671))+((sj3*(((0.866025403784439)*r22))))+((x3672*x3673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3691.value)))+(x3692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3693=IKsin(j4);
IkReal x3694=((0.866025403784439)*r22);
IkReal x3695=((0.5)*r20);
IkReal x3696=(cj5*x3693);
IkReal x3697=IKcos(j4);
IkReal x3698=((1.0)*cj5*x3697);
IkReal x3699=(r20*sj5);
IkReal x3700=((0.5)*r21*sj5);
IkReal x3701=((0.866025403784439)*cj0*r02);
IkReal x3702=((0.866025403784439)*r12*sj0);
IkReal x3703=(cj0*cj5*x3693);
IkReal x3704=(cj0*sj5*x3693);
IkReal x3705=(cj5*sj0*x3693);
IkReal x3706=(sj0*sj5*x3693);
IkReal x3707=((0.5)*r00);
IkReal x3708=(cj0*cj5*x3697);
IkReal x3709=((0.5)*r01);
IkReal x3710=(cj0*sj5*x3697);
IkReal x3711=((0.5)*r10);
IkReal x3712=(cj5*sj0*x3697);
IkReal x3713=((0.5)*r11);
IkReal x3714=(sj0*sj5*x3697);
IkReal x3715=((0.866025403784439)*cj0*r12);
IkReal x3716=((0.866025403784439)*r02*sj0);
IkReal x3717=(r00*sj0*sj5);
IkReal x3718=((1.0)*cj0*cj5*x3697);
IkReal x3719=((1.0)*cj0*sj5*x3697);
evalcond[0]=(((x3693*x3694))+((x3693*x3700))+(((-1.0)*x3697*x3699))+(((-1.0)*x3695*x3696))+(((-1.0)*r21*x3698)));
evalcond[1]=((0.866025403784439)+((x3694*x3697))+((r21*x3696))+((x3697*x3700))+((x3693*x3699))+(((-1.0)*cj5*x3695*x3697)));
evalcond[2]=((((0.5)*sj3))+((r01*x3703))+((x3713*x3714))+((x3709*x3710))+((r11*x3705))+((r00*x3704))+((x3697*x3701))+(((-1.0)*x3707*x3708))+(((-1.0)*x3711*x3712))+((r10*x3706))+((x3697*x3702)));
evalcond[3]=(((r10*x3704))+(((-1.0)*r01*x3705))+((x3707*x3712))+(((-1.0)*x3708*x3711))+((x3710*x3713))+(((-1.0)*x3693*x3717))+((r11*x3703))+(((-1.0)*x3697*x3716))+((x3697*x3715))+(((0.5)*cj3))+(((-1.0)*x3709*x3714)));
evalcond[4]=(((x3704*x3713))+((x3693*x3715))+(((-1.0)*x3693*x3716))+((x3705*x3707))+(((-1.0)*x3706*x3709))+((x3697*x3717))+(((-1.0)*(1.0)*sj3))+((r01*x3712))+(((-1.0)*r10*x3719))+(((-1.0)*r11*x3718))+(((-1.0)*x3703*x3711)));
evalcond[5]=((((-1.0)*x3705*x3711))+((x3693*x3701))+(((-1.0)*r00*x3719))+(((-1.0)*r11*sj0*x3698))+((x3704*x3709))+(((-1.0)*r10*sj0*sj5*x3697))+(((-1.0)*x3703*x3707))+cj3+((x3706*x3713))+(((-1.0)*r01*x3718))+((x3693*x3702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3720=((1.73205080756888)*r21);
IkReal x3721=(cj5*r20);
IkReal x3722=(r21*sj5);
IkReal x3723=r20*r20;
IkReal x3724=r21*r21;
IkReal x3725=((1.5)*(cj5*cj5));
CheckValue<IkReal> x3726=IKPowWithIntegerCheck(IKsign((((x3723*x3725))+(((-1.0)*x3724*x3725))+(((-3.0)*cj5*r20*x3722))+(((1.73205080756888)*r22*x3721))+(((-2.0)*x3723))+(((-1.0)*r22*sj5*x3720))+(((-1.0)*(1.5)*(r22*r22)))+(((-0.5)*x3724)))),-1);
if(!x3726.valid){
continue;
}
CheckValue<IkReal> x3727 = IKatan2WithCheck(IkReal(((((1.73205080756888)*r20*sj5))+((cj5*x3720)))),IkReal(((((-0.866025403784439)*x3721))+(((0.866025403784439)*x3722))+(((1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3726.value)))+(x3727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3728=IKsin(j4);
IkReal x3729=((0.866025403784439)*r22);
IkReal x3730=((0.5)*r20);
IkReal x3731=(cj5*x3728);
IkReal x3732=IKcos(j4);
IkReal x3733=((1.0)*cj5*x3732);
IkReal x3734=(r20*sj5);
IkReal x3735=((0.5)*r21*sj5);
IkReal x3736=((0.866025403784439)*cj0*r02);
IkReal x3737=((0.866025403784439)*r12*sj0);
IkReal x3738=(cj0*cj5*x3728);
IkReal x3739=(cj0*sj5*x3728);
IkReal x3740=(cj5*sj0*x3728);
IkReal x3741=(sj0*sj5*x3728);
IkReal x3742=((0.5)*r00);
IkReal x3743=(cj0*cj5*x3732);
IkReal x3744=((0.5)*r01);
IkReal x3745=(cj0*sj5*x3732);
IkReal x3746=((0.5)*r10);
IkReal x3747=(cj5*sj0*x3732);
IkReal x3748=((0.5)*r11);
IkReal x3749=(sj0*sj5*x3732);
IkReal x3750=((0.866025403784439)*cj0*r12);
IkReal x3751=((0.866025403784439)*r02*sj0);
IkReal x3752=(r00*sj0*sj5);
IkReal x3753=((1.0)*cj0*cj5*x3732);
IkReal x3754=((1.0)*cj0*sj5*x3732);
evalcond[0]=((((-1.0)*x3730*x3731))+(((-1.0)*r21*x3733))+((x3728*x3735))+(((-1.0)*x3732*x3734))+((x3728*x3729)));
evalcond[1]=((0.866025403784439)+((x3732*x3735))+((x3729*x3732))+(((-1.0)*cj5*x3730*x3732))+((r21*x3731))+((x3728*x3734)));
evalcond[2]=(((x3732*x3736))+((x3732*x3737))+((r00*x3739))+((x3744*x3745))+(((0.5)*sj3))+((x3748*x3749))+((r01*x3738))+(((-1.0)*x3746*x3747))+((r10*x3741))+(((-1.0)*x3742*x3743))+((r11*x3740)));
evalcond[3]=(((x3742*x3747))+((r10*x3739))+(((-1.0)*x3732*x3751))+(((-1.0)*x3728*x3752))+((x3732*x3750))+(((-1.0)*x3743*x3746))+((x3745*x3748))+(((-1.0)*r01*x3740))+(((-1.0)*x3744*x3749))+(((0.5)*cj3))+((r11*x3738)));
evalcond[4]=(((x3728*x3750))+(((-1.0)*r10*x3754))+((r01*x3747))+(((-1.0)*x3728*x3751))+((x3739*x3748))+(((-1.0)*x3741*x3744))+((x3740*x3742))+((x3732*x3752))+(((-1.0)*x3738*x3746))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r11*x3753)));
evalcond[5]=((((-1.0)*x3740*x3746))+((x3728*x3736))+((x3739*x3744))+(((-1.0)*r10*sj0*sj5*x3732))+(((-1.0)*r11*sj0*x3733))+(((-1.0)*r00*x3754))+(((-1.0)*r01*x3753))+((x3741*x3748))+cj3+((x3728*x3737))+(((-1.0)*x3738*x3742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3755=(cj5*sj3);
IkReal x3756=(sj3*sj5);
IkReal x3757=((0.866025403784439)*cj0);
IkReal x3758=((0.866025403784439)*sj0);
CheckValue<IkReal> x3759 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x3756))+(((-1.0)*r21*x3755)))),IkReal(((((-1.0)*(0.866025403784439)*r22*sj3))+(((0.5)*r20*x3755))+(((-0.5)*r21*x3756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3759.valid){
continue;
}
CheckValue<IkReal> x3760=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x3757))+((cj5*r00*x3757))+(((0.5)*r12*sj0))+(((-1.0)*r11*sj5*x3758))+(((0.5)*cj0*r02))+((cj5*r10*x3758)))),-1);
if(!x3760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3759.value)+(((1.5707963267949)*(x3760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3761=IKsin(j4);
IkReal x3762=((0.866025403784439)*r22);
IkReal x3763=((0.5)*r20);
IkReal x3764=(cj5*x3761);
IkReal x3765=IKcos(j4);
IkReal x3766=((1.0)*cj5*x3765);
IkReal x3767=(r20*sj5);
IkReal x3768=((0.5)*r21*sj5);
IkReal x3769=((0.866025403784439)*cj0*r02);
IkReal x3770=((0.866025403784439)*r12*sj0);
IkReal x3771=(cj0*cj5*x3761);
IkReal x3772=(cj0*sj5*x3761);
IkReal x3773=(cj5*sj0*x3761);
IkReal x3774=(sj0*sj5*x3761);
IkReal x3775=((0.5)*r00);
IkReal x3776=(cj0*cj5*x3765);
IkReal x3777=((0.5)*r01);
IkReal x3778=(cj0*sj5*x3765);
IkReal x3779=((0.5)*r10);
IkReal x3780=(cj5*sj0*x3765);
IkReal x3781=((0.5)*r11);
IkReal x3782=(sj0*sj5*x3765);
IkReal x3783=((0.866025403784439)*cj0*r12);
IkReal x3784=((0.866025403784439)*r02*sj0);
IkReal x3785=(r00*sj0*sj5);
IkReal x3786=((1.0)*cj0*cj5*x3765);
IkReal x3787=((1.0)*cj0*sj5*x3765);
evalcond[0]=((((-1.0)*x3765*x3767))+(((-1.0)*r21*x3766))+(((-1.0)*x3763*x3764))+((x3761*x3768))+((x3761*x3762)));
evalcond[1]=((0.866025403784439)+((r21*x3764))+((x3761*x3767))+(((-1.0)*cj5*x3763*x3765))+((x3765*x3768))+((x3762*x3765)));
evalcond[2]=(((r01*x3771))+((r00*x3772))+((x3781*x3782))+((r10*x3774))+(((0.5)*sj3))+(((-1.0)*x3775*x3776))+(((-1.0)*x3779*x3780))+((r11*x3773))+((x3777*x3778))+((x3765*x3770))+((x3765*x3769)));
evalcond[3]=((((-1.0)*x3765*x3784))+((x3765*x3783))+(((-1.0)*x3761*x3785))+((r11*x3771))+((r10*x3772))+((x3775*x3780))+((x3778*x3781))+(((-1.0)*r01*x3773))+(((-1.0)*x3777*x3782))+(((0.5)*cj3))+(((-1.0)*x3776*x3779)));
evalcond[4]=((((-1.0)*x3761*x3784))+(((-1.0)*r10*x3787))+((x3772*x3781))+(((-1.0)*x3771*x3779))+((x3761*x3783))+(((-1.0)*x3774*x3777))+((r01*x3780))+((x3773*x3775))+(((-1.0)*r11*x3786))+(((-1.0)*(1.0)*sj3))+((x3765*x3785)));
evalcond[5]=((((-1.0)*r11*sj0*x3766))+(((-1.0)*r01*x3786))+((x3761*x3770))+((x3761*x3769))+(((-1.0)*x3771*x3775))+(((-1.0)*r10*sj0*sj5*x3765))+(((-1.0)*x3773*x3779))+cj3+(((-1.0)*r00*x3787))+((x3774*x3781))+((x3772*x3777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3788=((0.577350269189626)*cj0);
IkReal x3789=((0.577350269189626)*sj0);
IkReal x3790=(cj0*cj5);
IkReal x3791=(cj5*sj0);
IkReal x3792=((1.0)*cj0);
IkReal x3793=(r01*sj5);
IkReal x3794=(r11*sj5);
if( IKabs((((r10*x3791))+((r12*x3789))+(((-1.0)*sj0*x3794))+((r00*x3790))+(((-1.0)*x3792*x3793))+((r02*x3788)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x3793))+((r12*x3788))+((r10*x3790))+(((-1.0)*r02*x3789))+(((-1.0)*r00*x3791))+(((-1.0)*x3792*x3794)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x3791))+((r12*x3789))+(((-1.0)*sj0*x3794))+((r00*x3790))+(((-1.0)*x3792*x3793))+((r02*x3788))))+IKsqr((((sj0*x3793))+((r12*x3788))+((r10*x3790))+(((-1.0)*r02*x3789))+(((-1.0)*r00*x3791))+(((-1.0)*x3792*x3794))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r10*x3791))+((r12*x3789))+(((-1.0)*sj0*x3794))+((r00*x3790))+(((-1.0)*x3792*x3793))+((r02*x3788))), (((sj0*x3793))+((r12*x3788))+((r10*x3790))+(((-1.0)*r02*x3789))+(((-1.0)*r00*x3791))+(((-1.0)*x3792*x3794))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x3795=((0.5)*cj0);
IkReal x3796=((0.5)*sj0);
IkReal x3797=((0.866025403784439)*cj0*cj5);
IkReal x3798=((0.866025403784439)*cj0*sj5);
IkReal x3799=((0.866025403784439)*cj5*sj0);
IkReal x3800=((0.866025403784439)*sj0*sj5);
evalcond[0]=((((-1.0)*r12*x3795))+(((-1.0)*r01*x3800))+((r11*x3798))+((r02*x3796))+((r00*x3799))+(((0.866025403784439)*(IKcos(j3))))+(((-1.0)*r10*x3797)));
evalcond[1]=(((r11*x3800))+(((-1.0)*r10*x3799))+(((-1.0)*r02*x3795))+(((-1.0)*r12*x3796))+(((-1.0)*r00*x3797))+((r01*x3798))+(((0.866025403784439)*(IKsin(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3801=(cj0*r02);
IkReal x3802=(r12*sj0);
IkReal x3803=(cj0*cj5*r00);
IkReal x3804=(cj0*r01*sj5);
IkReal x3805=(cj5*r10*sj0);
IkReal x3806=(r11*sj0*sj5);
IkReal x3807=(cj5*sj3);
IkReal x3808=(sj3*sj5);
j4eval[0]=((((-1.73205080756888)*x3806))+(((1.73205080756888)*x3805))+(((-1.73205080756888)*x3804))+x3801+x3802+(((1.73205080756888)*x3803)));
j4eval[1]=((IKabs((((r21*x3807))+((r20*x3808)))))+(((0.5)*(IKabs((((r20*x3807))+(((-1.0)*r21*x3808))+(((-1.0)*(1.73205080756888)*r22*sj3))))))));
j4eval[2]=IKsign(((((0.866025403784439)*x3805))+(((0.5)*x3802))+(((0.866025403784439)*x3803))+(((-0.866025403784439)*x3806))+(((0.5)*x3801))+(((-0.866025403784439)*x3804))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3809=r20*r20;
IkReal x3810=r21*r21;
IkReal x3811=r22*r22;
IkReal x3812=(cj5*r20*r22);
IkReal x3813=(r21*r22*sj5);
IkReal x3814=(cj5*r20*r21*sj5);
IkReal x3815=cj5*cj5;
IkReal x3816=(x3809*x3815);
IkReal x3817=(x3810*x3815);
j4eval[0]=((((-6.0)*x3814))+(((-1.0)*x3810))+(((3.46410161513775)*x3812))+(((-3.46410161513775)*x3813))+(((-4.0)*x3809))+(((-3.0)*x3817))+(((-3.0)*x3811))+(((3.0)*x3816)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-0.5)*x3810))+(((-1.5)*x3811))+(((1.5)*x3816))+(((-3.0)*x3814))+(((-1.5)*x3817))+(((1.73205080756888)*x3812))+(((-1.73205080756888)*x3813))+(((-2.0)*x3809))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3818=(cj0*r00*r20);
IkReal x3819=(cj0*r01*r21);
IkReal x3820=(cj0*r02*r22);
IkReal x3821=(r10*r20*sj0);
IkReal x3822=(r11*r21*sj0);
IkReal x3823=(r12*r22*sj0);
IkReal x3824=((1.73205080756888)*r22);
IkReal x3825=(cj0*cj5*r00);
IkReal x3826=(cj0*cj5*r02*r20);
IkReal x3827=(cj0*r01*sj5);
IkReal x3828=(cj0*r02*r21*sj5);
IkReal x3829=(cj5*r10*sj0);
IkReal x3830=(cj5*r12*r20*sj0);
IkReal x3831=(r11*sj0*sj5);
IkReal x3832=(r12*r21*sj0*sj5);
IkReal x3833=(cj0*cj5*r00*r21*sj5);
IkReal x3834=(cj0*cj5*r01*r20*sj5);
IkReal x3835=(cj5*r10*r21*sj0*sj5);
IkReal x3836=(cj5*r11*r20*sj0*sj5);
IkReal x3837=cj5*cj5;
IkReal x3838=(cj0*r00*r20*x3837);
IkReal x3839=(cj0*r01*r21*x3837);
IkReal x3840=(r10*r20*sj0*x3837);
IkReal x3841=(r11*r21*sj0*x3837);
IkReal x3842=(r21*sj3);
IkReal x3843=(r20*sj3);
IkReal x3844=((0.866025403784439)*r22);
j4eval[0]=((((-3.0)*x3833))+(((-4.0)*x3818))+(((-3.0)*x3839))+(((-3.0)*x3841))+(((-3.0)*x3836))+(((1.73205080756888)*x3830))+(((3.0)*x3840))+(((-1.0)*x3824*x3827))+(((-3.0)*x3835))+(((-1.0)*x3824*x3831))+(((-4.0)*x3821))+(((-1.0)*x3819))+(((-3.0)*x3823))+(((3.0)*x3838))+(((-1.0)*x3822))+((x3824*x3829))+(((-3.0)*x3820))+((x3824*x3825))+(((1.73205080756888)*x3826))+(((-3.0)*x3834))+(((-1.73205080756888)*x3828))+(((-1.73205080756888)*x3832)));
j4eval[1]=((((0.5)*(IKabs((((sj5*x3842))+(((-1.0)*cj5*x3843))+((sj3*x3824)))))))+(IKabs((((sj5*x3843))+((cj5*x3842))))));
j4eval[2]=IKsign(((((-1.5)*x3839))+(((-1.0)*x3831*x3844))+(((-1.5)*x3820))+(((-2.0)*x3821))+(((-0.5)*x3819))+(((-1.0)*x3827*x3844))+(((-1.5)*x3834))+(((0.866025403784439)*x3830))+(((-1.5)*x3823))+(((-1.5)*x3835))+(((1.5)*x3838))+(((-0.5)*x3822))+((x3825*x3844))+(((0.866025403784439)*x3826))+(((-1.5)*x3841))+(((-2.0)*x3818))+(((-1.5)*x3836))+(((-0.866025403784439)*x3828))+((x3829*x3844))+(((-1.5)*x3833))+(((1.5)*x3840))+(((-0.866025403784439)*x3832))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3845=(r02*sj0);
IkReal x3846=(cj0*r12);
IkReal x3847=(cj0*cj5*r10);
IkReal x3848=(cj0*r11*sj5);
IkReal x3849=(cj5*r00*sj0);
IkReal x3850=(r01*sj0*sj5);
j4eval[0]=((((-1.73205080756888)*x3850))+x3845+(((-1.0)*x3846))+(((1.73205080756888)*x3848))+(((1.73205080756888)*x3849))+(((-1.73205080756888)*x3847)));
j4eval[1]=IKsign(((((0.866025403784439)*x3848))+(((0.5)*x3845))+(((-0.866025403784439)*x3850))+(((-0.5)*x3846))+(((-0.866025403784439)*x3847))+(((0.866025403784439)*x3849))));
j4eval[2]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3851=r20*r20;
IkReal x3852=r21*r21;
IkReal x3853=r22*r22;
IkReal x3854=(cj5*r20*r22);
IkReal x3855=(r21*r22*sj5);
IkReal x3856=(cj5*r20*r21*sj5);
IkReal x3857=cj5*cj5;
IkReal x3858=(x3851*x3857);
IkReal x3859=(x3852*x3857);
j4eval[0]=((((-1.0)*x3852))+(((-6.0)*x3856))+(((3.0)*x3858))+(((-4.0)*x3851))+(((-3.46410161513775)*x3855))+(((-3.0)*x3853))+(((3.46410161513775)*x3854))+(((-3.0)*x3859)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-1.5)*x3853))+(((-0.5)*x3852))+(((1.73205080756888)*x3854))+(((-1.73205080756888)*x3855))+(((-1.5)*x3859))+(((-2.0)*x3851))+(((1.5)*x3858))+(((-3.0)*x3856))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3860=((1.73205080756888)*cj0);
IkReal x3861=((1.73205080756888)*sj0);
IkReal x3862=((((-1.0)*cj5*r10*x3860))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*sj5*x3861))+((r11*sj5*x3860))+((cj5*r00*x3861)));
j4eval[0]=x3862;
j4eval[1]=IKsign(x3862);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3863=((1.73205080756888)*cj0*cj5);
IkReal x3864=((1.73205080756888)*cj0*sj5);
IkReal x3865=((1.73205080756888)*cj5*sj0);
IkReal x3866=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x3867 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r01))*((cj0*sj5))))+(((-0.866025403784439)*cj5*r10*sj0))+(((0.866025403784439)*r11*sj0*sj5))+(((-0.866025403784439)*cj0*cj5*r00))+(((1.5)*cj0*r02))+(((1.5)*r12*sj0)))),IkReal(((((-1.0)*r00*x3864))+(((-1.0)*r11*x3865))+(((-1.0)*r01*x3863))+(((-1.0)*r10*x3866)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3867.valid){
continue;
}
CheckValue<IkReal> x3868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3866))+(((-1.0)*r10*x3863))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*x3864))+((r00*x3865)))),-1);
if(!x3868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3867.value)+(((1.5707963267949)*(x3868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3869=IKsin(j4);
IkReal x3870=((0.866025403784439)*r22);
IkReal x3871=((0.5)*r20);
IkReal x3872=(cj5*x3869);
IkReal x3873=IKcos(j4);
IkReal x3874=((1.0)*cj5*x3873);
IkReal x3875=(r20*sj5);
IkReal x3876=((0.5)*r21*sj5);
IkReal x3877=((0.866025403784439)*cj0*r02);
IkReal x3878=((0.866025403784439)*r12*sj0);
IkReal x3879=(cj0*cj5*x3869);
IkReal x3880=(cj0*sj5*x3869);
IkReal x3881=(cj5*sj0*x3869);
IkReal x3882=(sj0*sj5*x3869);
IkReal x3883=((0.5)*r00);
IkReal x3884=(cj0*cj5*x3873);
IkReal x3885=((0.5)*r01);
IkReal x3886=(cj0*sj5*x3873);
IkReal x3887=((0.5)*r10);
IkReal x3888=(cj5*sj0*x3873);
IkReal x3889=((0.5)*r11);
IkReal x3890=(sj0*sj5*x3873);
IkReal x3891=((0.866025403784439)*cj0*r12);
IkReal x3892=((0.866025403784439)*r02*sj0);
IkReal x3893=(r00*sj0*sj5);
IkReal x3894=((1.0)*cj0*cj5*x3873);
IkReal x3895=((1.0)*cj0*sj5*x3873);
evalcond[0]=(((x3869*x3870))+((x3869*x3876))+(((-1.0)*x3871*x3872))+(((-1.0)*r21*x3874))+(((-1.0)*x3873*x3875)));
evalcond[1]=((0.866025403784439)+((r21*x3872))+((x3869*x3875))+((x3873*x3876))+((x3870*x3873))+(((-1.0)*cj5*x3871*x3873)));
evalcond[2]=((((-1.0)*x3883*x3884))+((x3885*x3886))+((r01*x3879))+((x3889*x3890))+((r00*x3880))+((r11*x3881))+(((-1.0)*x3887*x3888))+((x3873*x3877))+((r10*x3882))+((x3873*x3878)));
evalcond[3]=(((r01*x3888))+((x3873*x3893))+((x3880*x3889))+(((-1.0)*x3879*x3887))+(((-1.0)*r10*x3895))+(((-1.0)*x3882*x3885))+(((-1.0)*r11*x3894))+((x3881*x3883))+((x3869*x3891))+(((-1.0)*x3869*x3892)));
evalcond[4]=((0.5)+((x3883*x3888))+(((-1.0)*r01*x3881))+((x3873*x3891))+(((-1.0)*x3869*x3893))+((x3886*x3889))+(((-1.0)*x3884*x3887))+((r10*x3880))+(((-1.0)*x3885*x3890))+((r11*x3879))+(((-1.0)*x3873*x3892)));
evalcond[5]=((1.0)+(((-1.0)*r10*sj0*sj5*x3873))+(((-1.0)*x3881*x3887))+((x3869*x3877))+(((-1.0)*r11*sj0*x3874))+((x3869*x3878))+(((-1.0)*x3879*x3883))+((x3882*x3889))+((x3880*x3885))+(((-1.0)*r01*x3894))+(((-1.0)*r00*x3895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3896=((1.73205080756888)*r21);
IkReal x3897=(cj5*r20);
IkReal x3898=(r21*sj5);
IkReal x3899=r20*r20;
IkReal x3900=r21*r21;
IkReal x3901=((1.5)*(cj5*cj5));
CheckValue<IkReal> x3902 = IKatan2WithCheck(IkReal(((((1.73205080756888)*r20*sj5))+((cj5*x3896)))),IkReal(((((-0.866025403784439)*x3897))+(((0.866025403784439)*x3898))+(((1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3902.valid){
continue;
}
CheckValue<IkReal> x3903=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3900*x3901))+((x3899*x3901))+(((-2.0)*x3899))+(((-3.0)*cj5*r20*x3898))+(((1.73205080756888)*r22*x3897))+(((-0.5)*x3900))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*r22*sj5*x3896)))),-1);
if(!x3903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3902.value)+(((1.5707963267949)*(x3903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3904=IKsin(j4);
IkReal x3905=((0.866025403784439)*r22);
IkReal x3906=((0.5)*r20);
IkReal x3907=(cj5*x3904);
IkReal x3908=IKcos(j4);
IkReal x3909=((1.0)*cj5*x3908);
IkReal x3910=(r20*sj5);
IkReal x3911=((0.5)*r21*sj5);
IkReal x3912=((0.866025403784439)*cj0*r02);
IkReal x3913=((0.866025403784439)*r12*sj0);
IkReal x3914=(cj0*cj5*x3904);
IkReal x3915=(cj0*sj5*x3904);
IkReal x3916=(cj5*sj0*x3904);
IkReal x3917=(sj0*sj5*x3904);
IkReal x3918=((0.5)*r00);
IkReal x3919=(cj0*cj5*x3908);
IkReal x3920=((0.5)*r01);
IkReal x3921=(cj0*sj5*x3908);
IkReal x3922=((0.5)*r10);
IkReal x3923=(cj5*sj0*x3908);
IkReal x3924=((0.5)*r11);
IkReal x3925=(sj0*sj5*x3908);
IkReal x3926=((0.866025403784439)*cj0*r12);
IkReal x3927=((0.866025403784439)*r02*sj0);
IkReal x3928=(r00*sj0*sj5);
IkReal x3929=((1.0)*cj0*cj5*x3908);
IkReal x3930=((1.0)*cj0*sj5*x3908);
evalcond[0]=((((-1.0)*x3906*x3907))+(((-1.0)*r21*x3909))+((x3904*x3905))+((x3904*x3911))+(((-1.0)*x3908*x3910)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x3906*x3908))+((x3904*x3910))+((x3908*x3911))+((x3905*x3908))+((r21*x3907)));
evalcond[2]=(((r00*x3915))+((r10*x3917))+((r11*x3916))+((x3908*x3912))+((x3924*x3925))+((r01*x3914))+((x3920*x3921))+(((-1.0)*x3918*x3919))+((x3908*x3913))+(((-1.0)*x3922*x3923)));
evalcond[3]=((((-1.0)*r10*x3930))+((x3908*x3928))+((x3904*x3926))+((x3915*x3924))+(((-1.0)*x3917*x3920))+((r01*x3923))+((x3916*x3918))+(((-1.0)*x3914*x3922))+(((-1.0)*r11*x3929))+(((-1.0)*x3904*x3927)));
evalcond[4]=((0.5)+((r11*x3914))+(((-1.0)*x3908*x3927))+((x3918*x3923))+((x3908*x3926))+((x3921*x3924))+(((-1.0)*r01*x3916))+((r10*x3915))+(((-1.0)*x3920*x3925))+(((-1.0)*x3904*x3928))+(((-1.0)*x3919*x3922)));
evalcond[5]=((1.0)+(((-1.0)*x3914*x3918))+((x3915*x3920))+(((-1.0)*r01*x3929))+((x3917*x3924))+(((-1.0)*r00*x3930))+(((-1.0)*r11*sj0*x3909))+((x3904*x3913))+(((-1.0)*r10*sj0*sj5*x3908))+(((-1.0)*x3916*x3922))+((x3904*x3912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3931=((0.866025403784439)*cj0);
IkReal x3932=((0.866025403784439)*sj0);
CheckValue<IkReal> x3933 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3933.valid){
continue;
}
CheckValue<IkReal> x3934=IKPowWithIntegerCheck(IKsign((((r11*sj5*x3931))+(((-1.0)*(0.5)*cj0*r12))+((cj5*r00*x3932))+(((-1.0)*r01*sj5*x3932))+(((-1.0)*cj5*r10*x3931))+(((0.5)*r02*sj0)))),-1);
if(!x3934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3933.value)+(((1.5707963267949)*(x3934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3935=IKsin(j4);
IkReal x3936=((0.866025403784439)*r22);
IkReal x3937=((0.5)*r20);
IkReal x3938=(cj5*x3935);
IkReal x3939=IKcos(j4);
IkReal x3940=((1.0)*cj5*x3939);
IkReal x3941=(r20*sj5);
IkReal x3942=((0.5)*r21*sj5);
IkReal x3943=((0.866025403784439)*cj0*r02);
IkReal x3944=((0.866025403784439)*r12*sj0);
IkReal x3945=(cj0*cj5*x3935);
IkReal x3946=(cj0*sj5*x3935);
IkReal x3947=(cj5*sj0*x3935);
IkReal x3948=(sj0*sj5*x3935);
IkReal x3949=((0.5)*r00);
IkReal x3950=(cj0*cj5*x3939);
IkReal x3951=((0.5)*r01);
IkReal x3952=(cj0*sj5*x3939);
IkReal x3953=((0.5)*r10);
IkReal x3954=(cj5*sj0*x3939);
IkReal x3955=((0.5)*r11);
IkReal x3956=(sj0*sj5*x3939);
IkReal x3957=((0.866025403784439)*cj0*r12);
IkReal x3958=((0.866025403784439)*r02*sj0);
IkReal x3959=(r00*sj0*sj5);
IkReal x3960=((1.0)*cj0*cj5*x3939);
IkReal x3961=((1.0)*cj0*sj5*x3939);
evalcond[0]=(((x3935*x3936))+(((-1.0)*x3937*x3938))+(((-1.0)*x3939*x3941))+((x3935*x3942))+(((-1.0)*r21*x3940)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x3937*x3939))+((x3939*x3942))+((x3935*x3941))+((r21*x3938))+((x3936*x3939)));
evalcond[2]=(((r11*x3947))+(((-1.0)*x3953*x3954))+((r10*x3948))+((x3939*x3943))+((x3955*x3956))+((x3951*x3952))+(((-1.0)*x3949*x3950))+((r00*x3946))+((x3939*x3944))+((r01*x3945)));
evalcond[3]=((((-1.0)*r11*x3960))+((x3947*x3949))+((x3939*x3959))+((x3946*x3955))+(((-1.0)*x3945*x3953))+(((-1.0)*x3948*x3951))+((r01*x3954))+((x3935*x3957))+(((-1.0)*r10*x3961))+(((-1.0)*x3935*x3958)));
evalcond[4]=((0.5)+(((-1.0)*x3939*x3958))+(((-1.0)*x3951*x3956))+((x3952*x3955))+(((-1.0)*x3935*x3959))+((r10*x3946))+(((-1.0)*x3950*x3953))+((x3949*x3954))+(((-1.0)*r01*x3947))+((r11*x3945))+((x3939*x3957)));
evalcond[5]=((1.0)+(((-1.0)*x3947*x3953))+(((-1.0)*r10*sj0*sj5*x3939))+(((-1.0)*r00*x3961))+((x3946*x3951))+(((-1.0)*x3945*x3949))+(((-1.0)*r11*sj0*x3940))+((x3948*x3955))+((x3935*x3943))+((x3935*x3944))+(((-1.0)*r01*x3960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3962=(r02*sj0);
IkReal x3963=(cj0*r12);
IkReal x3964=(cj0*cj5*r10);
IkReal x3965=(cj0*r11*sj5);
IkReal x3966=(cj5*r00*sj0);
IkReal x3967=(r01*sj0*sj5);
j4eval[0]=((((-1.73205080756888)*x3964))+(((-1.73205080756888)*x3967))+(((-1.0)*x3963))+(((1.73205080756888)*x3966))+(((1.73205080756888)*x3965))+x3962);
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.5)*x3962))+(((-0.5)*x3963))+(((0.866025403784439)*x3965))+(((-0.866025403784439)*x3964))+(((-0.866025403784439)*x3967))+(((0.866025403784439)*x3966))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3968=r20*r20;
IkReal x3969=r21*r21;
IkReal x3970=r22*r22;
IkReal x3971=(cj5*r20*r22);
IkReal x3972=(r21*r22*sj5);
IkReal x3973=(cj5*r20*r21*sj5);
IkReal x3974=cj5*cj5;
IkReal x3975=(x3968*x3974);
IkReal x3976=(x3969*x3974);
j4eval[0]=((((-3.0)*x3970))+(((-3.0)*x3976))+(((3.0)*x3975))+(((-6.0)*x3973))+(((-4.0)*x3968))+(((-1.0)*x3969))+(((3.46410161513775)*x3971))+(((-3.46410161513775)*x3972)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((1.73205080756888)*x3971))+(((-0.5)*x3969))+(((-1.5)*x3970))+(((-3.0)*x3973))+(((-2.0)*x3968))+(((-1.73205080756888)*x3972))+(((1.5)*x3975))+(((-1.5)*x3976))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3977=((1.73205080756888)*cj0);
IkReal x3978=((1.73205080756888)*sj0);
IkReal x3979=((((-1.0)*r01*sj5*x3978))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*cj5*r10*x3977))+((r11*sj5*x3977))+((cj5*r00*x3978)));
j4eval[0]=x3979;
j4eval[1]=IKsign(x3979);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3980=((1.73205080756888)*cj0*cj5);
IkReal x3981=((1.73205080756888)*cj0*sj5);
IkReal x3982=((1.73205080756888)*cj5*sj0);
IkReal x3983=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x3984 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r01))*((cj0*sj5))))+(((-0.866025403784439)*cj5*r10*sj0))+(((0.866025403784439)*r11*sj0*sj5))+(((-0.866025403784439)*cj0*cj5*r00))+(((1.5)*cj0*r02))+(((1.5)*r12*sj0)))),IkReal(((((-1.0)*r00*x3981))+(((-1.0)*r10*x3983))+(((-1.0)*r01*x3980))+(((-1.0)*r11*x3982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3984.valid){
continue;
}
CheckValue<IkReal> x3985=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3980))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r00*x3982))+(((-1.0)*r01*x3983))+((r11*x3981)))),-1);
if(!x3985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3984.value)+(((1.5707963267949)*(x3985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3986=IKsin(j4);
IkReal x3987=((0.866025403784439)*r22);
IkReal x3988=((0.5)*r20);
IkReal x3989=(cj5*x3986);
IkReal x3990=IKcos(j4);
IkReal x3991=((1.0)*cj5*x3990);
IkReal x3992=(r20*sj5);
IkReal x3993=((0.5)*r21*sj5);
IkReal x3994=((0.866025403784439)*cj0*r02);
IkReal x3995=((0.866025403784439)*r12*sj0);
IkReal x3996=(cj0*cj5*x3986);
IkReal x3997=(cj0*sj5*x3986);
IkReal x3998=(cj5*sj0*x3986);
IkReal x3999=(sj0*sj5*x3986);
IkReal x4000=((0.5)*r00);
IkReal x4001=(cj0*cj5*x3990);
IkReal x4002=((0.5)*r01);
IkReal x4003=(cj0*sj5*x3990);
IkReal x4004=((0.5)*r10);
IkReal x4005=(cj5*sj0*x3990);
IkReal x4006=((0.5)*r11);
IkReal x4007=(sj0*sj5*x3990);
IkReal x4008=((0.866025403784439)*cj0*r12);
IkReal x4009=((0.866025403784439)*r02*sj0);
IkReal x4010=(r00*sj0*sj5);
IkReal x4011=((1.0)*cj0*cj5*x3990);
IkReal x4012=((1.0)*cj0*sj5*x3990);
evalcond[0]=((((-1.0)*r21*x3991))+(((-1.0)*x3988*x3989))+(((-1.0)*x3990*x3992))+((x3986*x3993))+((x3986*x3987)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x3988*x3990))+((x3990*x3993))+((r21*x3989))+((x3987*x3990))+((x3986*x3992)));
evalcond[2]=((((-1.0)*x4004*x4005))+((r11*x3998))+((x4006*x4007))+((r01*x3996))+(((-1.0)*x4000*x4001))+((r00*x3997))+((r10*x3999))+((x3990*x3995))+((x3990*x3994))+((x4002*x4003)));
evalcond[3]=((((-1.0)*x3999*x4002))+(((-1.0)*x3996*x4004))+(((-1.0)*x3986*x4009))+(((-1.0)*r10*x4012))+((x3998*x4000))+((r01*x4005))+((x3997*x4006))+(((-1.0)*r11*x4011))+((x3986*x4008))+((x3990*x4010)));
evalcond[4]=((-0.5)+(((-1.0)*x4001*x4004))+((r11*x3996))+((x4000*x4005))+(((-1.0)*r01*x3998))+((r10*x3997))+(((-1.0)*x3986*x4010))+(((-1.0)*x4002*x4007))+((x3990*x4008))+(((-1.0)*x3990*x4009))+((x4003*x4006)));
evalcond[5]=((-1.0)+(((-1.0)*r10*sj0*sj5*x3990))+(((-1.0)*r01*x4011))+(((-1.0)*x3996*x4000))+(((-1.0)*r00*x4012))+((x3997*x4002))+(((-1.0)*x3998*x4004))+((x3986*x3995))+((x3986*x3994))+(((-1.0)*r11*sj0*x3991))+((x3999*x4006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4013=((1.73205080756888)*r21);
IkReal x4014=(cj5*r20);
IkReal x4015=(r21*sj5);
IkReal x4016=r20*r20;
IkReal x4017=r21*r21;
IkReal x4018=((1.5)*(cj5*cj5));
CheckValue<IkReal> x4019 = IKatan2WithCheck(IkReal(((((1.73205080756888)*r20*sj5))+((cj5*x4013)))),IkReal(((((-0.866025403784439)*x4014))+(((0.866025403784439)*x4015))+(((1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4019.valid){
continue;
}
CheckValue<IkReal> x4020=IKPowWithIntegerCheck(IKsign(((((1.73205080756888)*r22*x4014))+(((-3.0)*cj5*r20*x4015))+(((-2.0)*x4016))+(((-0.5)*x4017))+((x4016*x4018))+(((-1.0)*r22*sj5*x4013))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*x4017*x4018)))),-1);
if(!x4020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4019.value)+(((1.5707963267949)*(x4020.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4021=IKsin(j4);
IkReal x4022=((0.866025403784439)*r22);
IkReal x4023=((0.5)*r20);
IkReal x4024=(cj5*x4021);
IkReal x4025=IKcos(j4);
IkReal x4026=((1.0)*cj5*x4025);
IkReal x4027=(r20*sj5);
IkReal x4028=((0.5)*r21*sj5);
IkReal x4029=((0.866025403784439)*cj0*r02);
IkReal x4030=((0.866025403784439)*r12*sj0);
IkReal x4031=(cj0*cj5*x4021);
IkReal x4032=(cj0*sj5*x4021);
IkReal x4033=(cj5*sj0*x4021);
IkReal x4034=(sj0*sj5*x4021);
IkReal x4035=((0.5)*r00);
IkReal x4036=(cj0*cj5*x4025);
IkReal x4037=((0.5)*r01);
IkReal x4038=(cj0*sj5*x4025);
IkReal x4039=((0.5)*r10);
IkReal x4040=(cj5*sj0*x4025);
IkReal x4041=((0.5)*r11);
IkReal x4042=(sj0*sj5*x4025);
IkReal x4043=((0.866025403784439)*cj0*r12);
IkReal x4044=((0.866025403784439)*r02*sj0);
IkReal x4045=(r00*sj0*sj5);
IkReal x4046=((1.0)*cj0*cj5*x4025);
IkReal x4047=((1.0)*cj0*sj5*x4025);
evalcond[0]=(((x4021*x4022))+((x4021*x4028))+(((-1.0)*x4025*x4027))+(((-1.0)*r21*x4026))+(((-1.0)*x4023*x4024)));
evalcond[1]=((0.866025403784439)+((x4021*x4027))+((x4025*x4028))+((r21*x4024))+((x4022*x4025))+(((-1.0)*cj5*x4023*x4025)));
evalcond[2]=(((x4025*x4029))+((r01*x4031))+((r11*x4033))+((r00*x4032))+((x4025*x4030))+((x4037*x4038))+((x4041*x4042))+((r10*x4034))+(((-1.0)*x4035*x4036))+(((-1.0)*x4039*x4040)));
evalcond[3]=(((x4021*x4043))+(((-1.0)*r11*x4046))+(((-1.0)*x4034*x4037))+(((-1.0)*x4021*x4044))+(((-1.0)*x4031*x4039))+((r01*x4040))+((x4033*x4035))+(((-1.0)*r10*x4047))+((x4032*x4041))+((x4025*x4045)));
evalcond[4]=((-0.5)+(((-1.0)*r01*x4033))+((x4025*x4043))+(((-1.0)*x4025*x4044))+(((-1.0)*x4037*x4042))+((r10*x4032))+((r11*x4031))+((x4035*x4040))+(((-1.0)*x4021*x4045))+((x4038*x4041))+(((-1.0)*x4036*x4039)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x4047))+(((-1.0)*x4033*x4039))+(((-1.0)*r01*x4046))+((x4034*x4041))+((x4032*x4037))+(((-1.0)*r11*sj0*x4026))+((x4021*x4029))+((x4021*x4030))+(((-1.0)*x4031*x4035))+(((-1.0)*r10*sj0*sj5*x4025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4048=((0.866025403784439)*cj0);
IkReal x4049=((0.866025403784439)*sj0);
CheckValue<IkReal> x4050=IKPowWithIntegerCheck(IKsign((((cj5*r00*x4049))+(((-1.0)*(0.5)*cj0*r12))+(((-1.0)*cj5*r10*x4048))+((r11*sj5*x4048))+(((0.5)*r02*sj0))+(((-1.0)*r01*sj5*x4049)))),-1);
if(!x4050.valid){
continue;
}
CheckValue<IkReal> x4051 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4050.value)))+(x4051.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4052=IKsin(j4);
IkReal x4053=((0.866025403784439)*r22);
IkReal x4054=((0.5)*r20);
IkReal x4055=(cj5*x4052);
IkReal x4056=IKcos(j4);
IkReal x4057=((1.0)*cj5*x4056);
IkReal x4058=(r20*sj5);
IkReal x4059=((0.5)*r21*sj5);
IkReal x4060=((0.866025403784439)*cj0*r02);
IkReal x4061=((0.866025403784439)*r12*sj0);
IkReal x4062=(cj0*cj5*x4052);
IkReal x4063=(cj0*sj5*x4052);
IkReal x4064=(cj5*sj0*x4052);
IkReal x4065=(sj0*sj5*x4052);
IkReal x4066=((0.5)*r00);
IkReal x4067=(cj0*cj5*x4056);
IkReal x4068=((0.5)*r01);
IkReal x4069=(cj0*sj5*x4056);
IkReal x4070=((0.5)*r10);
IkReal x4071=(cj5*sj0*x4056);
IkReal x4072=((0.5)*r11);
IkReal x4073=(sj0*sj5*x4056);
IkReal x4074=((0.866025403784439)*cj0*r12);
IkReal x4075=((0.866025403784439)*r02*sj0);
IkReal x4076=(r00*sj0*sj5);
IkReal x4077=((1.0)*cj0*cj5*x4056);
IkReal x4078=((1.0)*cj0*sj5*x4056);
evalcond[0]=((((-1.0)*r21*x4057))+((x4052*x4053))+(((-1.0)*x4054*x4055))+((x4052*x4059))+(((-1.0)*x4056*x4058)));
evalcond[1]=((0.866025403784439)+((x4056*x4059))+((x4053*x4056))+((x4052*x4058))+((r21*x4055))+(((-1.0)*cj5*x4054*x4056)));
evalcond[2]=(((x4072*x4073))+(((-1.0)*x4070*x4071))+((r01*x4062))+((x4056*x4060))+((x4056*x4061))+((r10*x4065))+((x4068*x4069))+(((-1.0)*x4066*x4067))+((r00*x4063))+((r11*x4064)));
evalcond[3]=(((x4056*x4076))+((x4052*x4074))+(((-1.0)*x4065*x4068))+(((-1.0)*r11*x4077))+((x4064*x4066))+((x4063*x4072))+(((-1.0)*x4062*x4070))+(((-1.0)*r10*x4078))+((r01*x4071))+(((-1.0)*x4052*x4075)));
evalcond[4]=((-0.5)+(((-1.0)*x4056*x4075))+((x4066*x4071))+((x4069*x4072))+((r10*x4063))+(((-1.0)*x4068*x4073))+((r11*x4062))+((x4056*x4074))+(((-1.0)*x4052*x4076))+(((-1.0)*r01*x4064))+(((-1.0)*x4067*x4070)));
evalcond[5]=((-1.0)+(((-1.0)*r10*sj0*sj5*x4056))+(((-1.0)*r01*x4077))+(((-1.0)*r11*sj0*x4057))+((x4052*x4060))+(((-1.0)*r00*x4078))+((x4063*x4068))+(((-1.0)*x4064*x4070))+((x4065*x4072))+(((-1.0)*x4062*x4066))+((x4052*x4061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4079=(cj5*sj3);
IkReal x4080=(sj3*sj5);
IkReal x4081=((0.5)*r21);
IkReal x4082=((2.0)*r20);
IkReal x4083=(cj0*r00);
IkReal x4084=(cj0*r01);
IkReal x4085=((1.5)*r22);
IkReal x4086=(r10*sj0);
IkReal x4087=(r11*sj0);
IkReal x4088=((0.866025403784439)*cj5*r22);
IkReal x4089=(cj5*r20);
IkReal x4090=((0.866025403784439)*cj0*r02);
IkReal x4091=((0.866025403784439)*r22*sj5);
IkReal x4092=(r21*sj5);
IkReal x4093=((0.866025403784439)*r12*sj0);
IkReal x4094=((1.5)*cj5*r21*sj5);
IkReal x4095=((1.5)*cj5*r20*sj5);
IkReal x4096=cj5*cj5;
IkReal x4097=((1.5)*r20*x4096);
IkReal x4098=((1.5)*r21*x4096);
CheckValue<IkReal> x4099 = IKatan2WithCheck(IkReal((((r21*x4079))+((r20*x4080)))),IkReal((((sj3*(((0.866025403784439)*r22))))+((x4080*x4081))+(((-0.5)*r20*x4079)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4099.valid){
continue;
}
CheckValue<IkReal> x4100=IKPowWithIntegerCheck(IKsign((((x4086*x4088))+((x4083*x4097))+(((-1.0)*x4087*x4091))+((x4083*x4088))+(((-1.0)*x4082*x4083))+((x4089*x4090))+(((-1.0)*x4090*x4092))+((x4089*x4093))+((x4086*x4097))+(((-1.0)*x4092*x4093))+(((-1.0)*x4084*x4095))+(((-1.0)*x4082*x4086))+(((-1.0)*x4087*x4095))+(((-1.0)*x4083*x4094))+(((-1.0)*cj0*r02*x4085))+(((-1.0)*x4084*x4098))+(((-1.0)*x4086*x4094))+(((-1.0)*x4081*x4087))+(((-1.0)*x4084*x4091))+(((-1.0)*x4087*x4098))+(((-1.0)*x4081*x4084))+(((-1.0)*r12*sj0*x4085)))),-1);
if(!x4100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4099.value)+(((1.5707963267949)*(x4100.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4101=IKsin(j4);
IkReal x4102=((0.866025403784439)*r22);
IkReal x4103=((0.5)*r20);
IkReal x4104=(cj5*x4101);
IkReal x4105=IKcos(j4);
IkReal x4106=((1.0)*cj5*x4105);
IkReal x4107=(r20*sj5);
IkReal x4108=((0.5)*r21*sj5);
IkReal x4109=((0.866025403784439)*cj0*r02);
IkReal x4110=((0.866025403784439)*r12*sj0);
IkReal x4111=(cj0*cj5*x4101);
IkReal x4112=(cj0*sj5*x4101);
IkReal x4113=(cj5*sj0*x4101);
IkReal x4114=(sj0*sj5*x4101);
IkReal x4115=((0.5)*r00);
IkReal x4116=(cj0*cj5*x4105);
IkReal x4117=((0.5)*r01);
IkReal x4118=(cj0*sj5*x4105);
IkReal x4119=((0.5)*r10);
IkReal x4120=(cj5*sj0*x4105);
IkReal x4121=((0.5)*r11);
IkReal x4122=(sj0*sj5*x4105);
IkReal x4123=((0.866025403784439)*cj0*r12);
IkReal x4124=((0.866025403784439)*r02*sj0);
IkReal x4125=(r00*sj0*sj5);
IkReal x4126=((1.0)*cj0*cj5*x4105);
IkReal x4127=((1.0)*cj0*sj5*x4105);
evalcond[0]=((((-1.0)*x4103*x4104))+(((-1.0)*x4105*x4107))+((x4101*x4102))+(((-1.0)*r21*x4106))+((x4101*x4108)));
evalcond[1]=((0.866025403784439)+((x4101*x4107))+((x4102*x4105))+(((-1.0)*cj5*x4103*x4105))+((x4105*x4108))+((r21*x4104)));
evalcond[2]=(((x4105*x4110))+(((0.5)*sj3))+((x4117*x4118))+((r11*x4113))+((x4121*x4122))+((x4105*x4109))+((r00*x4112))+(((-1.0)*x4119*x4120))+((r01*x4111))+(((-1.0)*x4115*x4116))+((r10*x4114)));
evalcond[3]=(((x4115*x4120))+(((-1.0)*x4105*x4124))+((x4105*x4123))+((r10*x4112))+(((-1.0)*r01*x4113))+((r11*x4111))+(((-1.0)*x4117*x4122))+(((-1.0)*x4116*x4119))+(((-1.0)*x4101*x4125))+((x4118*x4121))+(((0.5)*cj3)));
evalcond[4]=((((-1.0)*r10*x4127))+((x4101*x4123))+(((-1.0)*r11*x4126))+((x4113*x4115))+(((-1.0)*x4111*x4119))+((r01*x4120))+((x4112*x4121))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x4101*x4124))+((x4105*x4125))+(((-1.0)*x4114*x4117)));
evalcond[5]=((((-1.0)*r11*sj0*x4106))+((x4101*x4110))+(((-1.0)*x4111*x4115))+(((-1.0)*r00*x4127))+((x4112*x4117))+cj3+(((-1.0)*r10*sj0*sj5*x4105))+(((-1.0)*x4113*x4119))+((x4101*x4109))+((x4114*x4121))+(((-1.0)*r01*x4126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4128=((1.73205080756888)*r21);
IkReal x4129=(cj5*r20);
IkReal x4130=(r21*sj5);
IkReal x4131=r20*r20;
IkReal x4132=r21*r21;
IkReal x4133=((1.5)*(cj5*cj5));
CheckValue<IkReal> x4134 = IKatan2WithCheck(IkReal(((((1.73205080756888)*r20*sj5))+((cj5*x4128)))),IkReal(((((0.866025403784439)*x4130))+(((-0.866025403784439)*x4129))+(((1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4134.valid){
continue;
}
CheckValue<IkReal> x4135=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4132*x4133))+(((-3.0)*cj5*r20*x4130))+(((1.73205080756888)*r22*x4129))+(((-1.0)*r22*sj5*x4128))+(((-1.0)*(1.5)*(r22*r22)))+((x4131*x4133))+(((-0.5)*x4132))+(((-2.0)*x4131)))),-1);
if(!x4135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4134.value)+(((1.5707963267949)*(x4135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4136=IKsin(j4);
IkReal x4137=((0.866025403784439)*r22);
IkReal x4138=((0.5)*r20);
IkReal x4139=(cj5*x4136);
IkReal x4140=IKcos(j4);
IkReal x4141=((1.0)*cj5*x4140);
IkReal x4142=(r20*sj5);
IkReal x4143=((0.5)*r21*sj5);
IkReal x4144=((0.866025403784439)*cj0*r02);
IkReal x4145=((0.866025403784439)*r12*sj0);
IkReal x4146=(cj0*cj5*x4136);
IkReal x4147=(cj0*sj5*x4136);
IkReal x4148=(cj5*sj0*x4136);
IkReal x4149=(sj0*sj5*x4136);
IkReal x4150=((0.5)*r00);
IkReal x4151=(cj0*cj5*x4140);
IkReal x4152=((0.5)*r01);
IkReal x4153=(cj0*sj5*x4140);
IkReal x4154=((0.5)*r10);
IkReal x4155=(cj5*sj0*x4140);
IkReal x4156=((0.5)*r11);
IkReal x4157=(sj0*sj5*x4140);
IkReal x4158=((0.866025403784439)*cj0*r12);
IkReal x4159=((0.866025403784439)*r02*sj0);
IkReal x4160=(r00*sj0*sj5);
IkReal x4161=((1.0)*cj0*cj5*x4140);
IkReal x4162=((1.0)*cj0*sj5*x4140);
evalcond[0]=(((x4136*x4137))+(((-1.0)*x4140*x4142))+((x4136*x4143))+(((-1.0)*r21*x4141))+(((-1.0)*x4138*x4139)));
evalcond[1]=((0.866025403784439)+((x4136*x4142))+((x4140*x4143))+(((-1.0)*cj5*x4138*x4140))+((x4137*x4140))+((r21*x4139)));
evalcond[2]=(((x4156*x4157))+(((0.5)*sj3))+(((-1.0)*x4154*x4155))+((r11*x4148))+((x4152*x4153))+((r10*x4149))+((r00*x4147))+((x4140*x4144))+((x4140*x4145))+((r01*x4146))+(((-1.0)*x4150*x4151)));
evalcond[3]=((((-1.0)*x4151*x4154))+(((-1.0)*x4136*x4160))+(((-1.0)*x4140*x4159))+((x4150*x4155))+((r10*x4147))+((x4140*x4158))+(((-1.0)*x4152*x4157))+(((-1.0)*r01*x4148))+((x4153*x4156))+(((0.5)*cj3))+((r11*x4146)));
evalcond[4]=((((-1.0)*x4136*x4159))+((x4148*x4150))+(((-1.0)*r11*x4161))+(((-1.0)*r10*x4162))+((x4147*x4156))+((x4140*x4160))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x4149*x4152))+(((-1.0)*x4146*x4154))+((r01*x4155))+((x4136*x4158)));
evalcond[5]=((((-1.0)*x4148*x4154))+(((-1.0)*r10*sj0*sj5*x4140))+cj3+(((-1.0)*x4146*x4150))+((x4136*x4145))+(((-1.0)*r11*sj0*x4141))+(((-1.0)*r00*x4162))+((x4136*x4144))+(((-1.0)*r01*x4161))+((x4147*x4152))+((x4149*x4156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4163=(cj5*sj3);
IkReal x4164=(sj3*sj5);
IkReal x4165=((0.866025403784439)*cj0);
IkReal x4166=((0.866025403784439)*sj0);
CheckValue<IkReal> x4167 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4163))+(((-1.0)*r20*x4164)))),IkReal(((((-1.0)*(0.866025403784439)*r22*sj3))+(((0.5)*r20*x4163))+(((-0.5)*r21*x4164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4167.valid){
continue;
}
CheckValue<IkReal> x4168=IKPowWithIntegerCheck(IKsign((((cj5*r10*x4166))+(((-1.0)*r11*sj5*x4166))+(((-1.0)*r01*sj5*x4165))+(((0.5)*r12*sj0))+((cj5*r00*x4165))+(((0.5)*cj0*r02)))),-1);
if(!x4168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4167.value)+(((1.5707963267949)*(x4168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4169=IKsin(j4);
IkReal x4170=((0.866025403784439)*r22);
IkReal x4171=((0.5)*r20);
IkReal x4172=(cj5*x4169);
IkReal x4173=IKcos(j4);
IkReal x4174=((1.0)*cj5*x4173);
IkReal x4175=(r20*sj5);
IkReal x4176=((0.5)*r21*sj5);
IkReal x4177=((0.866025403784439)*cj0*r02);
IkReal x4178=((0.866025403784439)*r12*sj0);
IkReal x4179=(cj0*cj5*x4169);
IkReal x4180=(cj0*sj5*x4169);
IkReal x4181=(cj5*sj0*x4169);
IkReal x4182=(sj0*sj5*x4169);
IkReal x4183=((0.5)*r00);
IkReal x4184=(cj0*cj5*x4173);
IkReal x4185=((0.5)*r01);
IkReal x4186=(cj0*sj5*x4173);
IkReal x4187=((0.5)*r10);
IkReal x4188=(cj5*sj0*x4173);
IkReal x4189=((0.5)*r11);
IkReal x4190=(sj0*sj5*x4173);
IkReal x4191=((0.866025403784439)*cj0*r12);
IkReal x4192=((0.866025403784439)*r02*sj0);
IkReal x4193=(r00*sj0*sj5);
IkReal x4194=((1.0)*cj0*cj5*x4173);
IkReal x4195=((1.0)*cj0*sj5*x4173);
evalcond[0]=((((-1.0)*x4173*x4175))+((x4169*x4170))+(((-1.0)*r21*x4174))+(((-1.0)*x4171*x4172))+((x4169*x4176)));
evalcond[1]=((0.866025403784439)+((x4173*x4176))+(((-1.0)*cj5*x4171*x4173))+((x4170*x4173))+((r21*x4172))+((x4169*x4175)));
evalcond[2]=((((0.5)*sj3))+(((-1.0)*x4183*x4184))+((x4173*x4178))+((r00*x4180))+((x4189*x4190))+((r11*x4181))+((r10*x4182))+((x4185*x4186))+(((-1.0)*x4187*x4188))+((r01*x4179))+((x4173*x4177)));
evalcond[3]=((((-1.0)*r01*x4181))+(((-1.0)*x4169*x4193))+((x4183*x4188))+((r11*x4179))+(((-1.0)*x4173*x4192))+((r10*x4180))+((x4186*x4189))+(((-1.0)*x4185*x4190))+(((-1.0)*x4184*x4187))+(((0.5)*cj3))+((x4173*x4191)));
evalcond[4]=(((x4173*x4193))+((x4169*x4191))+(((-1.0)*x4169*x4192))+((x4181*x4183))+(((-1.0)*x4179*x4187))+((x4180*x4189))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x4182*x4185))+(((-1.0)*r10*x4195))+(((-1.0)*r11*x4194))+((r01*x4188)));
evalcond[5]=((((-1.0)*x4179*x4183))+((x4180*x4185))+(((-1.0)*r10*sj0*sj5*x4173))+((x4169*x4177))+((x4182*x4189))+(((-1.0)*r00*x4195))+(((-1.0)*r01*x4194))+cj3+(((-1.0)*x4181*x4187))+((x4169*x4178))+(((-1.0)*r11*sj0*x4174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4196=((0.577350269189626)*cj0);
IkReal x4197=((0.577350269189626)*sj0);
IkReal x4198=(r01*sj5);
IkReal x4199=(r11*sj5);
IkReal x4200=((1.0)*r00);
IkReal x4201=(cj0*cj5);
IkReal x4202=(cj5*sj0);
if( IKabs(((((-1.0)*r12*x4197))+(((-1.0)*r10*x4202))+((cj0*x4198))+(((-1.0)*x4200*x4201))+((sj0*x4199))+(((-1.0)*r02*x4196)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x4196))+((sj0*x4198))+((r10*x4201))+(((-1.0)*cj0*x4199))+(((-1.0)*r02*x4197))+(((-1.0)*x4200*x4202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x4197))+(((-1.0)*r10*x4202))+((cj0*x4198))+(((-1.0)*x4200*x4201))+((sj0*x4199))+(((-1.0)*r02*x4196))))+IKsqr((((r12*x4196))+((sj0*x4198))+((r10*x4201))+(((-1.0)*cj0*x4199))+(((-1.0)*r02*x4197))+(((-1.0)*x4200*x4202))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r12*x4197))+(((-1.0)*r10*x4202))+((cj0*x4198))+(((-1.0)*x4200*x4201))+((sj0*x4199))+(((-1.0)*r02*x4196))), (((r12*x4196))+((sj0*x4198))+((r10*x4201))+(((-1.0)*cj0*x4199))+(((-1.0)*r02*x4197))+(((-1.0)*x4200*x4202))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x4203=((0.5)*cj0);
IkReal x4204=((0.5)*sj0);
IkReal x4205=((0.866025403784439)*cj0*cj5);
IkReal x4206=((0.866025403784439)*cj0*sj5);
IkReal x4207=((0.866025403784439)*cj5*sj0);
IkReal x4208=((0.866025403784439)*sj0*sj5);
evalcond[0]=((((-1.0)*r01*x4208))+(((-1.0)*r10*x4205))+((r02*x4204))+(((-1.0)*r12*x4203))+((r00*x4207))+(((0.866025403784439)*(IKcos(j3))))+((r11*x4206)));
evalcond[1]=((((-1.0)*r02*x4203))+(((-1.0)*r10*x4207))+(((-1.0)*(0.866025403784439)*(IKsin(j3))))+((r01*x4206))+(((-1.0)*r00*x4205))+((r11*x4208))+(((-1.0)*r12*x4204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4209=(cj0*r02);
IkReal x4210=(r12*sj0);
IkReal x4211=(cj0*cj5*r00);
IkReal x4212=(cj0*r01*sj5);
IkReal x4213=(cj5*r10*sj0);
IkReal x4214=(r11*sj0*sj5);
IkReal x4215=(cj5*sj3);
IkReal x4216=(sj3*sj5);
j4eval[0]=((((-1.73205080756888)*x4212))+x4209+(((-1.73205080756888)*x4214))+x4210+(((1.73205080756888)*x4213))+(((1.73205080756888)*x4211)));
j4eval[1]=((((0.5)*(IKabs(((((-1.0)*r21*x4216))+((r20*x4215))+(((-1.0)*(1.73205080756888)*r22*sj3)))))))+(IKabs((((r21*x4215))+((r20*x4216))))));
j4eval[2]=IKsign(((((0.5)*x4209))+(((0.5)*x4210))+(((-0.866025403784439)*x4212))+(((0.866025403784439)*x4213))+(((0.866025403784439)*x4211))+(((-0.866025403784439)*x4214))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4217=r20*r20;
IkReal x4218=r21*r21;
IkReal x4219=r22*r22;
IkReal x4220=(cj5*r20*r22);
IkReal x4221=(r21*r22*sj5);
IkReal x4222=(cj5*r20*r21*sj5);
IkReal x4223=cj5*cj5;
IkReal x4224=(x4217*x4223);
IkReal x4225=(x4218*x4223);
j4eval[0]=((((-3.0)*x4219))+(((-4.0)*x4217))+(((3.46410161513775)*x4220))+(((-6.0)*x4222))+(((-3.0)*x4225))+(((-3.46410161513775)*x4221))+(((-1.0)*x4218))+(((3.0)*x4224)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-0.5)*x4218))+(((1.5)*x4224))+(((-1.73205080756888)*x4221))+(((1.73205080756888)*x4220))+(((-3.0)*x4222))+(((-2.0)*x4217))+(((-1.5)*x4219))+(((-1.5)*x4225))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4226=(r01*r21*sj0);
IkReal x4227=(cj0*r10*r20);
IkReal x4228=(cj0*r11*r21);
IkReal x4229=(cj0*r12*r22);
IkReal x4230=(r00*r20*sj0);
IkReal x4231=(r02*r22*sj0);
IkReal x4232=((1.73205080756888)*r22);
IkReal x4233=(cj0*cj5*r10);
IkReal x4234=(cj0*cj5*r12*r20);
IkReal x4235=(cj0*r11*sj5);
IkReal x4236=(cj0*r12*r21*sj5);
IkReal x4237=(cj5*r00*sj0);
IkReal x4238=(cj5*r02*r20*sj0);
IkReal x4239=(r01*sj0*sj5);
IkReal x4240=(r02*r21*sj0*sj5);
IkReal x4241=(cj0*cj5*r10*r21*sj5);
IkReal x4242=(cj0*cj5*r11*r20*sj5);
IkReal x4243=(cj5*r00*r21*sj0*sj5);
IkReal x4244=(cj5*r01*r20*sj0*sj5);
IkReal x4245=cj5*cj5;
IkReal x4246=(cj0*r10*r20*x4245);
IkReal x4247=(cj0*r11*r21*x4245);
IkReal x4248=(r00*r20*sj0*x4245);
IkReal x4249=(r01*r21*sj0*x4245);
IkReal x4250=((0.866025403784439)*r22);
IkReal x4251=(cj3*r21);
IkReal x4252=(cj3*r20);
j4eval[0]=((((3.0)*x4243))+(((3.0)*x4244))+x4226+(((-3.0)*x4242))+(((-1.73205080756888)*x4236))+(((-1.73205080756888)*x4238))+(((3.0)*x4249))+(((3.0)*x4231))+(((1.73205080756888)*x4240))+((x4232*x4233))+(((-3.0)*x4241))+(((-4.0)*x4227))+(((-1.0)*x4228))+(((4.0)*x4230))+(((-3.0)*x4229))+(((-1.0)*x4232*x4235))+((x4232*x4239))+(((-3.0)*x4247))+(((3.0)*x4246))+(((1.73205080756888)*x4234))+(((-1.0)*x4232*x4237))+(((-3.0)*x4248)));
j4eval[1]=IKsign(((((-0.866025403784439)*x4238))+(((-1.0)*x4237*x4250))+(((0.866025403784439)*x4240))+(((-1.0)*x4235*x4250))+(((-1.5)*x4242))+((x4233*x4250))+(((1.5)*x4249))+((x4239*x4250))+(((2.0)*x4230))+(((-2.0)*x4227))+(((0.5)*x4226))+(((-1.5)*x4247))+(((-1.5)*x4248))+(((1.5)*x4244))+(((-1.5)*x4241))+(((-1.5)*x4229))+(((-0.866025403784439)*x4236))+(((1.5)*x4243))+(((1.5)*x4231))+(((-0.5)*x4228))+(((0.866025403784439)*x4234))+(((1.5)*x4246))));
j4eval[2]=((IKabs((((cj5*x4251))+((sj5*x4252)))))+(((0.5)*(IKabs(((((-1.0)*cj5*x4252))+((cj3*x4232))+((sj5*x4251))))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4253=(cj0*r02);
IkReal x4254=(r12*sj0);
IkReal x4255=(cj0*cj5*r00);
IkReal x4256=(cj0*r01*sj5);
IkReal x4257=(cj5*r10*sj0);
IkReal x4258=(r11*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x4255))+(((-1.73205080756888)*x4258))+x4253+x4254+(((-1.73205080756888)*x4256))+(((1.73205080756888)*x4257)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.866025403784439)*x4255))+(((0.866025403784439)*x4257))+(((0.5)*x4254))+(((-0.866025403784439)*x4258))+(((0.5)*x4253))+(((-0.866025403784439)*x4256))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4259=r20*r20;
IkReal x4260=r21*r21;
IkReal x4261=r22*r22;
IkReal x4262=(cj5*r20*r22);
IkReal x4263=(r21*r22*sj5);
IkReal x4264=(cj5*r20*r21*sj5);
IkReal x4265=cj5*cj5;
IkReal x4266=(x4259*x4265);
IkReal x4267=(x4260*x4265);
j4eval[0]=((((-1.0)*x4260))+(((-6.0)*x4264))+(((3.0)*x4266))+(((-3.46410161513775)*x4263))+(((3.46410161513775)*x4262))+(((-3.0)*x4267))+(((-4.0)*x4259))+(((-3.0)*x4261)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((1.5)*x4266))+(((-1.5)*x4261))+(((1.73205080756888)*x4262))+(((-2.0)*x4259))+(((-1.5)*x4267))+(((-0.5)*x4260))+(((-1.73205080756888)*x4263))+(((-3.0)*x4264))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4268=((1.73205080756888)*cj0);
IkReal x4269=((1.73205080756888)*sj0);
IkReal x4270=(((r11*sj5*x4268))+(((-1.0)*r01*sj5*x4269))+(((-1.0)*cj5*r10*x4268))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((cj5*r00*x4269)));
j4eval[0]=x4270;
j4eval[1]=IKsign(x4270);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4271=((1.73205080756888)*cj0*cj5);
IkReal x4272=((1.73205080756888)*cj0*sj5);
IkReal x4273=((1.73205080756888)*cj5*sj0);
IkReal x4274=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x4275=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4271))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*x4272))+(((-1.0)*r01*x4274))+((r00*x4273)))),-1);
if(!x4275.valid){
continue;
}
CheckValue<IkReal> x4276 = IKatan2WithCheck(IkReal(((((-1.0)*(0.5)*cj5*r20))+(((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((0.866025403784439)*r22))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5))+(((0.5)*r21*sj5)))),IkReal((((r00*x4272))+((r10*x4274))+(((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21))+((r11*x4273))+((r01*x4271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4275.value)))+(x4276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4277=IKsin(j4);
IkReal x4278=((0.866025403784439)*r22);
IkReal x4279=((0.5)*r20);
IkReal x4280=(cj5*x4277);
IkReal x4281=IKcos(j4);
IkReal x4282=((1.0)*cj5*x4281);
IkReal x4283=(r20*sj5);
IkReal x4284=((0.5)*r21*sj5);
IkReal x4285=((0.866025403784439)*cj0*r02);
IkReal x4286=((0.866025403784439)*r12*sj0);
IkReal x4287=(cj0*cj5*x4277);
IkReal x4288=(cj0*sj5*x4277);
IkReal x4289=(cj5*sj0*x4277);
IkReal x4290=(sj0*sj5*x4277);
IkReal x4291=((0.5)*r00);
IkReal x4292=(cj0*cj5*x4281);
IkReal x4293=((0.5)*r01);
IkReal x4294=(cj0*sj5*x4281);
IkReal x4295=((0.5)*r10);
IkReal x4296=(cj5*sj0*x4281);
IkReal x4297=((0.5)*r11);
IkReal x4298=(sj0*sj5*x4281);
IkReal x4299=((0.866025403784439)*cj0*r12);
IkReal x4300=((0.866025403784439)*r02*sj0);
IkReal x4301=(r00*sj0*sj5);
IkReal x4302=((1.0)*cj0*cj5*x4281);
IkReal x4303=((1.0)*cj0*sj5*x4281);
evalcond[0]=((((-1.0)*r21*x4282))+((x4277*x4278))+(((-1.0)*x4279*x4280))+(((-1.0)*x4281*x4283))+((x4277*x4284)));
evalcond[1]=((-0.866025403784439)+((r21*x4280))+((x4278*x4281))+((x4277*x4283))+((x4281*x4284))+(((-1.0)*cj5*x4279*x4281)));
evalcond[2]=((-0.5)+((r10*x4290))+((r11*x4289))+((x4281*x4285))+((r01*x4287))+((r00*x4288))+((x4281*x4286))+(((-1.0)*x4291*x4292))+(((-1.0)*x4295*x4296))+((x4297*x4298))+((x4293*x4294)));
evalcond[3]=((((-1.0)*x4292*x4295))+((x4291*x4296))+(((-1.0)*x4281*x4300))+((x4294*x4297))+(((-1.0)*x4277*x4301))+((r11*x4287))+((x4281*x4299))+(((-1.0)*x4293*x4298))+(((-1.0)*r01*x4289))+((r10*x4288)));
evalcond[4]=((-1.0)+((x4289*x4291))+(((-1.0)*x4277*x4300))+((x4281*x4301))+(((-1.0)*r10*x4303))+((x4277*x4299))+(((-1.0)*x4290*x4293))+((x4288*x4297))+(((-1.0)*r11*x4302))+(((-1.0)*x4287*x4295))+((r01*x4296)));
evalcond[5]=((((-1.0)*r01*x4302))+(((-1.0)*r10*sj0*sj5*x4281))+((x4288*x4293))+(((-1.0)*r00*x4303))+(((-1.0)*x4289*x4295))+(((-1.0)*r11*sj0*x4282))+((x4277*x4286))+((x4290*x4297))+(((-1.0)*x4287*x4291))+((x4277*x4285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4304=((1.73205080756888)*r21);
IkReal x4305=(cj5*r20);
IkReal x4306=(r21*sj5);
IkReal x4307=r20*r20;
IkReal x4308=r21*r21;
IkReal x4309=((1.5)*(cj5*cj5));
CheckValue<IkReal> x4310=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*sj5*x4304))+(((-1.0)*x4308*x4309))+(((-2.0)*x4307))+((x4307*x4309))+(((1.73205080756888)*r22*x4305))+(((-3.0)*cj5*r20*x4306))+(((-0.5)*x4308))+(((-1.0)*(1.5)*(r22*r22))))),-1);
if(!x4310.valid){
continue;
}
CheckValue<IkReal> x4311 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x4304)))),IkReal(((((-0.866025403784439)*x4306))+(((-1.0)*(1.5)*r22))+(((0.866025403784439)*x4305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4310.value)))+(x4311.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4312=IKsin(j4);
IkReal x4313=((0.866025403784439)*r22);
IkReal x4314=((0.5)*r20);
IkReal x4315=(cj5*x4312);
IkReal x4316=IKcos(j4);
IkReal x4317=((1.0)*cj5*x4316);
IkReal x4318=(r20*sj5);
IkReal x4319=((0.5)*r21*sj5);
IkReal x4320=((0.866025403784439)*cj0*r02);
IkReal x4321=((0.866025403784439)*r12*sj0);
IkReal x4322=(cj0*cj5*x4312);
IkReal x4323=(cj0*sj5*x4312);
IkReal x4324=(cj5*sj0*x4312);
IkReal x4325=(sj0*sj5*x4312);
IkReal x4326=((0.5)*r00);
IkReal x4327=(cj0*cj5*x4316);
IkReal x4328=((0.5)*r01);
IkReal x4329=(cj0*sj5*x4316);
IkReal x4330=((0.5)*r10);
IkReal x4331=(cj5*sj0*x4316);
IkReal x4332=((0.5)*r11);
IkReal x4333=(sj0*sj5*x4316);
IkReal x4334=((0.866025403784439)*cj0*r12);
IkReal x4335=((0.866025403784439)*r02*sj0);
IkReal x4336=(r00*sj0*sj5);
IkReal x4337=((1.0)*cj0*cj5*x4316);
IkReal x4338=((1.0)*cj0*sj5*x4316);
evalcond[0]=(((x4312*x4319))+(((-1.0)*r21*x4317))+((x4312*x4313))+(((-1.0)*x4314*x4315))+(((-1.0)*x4316*x4318)));
evalcond[1]=((-0.866025403784439)+((x4313*x4316))+(((-1.0)*cj5*x4314*x4316))+((x4316*x4319))+((r21*x4315))+((x4312*x4318)));
evalcond[2]=((-0.5)+(((-1.0)*x4326*x4327))+((x4328*x4329))+(((-1.0)*x4330*x4331))+((x4332*x4333))+((r00*x4323))+((r01*x4322))+((r10*x4325))+((x4316*x4321))+((r11*x4324))+((x4316*x4320)));
evalcond[3]=(((x4316*x4334))+((r10*x4323))+(((-1.0)*x4312*x4336))+(((-1.0)*x4328*x4333))+(((-1.0)*r01*x4324))+((x4326*x4331))+(((-1.0)*x4327*x4330))+((r11*x4322))+(((-1.0)*x4316*x4335))+((x4329*x4332)));
evalcond[4]=((-1.0)+((x4312*x4334))+(((-1.0)*x4312*x4335))+(((-1.0)*x4325*x4328))+((r01*x4331))+(((-1.0)*r11*x4337))+(((-1.0)*r10*x4338))+((x4323*x4332))+(((-1.0)*x4322*x4330))+((x4324*x4326))+((x4316*x4336)));
evalcond[5]=(((x4312*x4321))+((x4312*x4320))+(((-1.0)*r10*sj0*sj5*x4316))+(((-1.0)*r00*x4338))+(((-1.0)*x4322*x4326))+((x4325*x4332))+(((-1.0)*r01*x4337))+(((-1.0)*r11*sj0*x4317))+((x4323*x4328))+(((-1.0)*x4324*x4330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4339=((0.866025403784439)*cj0);
IkReal x4340=((0.866025403784439)*sj0);
CheckValue<IkReal> x4341=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x4340))+((cj5*r10*x4340))+(((0.5)*r12*sj0))+(((-1.0)*r01*sj5*x4339))+((cj5*r00*x4339))+(((0.5)*cj0*r02)))),-1);
if(!x4341.valid){
continue;
}
CheckValue<IkReal> x4342 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4341.value)))+(x4342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4343=IKsin(j4);
IkReal x4344=((0.866025403784439)*r22);
IkReal x4345=((0.5)*r20);
IkReal x4346=(cj5*x4343);
IkReal x4347=IKcos(j4);
IkReal x4348=((1.0)*cj5*x4347);
IkReal x4349=(r20*sj5);
IkReal x4350=((0.5)*r21*sj5);
IkReal x4351=((0.866025403784439)*cj0*r02);
IkReal x4352=((0.866025403784439)*r12*sj0);
IkReal x4353=(cj0*cj5*x4343);
IkReal x4354=(cj0*sj5*x4343);
IkReal x4355=(cj5*sj0*x4343);
IkReal x4356=(sj0*sj5*x4343);
IkReal x4357=((0.5)*r00);
IkReal x4358=(cj0*cj5*x4347);
IkReal x4359=((0.5)*r01);
IkReal x4360=(cj0*sj5*x4347);
IkReal x4361=((0.5)*r10);
IkReal x4362=(cj5*sj0*x4347);
IkReal x4363=((0.5)*r11);
IkReal x4364=(sj0*sj5*x4347);
IkReal x4365=((0.866025403784439)*cj0*r12);
IkReal x4366=((0.866025403784439)*r02*sj0);
IkReal x4367=(r00*sj0*sj5);
IkReal x4368=((1.0)*cj0*cj5*x4347);
IkReal x4369=((1.0)*cj0*sj5*x4347);
evalcond[0]=((((-1.0)*r21*x4348))+((x4343*x4350))+(((-1.0)*x4345*x4346))+(((-1.0)*x4347*x4349))+((x4343*x4344)));
evalcond[1]=((-0.866025403784439)+((r21*x4346))+((x4347*x4350))+((x4343*x4349))+((x4344*x4347))+(((-1.0)*cj5*x4345*x4347)));
evalcond[2]=((-0.5)+((r01*x4353))+((x4359*x4360))+((r00*x4354))+(((-1.0)*x4361*x4362))+(((-1.0)*x4357*x4358))+((x4363*x4364))+((r11*x4355))+((x4347*x4352))+((r10*x4356))+((x4347*x4351)));
evalcond[3]=((((-1.0)*x4358*x4361))+(((-1.0)*r01*x4355))+((x4357*x4362))+((x4360*x4363))+((r10*x4354))+(((-1.0)*x4347*x4366))+(((-1.0)*x4359*x4364))+(((-1.0)*x4343*x4367))+((x4347*x4365))+((r11*x4353)));
evalcond[4]=((-1.0)+((r01*x4362))+(((-1.0)*r10*x4369))+((x4355*x4357))+(((-1.0)*x4356*x4359))+(((-1.0)*x4343*x4366))+((x4343*x4365))+((x4354*x4363))+((x4347*x4367))+(((-1.0)*x4353*x4361))+(((-1.0)*r11*x4368)));
evalcond[5]=(((x4354*x4359))+((x4343*x4352))+(((-1.0)*x4355*x4361))+(((-1.0)*r10*sj0*sj5*x4347))+((x4343*x4351))+(((-1.0)*r00*x4369))+(((-1.0)*r01*x4368))+(((-1.0)*r11*sj0*x4348))+((x4356*x4363))+(((-1.0)*x4353*x4357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4370=(cj0*r02);
IkReal x4371=(r12*sj0);
IkReal x4372=(cj0*cj5*r00);
IkReal x4373=(cj0*r01*sj5);
IkReal x4374=(cj5*r10*sj0);
IkReal x4375=(r11*sj0*sj5);
j4eval[0]=(x4371+x4370+(((1.73205080756888)*x4372))+(((-1.73205080756888)*x4375))+(((-1.73205080756888)*x4373))+(((1.73205080756888)*x4374)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((-0.866025403784439)*x4373))+(((0.866025403784439)*x4374))+(((0.5)*x4371))+(((-0.866025403784439)*x4375))+(((0.5)*x4370))+(((0.866025403784439)*x4372))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4376=r20*r20;
IkReal x4377=r21*r21;
IkReal x4378=r22*r22;
IkReal x4379=(cj5*r20*r22);
IkReal x4380=(r21*r22*sj5);
IkReal x4381=(cj5*r20*r21*sj5);
IkReal x4382=cj5*cj5;
IkReal x4383=(x4376*x4382);
IkReal x4384=(x4377*x4382);
j4eval[0]=((((-3.0)*x4378))+(((-3.46410161513775)*x4380))+(((3.0)*x4383))+(((-1.0)*x4377))+(((3.46410161513775)*x4379))+(((-4.0)*x4376))+(((-6.0)*x4381))+(((-3.0)*x4384)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.5)*x4384))+(((-0.5)*x4377))+(((-2.0)*x4376))+(((1.5)*x4383))+(((-1.5)*x4378))+(((-1.73205080756888)*x4380))+(((1.73205080756888)*x4379))+(((-3.0)*x4381))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4385=((1.73205080756888)*cj0);
IkReal x4386=((1.73205080756888)*sj0);
IkReal x4387=(((r11*sj5*x4385))+((cj5*r00*x4386))+(((-1.0)*cj5*r10*x4385))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*sj5*x4386)));
j4eval[0]=x4387;
j4eval[1]=IKsign(x4387);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4388=((1.73205080756888)*cj0*cj5);
IkReal x4389=((1.73205080756888)*cj0*sj5);
IkReal x4390=((1.73205080756888)*cj5*sj0);
IkReal x4391=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x4392=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4388))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r00*x4390))+((r11*x4389))+(((-1.0)*r01*x4391)))),-1);
if(!x4392.valid){
continue;
}
CheckValue<IkReal> x4393 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r20*sj5))+((cj5*r21))+((r01*x4388))+((r10*x4391))+((r11*x4390))+((r00*x4389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4392.value)))+(x4393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4394=IKsin(j4);
IkReal x4395=((0.866025403784439)*r22);
IkReal x4396=((0.5)*r20);
IkReal x4397=(cj5*x4394);
IkReal x4398=IKcos(j4);
IkReal x4399=((1.0)*cj5*x4398);
IkReal x4400=(r20*sj5);
IkReal x4401=((0.5)*r21*sj5);
IkReal x4402=((0.866025403784439)*cj0*r02);
IkReal x4403=((0.866025403784439)*r12*sj0);
IkReal x4404=(cj0*cj5*x4394);
IkReal x4405=(cj0*sj5*x4394);
IkReal x4406=(cj5*sj0*x4394);
IkReal x4407=(sj0*sj5*x4394);
IkReal x4408=((0.5)*r00);
IkReal x4409=(cj0*cj5*x4398);
IkReal x4410=((0.5)*r01);
IkReal x4411=(cj0*sj5*x4398);
IkReal x4412=((0.5)*r10);
IkReal x4413=(cj5*sj0*x4398);
IkReal x4414=((0.5)*r11);
IkReal x4415=(sj0*sj5*x4398);
IkReal x4416=((0.866025403784439)*cj0*r12);
IkReal x4417=((0.866025403784439)*r02*sj0);
IkReal x4418=(r00*sj0*sj5);
IkReal x4419=((1.0)*cj0*cj5*x4398);
IkReal x4420=((1.0)*cj0*sj5*x4398);
evalcond[0]=((((-1.0)*x4396*x4397))+((x4394*x4401))+((x4394*x4395))+(((-1.0)*r21*x4399))+(((-1.0)*x4398*x4400)));
evalcond[1]=((-0.866025403784439)+((x4395*x4398))+((x4398*x4401))+((x4394*x4400))+((r21*x4397))+(((-1.0)*cj5*x4396*x4398)));
evalcond[2]=((0.5)+((x4398*x4402))+(((-1.0)*x4408*x4409))+(((-1.0)*x4412*x4413))+((r01*x4404))+((r11*x4406))+((x4414*x4415))+((r00*x4405))+((x4410*x4411))+((r10*x4407))+((x4398*x4403)));
evalcond[3]=(((r10*x4405))+((x4398*x4416))+(((-1.0)*x4410*x4415))+(((-1.0)*x4398*x4417))+((x4411*x4414))+((r11*x4404))+(((-1.0)*x4394*x4418))+((x4408*x4413))+(((-1.0)*x4409*x4412))+(((-1.0)*r01*x4406)));
evalcond[4]=((1.0)+(((-1.0)*x4404*x4412))+((x4405*x4414))+(((-1.0)*r10*x4420))+(((-1.0)*x4407*x4410))+((x4398*x4418))+(((-1.0)*x4394*x4417))+((r01*x4413))+(((-1.0)*r11*x4419))+((x4394*x4416))+((x4406*x4408)));
evalcond[5]=(((x4407*x4414))+(((-1.0)*x4404*x4408))+(((-1.0)*r10*sj0*sj5*x4398))+((x4394*x4402))+(((-1.0)*r00*x4420))+(((-1.0)*r01*x4419))+((x4394*x4403))+((x4405*x4410))+(((-1.0)*r11*sj0*x4399))+(((-1.0)*x4406*x4412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4421=((1.73205080756888)*r21);
IkReal x4422=(cj5*r20);
IkReal x4423=(r21*sj5);
IkReal x4424=r20*r20;
IkReal x4425=r21*r21;
IkReal x4426=((1.5)*(cj5*cj5));
CheckValue<IkReal> x4427=IKPowWithIntegerCheck(IKsign(((((1.73205080756888)*r22*x4422))+(((-1.0)*x4425*x4426))+(((-2.0)*x4424))+((x4424*x4426))+(((-0.5)*x4425))+(((-1.0)*r22*sj5*x4421))+(((-1.0)*(1.5)*(r22*r22)))+(((-3.0)*cj5*r20*x4423)))),-1);
if(!x4427.valid){
continue;
}
CheckValue<IkReal> x4428 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x4421))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((-0.866025403784439)*x4423))+(((-1.0)*(1.5)*r22))+(((0.866025403784439)*x4422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4427.value)))+(x4428.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4429=IKsin(j4);
IkReal x4430=((0.866025403784439)*r22);
IkReal x4431=((0.5)*r20);
IkReal x4432=(cj5*x4429);
IkReal x4433=IKcos(j4);
IkReal x4434=((1.0)*cj5*x4433);
IkReal x4435=(r20*sj5);
IkReal x4436=((0.5)*r21*sj5);
IkReal x4437=((0.866025403784439)*cj0*r02);
IkReal x4438=((0.866025403784439)*r12*sj0);
IkReal x4439=(cj0*cj5*x4429);
IkReal x4440=(cj0*sj5*x4429);
IkReal x4441=(cj5*sj0*x4429);
IkReal x4442=(sj0*sj5*x4429);
IkReal x4443=((0.5)*r00);
IkReal x4444=(cj0*cj5*x4433);
IkReal x4445=((0.5)*r01);
IkReal x4446=(cj0*sj5*x4433);
IkReal x4447=((0.5)*r10);
IkReal x4448=(cj5*sj0*x4433);
IkReal x4449=((0.5)*r11);
IkReal x4450=(sj0*sj5*x4433);
IkReal x4451=((0.866025403784439)*cj0*r12);
IkReal x4452=((0.866025403784439)*r02*sj0);
IkReal x4453=(r00*sj0*sj5);
IkReal x4454=((1.0)*cj0*cj5*x4433);
IkReal x4455=((1.0)*cj0*sj5*x4433);
evalcond[0]=((((-1.0)*r21*x4434))+(((-1.0)*x4431*x4432))+((x4429*x4436))+(((-1.0)*x4433*x4435))+((x4429*x4430)));
evalcond[1]=((-0.866025403784439)+((x4430*x4433))+(((-1.0)*cj5*x4431*x4433))+((x4433*x4436))+((x4429*x4435))+((r21*x4432)));
evalcond[2]=((0.5)+(((-1.0)*x4443*x4444))+((r10*x4442))+((r00*x4440))+((x4449*x4450))+((r01*x4439))+((x4433*x4438))+((x4433*x4437))+((r11*x4441))+(((-1.0)*x4447*x4448))+((x4445*x4446)));
evalcond[3]=((((-1.0)*x4444*x4447))+((x4446*x4449))+((x4433*x4451))+((x4443*x4448))+(((-1.0)*x4445*x4450))+((r10*x4440))+(((-1.0)*x4429*x4453))+(((-1.0)*x4433*x4452))+(((-1.0)*r01*x4441))+((r11*x4439)));
evalcond[4]=((1.0)+(((-1.0)*x4439*x4447))+(((-1.0)*r10*x4455))+((x4429*x4451))+(((-1.0)*r11*x4454))+((x4441*x4443))+((r01*x4448))+((x4433*x4453))+(((-1.0)*x4442*x4445))+((x4440*x4449))+(((-1.0)*x4429*x4452)));
evalcond[5]=((((-1.0)*r10*sj0*sj5*x4433))+((x4442*x4449))+((x4429*x4438))+(((-1.0)*x4441*x4447))+(((-1.0)*r00*x4455))+((x4440*x4445))+(((-1.0)*r01*x4454))+((x4429*x4437))+(((-1.0)*x4439*x4443))+(((-1.0)*r11*sj0*x4434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4456=((0.866025403784439)*cj0);
IkReal x4457=((0.866025403784439)*sj0);
CheckValue<IkReal> x4458 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4458.valid){
continue;
}
CheckValue<IkReal> x4459=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x4456))+((cj5*r10*x4457))+(((0.5)*r12*sj0))+((cj5*r00*x4456))+(((-1.0)*r11*sj5*x4457))+(((0.5)*cj0*r02)))),-1);
if(!x4459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4458.value)+(((1.5707963267949)*(x4459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4460=IKsin(j4);
IkReal x4461=((0.866025403784439)*r22);
IkReal x4462=((0.5)*r20);
IkReal x4463=(cj5*x4460);
IkReal x4464=IKcos(j4);
IkReal x4465=((1.0)*cj5*x4464);
IkReal x4466=(r20*sj5);
IkReal x4467=((0.5)*r21*sj5);
IkReal x4468=((0.866025403784439)*cj0*r02);
IkReal x4469=((0.866025403784439)*r12*sj0);
IkReal x4470=(cj0*cj5*x4460);
IkReal x4471=(cj0*sj5*x4460);
IkReal x4472=(cj5*sj0*x4460);
IkReal x4473=(sj0*sj5*x4460);
IkReal x4474=((0.5)*r00);
IkReal x4475=(cj0*cj5*x4464);
IkReal x4476=((0.5)*r01);
IkReal x4477=(cj0*sj5*x4464);
IkReal x4478=((0.5)*r10);
IkReal x4479=(cj5*sj0*x4464);
IkReal x4480=((0.5)*r11);
IkReal x4481=(sj0*sj5*x4464);
IkReal x4482=((0.866025403784439)*cj0*r12);
IkReal x4483=((0.866025403784439)*r02*sj0);
IkReal x4484=(r00*sj0*sj5);
IkReal x4485=((1.0)*cj0*cj5*x4464);
IkReal x4486=((1.0)*cj0*sj5*x4464);
evalcond[0]=((((-1.0)*x4464*x4466))+((x4460*x4467))+((x4460*x4461))+(((-1.0)*x4462*x4463))+(((-1.0)*r21*x4465)));
evalcond[1]=((-0.866025403784439)+((x4460*x4466))+((r21*x4463))+((x4464*x4467))+((x4461*x4464))+(((-1.0)*cj5*x4462*x4464)));
evalcond[2]=((0.5)+((r01*x4470))+((x4476*x4477))+((r11*x4472))+(((-1.0)*x4474*x4475))+((x4464*x4469))+((x4480*x4481))+((x4464*x4468))+(((-1.0)*x4478*x4479))+((r00*x4471))+((r10*x4473)));
evalcond[3]=((((-1.0)*r01*x4472))+((r11*x4470))+((r10*x4471))+((x4474*x4479))+((x4477*x4480))+(((-1.0)*x4460*x4484))+(((-1.0)*x4475*x4478))+(((-1.0)*x4464*x4483))+(((-1.0)*x4476*x4481))+((x4464*x4482)));
evalcond[4]=((1.0)+(((-1.0)*r11*x4485))+((x4472*x4474))+(((-1.0)*r10*x4486))+((x4460*x4482))+(((-1.0)*x4460*x4483))+((x4464*x4484))+(((-1.0)*x4470*x4478))+((x4471*x4480))+((r01*x4479))+(((-1.0)*x4473*x4476)));
evalcond[5]=(((x4460*x4468))+(((-1.0)*r10*sj0*sj5*x4464))+(((-1.0)*x4472*x4478))+(((-1.0)*r01*x4485))+(((-1.0)*r11*sj0*x4465))+(((-1.0)*r00*x4486))+((x4473*x4480))+((x4460*x4469))+(((-1.0)*x4470*x4474))+((x4471*x4476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x4487=(r02*sj0);
IkReal x4488=(cj0*r12);
IkReal x4489=(cj0*cj5*r10);
IkReal x4490=(cj0*r11*sj5);
IkReal x4491=(cj5*r00*sj0);
IkReal x4492=(r01*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x4491))+x4487+(((-1.73205080756888)*x4489))+(((-1.73205080756888)*x4492))+(((-1.0)*x4488))+(((1.73205080756888)*x4490)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((-0.5)*x4488))+(((-0.866025403784439)*x4492))+(((0.866025403784439)*x4491))+(((-0.866025403784439)*x4489))+(((0.866025403784439)*x4490))+(((0.5)*x4487))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x4493=r20*r20;
IkReal x4494=r21*r21;
IkReal x4495=r22*r22;
IkReal x4496=(cj5*r20*r22);
IkReal x4497=(r21*r22*sj5);
IkReal x4498=(cj5*r20*r21*sj5);
IkReal x4499=cj5*cj5;
IkReal x4500=(x4493*x4499);
IkReal x4501=(x4494*x4499);
j4eval[0]=((((-4.0)*x4493))+(((-6.0)*x4498))+(((3.46410161513775)*x4496))+(((-1.0)*x4494))+(((-3.46410161513775)*x4497))+(((-3.0)*x4501))+(((-3.0)*x4495))+(((3.0)*x4500)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.5)*x4495))+(((-1.73205080756888)*x4497))+(((1.5)*x4500))+(((-3.0)*x4498))+(((1.73205080756888)*x4496))+(((-1.5)*x4501))+(((-0.5)*x4494))+(((-2.0)*x4493))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x4502=((1.73205080756888)*cj0);
IkReal x4503=((1.73205080756888)*sj0);
IkReal x4504=((((-1.0)*cj5*r10*x4502))+((r11*sj5*x4502))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((cj5*r00*x4503))+(((-1.0)*r01*sj5*x4503)));
j4eval[0]=x4504;
j4eval[1]=IKsign(x4504);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4505=((1.73205080756888)*cj0*cj5);
IkReal x4506=((1.73205080756888)*cj0*sj5);
IkReal x4507=((1.73205080756888)*cj5*sj0);
IkReal x4508=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x4509 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r00*x4506))+((r10*x4508))+((r01*x4505))+((r11*x4507)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4509.valid){
continue;
}
CheckValue<IkReal> x4510=IKPowWithIntegerCheck(IKsign((((r00*x4507))+(((-1.0)*r01*x4508))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r10*x4505))+((r11*x4506)))),-1);
if(!x4510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4509.value)+(((1.5707963267949)*(x4510.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4511=IKsin(j4);
IkReal x4512=((0.866025403784439)*r22);
IkReal x4513=((0.5)*r20);
IkReal x4514=(cj5*x4511);
IkReal x4515=IKcos(j4);
IkReal x4516=((1.0)*cj5*x4515);
IkReal x4517=(r20*sj5);
IkReal x4518=((0.5)*r21*sj5);
IkReal x4519=((0.866025403784439)*cj0*r02);
IkReal x4520=((0.866025403784439)*r12*sj0);
IkReal x4521=(cj0*cj5*x4511);
IkReal x4522=(cj0*sj5*x4511);
IkReal x4523=(cj5*sj0*x4511);
IkReal x4524=(sj0*sj5*x4511);
IkReal x4525=((0.5)*r00);
IkReal x4526=(cj0*cj5*x4515);
IkReal x4527=((0.5)*r01);
IkReal x4528=(cj0*sj5*x4515);
IkReal x4529=((0.5)*r10);
IkReal x4530=(cj5*sj0*x4515);
IkReal x4531=((0.5)*r11);
IkReal x4532=(sj0*sj5*x4515);
IkReal x4533=((0.866025403784439)*cj0*r12);
IkReal x4534=((0.866025403784439)*r02*sj0);
IkReal x4535=(r00*sj0*sj5);
IkReal x4536=((1.0)*cj0*cj5*x4515);
IkReal x4537=((1.0)*cj0*sj5*x4515);
evalcond[0]=((((-1.0)*r21*x4516))+((x4511*x4518))+(((-1.0)*x4513*x4514))+((x4511*x4512))+(((-1.0)*x4515*x4517)));
evalcond[1]=((-0.866025403784439)+((x4511*x4517))+((x4515*x4518))+((x4512*x4515))+(((-1.0)*cj5*x4513*x4515))+((r21*x4514)));
evalcond[2]=(((x4515*x4519))+(((-1.0)*x4529*x4530))+((x4515*x4520))+((r11*x4523))+((r00*x4522))+((x4527*x4528))+(((-1.0)*x4525*x4526))+((r10*x4524))+((x4531*x4532))+((r01*x4521)));
evalcond[3]=(((x4522*x4531))+(((-1.0)*x4524*x4527))+(((-1.0)*x4511*x4534))+((r01*x4530))+((x4515*x4535))+((x4523*x4525))+((x4511*x4533))+(((-1.0)*x4521*x4529))+(((-1.0)*r11*x4536))+(((-1.0)*r10*x4537)));
evalcond[4]=((0.5)+((r11*x4521))+((x4525*x4530))+(((-1.0)*x4526*x4529))+(((-1.0)*r01*x4523))+(((-1.0)*x4511*x4535))+((x4528*x4531))+((x4515*x4533))+(((-1.0)*x4527*x4532))+(((-1.0)*x4515*x4534))+((r10*x4522)));
evalcond[5]=((-1.0)+(((-1.0)*x4521*x4525))+((x4511*x4519))+(((-1.0)*r00*x4537))+((x4524*x4531))+(((-1.0)*r11*sj0*x4516))+(((-1.0)*r10*sj0*sj5*x4515))+((x4522*x4527))+(((-1.0)*r01*x4536))+(((-1.0)*x4523*x4529))+((x4511*x4520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4538=((1.73205080756888)*r21);
IkReal x4539=(cj5*r20);
IkReal x4540=(r21*sj5);
IkReal x4541=r20*r20;
IkReal x4542=r21*r21;
IkReal x4543=((1.5)*(cj5*cj5));
CheckValue<IkReal> x4544=IKPowWithIntegerCheck(IKsign(((((1.73205080756888)*r22*x4539))+(((-1.0)*x4542*x4543))+(((-3.0)*cj5*r20*x4540))+(((-2.0)*x4541))+(((-1.0)*r22*sj5*x4538))+(((-1.0)*(1.5)*(r22*r22)))+((x4541*x4543))+(((-0.5)*x4542)))),-1);
if(!x4544.valid){
continue;
}
CheckValue<IkReal> x4545 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x4538))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((-0.866025403784439)*x4540))+(((0.866025403784439)*x4539))+(((-1.0)*(1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4544.value)))+(x4545.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4546=IKsin(j4);
IkReal x4547=((0.866025403784439)*r22);
IkReal x4548=((0.5)*r20);
IkReal x4549=(cj5*x4546);
IkReal x4550=IKcos(j4);
IkReal x4551=((1.0)*cj5*x4550);
IkReal x4552=(r20*sj5);
IkReal x4553=((0.5)*r21*sj5);
IkReal x4554=((0.866025403784439)*cj0*r02);
IkReal x4555=((0.866025403784439)*r12*sj0);
IkReal x4556=(cj0*cj5*x4546);
IkReal x4557=(cj0*sj5*x4546);
IkReal x4558=(cj5*sj0*x4546);
IkReal x4559=(sj0*sj5*x4546);
IkReal x4560=((0.5)*r00);
IkReal x4561=(cj0*cj5*x4550);
IkReal x4562=((0.5)*r01);
IkReal x4563=(cj0*sj5*x4550);
IkReal x4564=((0.5)*r10);
IkReal x4565=(cj5*sj0*x4550);
IkReal x4566=((0.5)*r11);
IkReal x4567=(sj0*sj5*x4550);
IkReal x4568=((0.866025403784439)*cj0*r12);
IkReal x4569=((0.866025403784439)*r02*sj0);
IkReal x4570=(r00*sj0*sj5);
IkReal x4571=((1.0)*cj0*cj5*x4550);
IkReal x4572=((1.0)*cj0*sj5*x4550);
evalcond[0]=((((-1.0)*r21*x4551))+(((-1.0)*x4550*x4552))+(((-1.0)*x4548*x4549))+((x4546*x4547))+((x4546*x4553)));
evalcond[1]=((-0.866025403784439)+((x4547*x4550))+((x4550*x4553))+((r21*x4549))+(((-1.0)*cj5*x4548*x4550))+((x4546*x4552)));
evalcond[2]=(((r00*x4557))+((r01*x4556))+((r11*x4558))+((x4550*x4555))+((r10*x4559))+(((-1.0)*x4560*x4561))+((x4550*x4554))+((x4566*x4567))+(((-1.0)*x4564*x4565))+((x4562*x4563)));
evalcond[3]=((((-1.0)*x4546*x4569))+(((-1.0)*r10*x4572))+((x4550*x4570))+((x4558*x4560))+((x4546*x4568))+((r01*x4565))+(((-1.0)*x4556*x4564))+(((-1.0)*x4559*x4562))+(((-1.0)*r11*x4571))+((x4557*x4566)));
evalcond[4]=((0.5)+((r10*x4557))+(((-1.0)*x4562*x4567))+(((-1.0)*x4550*x4569))+((x4550*x4568))+((x4563*x4566))+((r11*x4556))+(((-1.0)*x4561*x4564))+((x4560*x4565))+(((-1.0)*r01*x4558))+(((-1.0)*x4546*x4570)));
evalcond[5]=((-1.0)+(((-1.0)*r10*sj0*sj5*x4550))+((x4559*x4566))+((x4546*x4555))+((x4546*x4554))+(((-1.0)*x4558*x4564))+(((-1.0)*r11*sj0*x4551))+(((-1.0)*r01*x4571))+((x4557*x4562))+(((-1.0)*x4556*x4560))+(((-1.0)*r00*x4572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4573=((0.866025403784439)*cj0);
IkReal x4574=((0.866025403784439)*sj0);
CheckValue<IkReal> x4575 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4575.valid){
continue;
}
CheckValue<IkReal> x4576=IKPowWithIntegerCheck(IKsign((((r11*sj5*x4573))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0))+(((-1.0)*r01*sj5*x4574))+((cj5*r00*x4574))+(((-1.0)*cj5*r10*x4573)))),-1);
if(!x4576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4575.value)+(((1.5707963267949)*(x4576.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4577=IKsin(j4);
IkReal x4578=((0.866025403784439)*r22);
IkReal x4579=((0.5)*r20);
IkReal x4580=(cj5*x4577);
IkReal x4581=IKcos(j4);
IkReal x4582=((1.0)*cj5*x4581);
IkReal x4583=(r20*sj5);
IkReal x4584=((0.5)*r21*sj5);
IkReal x4585=((0.866025403784439)*cj0*r02);
IkReal x4586=((0.866025403784439)*r12*sj0);
IkReal x4587=(cj0*cj5*x4577);
IkReal x4588=(cj0*sj5*x4577);
IkReal x4589=(cj5*sj0*x4577);
IkReal x4590=(sj0*sj5*x4577);
IkReal x4591=((0.5)*r00);
IkReal x4592=(cj0*cj5*x4581);
IkReal x4593=((0.5)*r01);
IkReal x4594=(cj0*sj5*x4581);
IkReal x4595=((0.5)*r10);
IkReal x4596=(cj5*sj0*x4581);
IkReal x4597=((0.5)*r11);
IkReal x4598=(sj0*sj5*x4581);
IkReal x4599=((0.866025403784439)*cj0*r12);
IkReal x4600=((0.866025403784439)*r02*sj0);
IkReal x4601=(r00*sj0*sj5);
IkReal x4602=((1.0)*cj0*cj5*x4581);
IkReal x4603=((1.0)*cj0*sj5*x4581);
evalcond[0]=(((x4577*x4584))+(((-1.0)*x4581*x4583))+((x4577*x4578))+(((-1.0)*x4579*x4580))+(((-1.0)*r21*x4582)));
evalcond[1]=((-0.866025403784439)+((x4577*x4583))+((x4578*x4581))+((x4581*x4584))+((r21*x4580))+(((-1.0)*cj5*x4579*x4581)));
evalcond[2]=(((r00*x4588))+((x4581*x4586))+((r01*x4587))+((x4581*x4585))+((x4597*x4598))+((x4593*x4594))+((r10*x4590))+(((-1.0)*x4591*x4592))+((r11*x4589))+(((-1.0)*x4595*x4596)));
evalcond[3]=(((r01*x4596))+(((-1.0)*r10*x4603))+(((-1.0)*r11*x4602))+((x4589*x4591))+(((-1.0)*x4577*x4600))+(((-1.0)*x4587*x4595))+((x4577*x4599))+((x4588*x4597))+((x4581*x4601))+(((-1.0)*x4590*x4593)));
evalcond[4]=((0.5)+(((-1.0)*r01*x4589))+((r10*x4588))+((x4594*x4597))+((x4581*x4599))+(((-1.0)*x4592*x4595))+(((-1.0)*x4593*x4598))+(((-1.0)*x4577*x4601))+((x4591*x4596))+(((-1.0)*x4581*x4600))+((r11*x4587)));
evalcond[5]=((-1.0)+((x4588*x4593))+(((-1.0)*x4587*x4591))+((x4577*x4585))+(((-1.0)*r10*sj0*sj5*x4581))+(((-1.0)*r00*x4603))+((x4577*x4586))+(((-1.0)*r01*x4602))+(((-1.0)*r11*sj0*x4582))+(((-1.0)*x4589*x4595))+((x4590*x4597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4604=(r02*sj0);
IkReal x4605=(cj0*r12);
IkReal x4606=(cj0*cj5*r10);
IkReal x4607=(cj0*r11*sj5);
IkReal x4608=(cj5*r00*sj0);
IkReal x4609=(r01*sj0*sj5);
j4eval[0]=((((-1.0)*x4605))+(((-1.73205080756888)*x4606))+(((1.73205080756888)*x4608))+(((-1.73205080756888)*x4609))+x4604+(((1.73205080756888)*x4607)));
j4eval[1]=IKsign(((((0.866025403784439)*x4607))+(((-0.866025403784439)*x4606))+(((-0.5)*x4605))+(((-0.866025403784439)*x4609))+(((0.866025403784439)*x4608))+(((0.5)*x4604))));
j4eval[2]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4610=r20*r20;
IkReal x4611=r21*r21;
IkReal x4612=r22*r22;
IkReal x4613=(cj5*r20*r22);
IkReal x4614=(r21*r22*sj5);
IkReal x4615=(cj5*r20*r21*sj5);
IkReal x4616=cj5*cj5;
IkReal x4617=(x4610*x4616);
IkReal x4618=(x4611*x4616);
j4eval[0]=((((3.46410161513775)*x4613))+(((-3.0)*x4612))+(((-1.0)*x4611))+(((-6.0)*x4615))+(((-3.0)*x4618))+(((-4.0)*x4610))+(((3.0)*x4617))+(((-3.46410161513775)*x4614)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((1.5)*x4617))+(((-0.5)*x4611))+(((-1.5)*x4612))+(((-1.5)*x4618))+(((-2.0)*x4610))+(((-1.73205080756888)*x4614))+(((-3.0)*x4615))+(((1.73205080756888)*x4613))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4619=((1.73205080756888)*cj0);
IkReal x4620=((1.73205080756888)*sj0);
IkReal x4621=(((r11*sj5*x4619))+(((-1.0)*cj5*r10*x4619))+(((-1.0)*r01*sj5*x4620))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((cj5*r00*x4620)));
j4eval[0]=x4621;
j4eval[1]=IKsign(x4621);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4622=((1.73205080756888)*cj0*cj5);
IkReal x4623=((1.73205080756888)*cj0*sj5);
IkReal x4624=((1.73205080756888)*cj5*sj0);
IkReal x4625=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x4626=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4622))+(((-1.0)*r01*x4625))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r00*x4624))+((r11*x4623)))),-1);
if(!x4626.valid){
continue;
}
CheckValue<IkReal> x4627 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r00*x4623))+((r01*x4622))+((r11*x4624))+((r10*x4625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4626.value)))+(x4627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4628=IKsin(j4);
IkReal x4629=((0.866025403784439)*r22);
IkReal x4630=((0.5)*r20);
IkReal x4631=(cj5*x4628);
IkReal x4632=IKcos(j4);
IkReal x4633=((1.0)*cj5*x4632);
IkReal x4634=(r20*sj5);
IkReal x4635=((0.5)*r21*sj5);
IkReal x4636=((0.866025403784439)*cj0*r02);
IkReal x4637=((0.866025403784439)*r12*sj0);
IkReal x4638=(cj0*cj5*x4628);
IkReal x4639=(cj0*sj5*x4628);
IkReal x4640=(cj5*sj0*x4628);
IkReal x4641=(sj0*sj5*x4628);
IkReal x4642=((0.5)*r00);
IkReal x4643=(cj0*cj5*x4632);
IkReal x4644=((0.5)*r01);
IkReal x4645=(cj0*sj5*x4632);
IkReal x4646=((0.5)*r10);
IkReal x4647=(cj5*sj0*x4632);
IkReal x4648=((0.5)*r11);
IkReal x4649=(sj0*sj5*x4632);
IkReal x4650=((0.866025403784439)*cj0*r12);
IkReal x4651=((0.866025403784439)*r02*sj0);
IkReal x4652=(r00*sj0*sj5);
IkReal x4653=((1.0)*cj0*cj5*x4632);
IkReal x4654=((1.0)*cj0*sj5*x4632);
evalcond[0]=((((-1.0)*x4632*x4634))+((x4628*x4635))+(((-1.0)*x4630*x4631))+((x4628*x4629))+(((-1.0)*r21*x4633)));
evalcond[1]=((-0.866025403784439)+((x4629*x4632))+(((-1.0)*cj5*x4630*x4632))+((x4632*x4635))+((r21*x4631))+((x4628*x4634)));
evalcond[2]=(((r11*x4640))+((r10*x4641))+((r01*x4638))+(((-1.0)*x4642*x4643))+((r00*x4639))+((x4632*x4636))+((x4648*x4649))+((x4632*x4637))+((x4644*x4645))+(((-1.0)*x4646*x4647)));
evalcond[3]=((((-1.0)*r10*x4654))+((x4628*x4650))+(((-1.0)*x4628*x4651))+((x4632*x4652))+((x4639*x4648))+((x4640*x4642))+((r01*x4647))+(((-1.0)*r11*x4653))+(((-1.0)*x4641*x4644))+(((-1.0)*x4638*x4646)));
evalcond[4]=((-0.5)+((x4632*x4650))+(((-1.0)*x4628*x4652))+((x4642*x4647))+(((-1.0)*x4644*x4649))+(((-1.0)*r01*x4640))+(((-1.0)*x4632*x4651))+(((-1.0)*x4643*x4646))+((r11*x4638))+((r10*x4639))+((x4645*x4648)));
evalcond[5]=((1.0)+(((-1.0)*r11*sj0*x4633))+(((-1.0)*r00*x4654))+(((-1.0)*r10*sj0*sj5*x4632))+((x4639*x4644))+(((-1.0)*r01*x4653))+((x4628*x4636))+(((-1.0)*x4638*x4642))+((x4628*x4637))+(((-1.0)*x4640*x4646))+((x4641*x4648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4655=((1.73205080756888)*r21);
IkReal x4656=(cj5*r20);
IkReal x4657=(r21*sj5);
IkReal x4658=r20*r20;
IkReal x4659=r21*r21;
IkReal x4660=((1.5)*(cj5*cj5));
CheckValue<IkReal> x4661 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x4655))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((0.866025403784439)*x4656))+(((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x4657)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4661.valid){
continue;
}
CheckValue<IkReal> x4662=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4659*x4660))+((x4658*x4660))+(((1.73205080756888)*r22*x4656))+(((-3.0)*cj5*r20*x4657))+(((-2.0)*x4658))+(((-1.0)*r22*sj5*x4655))+(((-1.0)*(1.5)*(r22*r22)))+(((-0.5)*x4659)))),-1);
if(!x4662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4661.value)+(((1.5707963267949)*(x4662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4663=IKsin(j4);
IkReal x4664=((0.866025403784439)*r22);
IkReal x4665=((0.5)*r20);
IkReal x4666=(cj5*x4663);
IkReal x4667=IKcos(j4);
IkReal x4668=((1.0)*cj5*x4667);
IkReal x4669=(r20*sj5);
IkReal x4670=((0.5)*r21*sj5);
IkReal x4671=((0.866025403784439)*cj0*r02);
IkReal x4672=((0.866025403784439)*r12*sj0);
IkReal x4673=(cj0*cj5*x4663);
IkReal x4674=(cj0*sj5*x4663);
IkReal x4675=(cj5*sj0*x4663);
IkReal x4676=(sj0*sj5*x4663);
IkReal x4677=((0.5)*r00);
IkReal x4678=(cj0*cj5*x4667);
IkReal x4679=((0.5)*r01);
IkReal x4680=(cj0*sj5*x4667);
IkReal x4681=((0.5)*r10);
IkReal x4682=(cj5*sj0*x4667);
IkReal x4683=((0.5)*r11);
IkReal x4684=(sj0*sj5*x4667);
IkReal x4685=((0.866025403784439)*cj0*r12);
IkReal x4686=((0.866025403784439)*r02*sj0);
IkReal x4687=(r00*sj0*sj5);
IkReal x4688=((1.0)*cj0*cj5*x4667);
IkReal x4689=((1.0)*cj0*sj5*x4667);
evalcond[0]=((((-1.0)*r21*x4668))+(((-1.0)*x4667*x4669))+((x4663*x4664))+((x4663*x4670))+(((-1.0)*x4665*x4666)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x4665*x4667))+((x4663*x4669))+((x4667*x4670))+((r21*x4666))+((x4664*x4667)));
evalcond[2]=(((r11*x4675))+(((-1.0)*x4677*x4678))+((x4667*x4671))+((x4679*x4680))+((r10*x4676))+(((-1.0)*x4681*x4682))+((x4667*x4672))+((x4683*x4684))+((r00*x4674))+((r01*x4673)));
evalcond[3]=(((x4675*x4677))+((x4667*x4687))+((x4663*x4685))+(((-1.0)*r10*x4689))+(((-1.0)*x4673*x4681))+(((-1.0)*r11*x4688))+(((-1.0)*x4663*x4686))+(((-1.0)*x4676*x4679))+((x4674*x4683))+((r01*x4682)));
evalcond[4]=((-0.5)+((x4667*x4685))+((x4680*x4683))+((r10*x4674))+((r11*x4673))+(((-1.0)*x4678*x4681))+(((-1.0)*x4667*x4686))+(((-1.0)*x4679*x4684))+((x4677*x4682))+(((-1.0)*r01*x4675))+(((-1.0)*x4663*x4687)));
evalcond[5]=((1.0)+(((-1.0)*x4675*x4681))+((x4663*x4671))+(((-1.0)*r11*sj0*x4668))+(((-1.0)*r10*sj0*sj5*x4667))+((x4674*x4679))+(((-1.0)*r00*x4689))+((x4663*x4672))+(((-1.0)*r01*x4688))+((x4676*x4683))+(((-1.0)*x4673*x4677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4690=((0.866025403784439)*cj0);
IkReal x4691=((0.866025403784439)*sj0);
CheckValue<IkReal> x4692=IKPowWithIntegerCheck(IKsign((((cj5*r00*x4691))+((r11*sj5*x4690))+(((-1.0)*r01*sj5*x4691))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0))+(((-1.0)*cj5*r10*x4690)))),-1);
if(!x4692.valid){
continue;
}
CheckValue<IkReal> x4693 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4692.value)))+(x4693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4694=IKsin(j4);
IkReal x4695=((0.866025403784439)*r22);
IkReal x4696=((0.5)*r20);
IkReal x4697=(cj5*x4694);
IkReal x4698=IKcos(j4);
IkReal x4699=((1.0)*cj5*x4698);
IkReal x4700=(r20*sj5);
IkReal x4701=((0.5)*r21*sj5);
IkReal x4702=((0.866025403784439)*cj0*r02);
IkReal x4703=((0.866025403784439)*r12*sj0);
IkReal x4704=(cj0*cj5*x4694);
IkReal x4705=(cj0*sj5*x4694);
IkReal x4706=(cj5*sj0*x4694);
IkReal x4707=(sj0*sj5*x4694);
IkReal x4708=((0.5)*r00);
IkReal x4709=(cj0*cj5*x4698);
IkReal x4710=((0.5)*r01);
IkReal x4711=(cj0*sj5*x4698);
IkReal x4712=((0.5)*r10);
IkReal x4713=(cj5*sj0*x4698);
IkReal x4714=((0.5)*r11);
IkReal x4715=(sj0*sj5*x4698);
IkReal x4716=((0.866025403784439)*cj0*r12);
IkReal x4717=((0.866025403784439)*r02*sj0);
IkReal x4718=(r00*sj0*sj5);
IkReal x4719=((1.0)*cj0*cj5*x4698);
IkReal x4720=((1.0)*cj0*sj5*x4698);
evalcond[0]=((((-1.0)*x4698*x4700))+((x4694*x4701))+(((-1.0)*r21*x4699))+(((-1.0)*x4696*x4697))+((x4694*x4695)));
evalcond[1]=((-0.866025403784439)+((x4694*x4700))+((r21*x4697))+((x4698*x4701))+(((-1.0)*cj5*x4696*x4698))+((x4695*x4698)));
evalcond[2]=(((r11*x4706))+((x4714*x4715))+(((-1.0)*x4712*x4713))+(((-1.0)*x4708*x4709))+((x4698*x4702))+((x4698*x4703))+((r00*x4705))+((r10*x4707))+((r01*x4704))+((x4710*x4711)));
evalcond[3]=(((x4698*x4718))+(((-1.0)*r11*x4719))+((x4705*x4714))+((x4706*x4708))+(((-1.0)*x4694*x4717))+(((-1.0)*r10*x4720))+((r01*x4713))+(((-1.0)*x4704*x4712))+(((-1.0)*x4707*x4710))+((x4694*x4716)));
evalcond[4]=((-0.5)+((x4708*x4713))+(((-1.0)*x4698*x4717))+((x4698*x4716))+(((-1.0)*x4710*x4715))+(((-1.0)*x4709*x4712))+((x4711*x4714))+(((-1.0)*x4694*x4718))+((r11*x4704))+((r10*x4705))+(((-1.0)*r01*x4706)));
evalcond[5]=((1.0)+(((-1.0)*x4704*x4708))+(((-1.0)*r11*sj0*x4699))+(((-1.0)*r00*x4720))+((x4707*x4714))+(((-1.0)*r10*sj0*sj5*x4698))+((x4694*x4703))+((x4705*x4710))+((x4694*x4702))+(((-1.0)*r01*x4719))+(((-1.0)*x4706*x4712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4721=(cj3*cj5);
IkReal x4722=(cj3*sj5);
IkReal x4723=((0.5)*r21);
IkReal x4724=((2.0)*r20);
IkReal x4725=(cj0*r10);
IkReal x4726=(cj0*r11);
IkReal x4727=((1.5)*r22);
IkReal x4728=(r00*sj0);
IkReal x4729=(r01*sj0);
IkReal x4730=((0.866025403784439)*cj5*r22);
IkReal x4731=(cj5*r20);
IkReal x4732=((0.866025403784439)*cj0*r12);
IkReal x4733=((0.866025403784439)*r22*sj5);
IkReal x4734=(r21*sj5);
IkReal x4735=((0.866025403784439)*r02*sj0);
IkReal x4736=((1.5)*cj5*r21*sj5);
IkReal x4737=((1.5)*cj5*r20*sj5);
IkReal x4738=cj5*cj5;
IkReal x4739=((1.5)*r20*x4738);
IkReal x4740=((1.5)*r21*x4738);
CheckValue<IkReal> x4741 = IKatan2WithCheck(IkReal((((r21*x4721))+((r20*x4722)))),IkReal(((((-0.5)*r20*x4721))+((cj3*(((0.866025403784439)*r22))))+((x4722*x4723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4741.valid){
continue;
}
CheckValue<IkReal> x4742=IKPowWithIntegerCheck(IKsign((((x4725*x4730))+(((-1.0)*x4725*x4736))+((x4725*x4739))+(((-1.0)*x4731*x4735))+(((-1.0)*cj0*r12*x4727))+((x4729*x4737))+(((-1.0)*x4724*x4725))+((x4723*x4729))+(((-1.0)*x4723*x4726))+(((-1.0)*x4726*x4740))+((x4734*x4735))+((x4729*x4740))+((x4728*x4736))+(((-1.0)*x4732*x4734))+((x4724*x4728))+(((-1.0)*x4728*x4739))+((x4729*x4733))+((r02*sj0*x4727))+(((-1.0)*x4728*x4730))+((x4731*x4732))+(((-1.0)*x4726*x4737))+(((-1.0)*x4726*x4733)))),-1);
if(!x4742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4741.value)+(((1.5707963267949)*(x4742.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4743=IKsin(j4);
IkReal x4744=((0.866025403784439)*r22);
IkReal x4745=((0.5)*r20);
IkReal x4746=(cj5*x4743);
IkReal x4747=IKcos(j4);
IkReal x4748=((1.0)*cj5*x4747);
IkReal x4749=(r20*sj5);
IkReal x4750=((0.5)*r21*sj5);
IkReal x4751=((0.866025403784439)*cj0*r02);
IkReal x4752=((0.866025403784439)*r12*sj0);
IkReal x4753=(cj0*cj5*x4743);
IkReal x4754=(cj0*sj5*x4743);
IkReal x4755=(cj5*sj0*x4743);
IkReal x4756=(sj0*sj5*x4743);
IkReal x4757=((0.5)*r00);
IkReal x4758=(cj0*cj5*x4747);
IkReal x4759=((0.5)*r01);
IkReal x4760=(cj0*sj5*x4747);
IkReal x4761=((0.5)*r10);
IkReal x4762=(cj5*sj0*x4747);
IkReal x4763=((0.5)*r11);
IkReal x4764=(sj0*sj5*x4747);
IkReal x4765=((0.866025403784439)*cj0*r12);
IkReal x4766=((0.866025403784439)*r02*sj0);
IkReal x4767=(r00*sj0*sj5);
IkReal x4768=((1.0)*cj0*cj5*x4747);
IkReal x4769=((1.0)*cj0*sj5*x4747);
evalcond[0]=(((x4743*x4744))+(((-1.0)*r21*x4748))+(((-1.0)*x4747*x4749))+((x4743*x4750))+(((-1.0)*x4745*x4746)));
evalcond[1]=((-0.866025403784439)+((x4744*x4747))+((x4747*x4750))+((r21*x4746))+(((-1.0)*cj5*x4745*x4747))+((x4743*x4749)));
evalcond[2]=(((x4747*x4751))+(((-1.0)*x4757*x4758))+((r11*x4755))+(((-1.0)*(0.5)*sj3))+(((-1.0)*x4761*x4762))+((r10*x4756))+((x4763*x4764))+((x4759*x4760))+((r00*x4754))+((r01*x4753))+((x4747*x4752)));
evalcond[3]=((((-1.0)*x4747*x4766))+(((-1.0)*x4743*x4767))+((r11*x4753))+((x4757*x4762))+(((-1.0)*x4758*x4761))+((r10*x4754))+(((-1.0)*x4759*x4764))+((x4760*x4763))+((x4747*x4765))+(((0.5)*cj3))+(((-1.0)*r01*x4755)));
evalcond[4]=((((-1.0)*x4756*x4759))+((x4755*x4757))+(((-1.0)*r11*x4768))+(((-1.0)*x4753*x4761))+(((-1.0)*x4743*x4766))+((x4743*x4765))+((x4754*x4763))+((x4747*x4767))+(((-1.0)*r10*x4769))+(((-1.0)*(1.0)*sj3))+((r01*x4762)));
evalcond[5]=(((x4754*x4759))+(((-1.0)*x4755*x4761))+(((-1.0)*(1.0)*cj3))+(((-1.0)*r00*x4769))+(((-1.0)*x4753*x4757))+((x4743*x4752))+(((-1.0)*r10*sj0*sj5*x4747))+(((-1.0)*r11*sj0*x4748))+(((-1.0)*r01*x4768))+((x4743*x4751))+((x4756*x4763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4770=((1.73205080756888)*r21);
IkReal x4771=(cj5*r20);
IkReal x4772=(r21*sj5);
IkReal x4773=r20*r20;
IkReal x4774=r21*r21;
IkReal x4775=((1.5)*(cj5*cj5));
CheckValue<IkReal> x4776 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x4770)))),IkReal(((((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x4772))+(((0.866025403784439)*x4771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4776.valid){
continue;
}
CheckValue<IkReal> x4777=IKPowWithIntegerCheck(IKsign(((((1.73205080756888)*r22*x4771))+(((-1.0)*r22*sj5*x4770))+(((-1.0)*x4774*x4775))+(((-0.5)*x4774))+(((-3.0)*cj5*r20*x4772))+((x4773*x4775))+(((-1.0)*(1.5)*(r22*r22)))+(((-2.0)*x4773)))),-1);
if(!x4777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4776.value)+(((1.5707963267949)*(x4777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4778=IKsin(j4);
IkReal x4779=((0.866025403784439)*r22);
IkReal x4780=((0.5)*r20);
IkReal x4781=(cj5*x4778);
IkReal x4782=IKcos(j4);
IkReal x4783=((1.0)*cj5*x4782);
IkReal x4784=(r20*sj5);
IkReal x4785=((0.5)*r21*sj5);
IkReal x4786=((0.866025403784439)*cj0*r02);
IkReal x4787=((0.866025403784439)*r12*sj0);
IkReal x4788=(cj0*cj5*x4778);
IkReal x4789=(cj0*sj5*x4778);
IkReal x4790=(cj5*sj0*x4778);
IkReal x4791=(sj0*sj5*x4778);
IkReal x4792=((0.5)*r00);
IkReal x4793=(cj0*cj5*x4782);
IkReal x4794=((0.5)*r01);
IkReal x4795=(cj0*sj5*x4782);
IkReal x4796=((0.5)*r10);
IkReal x4797=(cj5*sj0*x4782);
IkReal x4798=((0.5)*r11);
IkReal x4799=(sj0*sj5*x4782);
IkReal x4800=((0.866025403784439)*cj0*r12);
IkReal x4801=((0.866025403784439)*r02*sj0);
IkReal x4802=(r00*sj0*sj5);
IkReal x4803=((1.0)*cj0*cj5*x4782);
IkReal x4804=((1.0)*cj0*sj5*x4782);
evalcond[0]=(((x4778*x4785))+((x4778*x4779))+(((-1.0)*x4780*x4781))+(((-1.0)*r21*x4783))+(((-1.0)*x4782*x4784)));
evalcond[1]=((-0.866025403784439)+((x4782*x4785))+((r21*x4781))+((x4779*x4782))+(((-1.0)*cj5*x4780*x4782))+((x4778*x4784)));
evalcond[2]=(((x4782*x4786))+((r00*x4789))+((x4798*x4799))+(((-1.0)*x4792*x4793))+(((-1.0)*(0.5)*sj3))+((x4794*x4795))+(((-1.0)*x4796*x4797))+((r11*x4790))+((r01*x4788))+((x4782*x4787))+((r10*x4791)));
evalcond[3]=((((-1.0)*x4794*x4799))+((r11*x4788))+((r10*x4789))+((x4782*x4800))+((x4792*x4797))+(((-1.0)*x4793*x4796))+(((0.5)*cj3))+(((-1.0)*r01*x4790))+((x4795*x4798))+(((-1.0)*x4782*x4801))+(((-1.0)*x4778*x4802)));
evalcond[4]=(((x4782*x4802))+((x4789*x4798))+((r01*x4797))+(((-1.0)*x4778*x4801))+(((-1.0)*r10*x4804))+((x4790*x4792))+(((-1.0)*x4788*x4796))+(((-1.0)*x4791*x4794))+(((-1.0)*(1.0)*sj3))+((x4778*x4800))+(((-1.0)*r11*x4803)));
evalcond[5]=(((x4778*x4786))+((x4791*x4798))+(((-1.0)*r11*sj0*x4783))+(((-1.0)*x4788*x4792))+(((-1.0)*(1.0)*cj3))+(((-1.0)*r00*x4804))+(((-1.0)*x4790*x4796))+(((-1.0)*r10*sj0*sj5*x4782))+((x4778*x4787))+(((-1.0)*r01*x4803))+((x4789*x4794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4805=(cj5*sj3);
IkReal x4806=(sj3*sj5);
IkReal x4807=((0.866025403784439)*cj0);
IkReal x4808=((0.866025403784439)*sj0);
CheckValue<IkReal> x4809=IKPowWithIntegerCheck(IKsign((((cj5*r10*x4808))+(((-1.0)*r01*sj5*x4807))+(((0.5)*r12*sj0))+(((-1.0)*r11*sj5*x4808))+((cj5*r00*x4807))+(((0.5)*cj0*r02)))),-1);
if(!x4809.valid){
continue;
}
CheckValue<IkReal> x4810 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4805))+(((-1.0)*r20*x4806)))),IkReal(((((-1.0)*(0.866025403784439)*r22*sj3))+(((0.5)*r20*x4805))+(((-0.5)*r21*x4806)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4809.value)))+(x4810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4811=IKsin(j4);
IkReal x4812=((0.866025403784439)*r22);
IkReal x4813=((0.5)*r20);
IkReal x4814=(cj5*x4811);
IkReal x4815=IKcos(j4);
IkReal x4816=((1.0)*cj5*x4815);
IkReal x4817=(r20*sj5);
IkReal x4818=((0.5)*r21*sj5);
IkReal x4819=((0.866025403784439)*cj0*r02);
IkReal x4820=((0.866025403784439)*r12*sj0);
IkReal x4821=(cj0*cj5*x4811);
IkReal x4822=(cj0*sj5*x4811);
IkReal x4823=(cj5*sj0*x4811);
IkReal x4824=(sj0*sj5*x4811);
IkReal x4825=((0.5)*r00);
IkReal x4826=(cj0*cj5*x4815);
IkReal x4827=((0.5)*r01);
IkReal x4828=(cj0*sj5*x4815);
IkReal x4829=((0.5)*r10);
IkReal x4830=(cj5*sj0*x4815);
IkReal x4831=((0.5)*r11);
IkReal x4832=(sj0*sj5*x4815);
IkReal x4833=((0.866025403784439)*cj0*r12);
IkReal x4834=((0.866025403784439)*r02*sj0);
IkReal x4835=(r00*sj0*sj5);
IkReal x4836=((1.0)*cj0*cj5*x4815);
IkReal x4837=((1.0)*cj0*sj5*x4815);
evalcond[0]=(((x4811*x4812))+(((-1.0)*x4813*x4814))+((x4811*x4818))+(((-1.0)*x4815*x4817))+(((-1.0)*r21*x4816)));
evalcond[1]=((-0.866025403784439)+((x4815*x4818))+(((-1.0)*cj5*x4813*x4815))+((r21*x4814))+((x4812*x4815))+((x4811*x4817)));
evalcond[2]=(((x4815*x4820))+(((-1.0)*x4825*x4826))+(((-1.0)*x4829*x4830))+((r01*x4821))+((r00*x4822))+((r10*x4824))+(((-1.0)*(0.5)*sj3))+((x4831*x4832))+((x4815*x4819))+((r11*x4823))+((x4827*x4828)));
evalcond[3]=((((-1.0)*x4811*x4835))+(((-1.0)*x4826*x4829))+((x4825*x4830))+(((-1.0)*x4815*x4834))+(((-1.0)*x4827*x4832))+(((-1.0)*r01*x4823))+((x4815*x4833))+((r11*x4821))+(((0.5)*cj3))+((x4828*x4831))+((r10*x4822)));
evalcond[4]=((((-1.0)*x4811*x4834))+((r01*x4830))+(((-1.0)*x4824*x4827))+((x4811*x4833))+((x4823*x4825))+((x4815*x4835))+(((-1.0)*x4821*x4829))+((x4822*x4831))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r10*x4837))+(((-1.0)*r11*x4836)));
evalcond[5]=((((-1.0)*x4821*x4825))+(((-1.0)*r11*sj0*x4816))+(((-1.0)*x4823*x4829))+(((-1.0)*(1.0)*cj3))+(((-1.0)*r10*sj0*sj5*x4815))+(((-1.0)*r00*x4837))+((x4811*x4820))+((x4811*x4819))+((x4822*x4827))+(((-1.0)*r01*x4836))+((x4824*x4831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4838=((0.577350269189626)*cj0);
IkReal x4839=((0.577350269189626)*sj0);
IkReal x4840=(cj0*cj5);
IkReal x4841=(cj5*sj0);
IkReal x4842=((1.0)*cj0);
IkReal x4843=(r01*sj5);
IkReal x4844=(r11*sj5);
if( IKabs((((r02*x4838))+((r12*x4839))+(((-1.0)*sj0*x4844))+((r10*x4841))+((r00*x4840))+(((-1.0)*x4842*x4843)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x4839))+((sj0*x4843))+((r10*x4840))+((r12*x4838))+(((-1.0)*x4842*x4844))+(((-1.0)*r00*x4841)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x4838))+((r12*x4839))+(((-1.0)*sj0*x4844))+((r10*x4841))+((r00*x4840))+(((-1.0)*x4842*x4843))))+IKsqr(((((-1.0)*r02*x4839))+((sj0*x4843))+((r10*x4840))+((r12*x4838))+(((-1.0)*x4842*x4844))+(((-1.0)*r00*x4841))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r02*x4838))+((r12*x4839))+(((-1.0)*sj0*x4844))+((r10*x4841))+((r00*x4840))+(((-1.0)*x4842*x4843))), ((((-1.0)*r02*x4839))+((sj0*x4843))+((r10*x4840))+((r12*x4838))+(((-1.0)*x4842*x4844))+(((-1.0)*r00*x4841))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x4845=((0.5)*cj0);
IkReal x4846=((0.5)*sj0);
IkReal x4847=((0.866025403784439)*cj0*cj5);
IkReal x4848=((0.866025403784439)*cj0*sj5);
IkReal x4849=((0.866025403784439)*cj5*sj0);
IkReal x4850=((0.866025403784439)*sj0*sj5);
evalcond[0]=(((r11*x4848))+((r02*x4846))+(((-1.0)*r12*x4845))+(((-1.0)*r01*x4850))+((r00*x4849))+(((-1.0)*r10*x4847))+(((0.866025403784439)*(IKcos(j3)))));
evalcond[1]=((((-1.0)*r02*x4845))+(((-1.0)*r12*x4846))+(((-1.0)*r10*x4849))+(((-1.0)*r00*x4847))+((r01*x4848))+((r11*x4850))+(((0.866025403784439)*(IKsin(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4851=(cj0*r02);
IkReal x4852=(r12*sj0);
IkReal x4853=(cj0*cj5*r00);
IkReal x4854=(cj0*r01*sj5);
IkReal x4855=(cj5*r10*sj0);
IkReal x4856=(r11*sj0*sj5);
IkReal x4857=(cj5*sj3);
IkReal x4858=(sj3*sj5);
j4eval[0]=(x4851+x4852+(((1.73205080756888)*x4855))+(((-1.73205080756888)*x4854))+(((1.73205080756888)*x4853))+(((-1.73205080756888)*x4856)));
j4eval[1]=((((0.5)*(IKabs(((((-1.0)*(1.73205080756888)*r22*sj3))+((r20*x4857))+(((-1.0)*r21*x4858)))))))+(IKabs((((r21*x4857))+((r20*x4858))))));
j4eval[2]=IKsign(((((0.5)*x4851))+(((0.866025403784439)*x4853))+(((0.5)*x4852))+(((-0.866025403784439)*x4854))+(((0.866025403784439)*x4855))+(((-0.866025403784439)*x4856))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4859=r20*r20;
IkReal x4860=r21*r21;
IkReal x4861=r22*r22;
IkReal x4862=(cj5*r20*r22);
IkReal x4863=(r21*r22*sj5);
IkReal x4864=(cj5*r20*r21*sj5);
IkReal x4865=cj5*cj5;
IkReal x4866=(x4859*x4865);
IkReal x4867=(x4860*x4865);
j4eval[0]=((((-3.0)*x4861))+(((-4.0)*x4859))+(((-1.0)*x4860))+(((3.46410161513775)*x4862))+(((-3.46410161513775)*x4863))+(((3.0)*x4866))+(((-6.0)*x4864))+(((-3.0)*x4867)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-2.0)*x4859))+(((-1.5)*x4867))+(((1.5)*x4866))+(((-1.5)*x4861))+(((-1.73205080756888)*x4863))+(((1.73205080756888)*x4862))+(((-0.5)*x4860))+(((-3.0)*x4864))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4868=(cj0*r00*r20);
IkReal x4869=(cj0*r01*r21);
IkReal x4870=(cj0*r02*r22);
IkReal x4871=(r10*r20*sj0);
IkReal x4872=(r11*r21*sj0);
IkReal x4873=(r12*r22*sj0);
IkReal x4874=((1.73205080756888)*r22);
IkReal x4875=(cj0*cj5*r00);
IkReal x4876=(cj0*cj5*r02*r20);
IkReal x4877=(cj0*r01*sj5);
IkReal x4878=(cj0*r02*r21*sj5);
IkReal x4879=(cj5*r10*sj0);
IkReal x4880=(cj5*r12*r20*sj0);
IkReal x4881=(r11*sj0*sj5);
IkReal x4882=(r12*r21*sj0*sj5);
IkReal x4883=(cj0*cj5*r00*r21*sj5);
IkReal x4884=(cj0*cj5*r01*r20*sj5);
IkReal x4885=(cj5*r10*r21*sj0*sj5);
IkReal x4886=(cj5*r11*r20*sj0*sj5);
IkReal x4887=cj5*cj5;
IkReal x4888=(cj0*r00*r20*x4887);
IkReal x4889=(cj0*r01*r21*x4887);
IkReal x4890=(r10*r20*sj0*x4887);
IkReal x4891=(r11*r21*sj0*x4887);
IkReal x4892=(r21*sj3);
IkReal x4893=(r20*sj3);
IkReal x4894=((0.866025403784439)*r22);
j4eval[0]=((((-4.0)*x4868))+(((-3.0)*x4883))+(((-1.0)*x4869))+(((3.0)*x4890))+(((-1.0)*x4872))+(((1.73205080756888)*x4880))+(((-3.0)*x4870))+(((3.0)*x4888))+(((-1.0)*x4874*x4881))+(((-3.0)*x4886))+(((-3.0)*x4873))+(((1.73205080756888)*x4876))+(((-3.0)*x4889))+(((-1.73205080756888)*x4878))+(((-4.0)*x4871))+(((-3.0)*x4884))+(((-3.0)*x4885))+(((-1.73205080756888)*x4882))+(((-3.0)*x4891))+((x4874*x4875))+((x4874*x4879))+(((-1.0)*x4874*x4877)));
j4eval[1]=((((0.5)*(IKabs(((((-1.0)*cj5*x4893))+((sj5*x4892))+((sj3*x4874)))))))+(IKabs((((cj5*x4892))+((sj5*x4893))))));
j4eval[2]=IKsign(((((1.5)*x4888))+(((-1.5)*x4870))+(((-1.5)*x4873))+(((-1.5)*x4883))+(((0.866025403784439)*x4876))+((x4875*x4894))+(((-0.866025403784439)*x4878))+(((-0.5)*x4872))+(((-1.5)*x4884))+(((1.5)*x4890))+(((-1.0)*x4881*x4894))+(((-1.5)*x4885))+(((-1.5)*x4886))+(((0.866025403784439)*x4880))+(((-1.5)*x4889))+(((-1.5)*x4891))+(((-0.866025403784439)*x4882))+((x4879*x4894))+(((-1.0)*x4877*x4894))+(((-0.5)*x4869))+(((-2.0)*x4871))+(((-2.0)*x4868))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x4895=(r02*sj0);
IkReal x4896=(cj0*r12);
IkReal x4897=(cj0*cj5*r10);
IkReal x4898=(cj0*r11*sj5);
IkReal x4899=(cj5*r00*sj0);
IkReal x4900=(r01*sj0*sj5);
j4eval[0]=(x4895+(((1.73205080756888)*x4898))+(((-1.0)*x4896))+(((1.73205080756888)*x4899))+(((-1.73205080756888)*x4897))+(((-1.73205080756888)*x4900)));
j4eval[1]=IKsign(((((0.5)*x4895))+(((-0.866025403784439)*x4897))+(((-0.866025403784439)*x4900))+(((0.866025403784439)*x4899))+(((0.866025403784439)*x4898))+(((-0.5)*x4896))));
j4eval[2]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x4901=r20*r20;
IkReal x4902=r21*r21;
IkReal x4903=r22*r22;
IkReal x4904=(cj5*r20*r22);
IkReal x4905=(r21*r22*sj5);
IkReal x4906=(cj5*r20*r21*sj5);
IkReal x4907=cj5*cj5;
IkReal x4908=(x4901*x4907);
IkReal x4909=(x4902*x4907);
j4eval[0]=((((3.46410161513775)*x4904))+(((-3.0)*x4909))+(((-1.0)*x4902))+(((-3.0)*x4903))+(((-6.0)*x4906))+(((3.0)*x4908))+(((-3.46410161513775)*x4905))+(((-4.0)*x4901)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-3.0)*x4906))+(((1.5)*x4908))+(((-1.5)*x4909))+(((-1.73205080756888)*x4905))+(((-2.0)*x4901))+(((1.73205080756888)*x4904))+(((-1.5)*x4903))+(((-0.5)*x4902))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x4910=((1.73205080756888)*cj0);
IkReal x4911=((1.73205080756888)*sj0);
IkReal x4912=((((-1.0)*cj5*r10*x4910))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*sj5*x4911))+((cj5*r00*x4911))+((r11*sj5*x4910)));
j4eval[0]=x4912;
j4eval[1]=IKsign(x4912);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4913=((1.73205080756888)*cj0*cj5);
IkReal x4914=((1.73205080756888)*cj0*sj5);
IkReal x4915=((1.73205080756888)*cj5*sj0);
IkReal x4916=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x4917=IKPowWithIntegerCheck(IKsign((((r00*x4915))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*x4916))+(((-1.0)*r10*x4913))+((r11*x4914)))),-1);
if(!x4917.valid){
continue;
}
CheckValue<IkReal> x4918 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r01))*((cj0*sj5))))+(((-0.866025403784439)*cj5*r10*sj0))+(((0.866025403784439)*r11*sj0*sj5))+(((-0.866025403784439)*cj0*cj5*r00))+(((1.5)*cj0*r02))+(((1.5)*r12*sj0)))),IkReal(((((-1.0)*r10*x4916))+(((-1.0)*r11*x4915))+(((-1.0)*r01*x4913))+(((-1.0)*r00*x4914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4917.value)))+(x4918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4919=IKsin(j4);
IkReal x4920=((0.866025403784439)*r22);
IkReal x4921=((0.5)*r20);
IkReal x4922=(cj5*x4919);
IkReal x4923=IKcos(j4);
IkReal x4924=((1.0)*cj5*x4923);
IkReal x4925=(r20*sj5);
IkReal x4926=((0.5)*r21*sj5);
IkReal x4927=((0.866025403784439)*cj0*r02);
IkReal x4928=((0.866025403784439)*r12*sj0);
IkReal x4929=(cj0*cj5*x4919);
IkReal x4930=(cj0*sj5*x4919);
IkReal x4931=(cj5*sj0*x4919);
IkReal x4932=(sj0*sj5*x4919);
IkReal x4933=((0.5)*r00);
IkReal x4934=(cj0*cj5*x4923);
IkReal x4935=((0.5)*r01);
IkReal x4936=(cj0*sj5*x4923);
IkReal x4937=((0.5)*r10);
IkReal x4938=(cj5*sj0*x4923);
IkReal x4939=((0.5)*r11);
IkReal x4940=(sj0*sj5*x4923);
IkReal x4941=((0.866025403784439)*cj0*r12);
IkReal x4942=((0.866025403784439)*r02*sj0);
IkReal x4943=(r00*sj0*sj5);
IkReal x4944=((1.0)*cj0*cj5*x4923);
IkReal x4945=((1.0)*cj0*sj5*x4923);
evalcond[0]=(((x4919*x4920))+((x4919*x4926))+(((-1.0)*x4921*x4922))+(((-1.0)*x4923*x4925))+(((-1.0)*r21*x4924)));
evalcond[1]=((0.866025403784439)+((x4923*x4926))+(((-1.0)*cj5*x4921*x4923))+((r21*x4922))+((x4920*x4923))+((x4919*x4925)));
evalcond[2]=(((x4923*x4927))+((r01*x4929))+((x4935*x4936))+((r00*x4930))+(((-1.0)*x4933*x4934))+(((-1.0)*x4937*x4938))+((r10*x4932))+((r11*x4931))+((x4939*x4940))+((x4923*x4928)));
evalcond[3]=(((x4919*x4941))+((x4923*x4943))+((x4931*x4933))+(((-1.0)*r10*x4945))+(((-1.0)*x4929*x4937))+(((-1.0)*x4919*x4942))+(((-1.0)*r11*x4944))+((x4930*x4939))+(((-1.0)*x4932*x4935))+((r01*x4938)));
evalcond[4]=((0.5)+((x4936*x4939))+(((-1.0)*x4935*x4940))+(((-1.0)*x4919*x4943))+(((-1.0)*x4923*x4942))+((x4933*x4938))+(((-1.0)*r01*x4931))+((r11*x4929))+((x4923*x4941))+(((-1.0)*x4934*x4937))+((r10*x4930)));
evalcond[5]=((1.0)+(((-1.0)*x4929*x4933))+((x4919*x4927))+(((-1.0)*x4931*x4937))+(((-1.0)*r00*x4945))+((x4919*x4928))+(((-1.0)*r11*sj0*x4924))+((x4930*x4935))+((x4932*x4939))+(((-1.0)*r01*x4944))+(((-1.0)*r10*sj0*sj5*x4923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4946=((1.73205080756888)*r21);
IkReal x4947=(cj5*r20);
IkReal x4948=(r21*sj5);
IkReal x4949=r20*r20;
IkReal x4950=r21*r21;
IkReal x4951=((1.5)*(cj5*cj5));
CheckValue<IkReal> x4952 = IKatan2WithCheck(IkReal((((cj5*x4946))+(((1.73205080756888)*r20*sj5)))),IkReal(((((-0.866025403784439)*x4947))+(((1.5)*r22))+(((0.866025403784439)*x4948)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4952.valid){
continue;
}
CheckValue<IkReal> x4953=IKPowWithIntegerCheck(IKsign((((x4949*x4951))+(((-3.0)*cj5*r20*x4948))+(((-1.0)*x4950*x4951))+(((1.73205080756888)*r22*x4947))+(((-1.0)*r22*sj5*x4946))+(((-2.0)*x4949))+(((-0.5)*x4950))+(((-1.0)*(1.5)*(r22*r22))))),-1);
if(!x4953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4952.value)+(((1.5707963267949)*(x4953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4954=IKsin(j4);
IkReal x4955=((0.866025403784439)*r22);
IkReal x4956=((0.5)*r20);
IkReal x4957=(cj5*x4954);
IkReal x4958=IKcos(j4);
IkReal x4959=((1.0)*cj5*x4958);
IkReal x4960=(r20*sj5);
IkReal x4961=((0.5)*r21*sj5);
IkReal x4962=((0.866025403784439)*cj0*r02);
IkReal x4963=((0.866025403784439)*r12*sj0);
IkReal x4964=(cj0*cj5*x4954);
IkReal x4965=(cj0*sj5*x4954);
IkReal x4966=(cj5*sj0*x4954);
IkReal x4967=(sj0*sj5*x4954);
IkReal x4968=((0.5)*r00);
IkReal x4969=(cj0*cj5*x4958);
IkReal x4970=((0.5)*r01);
IkReal x4971=(cj0*sj5*x4958);
IkReal x4972=((0.5)*r10);
IkReal x4973=(cj5*sj0*x4958);
IkReal x4974=((0.5)*r11);
IkReal x4975=(sj0*sj5*x4958);
IkReal x4976=((0.866025403784439)*cj0*r12);
IkReal x4977=((0.866025403784439)*r02*sj0);
IkReal x4978=(r00*sj0*sj5);
IkReal x4979=((1.0)*cj0*cj5*x4958);
IkReal x4980=((1.0)*cj0*sj5*x4958);
evalcond[0]=(((x4954*x4961))+(((-1.0)*x4958*x4960))+((x4954*x4955))+(((-1.0)*r21*x4959))+(((-1.0)*x4956*x4957)));
evalcond[1]=((0.866025403784439)+((x4955*x4958))+((r21*x4957))+((x4954*x4960))+(((-1.0)*cj5*x4956*x4958))+((x4958*x4961)));
evalcond[2]=(((r10*x4967))+(((-1.0)*x4968*x4969))+(((-1.0)*x4972*x4973))+((r01*x4964))+((r11*x4966))+((x4974*x4975))+((x4970*x4971))+((x4958*x4962))+((x4958*x4963))+((r00*x4965)));
evalcond[3]=((((-1.0)*r11*x4979))+(((-1.0)*r10*x4980))+(((-1.0)*x4964*x4972))+((x4958*x4978))+((x4966*x4968))+(((-1.0)*x4954*x4977))+((r01*x4973))+(((-1.0)*x4967*x4970))+((x4965*x4974))+((x4954*x4976)));
evalcond[4]=((0.5)+(((-1.0)*x4969*x4972))+((x4958*x4976))+((x4968*x4973))+(((-1.0)*x4958*x4977))+((x4971*x4974))+((r11*x4964))+(((-1.0)*r01*x4966))+((r10*x4965))+(((-1.0)*x4954*x4978))+(((-1.0)*x4970*x4975)));
evalcond[5]=((1.0)+((x4967*x4974))+((x4954*x4963))+(((-1.0)*r00*x4980))+(((-1.0)*x4964*x4968))+((x4954*x4962))+(((-1.0)*r11*sj0*x4959))+((x4965*x4970))+(((-1.0)*x4966*x4972))+(((-1.0)*r01*x4979))+(((-1.0)*r10*sj0*sj5*x4958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4981=((0.866025403784439)*cj0);
IkReal x4982=((0.866025403784439)*sj0);
CheckValue<IkReal> x4983=IKPowWithIntegerCheck(IKsign((((cj5*r00*x4982))+(((-1.0)*r01*sj5*x4982))+((r11*sj5*x4981))+(((-1.0)*cj5*r10*x4981))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0)))),-1);
if(!x4983.valid){
continue;
}
CheckValue<IkReal> x4984 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4983.value)))+(x4984.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4985=IKsin(j4);
IkReal x4986=((0.866025403784439)*r22);
IkReal x4987=((0.5)*r20);
IkReal x4988=(cj5*x4985);
IkReal x4989=IKcos(j4);
IkReal x4990=((1.0)*cj5*x4989);
IkReal x4991=(r20*sj5);
IkReal x4992=((0.5)*r21*sj5);
IkReal x4993=((0.866025403784439)*cj0*r02);
IkReal x4994=((0.866025403784439)*r12*sj0);
IkReal x4995=(cj0*cj5*x4985);
IkReal x4996=(cj0*sj5*x4985);
IkReal x4997=(cj5*sj0*x4985);
IkReal x4998=(sj0*sj5*x4985);
IkReal x4999=((0.5)*r00);
IkReal x5000=(cj0*cj5*x4989);
IkReal x5001=((0.5)*r01);
IkReal x5002=(cj0*sj5*x4989);
IkReal x5003=((0.5)*r10);
IkReal x5004=(cj5*sj0*x4989);
IkReal x5005=((0.5)*r11);
IkReal x5006=(sj0*sj5*x4989);
IkReal x5007=((0.866025403784439)*cj0*r12);
IkReal x5008=((0.866025403784439)*r02*sj0);
IkReal x5009=(r00*sj0*sj5);
IkReal x5010=((1.0)*cj0*cj5*x4989);
IkReal x5011=((1.0)*cj0*sj5*x4989);
evalcond[0]=(((x4985*x4986))+((x4985*x4992))+(((-1.0)*x4989*x4991))+(((-1.0)*x4987*x4988))+(((-1.0)*r21*x4990)));
evalcond[1]=((0.866025403784439)+((x4986*x4989))+((x4989*x4992))+((r21*x4988))+((x4985*x4991))+(((-1.0)*cj5*x4987*x4989)));
evalcond[2]=(((r10*x4998))+((r11*x4997))+((x4989*x4993))+((r00*x4996))+(((-1.0)*x5003*x5004))+((r01*x4995))+(((-1.0)*x4999*x5000))+((x5005*x5006))+((x5001*x5002))+((x4989*x4994)));
evalcond[3]=((((-1.0)*x4998*x5001))+(((-1.0)*r10*x5011))+(((-1.0)*x4995*x5003))+((x4996*x5005))+((x4997*x4999))+((r01*x5004))+(((-1.0)*x4985*x5008))+(((-1.0)*r11*x5010))+((x4989*x5009))+((x4985*x5007)));
evalcond[4]=((0.5)+(((-1.0)*r01*x4997))+(((-1.0)*x4985*x5009))+(((-1.0)*x4989*x5008))+((x4989*x5007))+(((-1.0)*x5001*x5006))+((x4999*x5004))+((r11*x4995))+((r10*x4996))+(((-1.0)*x5000*x5003))+((x5002*x5005)));
evalcond[5]=((1.0)+((x4985*x4994))+(((-1.0)*r00*x5011))+(((-1.0)*r11*sj0*x4990))+((x4985*x4993))+((x4996*x5001))+(((-1.0)*r10*sj0*sj5*x4989))+(((-1.0)*x4997*x5003))+(((-1.0)*r01*x5010))+((x4998*x5005))+(((-1.0)*x4995*x4999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5012=(r02*sj0);
IkReal x5013=(cj0*r12);
IkReal x5014=(cj0*cj5*r10);
IkReal x5015=(cj0*r11*sj5);
IkReal x5016=(cj5*r00*sj0);
IkReal x5017=(r01*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x5015))+(((1.73205080756888)*x5016))+(((-1.73205080756888)*x5017))+(((-1.0)*x5013))+(((-1.73205080756888)*x5014))+x5012);
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.866025403784439)*x5016))+(((0.5)*x5012))+(((0.866025403784439)*x5015))+(((-0.866025403784439)*x5017))+(((-0.866025403784439)*x5014))+(((-0.5)*x5013))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5018=r20*r20;
IkReal x5019=r21*r21;
IkReal x5020=r22*r22;
IkReal x5021=(cj5*r20*r22);
IkReal x5022=(r21*r22*sj5);
IkReal x5023=(cj5*r20*r21*sj5);
IkReal x5024=cj5*cj5;
IkReal x5025=(x5018*x5024);
IkReal x5026=(x5019*x5024);
j4eval[0]=((((-3.0)*x5020))+(((3.46410161513775)*x5021))+(((-3.46410161513775)*x5022))+(((-1.0)*x5019))+(((3.0)*x5025))+(((-4.0)*x5018))+(((-6.0)*x5023))+(((-3.0)*x5026)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-3.0)*x5023))+(((-1.5)*x5026))+(((-1.5)*x5020))+(((-2.0)*x5018))+(((1.73205080756888)*x5021))+(((1.5)*x5025))+(((-1.73205080756888)*x5022))+(((-0.5)*x5019))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5027=((1.73205080756888)*cj0);
IkReal x5028=((1.73205080756888)*sj0);
IkReal x5029=(((cj5*r00*x5028))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*cj5*r10*x5027))+(((-1.0)*r01*sj5*x5028))+((r11*sj5*x5027)));
j4eval[0]=x5029;
j4eval[1]=IKsign(x5029);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5030=((1.73205080756888)*cj0*cj5);
IkReal x5031=((1.73205080756888)*cj0*sj5);
IkReal x5032=((1.73205080756888)*cj5*sj0);
IkReal x5033=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x5034=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5033))+((r00*x5032))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r10*x5030))+((r11*x5031)))),-1);
if(!x5034.valid){
continue;
}
CheckValue<IkReal> x5035 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r01))*((cj0*sj5))))+(((-0.866025403784439)*cj5*r10*sj0))+(((0.866025403784439)*r11*sj0*sj5))+(((-0.866025403784439)*cj0*cj5*r00))+(((1.5)*cj0*r02))+(((1.5)*r12*sj0)))),IkReal(((((-1.0)*r00*x5031))+(((-1.0)*r01*x5030))+(((-1.0)*r11*x5032))+(((-1.0)*r10*x5033)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5034.value)))+(x5035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5036=IKsin(j4);
IkReal x5037=((0.866025403784439)*r22);
IkReal x5038=((0.5)*r20);
IkReal x5039=(cj5*x5036);
IkReal x5040=IKcos(j4);
IkReal x5041=((1.0)*cj5*x5040);
IkReal x5042=(r20*sj5);
IkReal x5043=((0.5)*r21*sj5);
IkReal x5044=((0.866025403784439)*cj0*r02);
IkReal x5045=((0.866025403784439)*r12*sj0);
IkReal x5046=(cj0*cj5*x5036);
IkReal x5047=(cj0*sj5*x5036);
IkReal x5048=(cj5*sj0*x5036);
IkReal x5049=(sj0*sj5*x5036);
IkReal x5050=((0.5)*r00);
IkReal x5051=(cj0*cj5*x5040);
IkReal x5052=((0.5)*r01);
IkReal x5053=(cj0*sj5*x5040);
IkReal x5054=((0.5)*r10);
IkReal x5055=(cj5*sj0*x5040);
IkReal x5056=((0.5)*r11);
IkReal x5057=(sj0*sj5*x5040);
IkReal x5058=((0.866025403784439)*cj0*r12);
IkReal x5059=((0.866025403784439)*r02*sj0);
IkReal x5060=(r00*sj0*sj5);
IkReal x5061=((1.0)*cj0*cj5*x5040);
IkReal x5062=((1.0)*cj0*sj5*x5040);
evalcond[0]=(((x5036*x5037))+(((-1.0)*r21*x5041))+(((-1.0)*x5038*x5039))+((x5036*x5043))+(((-1.0)*x5040*x5042)));
evalcond[1]=((0.866025403784439)+((x5040*x5043))+((x5036*x5042))+((x5037*x5040))+(((-1.0)*cj5*x5038*x5040))+((r21*x5039)));
evalcond[2]=(((x5052*x5053))+((x5040*x5045))+((r01*x5046))+(((-1.0)*x5050*x5051))+((r10*x5049))+((x5056*x5057))+((r00*x5047))+((r11*x5048))+(((-1.0)*x5054*x5055))+((x5040*x5044)));
evalcond[3]=((((-1.0)*r11*x5061))+(((-1.0)*x5036*x5059))+((x5036*x5058))+(((-1.0)*x5046*x5054))+((r01*x5055))+(((-1.0)*x5049*x5052))+((x5047*x5056))+((x5048*x5050))+(((-1.0)*r10*x5062))+((x5040*x5060)));
evalcond[4]=((-0.5)+((r11*x5046))+(((-1.0)*x5040*x5059))+(((-1.0)*r01*x5048))+((x5050*x5055))+(((-1.0)*x5052*x5057))+((r10*x5047))+(((-1.0)*x5036*x5060))+((x5040*x5058))+((x5053*x5056))+(((-1.0)*x5051*x5054)));
evalcond[5]=((-1.0)+(((-1.0)*r10*sj0*sj5*x5040))+((x5047*x5052))+(((-1.0)*x5048*x5054))+(((-1.0)*r00*x5062))+((x5036*x5045))+(((-1.0)*x5046*x5050))+(((-1.0)*r01*x5061))+((x5036*x5044))+(((-1.0)*r11*sj0*x5041))+((x5049*x5056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5063=((1.73205080756888)*r21);
IkReal x5064=(cj5*r20);
IkReal x5065=(r21*sj5);
IkReal x5066=r20*r20;
IkReal x5067=r21*r21;
IkReal x5068=((1.5)*(cj5*cj5));
CheckValue<IkReal> x5069 = IKatan2WithCheck(IkReal(((((1.73205080756888)*r20*sj5))+((cj5*x5063)))),IkReal(((((-0.866025403784439)*x5064))+(((1.5)*r22))+(((0.866025403784439)*x5065)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5069.valid){
continue;
}
CheckValue<IkReal> x5070=IKPowWithIntegerCheck(IKsign(((((-0.5)*x5067))+(((-3.0)*cj5*r20*x5065))+(((-1.0)*x5067*x5068))+((x5066*x5068))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*r22*sj5*x5063))+(((-2.0)*x5066))+(((1.73205080756888)*r22*x5064)))),-1);
if(!x5070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5069.value)+(((1.5707963267949)*(x5070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5071=IKsin(j4);
IkReal x5072=((0.866025403784439)*r22);
IkReal x5073=((0.5)*r20);
IkReal x5074=(cj5*x5071);
IkReal x5075=IKcos(j4);
IkReal x5076=((1.0)*cj5*x5075);
IkReal x5077=(r20*sj5);
IkReal x5078=((0.5)*r21*sj5);
IkReal x5079=((0.866025403784439)*cj0*r02);
IkReal x5080=((0.866025403784439)*r12*sj0);
IkReal x5081=(cj0*cj5*x5071);
IkReal x5082=(cj0*sj5*x5071);
IkReal x5083=(cj5*sj0*x5071);
IkReal x5084=(sj0*sj5*x5071);
IkReal x5085=((0.5)*r00);
IkReal x5086=(cj0*cj5*x5075);
IkReal x5087=((0.5)*r01);
IkReal x5088=(cj0*sj5*x5075);
IkReal x5089=((0.5)*r10);
IkReal x5090=(cj5*sj0*x5075);
IkReal x5091=((0.5)*r11);
IkReal x5092=(sj0*sj5*x5075);
IkReal x5093=((0.866025403784439)*cj0*r12);
IkReal x5094=((0.866025403784439)*r02*sj0);
IkReal x5095=(r00*sj0*sj5);
IkReal x5096=((1.0)*cj0*cj5*x5075);
IkReal x5097=((1.0)*cj0*sj5*x5075);
evalcond[0]=((((-1.0)*x5073*x5074))+(((-1.0)*x5075*x5077))+((x5071*x5072))+(((-1.0)*r21*x5076))+((x5071*x5078)));
evalcond[1]=((0.866025403784439)+((x5072*x5075))+(((-1.0)*cj5*x5073*x5075))+((x5071*x5077))+((r21*x5074))+((x5075*x5078)));
evalcond[2]=((((-1.0)*x5089*x5090))+((r11*x5083))+((x5087*x5088))+((r00*x5082))+((x5075*x5080))+((x5075*x5079))+((x5091*x5092))+(((-1.0)*x5085*x5086))+((r10*x5084))+((r01*x5081)));
evalcond[3]=((((-1.0)*x5084*x5087))+((x5083*x5085))+(((-1.0)*x5081*x5089))+((r01*x5090))+((x5071*x5093))+(((-1.0)*r11*x5096))+((x5075*x5095))+(((-1.0)*x5071*x5094))+(((-1.0)*r10*x5097))+((x5082*x5091)));
evalcond[4]=((-0.5)+((x5075*x5093))+((r10*x5082))+(((-1.0)*x5087*x5092))+((r11*x5081))+(((-1.0)*x5071*x5095))+(((-1.0)*x5075*x5094))+(((-1.0)*x5086*x5089))+(((-1.0)*r01*x5083))+((x5085*x5090))+((x5088*x5091)));
evalcond[5]=((-1.0)+(((-1.0)*x5081*x5085))+((x5071*x5079))+((x5071*x5080))+(((-1.0)*x5083*x5089))+(((-1.0)*r10*sj0*sj5*x5075))+((x5082*x5087))+(((-1.0)*r11*sj0*x5076))+(((-1.0)*r00*x5097))+(((-1.0)*r01*x5096))+((x5084*x5091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5098=((0.866025403784439)*cj0);
IkReal x5099=((0.866025403784439)*sj0);
CheckValue<IkReal> x5100 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5100.valid){
continue;
}
CheckValue<IkReal> x5101=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x5099))+(((-1.0)*cj5*r10*x5098))+((cj5*r00*x5099))+(((-1.0)*(0.5)*cj0*r12))+((r11*sj5*x5098))+(((0.5)*r02*sj0)))),-1);
if(!x5101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5100.value)+(((1.5707963267949)*(x5101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5102=IKsin(j4);
IkReal x5103=((0.866025403784439)*r22);
IkReal x5104=((0.5)*r20);
IkReal x5105=(cj5*x5102);
IkReal x5106=IKcos(j4);
IkReal x5107=((1.0)*cj5*x5106);
IkReal x5108=(r20*sj5);
IkReal x5109=((0.5)*r21*sj5);
IkReal x5110=((0.866025403784439)*cj0*r02);
IkReal x5111=((0.866025403784439)*r12*sj0);
IkReal x5112=(cj0*cj5*x5102);
IkReal x5113=(cj0*sj5*x5102);
IkReal x5114=(cj5*sj0*x5102);
IkReal x5115=(sj0*sj5*x5102);
IkReal x5116=((0.5)*r00);
IkReal x5117=(cj0*cj5*x5106);
IkReal x5118=((0.5)*r01);
IkReal x5119=(cj0*sj5*x5106);
IkReal x5120=((0.5)*r10);
IkReal x5121=(cj5*sj0*x5106);
IkReal x5122=((0.5)*r11);
IkReal x5123=(sj0*sj5*x5106);
IkReal x5124=((0.866025403784439)*cj0*r12);
IkReal x5125=((0.866025403784439)*r02*sj0);
IkReal x5126=(r00*sj0*sj5);
IkReal x5127=((1.0)*cj0*cj5*x5106);
IkReal x5128=((1.0)*cj0*sj5*x5106);
evalcond[0]=(((x5102*x5103))+((x5102*x5109))+(((-1.0)*x5104*x5105))+(((-1.0)*x5106*x5108))+(((-1.0)*r21*x5107)));
evalcond[1]=((0.866025403784439)+((r21*x5105))+((x5106*x5109))+(((-1.0)*cj5*x5104*x5106))+((x5103*x5106))+((x5102*x5108)));
evalcond[2]=(((x5106*x5110))+((x5106*x5111))+((r11*x5114))+((r10*x5115))+((r00*x5113))+(((-1.0)*x5120*x5121))+((r01*x5112))+((x5122*x5123))+((x5118*x5119))+(((-1.0)*x5116*x5117)));
evalcond[3]=(((x5113*x5122))+(((-1.0)*x5112*x5120))+((x5114*x5116))+(((-1.0)*r11*x5127))+(((-1.0)*x5102*x5125))+(((-1.0)*x5115*x5118))+((x5106*x5126))+((r01*x5121))+(((-1.0)*r10*x5128))+((x5102*x5124)));
evalcond[4]=((-0.5)+(((-1.0)*x5117*x5120))+(((-1.0)*r01*x5114))+((x5106*x5124))+((x5116*x5121))+((x5119*x5122))+((r11*x5112))+(((-1.0)*x5106*x5125))+((r10*x5113))+(((-1.0)*x5118*x5123))+(((-1.0)*x5102*x5126)));
evalcond[5]=((-1.0)+(((-1.0)*r11*sj0*x5107))+((x5115*x5122))+(((-1.0)*x5114*x5120))+((x5102*x5111))+((x5102*x5110))+(((-1.0)*r01*x5127))+(((-1.0)*r10*sj0*sj5*x5106))+((x5113*x5118))+(((-1.0)*r00*x5128))+(((-1.0)*x5112*x5116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5129=(cj5*sj3);
IkReal x5130=(sj3*sj5);
IkReal x5131=((0.5)*r21);
IkReal x5132=((2.0)*r20);
IkReal x5133=(cj0*r00);
IkReal x5134=(cj0*r01);
IkReal x5135=((1.5)*r22);
IkReal x5136=(r10*sj0);
IkReal x5137=(r11*sj0);
IkReal x5138=((0.866025403784439)*cj5*r22);
IkReal x5139=(cj5*r20);
IkReal x5140=((0.866025403784439)*cj0*r02);
IkReal x5141=((0.866025403784439)*r22*sj5);
IkReal x5142=(r21*sj5);
IkReal x5143=((0.866025403784439)*r12*sj0);
IkReal x5144=((1.5)*cj5*r21*sj5);
IkReal x5145=((1.5)*cj5*r20*sj5);
IkReal x5146=cj5*cj5;
IkReal x5147=((1.5)*r20*x5146);
IkReal x5148=((1.5)*r21*x5146);
CheckValue<IkReal> x5149 = IKatan2WithCheck(IkReal((((r21*x5129))+((r20*x5130)))),IkReal((((sj3*(((0.866025403784439)*r22))))+(((-0.5)*r20*x5129))+((x5130*x5131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5149.valid){
continue;
}
CheckValue<IkReal> x5150=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5131*x5137))+(((-1.0)*x5132*x5136))+(((-1.0)*x5140*x5142))+(((-1.0)*x5131*x5134))+((x5133*x5147))+(((-1.0)*x5134*x5141))+(((-1.0)*x5136*x5144))+(((-1.0)*x5132*x5133))+(((-1.0)*cj0*r02*x5135))+(((-1.0)*x5142*x5143))+((x5139*x5143))+(((-1.0)*x5137*x5148))+(((-1.0)*x5134*x5148))+((x5133*x5138))+(((-1.0)*x5137*x5145))+((x5136*x5138))+(((-1.0)*r12*sj0*x5135))+(((-1.0)*x5133*x5144))+((x5139*x5140))+((x5136*x5147))+(((-1.0)*x5134*x5145))+(((-1.0)*x5137*x5141)))),-1);
if(!x5150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5149.value)+(((1.5707963267949)*(x5150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5151=IKsin(j4);
IkReal x5152=((0.866025403784439)*r22);
IkReal x5153=((0.5)*r20);
IkReal x5154=(cj5*x5151);
IkReal x5155=IKcos(j4);
IkReal x5156=((1.0)*cj5*x5155);
IkReal x5157=(r20*sj5);
IkReal x5158=((0.5)*r21*sj5);
IkReal x5159=((0.866025403784439)*cj0*r02);
IkReal x5160=((0.866025403784439)*r12*sj0);
IkReal x5161=(cj0*cj5*x5151);
IkReal x5162=(cj0*sj5*x5151);
IkReal x5163=(cj5*sj0*x5151);
IkReal x5164=(sj0*sj5*x5151);
IkReal x5165=((0.5)*r00);
IkReal x5166=(cj0*cj5*x5155);
IkReal x5167=((0.5)*r01);
IkReal x5168=(cj0*sj5*x5155);
IkReal x5169=((0.5)*r10);
IkReal x5170=(cj5*sj0*x5155);
IkReal x5171=((0.5)*r11);
IkReal x5172=(sj0*sj5*x5155);
IkReal x5173=((0.866025403784439)*cj0*r12);
IkReal x5174=((0.866025403784439)*r02*sj0);
IkReal x5175=(r00*sj0*sj5);
IkReal x5176=((1.0)*cj0*cj5*x5155);
IkReal x5177=((1.0)*cj0*sj5*x5155);
evalcond[0]=((((-1.0)*x5155*x5157))+((x5151*x5158))+(((-1.0)*r21*x5156))+(((-1.0)*x5153*x5154))+((x5151*x5152)));
evalcond[1]=((0.866025403784439)+((x5151*x5157))+((x5155*x5158))+((r21*x5154))+((x5152*x5155))+(((-1.0)*cj5*x5153*x5155)));
evalcond[2]=((((-1.0)*x5169*x5170))+(((-1.0)*x5165*x5166))+((r11*x5163))+((x5155*x5160))+((r00*x5162))+((x5171*x5172))+(((0.5)*sj3))+((x5155*x5159))+((r10*x5164))+((x5167*x5168))+((r01*x5161)));
evalcond[3]=(((r11*x5161))+(((-1.0)*r01*x5163))+((x5168*x5171))+((x5165*x5170))+((x5155*x5173))+(((-1.0)*x5151*x5175))+((r10*x5162))+(((-1.0)*x5155*x5174))+(((-1.0)*x5167*x5172))+(((-1.0)*x5166*x5169))+(((0.5)*cj3)));
evalcond[4]=(((x5151*x5173))+((r01*x5170))+(((-1.0)*r11*x5176))+(((-1.0)*x5151*x5174))+(((-1.0)*r10*x5177))+((x5163*x5165))+(((-1.0)*(1.0)*sj3))+((x5155*x5175))+((x5162*x5171))+(((-1.0)*x5161*x5169))+(((-1.0)*x5164*x5167)));
evalcond[5]=(((x5151*x5159))+((x5151*x5160))+((x5164*x5171))+cj3+(((-1.0)*r10*sj0*sj5*x5155))+(((-1.0)*x5163*x5169))+(((-1.0)*r01*x5176))+(((-1.0)*r00*x5177))+((x5162*x5167))+(((-1.0)*r11*sj0*x5156))+(((-1.0)*x5161*x5165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5178=((1.73205080756888)*r21);
IkReal x5179=(cj5*r20);
IkReal x5180=(r21*sj5);
IkReal x5181=r20*r20;
IkReal x5182=r21*r21;
IkReal x5183=((1.5)*(cj5*cj5));
CheckValue<IkReal> x5184=IKPowWithIntegerCheck(IKsign(((((-3.0)*cj5*r20*x5180))+(((1.73205080756888)*r22*x5179))+(((-1.0)*x5182*x5183))+(((-2.0)*x5181))+((x5181*x5183))+(((-0.5)*x5182))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*r22*sj5*x5178)))),-1);
if(!x5184.valid){
continue;
}
CheckValue<IkReal> x5185 = IKatan2WithCheck(IkReal((((cj5*x5178))+(((1.73205080756888)*r20*sj5)))),IkReal(((((-0.866025403784439)*x5179))+(((1.5)*r22))+(((0.866025403784439)*x5180)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5184.value)))+(x5185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5186=IKsin(j4);
IkReal x5187=((0.866025403784439)*r22);
IkReal x5188=((0.5)*r20);
IkReal x5189=(cj5*x5186);
IkReal x5190=IKcos(j4);
IkReal x5191=((1.0)*cj5*x5190);
IkReal x5192=(r20*sj5);
IkReal x5193=((0.5)*r21*sj5);
IkReal x5194=((0.866025403784439)*cj0*r02);
IkReal x5195=((0.866025403784439)*r12*sj0);
IkReal x5196=(cj0*cj5*x5186);
IkReal x5197=(cj0*sj5*x5186);
IkReal x5198=(cj5*sj0*x5186);
IkReal x5199=(sj0*sj5*x5186);
IkReal x5200=((0.5)*r00);
IkReal x5201=(cj0*cj5*x5190);
IkReal x5202=((0.5)*r01);
IkReal x5203=(cj0*sj5*x5190);
IkReal x5204=((0.5)*r10);
IkReal x5205=(cj5*sj0*x5190);
IkReal x5206=((0.5)*r11);
IkReal x5207=(sj0*sj5*x5190);
IkReal x5208=((0.866025403784439)*cj0*r12);
IkReal x5209=((0.866025403784439)*r02*sj0);
IkReal x5210=(r00*sj0*sj5);
IkReal x5211=((1.0)*cj0*cj5*x5190);
IkReal x5212=((1.0)*cj0*sj5*x5190);
evalcond[0]=((((-1.0)*r21*x5191))+(((-1.0)*x5190*x5192))+((x5186*x5187))+(((-1.0)*x5188*x5189))+((x5186*x5193)));
evalcond[1]=((0.866025403784439)+((x5186*x5192))+((x5187*x5190))+((r21*x5189))+((x5190*x5193))+(((-1.0)*cj5*x5188*x5190)));
evalcond[2]=((((0.5)*sj3))+((x5202*x5203))+((r00*x5197))+(((-1.0)*x5204*x5205))+((x5190*x5195))+((x5190*x5194))+((r10*x5199))+((x5206*x5207))+(((-1.0)*x5200*x5201))+((r01*x5196))+((r11*x5198)));
evalcond[3]=(((x5203*x5206))+((x5200*x5205))+(((-1.0)*x5190*x5209))+((r11*x5196))+((x5190*x5208))+(((-1.0)*r01*x5198))+(((-1.0)*x5186*x5210))+((r10*x5197))+(((0.5)*cj3))+(((-1.0)*x5202*x5207))+(((-1.0)*x5201*x5204)));
evalcond[4]=(((x5186*x5208))+((x5197*x5206))+(((-1.0)*x5196*x5204))+((r01*x5205))+((x5190*x5210))+(((-1.0)*x5186*x5209))+((x5198*x5200))+(((-1.0)*x5199*x5202))+(((-1.0)*r10*x5212))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r11*x5211)));
evalcond[5]=((((-1.0)*x5198*x5204))+(((-1.0)*r01*x5211))+cj3+((x5199*x5206))+((x5186*x5195))+((x5197*x5202))+(((-1.0)*r11*sj0*x5191))+((x5186*x5194))+(((-1.0)*r10*sj0*sj5*x5190))+(((-1.0)*r00*x5212))+(((-1.0)*x5196*x5200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5213=(cj5*sj3);
IkReal x5214=(sj3*sj5);
IkReal x5215=((0.866025403784439)*cj0);
IkReal x5216=((0.866025403784439)*sj0);
CheckValue<IkReal> x5217 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5213))+(((-1.0)*r20*x5214)))),IkReal(((((-0.5)*r21*x5214))+(((-1.0)*(0.866025403784439)*r22*sj3))+(((0.5)*r20*x5213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5217.valid){
continue;
}
CheckValue<IkReal> x5218=IKPowWithIntegerCheck(IKsign((((cj5*r00*x5215))+(((-1.0)*r01*sj5*x5215))+((cj5*r10*x5216))+(((0.5)*r12*sj0))+(((-1.0)*r11*sj5*x5216))+(((0.5)*cj0*r02)))),-1);
if(!x5218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5217.value)+(((1.5707963267949)*(x5218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5219=IKsin(j4);
IkReal x5220=((0.866025403784439)*r22);
IkReal x5221=((0.5)*r20);
IkReal x5222=(cj5*x5219);
IkReal x5223=IKcos(j4);
IkReal x5224=((1.0)*cj5*x5223);
IkReal x5225=(r20*sj5);
IkReal x5226=((0.5)*r21*sj5);
IkReal x5227=((0.866025403784439)*cj0*r02);
IkReal x5228=((0.866025403784439)*r12*sj0);
IkReal x5229=(cj0*cj5*x5219);
IkReal x5230=(cj0*sj5*x5219);
IkReal x5231=(cj5*sj0*x5219);
IkReal x5232=(sj0*sj5*x5219);
IkReal x5233=((0.5)*r00);
IkReal x5234=(cj0*cj5*x5223);
IkReal x5235=((0.5)*r01);
IkReal x5236=(cj0*sj5*x5223);
IkReal x5237=((0.5)*r10);
IkReal x5238=(cj5*sj0*x5223);
IkReal x5239=((0.5)*r11);
IkReal x5240=(sj0*sj5*x5223);
IkReal x5241=((0.866025403784439)*cj0*r12);
IkReal x5242=((0.866025403784439)*r02*sj0);
IkReal x5243=(r00*sj0*sj5);
IkReal x5244=((1.0)*cj0*cj5*x5223);
IkReal x5245=((1.0)*cj0*sj5*x5223);
evalcond[0]=((((-1.0)*r21*x5224))+((x5219*x5226))+((x5219*x5220))+(((-1.0)*x5221*x5222))+(((-1.0)*x5223*x5225)));
evalcond[1]=((0.866025403784439)+((x5223*x5226))+((r21*x5222))+((x5219*x5225))+(((-1.0)*cj5*x5221*x5223))+((x5220*x5223)));
evalcond[2]=((((-1.0)*x5237*x5238))+(((-1.0)*x5233*x5234))+((x5223*x5227))+((x5235*x5236))+(((0.5)*sj3))+((r11*x5231))+((x5223*x5228))+((r10*x5232))+((r01*x5229))+((r00*x5230))+((x5239*x5240)));
evalcond[3]=((((-1.0)*x5219*x5243))+((x5233*x5238))+(((-1.0)*r01*x5231))+((r11*x5229))+(((-1.0)*x5234*x5237))+((x5223*x5241))+(((-1.0)*x5235*x5240))+(((-1.0)*x5223*x5242))+(((0.5)*cj3))+((r10*x5230))+((x5236*x5239)));
evalcond[4]=(((x5230*x5239))+(((-1.0)*x5232*x5235))+((x5231*x5233))+(((-1.0)*r10*x5245))+((x5223*x5243))+((x5219*x5241))+(((-1.0)*x5229*x5237))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r11*x5244))+((r01*x5238))+(((-1.0)*x5219*x5242)));
evalcond[5]=((((-1.0)*r00*x5245))+(((-1.0)*x5231*x5237))+((x5219*x5227))+(((-1.0)*r11*sj0*x5224))+(((-1.0)*x5229*x5233))+(((-1.0)*r01*x5244))+((x5232*x5239))+cj3+(((-1.0)*r10*sj0*sj5*x5223))+((x5219*x5228))+((x5230*x5235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5246=((0.577350269189626)*cj0);
IkReal x5247=((0.577350269189626)*sj0);
IkReal x5248=(r01*sj5);
IkReal x5249=(r11*sj5);
IkReal x5250=((1.0)*r00);
IkReal x5251=(cj0*cj5);
IkReal x5252=(cj5*sj0);
if( IKabs(((((-1.0)*x5250*x5251))+(((-1.0)*r12*x5247))+(((-1.0)*r02*x5246))+(((-1.0)*r10*x5252))+((sj0*x5249))+((cj0*x5248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x5249))+((sj0*x5248))+(((-1.0)*x5250*x5252))+((r10*x5251))+((r12*x5246))+(((-1.0)*r02*x5247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5250*x5251))+(((-1.0)*r12*x5247))+(((-1.0)*r02*x5246))+(((-1.0)*r10*x5252))+((sj0*x5249))+((cj0*x5248))))+IKsqr(((((-1.0)*cj0*x5249))+((sj0*x5248))+(((-1.0)*x5250*x5252))+((r10*x5251))+((r12*x5246))+(((-1.0)*r02*x5247))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x5250*x5251))+(((-1.0)*r12*x5247))+(((-1.0)*r02*x5246))+(((-1.0)*r10*x5252))+((sj0*x5249))+((cj0*x5248))), ((((-1.0)*cj0*x5249))+((sj0*x5248))+(((-1.0)*x5250*x5252))+((r10*x5251))+((r12*x5246))+(((-1.0)*r02*x5247))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x5253=((0.5)*cj0);
IkReal x5254=((0.5)*sj0);
IkReal x5255=((0.866025403784439)*cj0*cj5);
IkReal x5256=((0.866025403784439)*cj0*sj5);
IkReal x5257=((0.866025403784439)*cj5*sj0);
IkReal x5258=((0.866025403784439)*sj0*sj5);
evalcond[0]=((((-1.0)*r12*x5253))+((r11*x5256))+(((-1.0)*r10*x5255))+(((-1.0)*r01*x5258))+((r02*x5254))+(((0.866025403784439)*(IKcos(j3))))+((r00*x5257)));
evalcond[1]=((((-1.0)*r10*x5257))+((r01*x5256))+(((-1.0)*(0.866025403784439)*(IKsin(j3))))+(((-1.0)*r00*x5255))+(((-1.0)*r02*x5253))+(((-1.0)*r12*x5254))+((r11*x5258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5259=(cj0*r02);
IkReal x5260=(r12*sj0);
IkReal x5261=(cj0*cj5*r00);
IkReal x5262=(cj0*r01*sj5);
IkReal x5263=(cj5*r10*sj0);
IkReal x5264=(r11*sj0*sj5);
IkReal x5265=(cj5*sj3);
IkReal x5266=(sj3*sj5);
j4eval[0]=((((1.73205080756888)*x5263))+(((-1.73205080756888)*x5264))+x5260+x5259+(((1.73205080756888)*x5261))+(((-1.73205080756888)*x5262)));
j4eval[1]=((IKabs((((r20*x5266))+((r21*x5265)))))+(((0.5)*(IKabs((((r20*x5265))+(((-1.0)*(1.73205080756888)*r22*sj3))+(((-1.0)*r21*x5266))))))));
j4eval[2]=IKsign(((((0.5)*x5259))+(((0.866025403784439)*x5261))+(((-0.866025403784439)*x5262))+(((0.5)*x5260))+(((-0.866025403784439)*x5264))+(((0.866025403784439)*x5263))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5267=r20*r20;
IkReal x5268=r21*r21;
IkReal x5269=r22*r22;
IkReal x5270=(cj5*r20*r22);
IkReal x5271=(r21*r22*sj5);
IkReal x5272=(cj5*r20*r21*sj5);
IkReal x5273=cj5*cj5;
IkReal x5274=(x5267*x5273);
IkReal x5275=(x5268*x5273);
j4eval[0]=((((-4.0)*x5267))+(((-1.0)*x5268))+(((3.0)*x5274))+(((3.46410161513775)*x5270))+(((-6.0)*x5272))+(((-3.0)*x5275))+(((-3.46410161513775)*x5271))+(((-3.0)*x5269)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((1.73205080756888)*x5270))+(((-1.5)*x5275))+(((-0.5)*x5268))+(((-3.0)*x5272))+(((-1.5)*x5269))+(((-2.0)*x5267))+(((1.5)*x5274))+(((-1.73205080756888)*x5271))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5276=(r01*r21*sj0);
IkReal x5277=(cj0*r10*r20);
IkReal x5278=(cj0*r11*r21);
IkReal x5279=(cj0*r12*r22);
IkReal x5280=(r00*r20*sj0);
IkReal x5281=(r02*r22*sj0);
IkReal x5282=((1.73205080756888)*r22);
IkReal x5283=(cj0*cj5*r10);
IkReal x5284=(cj0*cj5*r12*r20);
IkReal x5285=(cj0*r11*sj5);
IkReal x5286=(cj0*r12*r21*sj5);
IkReal x5287=(cj5*r00*sj0);
IkReal x5288=(cj5*r02*r20*sj0);
IkReal x5289=(r01*sj0*sj5);
IkReal x5290=(r02*r21*sj0*sj5);
IkReal x5291=(cj0*cj5*r10*r21*sj5);
IkReal x5292=(cj0*cj5*r11*r20*sj5);
IkReal x5293=(cj5*r00*r21*sj0*sj5);
IkReal x5294=(cj5*r01*r20*sj0*sj5);
IkReal x5295=cj5*cj5;
IkReal x5296=(cj0*r10*r20*x5295);
IkReal x5297=(cj0*r11*r21*x5295);
IkReal x5298=(r00*r20*sj0*x5295);
IkReal x5299=(r01*r21*sj0*x5295);
IkReal x5300=((0.866025403784439)*r22);
IkReal x5301=(cj3*r21);
IkReal x5302=(cj3*r20);
j4eval[0]=((((4.0)*x5280))+(((-1.0)*x5278))+(((-3.0)*x5297))+((x5282*x5289))+(((-1.73205080756888)*x5286))+(((1.73205080756888)*x5284))+(((3.0)*x5299))+(((-3.0)*x5279))+(((-1.73205080756888)*x5288))+(((-1.0)*x5282*x5285))+(((3.0)*x5296))+(((1.73205080756888)*x5290))+(((-3.0)*x5298))+x5276+(((-1.0)*x5282*x5287))+(((-4.0)*x5277))+(((-3.0)*x5291))+(((3.0)*x5293))+(((3.0)*x5294))+(((-3.0)*x5292))+((x5282*x5283))+(((3.0)*x5281)));
j4eval[1]=IKsign(((((-0.866025403784439)*x5288))+(((-1.0)*x5285*x5300))+(((1.5)*x5293))+(((1.5)*x5296))+(((0.5)*x5276))+((x5283*x5300))+(((-0.5)*x5278))+((x5289*x5300))+(((-1.5)*x5298))+(((1.5)*x5281))+(((1.5)*x5299))+(((-1.5)*x5297))+(((2.0)*x5280))+(((-1.0)*x5287*x5300))+(((0.866025403784439)*x5290))+(((-1.5)*x5292))+(((-1.5)*x5291))+(((-0.866025403784439)*x5286))+(((-1.5)*x5279))+(((-2.0)*x5277))+(((1.5)*x5294))+(((0.866025403784439)*x5284))));
j4eval[2]=((((0.5)*(IKabs((((cj3*x5282))+((sj5*x5301))+(((-1.0)*cj5*x5302)))))))+(IKabs((((cj5*x5301))+((sj5*x5302))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5303=(cj0*r02);
IkReal x5304=(r12*sj0);
IkReal x5305=(cj0*cj5*r00);
IkReal x5306=(cj0*r01*sj5);
IkReal x5307=(cj5*r10*sj0);
IkReal x5308=(r11*sj0*sj5);
j4eval[0]=((((-1.73205080756888)*x5308))+x5304+x5303+(((-1.73205080756888)*x5306))+(((1.73205080756888)*x5307))+(((1.73205080756888)*x5305)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((-0.866025403784439)*x5308))+(((0.866025403784439)*x5305))+(((0.866025403784439)*x5307))+(((0.5)*x5304))+(((-0.866025403784439)*x5306))+(((0.5)*x5303))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5309=r20*r20;
IkReal x5310=r21*r21;
IkReal x5311=r22*r22;
IkReal x5312=(cj5*r20*r22);
IkReal x5313=(r21*r22*sj5);
IkReal x5314=(cj5*r20*r21*sj5);
IkReal x5315=cj5*cj5;
IkReal x5316=(x5309*x5315);
IkReal x5317=(x5310*x5315);
j4eval[0]=((((-6.0)*x5314))+(((-4.0)*x5309))+(((-3.0)*x5317))+(((3.0)*x5316))+(((-1.0)*x5310))+(((-3.46410161513775)*x5313))+(((3.46410161513775)*x5312))+(((-3.0)*x5311)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-0.5)*x5310))+(((-1.5)*x5317))+(((1.5)*x5316))+(((1.73205080756888)*x5312))+(((-3.0)*x5314))+(((-2.0)*x5309))+(((-1.5)*x5311))+(((-1.73205080756888)*x5313))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5318=((1.73205080756888)*cj0);
IkReal x5319=((1.73205080756888)*sj0);
IkReal x5320=((((-1.0)*cj5*r10*x5318))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*sj5*x5319))+((cj5*r00*x5319))+((r11*sj5*x5318)));
j4eval[0]=x5320;
j4eval[1]=IKsign(x5320);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5321=((1.73205080756888)*cj0*cj5);
IkReal x5322=((1.73205080756888)*cj0*sj5);
IkReal x5323=((1.73205080756888)*cj5*sj0);
IkReal x5324=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x5325 = IKatan2WithCheck(IkReal(((((-1.0)*(0.5)*cj5*r20))+(((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((0.866025403784439)*r22))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5))+(((0.5)*r21*sj5)))),IkReal((((r11*x5323))+(((-1.0)*(1.0)*r20*sj5))+((r10*x5324))+(((-1.0)*(1.0)*cj5*r21))+((r01*x5321))+((r00*x5322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5325.valid){
continue;
}
CheckValue<IkReal> x5326=IKPowWithIntegerCheck(IKsign((((r11*x5322))+(((-1.0)*r01*x5324))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r10*x5321))+((r00*x5323)))),-1);
if(!x5326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5325.value)+(((1.5707963267949)*(x5326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5327=IKsin(j4);
IkReal x5328=((0.866025403784439)*r22);
IkReal x5329=((0.5)*r20);
IkReal x5330=(cj5*x5327);
IkReal x5331=IKcos(j4);
IkReal x5332=((1.0)*cj5*x5331);
IkReal x5333=(r20*sj5);
IkReal x5334=((0.5)*r21*sj5);
IkReal x5335=((0.866025403784439)*cj0*r02);
IkReal x5336=((0.866025403784439)*r12*sj0);
IkReal x5337=(cj0*cj5*x5327);
IkReal x5338=(cj0*sj5*x5327);
IkReal x5339=(cj5*sj0*x5327);
IkReal x5340=(sj0*sj5*x5327);
IkReal x5341=((0.5)*r00);
IkReal x5342=(cj0*cj5*x5331);
IkReal x5343=((0.5)*r01);
IkReal x5344=(cj0*sj5*x5331);
IkReal x5345=((0.5)*r10);
IkReal x5346=(cj5*sj0*x5331);
IkReal x5347=((0.5)*r11);
IkReal x5348=(sj0*sj5*x5331);
IkReal x5349=((0.866025403784439)*cj0*r12);
IkReal x5350=((0.866025403784439)*r02*sj0);
IkReal x5351=(r00*sj0*sj5);
IkReal x5352=((1.0)*cj0*cj5*x5331);
IkReal x5353=((1.0)*cj0*sj5*x5331);
evalcond[0]=((((-1.0)*x5331*x5333))+(((-1.0)*x5329*x5330))+(((-1.0)*r21*x5332))+((x5327*x5328))+((x5327*x5334)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x5329*x5331))+((r21*x5330))+((x5327*x5333))+((x5331*x5334))+((x5328*x5331)));
evalcond[2]=((-0.5)+((x5331*x5335))+((x5343*x5344))+((r10*x5340))+((r00*x5338))+(((-1.0)*x5345*x5346))+((x5331*x5336))+((r01*x5337))+((x5347*x5348))+((r11*x5339))+(((-1.0)*x5341*x5342)));
evalcond[3]=((((-1.0)*x5331*x5350))+((r11*x5337))+(((-1.0)*r01*x5339))+(((-1.0)*x5343*x5348))+(((-1.0)*x5327*x5351))+((x5344*x5347))+(((-1.0)*x5342*x5345))+((x5331*x5349))+((x5341*x5346))+((r10*x5338)));
evalcond[4]=((-1.0)+((x5338*x5347))+(((-1.0)*x5327*x5350))+((x5339*x5341))+((x5331*x5351))+(((-1.0)*x5337*x5345))+(((-1.0)*r10*x5353))+(((-1.0)*x5340*x5343))+((r01*x5346))+((x5327*x5349))+(((-1.0)*r11*x5352)));
evalcond[5]=((((-1.0)*r01*x5352))+(((-1.0)*x5337*x5341))+((x5327*x5336))+((x5340*x5347))+(((-1.0)*r11*sj0*x5332))+(((-1.0)*r00*x5353))+(((-1.0)*r10*sj0*sj5*x5331))+(((-1.0)*x5339*x5345))+((x5327*x5335))+((x5338*x5343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5354=((1.73205080756888)*r21);
IkReal x5355=(cj5*r20);
IkReal x5356=(r21*sj5);
IkReal x5357=r20*r20;
IkReal x5358=r21*r21;
IkReal x5359=((1.5)*(cj5*cj5));
CheckValue<IkReal> x5360 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x5354))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*x5355))+(((-0.866025403784439)*x5356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5360.valid){
continue;
}
CheckValue<IkReal> x5361=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*sj5*x5354))+(((-3.0)*cj5*r20*x5356))+(((-2.0)*x5357))+(((-0.5)*x5358))+((x5357*x5359))+(((-1.0)*x5358*x5359))+(((-1.0)*(1.5)*(r22*r22)))+(((1.73205080756888)*r22*x5355)))),-1);
if(!x5361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5360.value)+(((1.5707963267949)*(x5361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5362=IKsin(j4);
IkReal x5363=((0.866025403784439)*r22);
IkReal x5364=((0.5)*r20);
IkReal x5365=(cj5*x5362);
IkReal x5366=IKcos(j4);
IkReal x5367=((1.0)*cj5*x5366);
IkReal x5368=(r20*sj5);
IkReal x5369=((0.5)*r21*sj5);
IkReal x5370=((0.866025403784439)*cj0*r02);
IkReal x5371=((0.866025403784439)*r12*sj0);
IkReal x5372=(cj0*cj5*x5362);
IkReal x5373=(cj0*sj5*x5362);
IkReal x5374=(cj5*sj0*x5362);
IkReal x5375=(sj0*sj5*x5362);
IkReal x5376=((0.5)*r00);
IkReal x5377=(cj0*cj5*x5366);
IkReal x5378=((0.5)*r01);
IkReal x5379=(cj0*sj5*x5366);
IkReal x5380=((0.5)*r10);
IkReal x5381=(cj5*sj0*x5366);
IkReal x5382=((0.5)*r11);
IkReal x5383=(sj0*sj5*x5366);
IkReal x5384=((0.866025403784439)*cj0*r12);
IkReal x5385=((0.866025403784439)*r02*sj0);
IkReal x5386=(r00*sj0*sj5);
IkReal x5387=((1.0)*cj0*cj5*x5366);
IkReal x5388=((1.0)*cj0*sj5*x5366);
evalcond[0]=(((x5362*x5363))+(((-1.0)*x5364*x5365))+(((-1.0)*x5366*x5368))+((x5362*x5369))+(((-1.0)*r21*x5367)));
evalcond[1]=((-0.866025403784439)+((r21*x5365))+((x5362*x5368))+((x5366*x5369))+((x5363*x5366))+(((-1.0)*cj5*x5364*x5366)));
evalcond[2]=((-0.5)+((x5382*x5383))+((x5378*x5379))+((x5366*x5370))+(((-1.0)*x5380*x5381))+((r10*x5375))+((r00*x5373))+((r11*x5374))+((x5366*x5371))+((r01*x5372))+(((-1.0)*x5376*x5377)));
evalcond[3]=(((x5376*x5381))+((r11*x5372))+(((-1.0)*x5378*x5383))+(((-1.0)*x5377*x5380))+(((-1.0)*r01*x5374))+((x5379*x5382))+((x5366*x5384))+(((-1.0)*x5366*x5385))+(((-1.0)*x5362*x5386))+((r10*x5373)));
evalcond[4]=((-1.0)+(((-1.0)*x5372*x5380))+(((-1.0)*r11*x5387))+((x5374*x5376))+(((-1.0)*x5362*x5385))+((x5373*x5382))+((x5366*x5386))+(((-1.0)*x5375*x5378))+(((-1.0)*r10*x5388))+((x5362*x5384))+((r01*x5381)));
evalcond[5]=(((x5375*x5382))+(((-1.0)*r01*x5387))+(((-1.0)*x5374*x5380))+(((-1.0)*r11*sj0*x5367))+((x5373*x5378))+(((-1.0)*x5372*x5376))+((x5362*x5370))+(((-1.0)*r10*sj0*sj5*x5366))+((x5362*x5371))+(((-1.0)*r00*x5388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5389=((0.866025403784439)*cj0);
IkReal x5390=((0.866025403784439)*sj0);
CheckValue<IkReal> x5391 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5391.valid){
continue;
}
CheckValue<IkReal> x5392=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5390))+(((-1.0)*r01*sj5*x5389))+(((0.5)*r12*sj0))+((cj5*r00*x5389))+(((-1.0)*r11*sj5*x5390))+(((0.5)*cj0*r02)))),-1);
if(!x5392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5391.value)+(((1.5707963267949)*(x5392.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5393=IKsin(j4);
IkReal x5394=((0.866025403784439)*r22);
IkReal x5395=((0.5)*r20);
IkReal x5396=(cj5*x5393);
IkReal x5397=IKcos(j4);
IkReal x5398=((1.0)*cj5*x5397);
IkReal x5399=(r20*sj5);
IkReal x5400=((0.5)*r21*sj5);
IkReal x5401=((0.866025403784439)*cj0*r02);
IkReal x5402=((0.866025403784439)*r12*sj0);
IkReal x5403=(cj0*cj5*x5393);
IkReal x5404=(cj0*sj5*x5393);
IkReal x5405=(cj5*sj0*x5393);
IkReal x5406=(sj0*sj5*x5393);
IkReal x5407=((0.5)*r00);
IkReal x5408=(cj0*cj5*x5397);
IkReal x5409=((0.5)*r01);
IkReal x5410=(cj0*sj5*x5397);
IkReal x5411=((0.5)*r10);
IkReal x5412=(cj5*sj0*x5397);
IkReal x5413=((0.5)*r11);
IkReal x5414=(sj0*sj5*x5397);
IkReal x5415=((0.866025403784439)*cj0*r12);
IkReal x5416=((0.866025403784439)*r02*sj0);
IkReal x5417=(r00*sj0*sj5);
IkReal x5418=((1.0)*cj0*cj5*x5397);
IkReal x5419=((1.0)*cj0*sj5*x5397);
evalcond[0]=((((-1.0)*x5397*x5399))+(((-1.0)*r21*x5398))+(((-1.0)*x5395*x5396))+((x5393*x5400))+((x5393*x5394)));
evalcond[1]=((-0.866025403784439)+((x5394*x5397))+(((-1.0)*cj5*x5395*x5397))+((x5397*x5400))+((x5393*x5399))+((r21*x5396)));
evalcond[2]=((-0.5)+((r10*x5406))+((x5397*x5401))+(((-1.0)*x5407*x5408))+((x5397*x5402))+((x5413*x5414))+((r11*x5405))+((r00*x5404))+(((-1.0)*x5411*x5412))+((r01*x5403))+((x5409*x5410)));
evalcond[3]=(((x5407*x5412))+(((-1.0)*x5393*x5417))+(((-1.0)*x5408*x5411))+(((-1.0)*r01*x5405))+(((-1.0)*x5397*x5416))+((x5410*x5413))+((r10*x5404))+((r11*x5403))+(((-1.0)*x5409*x5414))+((x5397*x5415)));
evalcond[4]=((-1.0)+((x5397*x5417))+(((-1.0)*x5403*x5411))+(((-1.0)*x5406*x5409))+((x5404*x5413))+(((-1.0)*x5393*x5416))+((x5405*x5407))+((x5393*x5415))+(((-1.0)*r11*x5418))+(((-1.0)*r10*x5419))+((r01*x5412)));
evalcond[5]=(((x5404*x5409))+(((-1.0)*r01*x5418))+((x5393*x5402))+(((-1.0)*r00*x5419))+(((-1.0)*x5405*x5411))+(((-1.0)*r10*sj0*sj5*x5397))+((x5393*x5401))+((x5406*x5413))+(((-1.0)*x5403*x5407))+(((-1.0)*r11*sj0*x5398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x5420=(cj0*r02);
IkReal x5421=(r12*sj0);
IkReal x5422=(cj0*cj5*r00);
IkReal x5423=(cj0*r01*sj5);
IkReal x5424=(cj5*r10*sj0);
IkReal x5425=(r11*sj0*sj5);
j4eval[0]=((((-1.73205080756888)*x5425))+(((1.73205080756888)*x5424))+(((1.73205080756888)*x5422))+x5421+x5420+(((-1.73205080756888)*x5423)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.5)*x5420))+(((0.866025403784439)*x5424))+(((0.5)*x5421))+(((-0.866025403784439)*x5425))+(((-0.866025403784439)*x5423))+(((0.866025403784439)*x5422))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x5426=r20*r20;
IkReal x5427=r21*r21;
IkReal x5428=r22*r22;
IkReal x5429=(cj5*r20*r22);
IkReal x5430=(r21*r22*sj5);
IkReal x5431=(cj5*r20*r21*sj5);
IkReal x5432=cj5*cj5;
IkReal x5433=(x5426*x5432);
IkReal x5434=(x5427*x5432);
j4eval[0]=((((-4.0)*x5426))+(((3.46410161513775)*x5429))+(((-1.0)*x5427))+(((-3.46410161513775)*x5430))+(((-3.0)*x5428))+(((-6.0)*x5431))+(((-3.0)*x5434))+(((3.0)*x5433)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((1.73205080756888)*x5429))+(((-1.5)*x5434))+(((-2.0)*x5426))+(((-0.5)*x5427))+(((-1.73205080756888)*x5430))+(((-1.5)*x5428))+(((-3.0)*x5431))+(((1.5)*x5433))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x5435=((1.73205080756888)*cj0);
IkReal x5436=((1.73205080756888)*sj0);
IkReal x5437=(((r11*sj5*x5435))+((cj5*r00*x5436))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*cj5*r10*x5435))+(((-1.0)*r01*sj5*x5436)));
j4eval[0]=x5437;
j4eval[1]=IKsign(x5437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5438=((1.73205080756888)*cj0*cj5);
IkReal x5439=((1.73205080756888)*cj0*sj5);
IkReal x5440=((1.73205080756888)*cj5*sj0);
IkReal x5441=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x5442=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5438))+(((-1.0)*r01*x5441))+((r00*x5440))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*x5439)))),-1);
if(!x5442.valid){
continue;
}
CheckValue<IkReal> x5443 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r20*sj5))+((cj5*r21))+((r00*x5439))+((r10*x5441))+((r11*x5440))+((r01*x5438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5442.value)))+(x5443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5444=IKsin(j4);
IkReal x5445=((0.866025403784439)*r22);
IkReal x5446=((0.5)*r20);
IkReal x5447=(cj5*x5444);
IkReal x5448=IKcos(j4);
IkReal x5449=((1.0)*cj5*x5448);
IkReal x5450=(r20*sj5);
IkReal x5451=((0.5)*r21*sj5);
IkReal x5452=((0.866025403784439)*cj0*r02);
IkReal x5453=((0.866025403784439)*r12*sj0);
IkReal x5454=(cj0*cj5*x5444);
IkReal x5455=(cj0*sj5*x5444);
IkReal x5456=(cj5*sj0*x5444);
IkReal x5457=(sj0*sj5*x5444);
IkReal x5458=((0.5)*r00);
IkReal x5459=(cj0*cj5*x5448);
IkReal x5460=((0.5)*r01);
IkReal x5461=(cj0*sj5*x5448);
IkReal x5462=((0.5)*r10);
IkReal x5463=(cj5*sj0*x5448);
IkReal x5464=((0.5)*r11);
IkReal x5465=(sj0*sj5*x5448);
IkReal x5466=((0.866025403784439)*cj0*r12);
IkReal x5467=((0.866025403784439)*r02*sj0);
IkReal x5468=(r00*sj0*sj5);
IkReal x5469=((1.0)*cj0*cj5*x5448);
IkReal x5470=((1.0)*cj0*sj5*x5448);
evalcond[0]=(((x5444*x5445))+(((-1.0)*x5446*x5447))+(((-1.0)*x5448*x5450))+((x5444*x5451))+(((-1.0)*r21*x5449)));
evalcond[1]=((-0.866025403784439)+((x5445*x5448))+((r21*x5447))+((x5448*x5451))+(((-1.0)*cj5*x5446*x5448))+((x5444*x5450)));
evalcond[2]=((0.5)+((x5448*x5453))+((x5460*x5461))+((r10*x5457))+((x5464*x5465))+((r11*x5456))+(((-1.0)*x5458*x5459))+((r00*x5455))+((x5448*x5452))+(((-1.0)*x5462*x5463))+((r01*x5454)));
evalcond[3]=(((r11*x5454))+(((-1.0)*x5448*x5467))+((x5458*x5463))+((r10*x5455))+(((-1.0)*x5459*x5462))+(((-1.0)*x5460*x5465))+(((-1.0)*r01*x5456))+((x5448*x5466))+((x5461*x5464))+(((-1.0)*x5444*x5468)));
evalcond[4]=((1.0)+((x5448*x5468))+((x5456*x5458))+(((-1.0)*x5457*x5460))+(((-1.0)*x5444*x5467))+((r01*x5463))+((x5444*x5466))+(((-1.0)*r10*x5470))+(((-1.0)*r11*x5469))+((x5455*x5464))+(((-1.0)*x5454*x5462)));
evalcond[5]=(((x5444*x5452))+((x5444*x5453))+(((-1.0)*r10*sj0*sj5*x5448))+((x5457*x5464))+(((-1.0)*r00*x5470))+(((-1.0)*x5456*x5462))+((x5455*x5460))+(((-1.0)*r01*x5469))+(((-1.0)*x5454*x5458))+(((-1.0)*r11*sj0*x5449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5471=((1.73205080756888)*r21);
IkReal x5472=(cj5*r20);
IkReal x5473=(r21*sj5);
IkReal x5474=r20*r20;
IkReal x5475=r21*r21;
IkReal x5476=((1.5)*(cj5*cj5));
CheckValue<IkReal> x5477 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x5471))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((-0.866025403784439)*x5473))+(((-1.0)*(1.5)*r22))+(((0.866025403784439)*x5472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5477.valid){
continue;
}
CheckValue<IkReal> x5478=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*sj5*x5471))+(((-1.0)*x5475*x5476))+((x5474*x5476))+(((-3.0)*cj5*r20*x5473))+(((-0.5)*x5475))+(((1.73205080756888)*r22*x5472))+(((-1.0)*(1.5)*(r22*r22)))+(((-2.0)*x5474)))),-1);
if(!x5478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5477.value)+(((1.5707963267949)*(x5478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5479=IKsin(j4);
IkReal x5480=((0.866025403784439)*r22);
IkReal x5481=((0.5)*r20);
IkReal x5482=(cj5*x5479);
IkReal x5483=IKcos(j4);
IkReal x5484=((1.0)*cj5*x5483);
IkReal x5485=(r20*sj5);
IkReal x5486=((0.5)*r21*sj5);
IkReal x5487=((0.866025403784439)*cj0*r02);
IkReal x5488=((0.866025403784439)*r12*sj0);
IkReal x5489=(cj0*cj5*x5479);
IkReal x5490=(cj0*sj5*x5479);
IkReal x5491=(cj5*sj0*x5479);
IkReal x5492=(sj0*sj5*x5479);
IkReal x5493=((0.5)*r00);
IkReal x5494=(cj0*cj5*x5483);
IkReal x5495=((0.5)*r01);
IkReal x5496=(cj0*sj5*x5483);
IkReal x5497=((0.5)*r10);
IkReal x5498=(cj5*sj0*x5483);
IkReal x5499=((0.5)*r11);
IkReal x5500=(sj0*sj5*x5483);
IkReal x5501=((0.866025403784439)*cj0*r12);
IkReal x5502=((0.866025403784439)*r02*sj0);
IkReal x5503=(r00*sj0*sj5);
IkReal x5504=((1.0)*cj0*cj5*x5483);
IkReal x5505=((1.0)*cj0*sj5*x5483);
evalcond[0]=(((x5479*x5486))+((x5479*x5480))+(((-1.0)*x5483*x5485))+(((-1.0)*x5481*x5482))+(((-1.0)*r21*x5484)));
evalcond[1]=((-0.866025403784439)+((x5483*x5486))+((x5479*x5485))+((r21*x5482))+((x5480*x5483))+(((-1.0)*cj5*x5481*x5483)));
evalcond[2]=((0.5)+(((-1.0)*x5497*x5498))+((r10*x5492))+((r00*x5490))+(((-1.0)*x5493*x5494))+((r11*x5491))+((x5495*x5496))+((x5483*x5488))+((x5483*x5487))+((r01*x5489))+((x5499*x5500)));
evalcond[3]=((((-1.0)*x5495*x5500))+((x5483*x5501))+(((-1.0)*x5483*x5502))+(((-1.0)*x5494*x5497))+(((-1.0)*r01*x5491))+((r11*x5489))+((r10*x5490))+(((-1.0)*x5479*x5503))+((x5496*x5499))+((x5493*x5498)));
evalcond[4]=((1.0)+(((-1.0)*x5492*x5495))+(((-1.0)*r10*x5505))+((r01*x5498))+((x5490*x5499))+((x5491*x5493))+(((-1.0)*r11*x5504))+(((-1.0)*x5489*x5497))+(((-1.0)*x5479*x5502))+((x5483*x5503))+((x5479*x5501)));
evalcond[5]=((((-1.0)*r01*x5504))+(((-1.0)*r10*sj0*sj5*x5483))+(((-1.0)*x5489*x5493))+(((-1.0)*r11*sj0*x5484))+((x5490*x5495))+((x5479*x5487))+(((-1.0)*r00*x5505))+(((-1.0)*x5491*x5497))+((x5492*x5499))+((x5479*x5488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5506=((0.866025403784439)*cj0);
IkReal x5507=((0.866025403784439)*sj0);
CheckValue<IkReal> x5508 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5508.valid){
continue;
}
CheckValue<IkReal> x5509=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x5506))+(((-1.0)*r11*sj5*x5507))+((cj5*r00*x5506))+(((0.5)*r12*sj0))+((cj5*r10*x5507))+(((0.5)*cj0*r02)))),-1);
if(!x5509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5508.value)+(((1.5707963267949)*(x5509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5510=IKsin(j4);
IkReal x5511=((0.866025403784439)*r22);
IkReal x5512=((0.5)*r20);
IkReal x5513=(cj5*x5510);
IkReal x5514=IKcos(j4);
IkReal x5515=((1.0)*cj5*x5514);
IkReal x5516=(r20*sj5);
IkReal x5517=((0.5)*r21*sj5);
IkReal x5518=((0.866025403784439)*cj0*r02);
IkReal x5519=((0.866025403784439)*r12*sj0);
IkReal x5520=(cj0*cj5*x5510);
IkReal x5521=(cj0*sj5*x5510);
IkReal x5522=(cj5*sj0*x5510);
IkReal x5523=(sj0*sj5*x5510);
IkReal x5524=((0.5)*r00);
IkReal x5525=(cj0*cj5*x5514);
IkReal x5526=((0.5)*r01);
IkReal x5527=(cj0*sj5*x5514);
IkReal x5528=((0.5)*r10);
IkReal x5529=(cj5*sj0*x5514);
IkReal x5530=((0.5)*r11);
IkReal x5531=(sj0*sj5*x5514);
IkReal x5532=((0.866025403784439)*cj0*r12);
IkReal x5533=((0.866025403784439)*r02*sj0);
IkReal x5534=(r00*sj0*sj5);
IkReal x5535=((1.0)*cj0*cj5*x5514);
IkReal x5536=((1.0)*cj0*sj5*x5514);
evalcond[0]=((((-1.0)*x5512*x5513))+((x5510*x5517))+(((-1.0)*x5514*x5516))+(((-1.0)*r21*x5515))+((x5510*x5511)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x5512*x5514))+((x5510*x5516))+((r21*x5513))+((x5514*x5517))+((x5511*x5514)));
evalcond[2]=((0.5)+((r01*x5520))+(((-1.0)*x5524*x5525))+((x5514*x5519))+((x5526*x5527))+(((-1.0)*x5528*x5529))+((r00*x5521))+((x5530*x5531))+((r11*x5522))+((r10*x5523))+((x5514*x5518)));
evalcond[3]=(((x5514*x5532))+((x5527*x5530))+((x5524*x5529))+((r10*x5521))+(((-1.0)*r01*x5522))+(((-1.0)*x5510*x5534))+(((-1.0)*x5514*x5533))+(((-1.0)*x5525*x5528))+(((-1.0)*x5526*x5531))+((r11*x5520)));
evalcond[4]=((1.0)+(((-1.0)*r10*x5536))+((x5514*x5534))+(((-1.0)*r11*x5535))+((x5510*x5532))+(((-1.0)*x5520*x5528))+(((-1.0)*x5523*x5526))+((r01*x5529))+((x5522*x5524))+(((-1.0)*x5510*x5533))+((x5521*x5530)));
evalcond[5]=((((-1.0)*r10*sj0*sj5*x5514))+((x5523*x5530))+(((-1.0)*x5522*x5528))+((x5510*x5519))+(((-1.0)*x5520*x5524))+(((-1.0)*r00*x5536))+(((-1.0)*r01*x5535))+(((-1.0)*r11*sj0*x5515))+((x5521*x5526))+((x5510*x5518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x5537=(r02*sj0);
IkReal x5538=(cj0*r12);
IkReal x5539=(cj0*cj5*r10);
IkReal x5540=(cj0*r11*sj5);
IkReal x5541=(cj5*r00*sj0);
IkReal x5542=(r01*sj0*sj5);
j4eval[0]=((((-1.73205080756888)*x5539))+(((1.73205080756888)*x5540))+(((-1.0)*x5538))+(((1.73205080756888)*x5541))+(((-1.73205080756888)*x5542))+x5537);
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((-0.866025403784439)*x5542))+(((0.866025403784439)*x5541))+(((0.866025403784439)*x5540))+(((0.5)*x5537))+(((-0.5)*x5538))+(((-0.866025403784439)*x5539))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x5543=r20*r20;
IkReal x5544=r21*r21;
IkReal x5545=r22*r22;
IkReal x5546=(cj5*r20*r22);
IkReal x5547=(r21*r22*sj5);
IkReal x5548=(cj5*r20*r21*sj5);
IkReal x5549=cj5*cj5;
IkReal x5550=(x5543*x5549);
IkReal x5551=(x5544*x5549);
j4eval[0]=((((-3.0)*x5551))+(((3.0)*x5550))+(((-1.0)*x5544))+(((-3.0)*x5545))+(((-3.46410161513775)*x5547))+(((-4.0)*x5543))+(((-6.0)*x5548))+(((3.46410161513775)*x5546)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-3.0)*x5548))+(((-0.5)*x5544))+(((-2.0)*x5543))+(((-1.5)*x5551))+(((-1.5)*x5545))+(((-1.73205080756888)*x5547))+(((1.73205080756888)*x5546))+(((1.5)*x5550))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x5552=((1.73205080756888)*cj0);
IkReal x5553=((1.73205080756888)*sj0);
IkReal x5554=(((r11*sj5*x5552))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((cj5*r00*x5553))+(((-1.0)*r01*sj5*x5553))+(((-1.0)*cj5*r10*x5552)));
j4eval[0]=x5554;
j4eval[1]=IKsign(x5554);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5555=((1.73205080756888)*cj0*cj5);
IkReal x5556=((1.73205080756888)*cj0*sj5);
IkReal x5557=((1.73205080756888)*cj5*sj0);
IkReal x5558=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x5559=IKPowWithIntegerCheck(IKsign((((r11*x5556))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*x5558))+(((-1.0)*r10*x5555))+((r00*x5557)))),-1);
if(!x5559.valid){
continue;
}
CheckValue<IkReal> x5560 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r11*x5557))+((r01*x5555))+((r10*x5558))+((r00*x5556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5559.value)))+(x5560.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5561=IKsin(j4);
IkReal x5562=((0.866025403784439)*r22);
IkReal x5563=((0.5)*r20);
IkReal x5564=(cj5*x5561);
IkReal x5565=IKcos(j4);
IkReal x5566=((1.0)*cj5*x5565);
IkReal x5567=(r20*sj5);
IkReal x5568=((0.5)*r21*sj5);
IkReal x5569=((0.866025403784439)*cj0*r02);
IkReal x5570=((0.866025403784439)*r12*sj0);
IkReal x5571=(cj0*cj5*x5561);
IkReal x5572=(cj0*sj5*x5561);
IkReal x5573=(cj5*sj0*x5561);
IkReal x5574=(sj0*sj5*x5561);
IkReal x5575=((0.5)*r00);
IkReal x5576=(cj0*cj5*x5565);
IkReal x5577=((0.5)*r01);
IkReal x5578=(cj0*sj5*x5565);
IkReal x5579=((0.5)*r10);
IkReal x5580=(cj5*sj0*x5565);
IkReal x5581=((0.5)*r11);
IkReal x5582=(sj0*sj5*x5565);
IkReal x5583=((0.866025403784439)*cj0*r12);
IkReal x5584=((0.866025403784439)*r02*sj0);
IkReal x5585=(r00*sj0*sj5);
IkReal x5586=((1.0)*cj0*cj5*x5565);
IkReal x5587=((1.0)*cj0*sj5*x5565);
evalcond[0]=((((-1.0)*x5563*x5564))+(((-1.0)*r21*x5566))+(((-1.0)*x5565*x5567))+((x5561*x5568))+((x5561*x5562)));
evalcond[1]=((-0.866025403784439)+((r21*x5564))+((x5562*x5565))+((x5561*x5567))+(((-1.0)*cj5*x5563*x5565))+((x5565*x5568)));
evalcond[2]=(((r10*x5574))+((r11*x5573))+((x5581*x5582))+((r00*x5572))+(((-1.0)*x5579*x5580))+((x5577*x5578))+((x5565*x5569))+((x5565*x5570))+(((-1.0)*x5575*x5576))+((r01*x5571)));
evalcond[3]=(((x5565*x5585))+(((-1.0)*x5571*x5579))+(((-1.0)*r11*x5586))+(((-1.0)*r10*x5587))+(((-1.0)*x5574*x5577))+((r01*x5580))+((x5573*x5575))+((x5572*x5581))+(((-1.0)*x5561*x5584))+((x5561*x5583)));
evalcond[4]=((0.5)+((x5578*x5581))+(((-1.0)*x5565*x5584))+((r10*x5572))+((r11*x5571))+(((-1.0)*x5577*x5582))+(((-1.0)*x5561*x5585))+((x5565*x5583))+(((-1.0)*x5576*x5579))+(((-1.0)*r01*x5573))+((x5575*x5580)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x5587))+(((-1.0)*x5573*x5579))+(((-1.0)*x5571*x5575))+((x5574*x5581))+((x5561*x5570))+(((-1.0)*r01*x5586))+(((-1.0)*r11*sj0*x5566))+((x5561*x5569))+((x5572*x5577))+(((-1.0)*r10*sj0*sj5*x5565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5588=((1.73205080756888)*r21);
IkReal x5589=(cj5*r20);
IkReal x5590=(r21*sj5);
IkReal x5591=r20*r20;
IkReal x5592=r21*r21;
IkReal x5593=((1.5)*(cj5*cj5));
CheckValue<IkReal> x5594 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x5588))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((0.866025403784439)*x5589))+(((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x5590)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5594.valid){
continue;
}
CheckValue<IkReal> x5595=IKPowWithIntegerCheck(IKsign(((((-0.5)*x5592))+(((1.73205080756888)*r22*x5589))+(((-3.0)*cj5*r20*x5590))+(((-1.0)*r22*sj5*x5588))+(((-1.0)*x5592*x5593))+(((-1.0)*(1.5)*(r22*r22)))+(((-2.0)*x5591))+((x5591*x5593)))),-1);
if(!x5595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5594.value)+(((1.5707963267949)*(x5595.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5596=IKsin(j4);
IkReal x5597=((0.866025403784439)*r22);
IkReal x5598=((0.5)*r20);
IkReal x5599=(cj5*x5596);
IkReal x5600=IKcos(j4);
IkReal x5601=((1.0)*cj5*x5600);
IkReal x5602=(r20*sj5);
IkReal x5603=((0.5)*r21*sj5);
IkReal x5604=((0.866025403784439)*cj0*r02);
IkReal x5605=((0.866025403784439)*r12*sj0);
IkReal x5606=(cj0*cj5*x5596);
IkReal x5607=(cj0*sj5*x5596);
IkReal x5608=(cj5*sj0*x5596);
IkReal x5609=(sj0*sj5*x5596);
IkReal x5610=((0.5)*r00);
IkReal x5611=(cj0*cj5*x5600);
IkReal x5612=((0.5)*r01);
IkReal x5613=(cj0*sj5*x5600);
IkReal x5614=((0.5)*r10);
IkReal x5615=(cj5*sj0*x5600);
IkReal x5616=((0.5)*r11);
IkReal x5617=(sj0*sj5*x5600);
IkReal x5618=((0.866025403784439)*cj0*r12);
IkReal x5619=((0.866025403784439)*r02*sj0);
IkReal x5620=(r00*sj0*sj5);
IkReal x5621=((1.0)*cj0*cj5*x5600);
IkReal x5622=((1.0)*cj0*sj5*x5600);
evalcond[0]=((((-1.0)*x5600*x5602))+((x5596*x5597))+(((-1.0)*r21*x5601))+((x5596*x5603))+(((-1.0)*x5598*x5599)));
evalcond[1]=((-0.866025403784439)+((x5600*x5603))+(((-1.0)*cj5*x5598*x5600))+((x5596*x5602))+((x5597*x5600))+((r21*x5599)));
evalcond[2]=(((x5612*x5613))+((r11*x5608))+(((-1.0)*x5610*x5611))+((x5616*x5617))+((r00*x5607))+((r10*x5609))+(((-1.0)*x5614*x5615))+((x5600*x5605))+((r01*x5606))+((x5600*x5604)));
evalcond[3]=((((-1.0)*r11*x5621))+((x5607*x5616))+(((-1.0)*r10*x5622))+(((-1.0)*x5606*x5614))+(((-1.0)*x5596*x5619))+((x5600*x5620))+(((-1.0)*x5609*x5612))+((x5596*x5618))+((r01*x5615))+((x5608*x5610)));
evalcond[4]=((0.5)+(((-1.0)*x5612*x5617))+((x5613*x5616))+((r11*x5606))+(((-1.0)*x5596*x5620))+((x5610*x5615))+(((-1.0)*x5600*x5619))+(((-1.0)*r01*x5608))+((x5600*x5618))+(((-1.0)*x5611*x5614))+((r10*x5607)));
evalcond[5]=((-1.0)+(((-1.0)*r11*sj0*x5601))+(((-1.0)*r00*x5622))+(((-1.0)*x5608*x5614))+((x5596*x5605))+((x5596*x5604))+(((-1.0)*r10*sj0*sj5*x5600))+((x5609*x5616))+((x5607*x5612))+(((-1.0)*r01*x5621))+(((-1.0)*x5606*x5610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5623=((0.866025403784439)*cj0);
IkReal x5624=((0.866025403784439)*sj0);
CheckValue<IkReal> x5625=IKPowWithIntegerCheck(IKsign((((cj5*r00*x5624))+(((-1.0)*cj5*r10*x5623))+(((-1.0)*r01*sj5*x5624))+((r11*sj5*x5623))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0)))),-1);
if(!x5625.valid){
continue;
}
CheckValue<IkReal> x5626 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5625.value)))+(x5626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5627=IKsin(j4);
IkReal x5628=((0.866025403784439)*r22);
IkReal x5629=((0.5)*r20);
IkReal x5630=(cj5*x5627);
IkReal x5631=IKcos(j4);
IkReal x5632=((1.0)*cj5*x5631);
IkReal x5633=(r20*sj5);
IkReal x5634=((0.5)*r21*sj5);
IkReal x5635=((0.866025403784439)*cj0*r02);
IkReal x5636=((0.866025403784439)*r12*sj0);
IkReal x5637=(cj0*cj5*x5627);
IkReal x5638=(cj0*sj5*x5627);
IkReal x5639=(cj5*sj0*x5627);
IkReal x5640=(sj0*sj5*x5627);
IkReal x5641=((0.5)*r00);
IkReal x5642=(cj0*cj5*x5631);
IkReal x5643=((0.5)*r01);
IkReal x5644=(cj0*sj5*x5631);
IkReal x5645=((0.5)*r10);
IkReal x5646=(cj5*sj0*x5631);
IkReal x5647=((0.5)*r11);
IkReal x5648=(sj0*sj5*x5631);
IkReal x5649=((0.866025403784439)*cj0*r12);
IkReal x5650=((0.866025403784439)*r02*sj0);
IkReal x5651=(r00*sj0*sj5);
IkReal x5652=((1.0)*cj0*cj5*x5631);
IkReal x5653=((1.0)*cj0*sj5*x5631);
evalcond[0]=((((-1.0)*x5629*x5630))+(((-1.0)*r21*x5632))+((x5627*x5628))+(((-1.0)*x5631*x5633))+((x5627*x5634)));
evalcond[1]=((-0.866025403784439)+((x5631*x5634))+((r21*x5630))+((x5627*x5633))+((x5628*x5631))+(((-1.0)*cj5*x5629*x5631)));
evalcond[2]=(((r11*x5639))+((x5631*x5635))+((r10*x5640))+((r00*x5638))+(((-1.0)*x5645*x5646))+(((-1.0)*x5641*x5642))+((x5647*x5648))+((r01*x5637))+((x5643*x5644))+((x5631*x5636)));
evalcond[3]=(((x5631*x5651))+(((-1.0)*x5640*x5643))+(((-1.0)*r11*x5652))+((x5627*x5649))+((x5639*x5641))+(((-1.0)*x5637*x5645))+(((-1.0)*r10*x5653))+(((-1.0)*x5627*x5650))+((x5638*x5647))+((r01*x5646)));
evalcond[4]=((0.5)+(((-1.0)*x5642*x5645))+(((-1.0)*x5643*x5648))+((x5641*x5646))+((r10*x5638))+((r11*x5637))+((x5644*x5647))+(((-1.0)*x5631*x5650))+(((-1.0)*x5627*x5651))+((x5631*x5649))+(((-1.0)*r01*x5639)));
evalcond[5]=((-1.0)+((x5640*x5647))+((x5638*x5643))+(((-1.0)*r01*x5652))+(((-1.0)*r00*x5653))+(((-1.0)*r11*sj0*x5632))+((x5627*x5636))+(((-1.0)*x5637*x5641))+(((-1.0)*x5639*x5645))+((x5627*x5635))+(((-1.0)*r10*sj0*sj5*x5631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5654=(r02*sj0);
IkReal x5655=(cj0*r12);
IkReal x5656=(cj0*cj5*r10);
IkReal x5657=(cj0*r11*sj5);
IkReal x5658=(cj5*r00*sj0);
IkReal x5659=(r01*sj0*sj5);
j4eval[0]=((((-1.73205080756888)*x5656))+(((-1.73205080756888)*x5659))+(((-1.0)*x5655))+(((1.73205080756888)*x5658))+x5654+(((1.73205080756888)*x5657)));
j4eval[1]=IKsign(((((-0.866025403784439)*x5659))+(((0.866025403784439)*x5657))+(((0.5)*x5654))+(((-0.5)*x5655))+(((-0.866025403784439)*x5656))+(((0.866025403784439)*x5658))));
j4eval[2]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5660=r20*r20;
IkReal x5661=r21*r21;
IkReal x5662=r22*r22;
IkReal x5663=(cj5*r20*r22);
IkReal x5664=(r21*r22*sj5);
IkReal x5665=(cj5*r20*r21*sj5);
IkReal x5666=cj5*cj5;
IkReal x5667=(x5660*x5666);
IkReal x5668=(x5661*x5666);
j4eval[0]=((((3.46410161513775)*x5663))+(((3.0)*x5667))+(((-3.46410161513775)*x5664))+(((-3.0)*x5668))+(((-4.0)*x5660))+(((-3.0)*x5662))+(((-1.0)*x5661))+(((-6.0)*x5665)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((1.5)*x5667))+(((-1.73205080756888)*x5664))+(((1.73205080756888)*x5663))+(((-3.0)*x5665))+(((-1.5)*x5668))+(((-1.5)*x5662))+(((-2.0)*x5660))+(((-0.5)*x5661))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5669=((1.73205080756888)*cj0);
IkReal x5670=((1.73205080756888)*sj0);
IkReal x5671=((((-1.0)*r01*sj5*x5670))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*cj5*r10*x5669))+((r11*sj5*x5669))+((cj5*r00*x5670)));
j4eval[0]=x5671;
j4eval[1]=IKsign(x5671);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5672=((1.73205080756888)*cj0*cj5);
IkReal x5673=((1.73205080756888)*cj0*sj5);
IkReal x5674=((1.73205080756888)*cj5*sj0);
IkReal x5675=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x5676 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r01*x5672))+((r00*x5673))+((r11*x5674))+((r10*x5675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5676.valid){
continue;
}
CheckValue<IkReal> x5677=IKPowWithIntegerCheck(IKsign((((r11*x5673))+(((-1.0)*r10*x5672))+(((-1.0)*r01*x5675))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r00*x5674)))),-1);
if(!x5677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5676.value)+(((1.5707963267949)*(x5677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5678=IKsin(j4);
IkReal x5679=((0.866025403784439)*r22);
IkReal x5680=((0.5)*r20);
IkReal x5681=(cj5*x5678);
IkReal x5682=IKcos(j4);
IkReal x5683=((1.0)*cj5*x5682);
IkReal x5684=(r20*sj5);
IkReal x5685=((0.5)*r21*sj5);
IkReal x5686=((0.866025403784439)*cj0*r02);
IkReal x5687=((0.866025403784439)*r12*sj0);
IkReal x5688=(cj0*cj5*x5678);
IkReal x5689=(cj0*sj5*x5678);
IkReal x5690=(cj5*sj0*x5678);
IkReal x5691=(sj0*sj5*x5678);
IkReal x5692=((0.5)*r00);
IkReal x5693=(cj0*cj5*x5682);
IkReal x5694=((0.5)*r01);
IkReal x5695=(cj0*sj5*x5682);
IkReal x5696=((0.5)*r10);
IkReal x5697=(cj5*sj0*x5682);
IkReal x5698=((0.5)*r11);
IkReal x5699=(sj0*sj5*x5682);
IkReal x5700=((0.866025403784439)*cj0*r12);
IkReal x5701=((0.866025403784439)*r02*sj0);
IkReal x5702=(r00*sj0*sj5);
IkReal x5703=((1.0)*cj0*cj5*x5682);
IkReal x5704=((1.0)*cj0*sj5*x5682);
evalcond[0]=((((-1.0)*x5682*x5684))+((x5678*x5685))+(((-1.0)*r21*x5683))+(((-1.0)*x5680*x5681))+((x5678*x5679)));
evalcond[1]=((-0.866025403784439)+((x5682*x5685))+((x5678*x5684))+((x5679*x5682))+((r21*x5681))+(((-1.0)*cj5*x5680*x5682)));
evalcond[2]=(((x5698*x5699))+((x5682*x5687))+((r11*x5690))+((x5682*x5686))+(((-1.0)*x5696*x5697))+((r00*x5689))+(((-1.0)*x5692*x5693))+((r01*x5688))+((r10*x5691))+((x5694*x5695)));
evalcond[3]=((((-1.0)*x5691*x5694))+(((-1.0)*x5678*x5701))+((x5689*x5698))+((x5690*x5692))+(((-1.0)*x5688*x5696))+((r01*x5697))+((x5682*x5702))+(((-1.0)*r10*x5704))+((x5678*x5700))+(((-1.0)*r11*x5703)));
evalcond[4]=((-0.5)+(((-1.0)*x5693*x5696))+(((-1.0)*x5682*x5701))+((x5695*x5698))+(((-1.0)*x5678*x5702))+(((-1.0)*x5694*x5699))+((r10*x5689))+(((-1.0)*r01*x5690))+((r11*x5688))+((x5692*x5697))+((x5682*x5700)));
evalcond[5]=((1.0)+(((-1.0)*r11*sj0*x5683))+(((-1.0)*r10*sj0*sj5*x5682))+(((-1.0)*r00*x5704))+(((-1.0)*x5690*x5696))+((x5691*x5698))+(((-1.0)*r01*x5703))+((x5678*x5687))+((x5678*x5686))+(((-1.0)*x5688*x5692))+((x5689*x5694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5705=((1.73205080756888)*r21);
IkReal x5706=(cj5*r20);
IkReal x5707=(r21*sj5);
IkReal x5708=r20*r20;
IkReal x5709=r21*r21;
IkReal x5710=((1.5)*(cj5*cj5));
CheckValue<IkReal> x5711 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x5705)))),IkReal(((((-0.866025403784439)*x5707))+(((-1.0)*(1.5)*r22))+(((0.866025403784439)*x5706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5711.valid){
continue;
}
CheckValue<IkReal> x5712=IKPowWithIntegerCheck(IKsign(((((-0.5)*x5709))+(((-3.0)*cj5*r20*x5707))+(((1.73205080756888)*r22*x5706))+(((-2.0)*x5708))+(((-1.0)*x5709*x5710))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*r22*sj5*x5705))+((x5708*x5710)))),-1);
if(!x5712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5711.value)+(((1.5707963267949)*(x5712.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5713=IKsin(j4);
IkReal x5714=((0.866025403784439)*r22);
IkReal x5715=((0.5)*r20);
IkReal x5716=(cj5*x5713);
IkReal x5717=IKcos(j4);
IkReal x5718=((1.0)*cj5*x5717);
IkReal x5719=(r20*sj5);
IkReal x5720=((0.5)*r21*sj5);
IkReal x5721=((0.866025403784439)*cj0*r02);
IkReal x5722=((0.866025403784439)*r12*sj0);
IkReal x5723=(cj0*cj5*x5713);
IkReal x5724=(cj0*sj5*x5713);
IkReal x5725=(cj5*sj0*x5713);
IkReal x5726=(sj0*sj5*x5713);
IkReal x5727=((0.5)*r00);
IkReal x5728=(cj0*cj5*x5717);
IkReal x5729=((0.5)*r01);
IkReal x5730=(cj0*sj5*x5717);
IkReal x5731=((0.5)*r10);
IkReal x5732=(cj5*sj0*x5717);
IkReal x5733=((0.5)*r11);
IkReal x5734=(sj0*sj5*x5717);
IkReal x5735=((0.866025403784439)*cj0*r12);
IkReal x5736=((0.866025403784439)*r02*sj0);
IkReal x5737=(r00*sj0*sj5);
IkReal x5738=((1.0)*cj0*cj5*x5717);
IkReal x5739=((1.0)*cj0*sj5*x5717);
evalcond[0]=(((x5713*x5714))+(((-1.0)*x5717*x5719))+(((-1.0)*r21*x5718))+((x5713*x5720))+(((-1.0)*x5715*x5716)));
evalcond[1]=((-0.866025403784439)+((r21*x5716))+((x5717*x5720))+((x5713*x5719))+(((-1.0)*cj5*x5715*x5717))+((x5714*x5717)));
evalcond[2]=(((r10*x5726))+(((-1.0)*x5727*x5728))+((x5717*x5722))+((r11*x5725))+((r01*x5723))+((r00*x5724))+((x5717*x5721))+((x5733*x5734))+((x5729*x5730))+(((-1.0)*x5731*x5732)));
evalcond[3]=(((x5713*x5735))+(((-1.0)*r11*x5738))+(((-1.0)*r10*x5739))+((x5724*x5733))+(((-1.0)*x5723*x5731))+((x5717*x5737))+((x5725*x5727))+(((-1.0)*x5713*x5736))+((r01*x5732))+(((-1.0)*x5726*x5729)));
evalcond[4]=((-0.5)+(((-1.0)*x5728*x5731))+((x5717*x5735))+((r11*x5723))+((x5727*x5732))+(((-1.0)*x5713*x5737))+((r10*x5724))+(((-1.0)*x5717*x5736))+(((-1.0)*x5729*x5734))+(((-1.0)*r01*x5725))+((x5730*x5733)));
evalcond[5]=((1.0)+((x5713*x5721))+((x5726*x5733))+(((-1.0)*x5723*x5727))+(((-1.0)*r11*sj0*x5718))+(((-1.0)*x5725*x5731))+(((-1.0)*r01*x5738))+(((-1.0)*r10*sj0*sj5*x5717))+((x5713*x5722))+(((-1.0)*r00*x5739))+((x5724*x5729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5740=((0.866025403784439)*cj0);
IkReal x5741=((0.866025403784439)*sj0);
CheckValue<IkReal> x5742=IKPowWithIntegerCheck(IKsign((((cj5*r00*x5741))+(((-1.0)*(0.5)*cj0*r12))+(((-1.0)*cj5*r10*x5740))+((r11*sj5*x5740))+(((-1.0)*r01*sj5*x5741))+(((0.5)*r02*sj0)))),-1);
if(!x5742.valid){
continue;
}
CheckValue<IkReal> x5743 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5742.value)))+(x5743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5744=IKsin(j4);
IkReal x5745=((0.866025403784439)*r22);
IkReal x5746=((0.5)*r20);
IkReal x5747=(cj5*x5744);
IkReal x5748=IKcos(j4);
IkReal x5749=((1.0)*cj5*x5748);
IkReal x5750=(r20*sj5);
IkReal x5751=((0.5)*r21*sj5);
IkReal x5752=((0.866025403784439)*cj0*r02);
IkReal x5753=((0.866025403784439)*r12*sj0);
IkReal x5754=(cj0*cj5*x5744);
IkReal x5755=(cj0*sj5*x5744);
IkReal x5756=(cj5*sj0*x5744);
IkReal x5757=(sj0*sj5*x5744);
IkReal x5758=((0.5)*r00);
IkReal x5759=(cj0*cj5*x5748);
IkReal x5760=((0.5)*r01);
IkReal x5761=(cj0*sj5*x5748);
IkReal x5762=((0.5)*r10);
IkReal x5763=(cj5*sj0*x5748);
IkReal x5764=((0.5)*r11);
IkReal x5765=(sj0*sj5*x5748);
IkReal x5766=((0.866025403784439)*cj0*r12);
IkReal x5767=((0.866025403784439)*r02*sj0);
IkReal x5768=(r00*sj0*sj5);
IkReal x5769=((1.0)*cj0*cj5*x5748);
IkReal x5770=((1.0)*cj0*sj5*x5748);
evalcond[0]=((((-1.0)*x5746*x5747))+(((-1.0)*x5748*x5750))+(((-1.0)*r21*x5749))+((x5744*x5751))+((x5744*x5745)));
evalcond[1]=((-0.866025403784439)+((x5745*x5748))+(((-1.0)*cj5*x5746*x5748))+((x5748*x5751))+((x5744*x5750))+((r21*x5747)));
evalcond[2]=(((x5764*x5765))+(((-1.0)*x5758*x5759))+((x5748*x5752))+((x5760*x5761))+((r11*x5756))+((r01*x5754))+((r00*x5755))+(((-1.0)*x5762*x5763))+((x5748*x5753))+((r10*x5757)));
evalcond[3]=((((-1.0)*x5754*x5762))+(((-1.0)*x5757*x5760))+((x5744*x5766))+((x5755*x5764))+((x5756*x5758))+(((-1.0)*r11*x5769))+((r01*x5763))+(((-1.0)*r10*x5770))+(((-1.0)*x5744*x5767))+((x5748*x5768)));
evalcond[4]=((-0.5)+((x5758*x5763))+(((-1.0)*x5759*x5762))+(((-1.0)*x5744*x5768))+((r10*x5755))+((x5748*x5766))+(((-1.0)*x5748*x5767))+((r11*x5754))+(((-1.0)*x5760*x5765))+(((-1.0)*r01*x5756))+((x5761*x5764)));
evalcond[5]=((1.0)+(((-1.0)*r10*sj0*sj5*x5748))+((x5757*x5764))+(((-1.0)*r11*sj0*x5749))+(((-1.0)*r00*x5770))+(((-1.0)*r01*x5769))+(((-1.0)*x5754*x5758))+((x5744*x5753))+(((-1.0)*x5756*x5762))+((x5755*x5760))+((x5744*x5752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5771=(cj3*cj5);
IkReal x5772=(cj3*sj5);
IkReal x5773=((0.5)*r21);
IkReal x5774=((2.0)*r20);
IkReal x5775=(cj0*r10);
IkReal x5776=(cj0*r11);
IkReal x5777=((1.5)*r22);
IkReal x5778=(r00*sj0);
IkReal x5779=(r01*sj0);
IkReal x5780=((0.866025403784439)*cj5*r22);
IkReal x5781=(cj5*r20);
IkReal x5782=((0.866025403784439)*cj0*r12);
IkReal x5783=((0.866025403784439)*r22*sj5);
IkReal x5784=(r21*sj5);
IkReal x5785=((0.866025403784439)*r02*sj0);
IkReal x5786=((1.5)*cj5*r21*sj5);
IkReal x5787=((1.5)*cj5*r20*sj5);
IkReal x5788=cj5*cj5;
IkReal x5789=((1.5)*r20*x5788);
IkReal x5790=((1.5)*r21*x5788);
CheckValue<IkReal> x5791=IKPowWithIntegerCheck(IKsign((((x5784*x5785))+(((-1.0)*x5773*x5776))+((x5778*x5786))+(((-1.0)*x5782*x5784))+(((-1.0)*x5778*x5780))+((x5775*x5789))+((x5779*x5783))+(((-1.0)*x5776*x5790))+(((-1.0)*x5776*x5787))+(((-1.0)*x5781*x5785))+((x5775*x5780))+(((-1.0)*x5776*x5783))+(((-1.0)*x5774*x5775))+((x5779*x5790))+(((-1.0)*cj0*r12*x5777))+((x5781*x5782))+((x5773*x5779))+((r02*sj0*x5777))+(((-1.0)*x5775*x5786))+((x5774*x5778))+(((-1.0)*x5778*x5789))+((x5779*x5787)))),-1);
if(!x5791.valid){
continue;
}
CheckValue<IkReal> x5792 = IKatan2WithCheck(IkReal((((r20*x5772))+((r21*x5771)))),IkReal(((((-0.5)*r20*x5771))+((cj3*(((0.866025403784439)*r22))))+((x5772*x5773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5791.value)))+(x5792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5793=IKsin(j4);
IkReal x5794=((0.866025403784439)*r22);
IkReal x5795=((0.5)*r20);
IkReal x5796=(cj5*x5793);
IkReal x5797=IKcos(j4);
IkReal x5798=((1.0)*cj5*x5797);
IkReal x5799=(r20*sj5);
IkReal x5800=((0.5)*r21*sj5);
IkReal x5801=((0.866025403784439)*cj0*r02);
IkReal x5802=((0.866025403784439)*r12*sj0);
IkReal x5803=(cj0*cj5*x5793);
IkReal x5804=(cj0*sj5*x5793);
IkReal x5805=(cj5*sj0*x5793);
IkReal x5806=(sj0*sj5*x5793);
IkReal x5807=((0.5)*r00);
IkReal x5808=(cj0*cj5*x5797);
IkReal x5809=((0.5)*r01);
IkReal x5810=(cj0*sj5*x5797);
IkReal x5811=((0.5)*r10);
IkReal x5812=(cj5*sj0*x5797);
IkReal x5813=((0.5)*r11);
IkReal x5814=(sj0*sj5*x5797);
IkReal x5815=((0.866025403784439)*cj0*r12);
IkReal x5816=((0.866025403784439)*r02*sj0);
IkReal x5817=(r00*sj0*sj5);
IkReal x5818=((1.0)*cj0*cj5*x5797);
IkReal x5819=((1.0)*cj0*sj5*x5797);
evalcond[0]=(((x5793*x5800))+(((-1.0)*r21*x5798))+(((-1.0)*x5795*x5796))+((x5793*x5794))+(((-1.0)*x5797*x5799)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x5795*x5797))+((x5793*x5799))+((x5797*x5800))+((r21*x5796))+((x5794*x5797)));
evalcond[2]=(((r11*x5805))+((r10*x5806))+((x5797*x5801))+((x5797*x5802))+(((-1.0)*(0.5)*sj3))+((x5813*x5814))+(((-1.0)*x5811*x5812))+((r00*x5804))+((x5809*x5810))+((r01*x5803))+(((-1.0)*x5807*x5808)));
evalcond[3]=(((x5807*x5812))+((r10*x5804))+((x5810*x5813))+(((-1.0)*x5809*x5814))+((x5797*x5815))+(((-1.0)*x5793*x5817))+((r11*x5803))+(((-1.0)*x5797*x5816))+(((0.5)*cj3))+(((-1.0)*r01*x5805))+(((-1.0)*x5808*x5811)));
evalcond[4]=(((x5804*x5813))+((x5805*x5807))+((r01*x5812))+(((-1.0)*r11*x5818))+((x5793*x5815))+(((-1.0)*x5803*x5811))+((x5797*x5817))+(((-1.0)*r10*x5819))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x5806*x5809))+(((-1.0)*x5793*x5816)));
evalcond[5]=((((-1.0)*r00*x5819))+(((-1.0)*r10*sj0*sj5*x5797))+(((-1.0)*x5805*x5811))+(((-1.0)*(1.0)*cj3))+(((-1.0)*r01*x5818))+((x5804*x5809))+((x5793*x5802))+((x5806*x5813))+(((-1.0)*x5803*x5807))+(((-1.0)*r11*sj0*x5798))+((x5793*x5801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5820=((1.73205080756888)*r21);
IkReal x5821=(cj5*r20);
IkReal x5822=(r21*sj5);
IkReal x5823=r20*r20;
IkReal x5824=r21*r21;
IkReal x5825=((1.5)*(cj5*cj5));
CheckValue<IkReal> x5826 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x5820)))),IkReal(((((0.866025403784439)*x5821))+(((-0.866025403784439)*x5822))+(((-1.0)*(1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5826.valid){
continue;
}
CheckValue<IkReal> x5827=IKPowWithIntegerCheck(IKsign(((((-3.0)*cj5*r20*x5822))+(((1.73205080756888)*r22*x5821))+(((-1.0)*x5824*x5825))+(((-1.0)*r22*sj5*x5820))+(((-1.0)*(1.5)*(r22*r22)))+((x5823*x5825))+(((-0.5)*x5824))+(((-2.0)*x5823)))),-1);
if(!x5827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5826.value)+(((1.5707963267949)*(x5827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5828=IKsin(j4);
IkReal x5829=((0.866025403784439)*r22);
IkReal x5830=((0.5)*r20);
IkReal x5831=(cj5*x5828);
IkReal x5832=IKcos(j4);
IkReal x5833=((1.0)*cj5*x5832);
IkReal x5834=(r20*sj5);
IkReal x5835=((0.5)*r21*sj5);
IkReal x5836=((0.866025403784439)*cj0*r02);
IkReal x5837=((0.866025403784439)*r12*sj0);
IkReal x5838=(cj0*cj5*x5828);
IkReal x5839=(cj0*sj5*x5828);
IkReal x5840=(cj5*sj0*x5828);
IkReal x5841=(sj0*sj5*x5828);
IkReal x5842=((0.5)*r00);
IkReal x5843=(cj0*cj5*x5832);
IkReal x5844=((0.5)*r01);
IkReal x5845=(cj0*sj5*x5832);
IkReal x5846=((0.5)*r10);
IkReal x5847=(cj5*sj0*x5832);
IkReal x5848=((0.5)*r11);
IkReal x5849=(sj0*sj5*x5832);
IkReal x5850=((0.866025403784439)*cj0*r12);
IkReal x5851=((0.866025403784439)*r02*sj0);
IkReal x5852=(r00*sj0*sj5);
IkReal x5853=((1.0)*cj0*cj5*x5832);
IkReal x5854=((1.0)*cj0*sj5*x5832);
evalcond[0]=((((-1.0)*r21*x5833))+((x5828*x5835))+(((-1.0)*x5832*x5834))+((x5828*x5829))+(((-1.0)*x5830*x5831)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x5830*x5832))+((x5828*x5834))+((r21*x5831))+((x5829*x5832))+((x5832*x5835)));
evalcond[2]=(((x5832*x5837))+((x5832*x5836))+((r01*x5838))+((r00*x5839))+((x5848*x5849))+(((-1.0)*x5846*x5847))+((r11*x5840))+(((-1.0)*(0.5)*sj3))+((r10*x5841))+((x5844*x5845))+(((-1.0)*x5842*x5843)));
evalcond[3]=(((r11*x5838))+(((-1.0)*x5828*x5852))+(((-1.0)*r01*x5840))+((r10*x5839))+((x5842*x5847))+((x5832*x5850))+(((0.5)*cj3))+(((-1.0)*x5832*x5851))+(((-1.0)*x5844*x5849))+(((-1.0)*x5843*x5846))+((x5845*x5848)));
evalcond[4]=((((-1.0)*x5841*x5844))+(((-1.0)*r10*x5854))+((x5832*x5852))+((x5840*x5842))+(((-1.0)*r11*x5853))+(((-1.0)*x5838*x5846))+(((-1.0)*(1.0)*sj3))+((x5839*x5848))+((x5828*x5850))+(((-1.0)*x5828*x5851))+((r01*x5847)));
evalcond[5]=((((-1.0)*r00*x5854))+((x5828*x5836))+((x5828*x5837))+(((-1.0)*(1.0)*cj3))+(((-1.0)*r01*x5853))+(((-1.0)*r10*sj0*sj5*x5832))+(((-1.0)*x5840*x5846))+(((-1.0)*x5838*x5842))+((x5841*x5848))+(((-1.0)*r11*sj0*x5833))+((x5839*x5844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5855=(cj5*sj3);
IkReal x5856=(sj3*sj5);
IkReal x5857=((0.866025403784439)*cj0);
IkReal x5858=((0.866025403784439)*sj0);
CheckValue<IkReal> x5859=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x5858))+((cj5*r00*x5857))+(((0.5)*r12*sj0))+((cj5*r10*x5858))+(((-1.0)*r01*sj5*x5857))+(((0.5)*cj0*r02)))),-1);
if(!x5859.valid){
continue;
}
CheckValue<IkReal> x5860 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5855))+(((-1.0)*r20*x5856)))),IkReal(((((-1.0)*(0.866025403784439)*r22*sj3))+(((0.5)*r20*x5855))+(((-0.5)*r21*x5856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5859.value)))+(x5860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5861=IKsin(j4);
IkReal x5862=((0.866025403784439)*r22);
IkReal x5863=((0.5)*r20);
IkReal x5864=(cj5*x5861);
IkReal x5865=IKcos(j4);
IkReal x5866=((1.0)*cj5*x5865);
IkReal x5867=(r20*sj5);
IkReal x5868=((0.5)*r21*sj5);
IkReal x5869=((0.866025403784439)*cj0*r02);
IkReal x5870=((0.866025403784439)*r12*sj0);
IkReal x5871=(cj0*cj5*x5861);
IkReal x5872=(cj0*sj5*x5861);
IkReal x5873=(cj5*sj0*x5861);
IkReal x5874=(sj0*sj5*x5861);
IkReal x5875=((0.5)*r00);
IkReal x5876=(cj0*cj5*x5865);
IkReal x5877=((0.5)*r01);
IkReal x5878=(cj0*sj5*x5865);
IkReal x5879=((0.5)*r10);
IkReal x5880=(cj5*sj0*x5865);
IkReal x5881=((0.5)*r11);
IkReal x5882=(sj0*sj5*x5865);
IkReal x5883=((0.866025403784439)*cj0*r12);
IkReal x5884=((0.866025403784439)*r02*sj0);
IkReal x5885=(r00*sj0*sj5);
IkReal x5886=((1.0)*cj0*cj5*x5865);
IkReal x5887=((1.0)*cj0*sj5*x5865);
evalcond[0]=(((x5861*x5862))+((x5861*x5868))+(((-1.0)*x5865*x5867))+(((-1.0)*r21*x5866))+(((-1.0)*x5863*x5864)));
evalcond[1]=((-0.866025403784439)+((x5865*x5868))+((x5862*x5865))+((r21*x5864))+(((-1.0)*cj5*x5863*x5865))+((x5861*x5867)));
evalcond[2]=(((r01*x5871))+(((-1.0)*x5875*x5876))+((r00*x5872))+((r10*x5874))+(((-1.0)*(0.5)*sj3))+((x5877*x5878))+((r11*x5873))+((x5881*x5882))+((x5865*x5870))+(((-1.0)*x5879*x5880))+((x5865*x5869)));
evalcond[3]=(((x5875*x5880))+((r10*x5872))+((x5865*x5883))+(((-1.0)*x5861*x5885))+(((-1.0)*r01*x5873))+((r11*x5871))+(((0.5)*cj3))+(((-1.0)*x5876*x5879))+(((-1.0)*x5877*x5882))+((x5878*x5881))+(((-1.0)*x5865*x5884)));
evalcond[4]=((((-1.0)*r11*x5886))+((r01*x5880))+(((-1.0)*x5874*x5877))+((x5873*x5875))+((x5865*x5885))+(((-1.0)*r10*x5887))+((x5861*x5883))+((x5872*x5881))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x5861*x5884))+(((-1.0)*x5871*x5879)));
evalcond[5]=((((-1.0)*r00*x5887))+(((-1.0)*(1.0)*cj3))+(((-1.0)*r10*sj0*sj5*x5865))+((x5874*x5881))+(((-1.0)*r11*sj0*x5866))+((x5872*x5877))+((x5861*x5869))+(((-1.0)*x5871*x5875))+(((-1.0)*x5873*x5879))+((x5861*x5870))+(((-1.0)*r01*x5886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5888=(cj0*cj5);
IkReal x5889=(r01*sj5);
IkReal x5890=(cj5*sj0);
IkReal x5891=(r11*sj5);
CheckValue<IkReal> x5892=IKPowWithIntegerCheck(((((-1.0)*(0.866025403784439)*cj1*cj2))+(((-1.0)*(0.866025403784439)*sj1*sj2))),-1);
if(!x5892.valid){
continue;
}
if( IKabs(((x5892.value)*(((((-0.866025403784439)*cj0*x5889))+(((-0.866025403784439)*sj0*x5891))+(((0.5)*cj1*sj2))+(((0.5)*r12*sj0))+(((0.866025403784439)*r00*x5888))+(((-1.0)*(0.5)*cj2*sj1))+(((0.5)*cj0*r02))+(((0.866025403784439)*r10*x5890)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x5888))+((sj0*x5889))+(((-1.0)*r00*x5890))+(((-1.0)*cj0*x5891))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5892.value)*(((((-0.866025403784439)*cj0*x5889))+(((-0.866025403784439)*sj0*x5891))+(((0.5)*cj1*sj2))+(((0.5)*r12*sj0))+(((0.866025403784439)*r00*x5888))+(((-1.0)*(0.5)*cj2*sj1))+(((0.5)*cj0*r02))+(((0.866025403784439)*r10*x5890))))))+IKsqr((((r10*x5888))+((sj0*x5889))+(((-1.0)*r00*x5890))+(((-1.0)*cj0*x5891))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x5892.value)*(((((-0.866025403784439)*cj0*x5889))+(((-0.866025403784439)*sj0*x5891))+(((0.5)*cj1*sj2))+(((0.5)*r12*sj0))+(((0.866025403784439)*r00*x5888))+(((-1.0)*(0.5)*cj2*sj1))+(((0.5)*cj0*r02))+(((0.866025403784439)*r10*x5890))))), (((r10*x5888))+((sj0*x5889))+(((-1.0)*r00*x5890))+(((-1.0)*cj0*x5891))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x5893=((0.5)*cj1);
IkReal x5894=((0.5)*sj1);
IkReal x5895=IKsin(j3);
IkReal x5896=((0.866025403784439)*cj1*x5895);
IkReal x5897=((0.866025403784439)*sj1*x5895);
IkReal x5898=((0.5)*cj0);
IkReal x5899=((0.5)*sj0);
IkReal x5900=((0.866025403784439)*cj0*cj5);
IkReal x5901=((0.866025403784439)*cj0*sj5);
IkReal x5902=((0.866025403784439)*cj5*sj0);
IkReal x5903=((0.866025403784439)*sj0*sj5);
evalcond[0]=(((cj2*x5897))+(((-1.0)*sj2*x5896))+((sj2*x5894))+(((-1.0)*(0.5)*r22))+(((-0.866025403784439)*cj5*r20))+((r21*(((0.866025403784439)*sj5))))+((cj2*x5893)));
evalcond[1]=((((-1.0)*r12*x5898))+((r02*x5899))+((r00*x5902))+(((-1.0)*r10*x5900))+((r11*x5901))+(((-1.0)*r01*x5903))+(((0.866025403784439)*(IKcos(j3)))));
evalcond[2]=((((-1.0)*sj2*x5893))+(((-1.0)*sj2*x5897))+(((-1.0)*r10*x5902))+((cj2*x5894))+(((-1.0)*r00*x5900))+(((-1.0)*cj2*x5896))+((r11*x5903))+(((-1.0)*r02*x5898))+((r01*x5901))+(((-1.0)*r12*x5899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x5904=(cj0*r02);
IkReal x5905=(r12*sj0);
IkReal x5906=(cj0*cj5*r00);
IkReal x5907=(cj0*r01*sj5);
IkReal x5908=(cj5*r10*sj0);
IkReal x5909=(r11*sj0*sj5);
j4eval[0]=(x5904+x5905+(((1.73205080756888)*x5906))+(((1.73205080756888)*x5908))+(((-1.73205080756888)*x5909))+(((-1.73205080756888)*x5907)));
j4eval[1]=IKsign(((((0.866025403784439)*x5908))+(((-0.866025403784439)*x5907))+(((-0.866025403784439)*x5909))+(((0.866025403784439)*x5906))+(((0.5)*x5905))+(((0.5)*x5904))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5910=(r02*sj0);
IkReal x5911=(cj0*r12);
IkReal x5912=(cj0*cj5*r10);
IkReal x5913=(cj0*r11*sj5);
IkReal x5914=(cj5*r00*sj0);
IkReal x5915=(r01*sj0*sj5);
j4eval[0]=(x5910+(((-1.73205080756888)*x5915))+(((-1.73205080756888)*x5912))+(((-1.0)*x5911))+(((1.73205080756888)*x5914))+(((1.73205080756888)*x5913)));
j4eval[1]=IKsign(((((-0.866025403784439)*x5915))+(((-0.866025403784439)*x5912))+(((0.866025403784439)*x5913))+(((-0.5)*x5911))+(((0.866025403784439)*x5914))+(((0.5)*x5910))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5916=r20*r20;
IkReal x5917=r21*r21;
IkReal x5918=r22*r22;
IkReal x5919=(cj5*r20*r22);
IkReal x5920=(r21*r22*sj5);
IkReal x5921=(cj5*r20*r21*sj5);
IkReal x5922=cj5*cj5;
IkReal x5923=(x5916*x5922);
IkReal x5924=(x5917*x5922);
j4eval[0]=((((3.46410161513775)*x5919))+(((-4.0)*x5916))+(((-3.46410161513775)*x5920))+(((-6.0)*x5921))+(((-1.0)*x5917))+(((-3.0)*x5918))+(((3.0)*x5923))+(((-3.0)*x5924)));
j4eval[1]=IKsign(((((-0.25)*x5917))+(((0.75)*x5923))+(((-0.866025403784439)*x5920))+(((-0.75)*x5918))+(((-1.5)*x5921))+(((-1.0)*x5916))+(((0.866025403784439)*x5919))+(((-0.75)*x5924))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5925=r20*r20;
IkReal x5926=r21*r21;
IkReal x5927=((0.866025403784439)*r22);
IkReal x5928=(cj5*r20);
IkReal x5929=(r21*sj5);
IkReal x5930=((0.75)*(cj5*cj5));
IkReal x5931=(cj5*r21);
IkReal x5932=((0.866025403784439)*cj1*cj2);
IkReal x5933=(r20*sj5);
IkReal x5934=(cj1*sj2);
IkReal x5935=((0.866025403784439)*cj3*r22);
IkReal x5936=(cj2*sj1);
IkReal x5937=((0.866025403784439)*sj1*sj2);
IkReal x5938=((0.5)*cj1*cj3*sj2);
IkReal x5939=((0.5)*cj1*sj2*sj3);
IkReal x5940=((0.5)*cj2*cj3*sj1);
IkReal x5941=((0.5)*cj2*sj1*sj3);
IkReal x5942=((0.75)*r22);
IkReal x5943=((0.433012701892219)*cj1*cj2);
IkReal x5944=((0.433012701892219)*r22*sj3);
IkReal x5945=((0.433012701892219)*sj1*sj2);
IkReal x5946=(cj1*cj3*sj2);
IkReal x5947=((0.25)*cj1*sj2*sj3);
IkReal x5948=((1.0)*cj2*cj3*sj1);
IkReal x5949=((0.25)*cj2*sj1*sj3);
CheckValue<IkReal> x5950 = IKatan2WithCheck(IkReal(((((-1.0)*x5933*x5939))+((x5931*x5941))+((x5933*x5941))+((x5935*x5936))+((x5928*x5938))+((x5929*x5940))+(((-1.0)*x5931*x5939))+(((-1.0)*x5929*x5938))+(((-1.0)*x5931*x5937))+(((-1.0)*x5933*x5937))+(((-1.0)*x5931*x5932))+(((-1.0)*x5932*x5933))+(((-1.0)*x5928*x5940))+(((-1.0)*x5934*x5935)))),IkReal(((((-1.0)*sj1*sj2*x5942))+(((-1.0)*x5928*x5949))+(((-1.0)*x5933*x5948))+((x5936*x5944))+((x5929*x5949))+(((-1.0)*x5931*x5948))+((x5928*x5947))+(((-1.0)*x5929*x5947))+(((-1.0)*cj1*cj2*x5942))+(((-1.0)*x5934*x5944))+((x5933*x5946))+((x5931*x5946))+(((-1.0)*x5929*x5943))+(((-1.0)*x5929*x5945))+((x5928*x5945))+((x5928*x5943)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5950.valid){
continue;
}
CheckValue<IkReal> x5951=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5926*x5930))+(((-0.25)*x5926))+(((-1.0)*x5925))+((x5925*x5930))+(((-1.0)*(0.75)*(r22*r22)))+((x5927*x5928))+(((-1.5)*cj5*r20*x5929))+(((-1.0)*x5927*x5929)))),-1);
if(!x5951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5950.value)+(((1.5707963267949)*(x5951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5952=(cj2*cj3);
IkReal x5953=IKsin(j4);
IkReal x5954=((0.866025403784439)*r22);
IkReal x5955=((1.0)*cj1);
IkReal x5956=(cj3*sj2);
IkReal x5957=((0.5)*r20);
IkReal x5958=(cj5*x5953);
IkReal x5959=IKcos(j4);
IkReal x5960=((1.0)*cj5*x5959);
IkReal x5961=(r20*sj5);
IkReal x5962=((0.5)*r21*sj5);
IkReal x5963=((0.866025403784439)*cj1);
IkReal x5964=((0.866025403784439)*sj1);
IkReal x5965=((0.5)*cj1*sj3);
IkReal x5966=((0.5)*sj1*sj3);
IkReal x5967=((0.866025403784439)*cj0*r12);
IkReal x5968=((0.866025403784439)*r02*sj0);
IkReal x5969=(cj0*cj5*x5953);
IkReal x5970=(cj0*sj5*x5953);
IkReal x5971=((0.5)*r10);
IkReal x5972=(cj0*cj5*x5959);
IkReal x5973=((0.5)*r11);
IkReal x5974=(cj0*sj5*x5959);
IkReal x5975=((0.5)*r00);
IkReal x5976=(cj5*sj0*x5959);
IkReal x5977=(cj5*sj0*x5953);
IkReal x5978=(r00*sj0*sj5);
IkReal x5979=((0.5)*r01);
IkReal x5980=(sj0*sj5*x5959);
IkReal x5981=((1.0)*cj0*cj5*x5959);
IkReal x5982=((1.0)*cj0*sj5*x5959);
IkReal x5983=(sj0*sj5*x5953);
IkReal x5984=((0.866025403784439)*cj0*r02);
IkReal x5985=((0.866025403784439)*r12*sj0);
evalcond[0]=((((-1.0)*x5957*x5958))+(((-1.0)*r21*x5960))+(((-1.0)*x5955*x5956))+(((-1.0)*x5959*x5961))+((sj1*x5952))+((x5953*x5954))+((x5953*x5962)));
evalcond[1]=((((-1.0)*sj2*x5964))+(((-1.0)*sj2*x5965))+((x5954*x5959))+((r21*x5958))+((cj2*x5966))+((x5959*x5962))+((x5953*x5961))+(((-1.0)*cj5*x5957*x5959))+(((-1.0)*cj2*x5963)));
evalcond[2]=((((-1.0)*x5959*x5968))+(((-1.0)*x5953*x5978))+((x5975*x5976))+((x5959*x5967))+(((-1.0)*r01*x5977))+(((0.5)*cj3))+((x5973*x5974))+((r10*x5970))+(((-1.0)*x5979*x5980))+(((-1.0)*x5971*x5972))+((r11*x5969)));
evalcond[3]=(((x5975*x5977))+(((-1.0)*r10*x5982))+(((-1.0)*r11*x5981))+((x5953*x5967))+(((-1.0)*x5969*x5971))+(((-1.0)*x5953*x5968))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x5979*x5983))+((r01*x5976))+((x5970*x5973))+((x5959*x5978)));
evalcond[4]=(((x5973*x5983))+(((-1.0)*x5971*x5977))+(((-1.0)*sj1*x5956))+(((-1.0)*x5969*x5975))+(((-1.0)*x5952*x5955))+(((-1.0)*r11*sj0*x5960))+((x5953*x5985))+((x5970*x5979))+((x5953*x5984))+(((-1.0)*r00*x5982))+(((-1.0)*r01*x5981))+(((-1.0)*r10*sj0*sj5*x5959)));
evalcond[5]=(((r01*x5969))+(((-1.0)*cj2*x5964))+(((-1.0)*x5971*x5976))+((r10*x5983))+(((-1.0)*cj2*x5965))+((r11*x5977))+((r00*x5970))+((x5959*x5984))+((x5974*x5979))+((x5959*x5985))+((x5973*x5980))+(((-1.0)*x5972*x5975))+((sj2*x5963))+(((-1.0)*sj2*x5966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5986=((0.866025403784439)*cj0);
IkReal x5987=(cj5*r10);
IkReal x5988=(r11*sj5);
IkReal x5989=((0.866025403784439)*sj0);
IkReal x5990=(cj5*r00);
IkReal x5991=(r01*sj5);
IkReal x5992=((1.0)*r21);
IkReal x5993=(cj1*cj2*cj3*cj5);
IkReal x5994=((1.0)*r20);
IkReal x5995=(cj1*cj2*cj3*sj5);
IkReal x5996=(cj3*cj5*sj1*sj2);
IkReal x5997=(cj3*sj1*sj2*sj5);
IkReal x5998=(cj5*r01);
IkReal x5999=(cj0*cj1*cj3*sj2);
IkReal x6000=(r00*sj5);
IkReal x6001=(cj5*r11);
IkReal x6002=(cj1*cj3*sj0*sj2);
IkReal x6003=(r10*sj5);
IkReal x6004=((1.0)*cj0*cj2*cj3*sj1);
IkReal x6005=((1.0)*cj2*cj3*sj0*sj1);
IkReal x6006=((0.866025403784439)*cj3*r22);
IkReal x6007=(cj1*sj2);
IkReal x6008=((0.866025403784439)*cj0*cj3*r02);
IkReal x6009=(cj2*sj1);
IkReal x6010=((0.5)*r20);
IkReal x6011=((0.5)*r21);
IkReal x6012=((0.866025403784439)*cj3*r12*sj0);
IkReal x6013=((0.5)*cj0*cj1*cj3*sj2);
IkReal x6014=((0.5)*cj0*cj2*cj3*sj1);
IkReal x6015=((0.5)*cj1*cj3*sj0*sj2);
IkReal x6016=((0.5)*cj2*cj3*sj0*sj1);
CheckValue<IkReal> x6017=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5986*x5987))+(((-0.5)*cj0*r12))+(((-1.0)*x5989*x5991))+((x5989*x5990))+((x5986*x5988))+((r02*(((0.5)*sj0)))))),-1);
if(!x6017.valid){
continue;
}
CheckValue<IkReal> x6018 = IKatan2WithCheck(IkReal(((((-1.0)*x5992*x5996))+((x5999*x6000))+(((-1.0)*x5994*x5997))+(((-1.0)*x5992*x5993))+(((-1.0)*x6001*x6005))+(((-1.0)*x6003*x6005))+(((-1.0)*x5994*x5995))+((x6002*x6003))+((x6001*x6002))+(((-1.0)*x6000*x6004))+((x5998*x5999))+(((-1.0)*x5998*x6004)))),IkReal((((x5987*x6016))+((x5988*x6015))+(((-1.0)*x5988*x6016))+(((-1.0)*x5995*x6011))+(((-1.0)*sj1*sj2*x6006))+(((-1.0)*x6008*x6009))+((x6007*x6008))+(((-1.0)*x5991*x6014))+(((-1.0)*cj1*cj2*x6006))+((x5993*x6010))+(((-1.0)*x6009*x6012))+(((-1.0)*x5990*x6013))+((x5990*x6014))+(((-1.0)*x5987*x6015))+((x5996*x6010))+((x5991*x6013))+(((-1.0)*x5997*x6011))+((x6007*x6012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6017.value)))+(x6018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6019=(cj2*cj3);
IkReal x6020=IKsin(j4);
IkReal x6021=((0.866025403784439)*r22);
IkReal x6022=((1.0)*cj1);
IkReal x6023=(cj3*sj2);
IkReal x6024=((0.5)*r20);
IkReal x6025=(cj5*x6020);
IkReal x6026=IKcos(j4);
IkReal x6027=((1.0)*cj5*x6026);
IkReal x6028=(r20*sj5);
IkReal x6029=((0.5)*r21*sj5);
IkReal x6030=((0.866025403784439)*cj1);
IkReal x6031=((0.866025403784439)*sj1);
IkReal x6032=((0.5)*cj1*sj3);
IkReal x6033=((0.5)*sj1*sj3);
IkReal x6034=((0.866025403784439)*cj0*r12);
IkReal x6035=((0.866025403784439)*r02*sj0);
IkReal x6036=(cj0*cj5*x6020);
IkReal x6037=(cj0*sj5*x6020);
IkReal x6038=((0.5)*r10);
IkReal x6039=(cj0*cj5*x6026);
IkReal x6040=((0.5)*r11);
IkReal x6041=(cj0*sj5*x6026);
IkReal x6042=((0.5)*r00);
IkReal x6043=(cj5*sj0*x6026);
IkReal x6044=(cj5*sj0*x6020);
IkReal x6045=(r00*sj0*sj5);
IkReal x6046=((0.5)*r01);
IkReal x6047=(sj0*sj5*x6026);
IkReal x6048=((1.0)*cj0*cj5*x6026);
IkReal x6049=((1.0)*cj0*sj5*x6026);
IkReal x6050=(sj0*sj5*x6020);
IkReal x6051=((0.866025403784439)*cj0*r02);
IkReal x6052=((0.866025403784439)*r12*sj0);
evalcond[0]=(((sj1*x6019))+(((-1.0)*x6022*x6023))+(((-1.0)*x6026*x6028))+(((-1.0)*r21*x6027))+((x6020*x6029))+((x6020*x6021))+(((-1.0)*x6024*x6025)));
evalcond[1]=(((x6021*x6026))+((x6020*x6028))+((x6026*x6029))+(((-1.0)*sj2*x6032))+(((-1.0)*sj2*x6031))+(((-1.0)*cj5*x6024*x6026))+(((-1.0)*cj2*x6030))+((cj2*x6033))+((r21*x6025)));
evalcond[2]=((((-1.0)*x6038*x6039))+(((-1.0)*x6020*x6045))+((x6026*x6034))+((r11*x6036))+(((-1.0)*x6026*x6035))+((x6040*x6041))+(((0.5)*cj3))+(((-1.0)*x6046*x6047))+((r10*x6037))+(((-1.0)*r01*x6044))+((x6042*x6043)));
evalcond[3]=((((-1.0)*x6020*x6035))+(((-1.0)*r11*x6048))+(((-1.0)*r10*x6049))+((x6026*x6045))+(((-1.0)*x6046*x6050))+(((-1.0)*x6036*x6038))+((x6037*x6040))+(((-1.0)*(1.0)*sj3))+((r01*x6043))+((x6020*x6034))+((x6042*x6044)));
evalcond[4]=((((-1.0)*x6019*x6022))+(((-1.0)*r10*sj0*sj5*x6026))+((x6020*x6052))+(((-1.0)*x6038*x6044))+(((-1.0)*x6036*x6042))+(((-1.0)*r00*x6049))+(((-1.0)*r01*x6048))+((x6040*x6050))+(((-1.0)*sj1*x6023))+((x6037*x6046))+(((-1.0)*r11*sj0*x6027))+((x6020*x6051)));
evalcond[5]=(((x6026*x6052))+((sj2*x6030))+((r10*x6050))+(((-1.0)*cj2*x6032))+((r01*x6036))+((x6026*x6051))+((x6041*x6046))+(((-1.0)*x6038*x6043))+(((-1.0)*cj2*x6031))+((r00*x6037))+(((-1.0)*sj2*x6033))+(((-1.0)*x6039*x6042))+((x6040*x6047))+((r11*x6044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6053=((0.866025403784439)*cj0);
IkReal x6054=(cj5*r00);
IkReal x6055=(r01*sj5);
IkReal x6056=((0.866025403784439)*sj0);
IkReal x6057=(cj5*r10);
IkReal x6058=(r11*sj5);
IkReal x6059=(cj5*sj3);
IkReal x6060=(sj3*sj5);
IkReal x6061=(cj5*r11);
IkReal x6062=(cj0*cj1*cj3*sj2);
IkReal x6063=(r10*sj5);
IkReal x6064=(cj5*r01);
IkReal x6065=(cj2*cj3*sj0*sj1);
IkReal x6066=(r00*sj5);
IkReal x6067=((1.0)*cj0*cj2*cj3*sj1);
IkReal x6068=((1.0)*cj1*cj3*sj0*sj2);
IkReal x6069=(cj1*sj2);
IkReal x6070=((0.866025403784439)*cj0*cj3*r12);
IkReal x6071=(cj2*sj1);
IkReal x6072=((0.866025403784439)*cj3*r02*sj0);
IkReal x6073=((0.5)*cj0*cj1*cj3*sj2);
IkReal x6074=((0.5)*cj0*cj2*cj3*sj1);
IkReal x6075=((0.5)*cj1*cj3*sj0*sj2);
IkReal x6076=((0.5)*cj2*cj3*sj0*sj1);
CheckValue<IkReal> x6077 = IKatan2WithCheck(IkReal(((((-1.0)*x6063*x6067))+((x6062*x6063))+(((-1.0)*x6061*x6067))+((x6065*x6066))+(((-1.0)*x6066*x6068))+((x6061*x6062))+(((-1.0)*r20*x6060))+(((-1.0)*r21*x6059))+((x6064*x6065))+(((-1.0)*x6064*x6068)))),IkReal(((((0.5)*r20*x6059))+((x6055*x6076))+((x6054*x6075))+((x6058*x6073))+(((-1.0)*(0.866025403784439)*r22*sj3))+(((-1.0)*x6057*x6073))+((x6071*x6072))+(((-1.0)*x6070*x6071))+((x6069*x6070))+(((-0.5)*r21*x6060))+(((-1.0)*x6055*x6075))+((x6057*x6074))+(((-1.0)*x6069*x6072))+(((-1.0)*x6058*x6074))+(((-1.0)*x6054*x6076)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6077.valid){
continue;
}
CheckValue<IkReal> x6078=IKPowWithIntegerCheck(IKsign((((r02*(((0.5)*cj0))))+((x6056*x6057))+((x6053*x6054))+(((-1.0)*x6053*x6055))+((r12*(((0.5)*sj0))))+(((-1.0)*x6056*x6058)))),-1);
if(!x6078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6077.value)+(((1.5707963267949)*(x6078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6079=(cj2*cj3);
IkReal x6080=IKsin(j4);
IkReal x6081=((0.866025403784439)*r22);
IkReal x6082=((1.0)*cj1);
IkReal x6083=(cj3*sj2);
IkReal x6084=((0.5)*r20);
IkReal x6085=(cj5*x6080);
IkReal x6086=IKcos(j4);
IkReal x6087=((1.0)*cj5*x6086);
IkReal x6088=(r20*sj5);
IkReal x6089=((0.5)*r21*sj5);
IkReal x6090=((0.866025403784439)*cj1);
IkReal x6091=((0.866025403784439)*sj1);
IkReal x6092=((0.5)*cj1*sj3);
IkReal x6093=((0.5)*sj1*sj3);
IkReal x6094=((0.866025403784439)*cj0*r12);
IkReal x6095=((0.866025403784439)*r02*sj0);
IkReal x6096=(cj0*cj5*x6080);
IkReal x6097=(cj0*sj5*x6080);
IkReal x6098=((0.5)*r10);
IkReal x6099=(cj0*cj5*x6086);
IkReal x6100=((0.5)*r11);
IkReal x6101=(cj0*sj5*x6086);
IkReal x6102=((0.5)*r00);
IkReal x6103=(cj5*sj0*x6086);
IkReal x6104=(cj5*sj0*x6080);
IkReal x6105=(r00*sj0*sj5);
IkReal x6106=((0.5)*r01);
IkReal x6107=(sj0*sj5*x6086);
IkReal x6108=((1.0)*cj0*cj5*x6086);
IkReal x6109=((1.0)*cj0*sj5*x6086);
IkReal x6110=(sj0*sj5*x6080);
IkReal x6111=((0.866025403784439)*cj0*r02);
IkReal x6112=((0.866025403784439)*r12*sj0);
evalcond[0]=(((x6080*x6081))+(((-1.0)*x6084*x6085))+(((-1.0)*x6082*x6083))+(((-1.0)*x6086*x6088))+(((-1.0)*r21*x6087))+((x6080*x6089))+((sj1*x6079)));
evalcond[1]=((((-1.0)*cj5*x6084*x6086))+(((-1.0)*cj2*x6090))+((cj2*x6093))+((x6080*x6088))+((x6086*x6089))+(((-1.0)*sj2*x6091))+((r21*x6085))+(((-1.0)*sj2*x6092))+((x6081*x6086)));
evalcond[2]=(((x6086*x6094))+(((-1.0)*x6098*x6099))+(((-1.0)*x6080*x6105))+((x6102*x6103))+(((-1.0)*x6106*x6107))+(((0.5)*cj3))+((r10*x6097))+((x6100*x6101))+(((-1.0)*x6086*x6095))+(((-1.0)*r01*x6104))+((r11*x6096)));
evalcond[3]=(((x6097*x6100))+((r01*x6103))+(((-1.0)*r11*x6108))+(((-1.0)*x6080*x6095))+(((-1.0)*x6096*x6098))+((x6102*x6104))+((x6086*x6105))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x6106*x6110))+(((-1.0)*r10*x6109))+((x6080*x6094)));
evalcond[4]=((((-1.0)*r10*sj0*sj5*x6086))+(((-1.0)*x6098*x6104))+((x6080*x6112))+(((-1.0)*x6096*x6102))+((x6100*x6110))+(((-1.0)*r00*x6109))+((x6080*x6111))+(((-1.0)*r11*sj0*x6087))+(((-1.0)*x6079*x6082))+(((-1.0)*r01*x6108))+((x6097*x6106))+(((-1.0)*sj1*x6083)));
evalcond[5]=((((-1.0)*x6099*x6102))+((r01*x6096))+((r10*x6110))+((x6086*x6112))+(((-1.0)*cj2*x6091))+((r00*x6097))+((x6086*x6111))+(((-1.0)*cj2*x6092))+((x6100*x6107))+((x6101*x6106))+(((-1.0)*x6098*x6103))+(((-1.0)*sj2*x6093))+((sj2*x6090))+((r11*x6104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x6113=IKPowWithIntegerCheck(((((0.866025403784439)*cj2*sj1))+(((-1.0)*(0.866025403784439)*cj1*sj2))),-1);
if(!x6113.valid){
continue;
}
if( IKabs(((x6113.value)*(((((-1.0)*(0.5)*cj1*cj2))+(((-1.0)*(0.5)*sj1*sj2))+(((0.866025403784439)*cj5*r20))+(((0.5)*r22))+(((-1.0)*(0.866025403784439)*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6113.value)*(((((-1.0)*(0.5)*cj1*cj2))+(((-1.0)*(0.5)*sj1*sj2))+(((0.866025403784439)*cj5*r20))+(((0.5)*r22))+(((-1.0)*(0.866025403784439)*r21*sj5))))))+IKsqr(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x6113.value)*(((((-1.0)*(0.5)*cj1*cj2))+(((-1.0)*(0.5)*sj1*sj2))+(((0.866025403784439)*cj5*r20))+(((0.5)*r22))+(((-1.0)*(0.866025403784439)*r21*sj5))))), ((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x6114=((0.5)*cj1);
IkReal x6115=((0.5)*sj1);
IkReal x6116=IKsin(j3);
IkReal x6117=((0.866025403784439)*cj1*x6116);
IkReal x6118=((0.866025403784439)*sj1*x6116);
IkReal x6119=((0.5)*cj0);
IkReal x6120=((0.5)*sj0);
IkReal x6121=((0.866025403784439)*cj0*cj5);
IkReal x6122=((0.866025403784439)*cj0*sj5);
IkReal x6123=((0.866025403784439)*cj5*sj0);
IkReal x6124=((0.866025403784439)*sj0*sj5);
evalcond[0]=(((sj2*x6115))+(((-1.0)*(0.5)*r22))+((cj2*x6118))+(((-0.866025403784439)*cj5*r20))+((r21*(((0.866025403784439)*sj5))))+(((-1.0)*sj2*x6117))+((cj2*x6114)));
evalcond[1]=((((-1.0)*r12*x6119))+((r11*x6122))+((r00*x6123))+(((-1.0)*r01*x6124))+((r02*x6120))+(((-1.0)*r10*x6121))+(((0.866025403784439)*(IKcos(j3)))));
evalcond[2]=((((-1.0)*sj2*x6114))+(((-1.0)*sj2*x6118))+(((-1.0)*r10*x6123))+(((-1.0)*r02*x6119))+((r11*x6124))+(((-1.0)*cj2*x6117))+(((-1.0)*r00*x6121))+(((-1.0)*r12*x6120))+((cj2*x6115))+((r01*x6122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x6125=(cj0*r02);
IkReal x6126=(r12*sj0);
IkReal x6127=(cj0*cj5*r00);
IkReal x6128=(cj0*r01*sj5);
IkReal x6129=(cj5*r10*sj0);
IkReal x6130=(r11*sj0*sj5);
j4eval[0]=(x6126+x6125+(((1.73205080756888)*x6127))+(((-1.73205080756888)*x6130))+(((-1.73205080756888)*x6128))+(((1.73205080756888)*x6129)));
j4eval[1]=IKsign(((((0.5)*x6125))+(((-0.866025403784439)*x6128))+(((0.866025403784439)*x6127))+(((-0.866025403784439)*x6130))+(((0.866025403784439)*x6129))+(((0.5)*x6126))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6131=(r02*sj0);
IkReal x6132=(cj0*r12);
IkReal x6133=(cj0*cj5*r10);
IkReal x6134=(cj0*r11*sj5);
IkReal x6135=(cj5*r00*sj0);
IkReal x6136=(r01*sj0*sj5);
j4eval[0]=(x6131+(((-1.73205080756888)*x6136))+(((-1.0)*x6132))+(((-1.73205080756888)*x6133))+(((1.73205080756888)*x6134))+(((1.73205080756888)*x6135)));
j4eval[1]=IKsign(((((-0.866025403784439)*x6136))+(((-0.5)*x6132))+(((-0.866025403784439)*x6133))+(((0.866025403784439)*x6135))+(((0.866025403784439)*x6134))+(((0.5)*x6131))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6137=r20*r20;
IkReal x6138=r21*r21;
IkReal x6139=r22*r22;
IkReal x6140=(cj5*r20*r22);
IkReal x6141=(r21*r22*sj5);
IkReal x6142=(cj5*r20*r21*sj5);
IkReal x6143=cj5*cj5;
IkReal x6144=(x6137*x6143);
IkReal x6145=(x6138*x6143);
j4eval[0]=((((3.46410161513775)*x6140))+(((-3.0)*x6145))+(((-3.46410161513775)*x6141))+(((-3.0)*x6139))+(((-6.0)*x6142))+(((3.0)*x6144))+(((-1.0)*x6138))+(((-4.0)*x6137)));
j4eval[1]=IKsign(((((0.75)*x6144))+(((-0.75)*x6139))+(((0.866025403784439)*x6140))+(((-0.866025403784439)*x6141))+(((-1.0)*x6137))+(((-0.25)*x6138))+(((-0.75)*x6145))+(((-1.5)*x6142))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6146=r20*r20;
IkReal x6147=r21*r21;
IkReal x6148=((0.866025403784439)*r22);
IkReal x6149=(cj5*r20);
IkReal x6150=(r21*sj5);
IkReal x6151=((0.75)*(cj5*cj5));
IkReal x6152=(cj5*r21);
IkReal x6153=((0.866025403784439)*cj1*cj2);
IkReal x6154=(r20*sj5);
IkReal x6155=(cj1*sj2);
IkReal x6156=((0.866025403784439)*cj3*r22);
IkReal x6157=(cj2*sj1);
IkReal x6158=((0.866025403784439)*sj1*sj2);
IkReal x6159=((0.5)*cj1*cj3*sj2);
IkReal x6160=((0.5)*cj1*sj2*sj3);
IkReal x6161=((0.5)*cj2*cj3*sj1);
IkReal x6162=((0.5)*cj2*sj1*sj3);
IkReal x6163=((0.75)*r22);
IkReal x6164=((0.433012701892219)*cj1*cj2);
IkReal x6165=((0.433012701892219)*r22*sj3);
IkReal x6166=((0.433012701892219)*sj1*sj2);
IkReal x6167=(cj1*cj3*sj2);
IkReal x6168=((0.25)*cj1*sj2*sj3);
IkReal x6169=((1.0)*cj2*cj3*sj1);
IkReal x6170=((0.25)*cj2*sj1*sj3);
CheckValue<IkReal> x6171 = IKatan2WithCheck(IkReal(((((-1.0)*x6152*x6160))+(((-1.0)*x6152*x6158))+((x6150*x6161))+(((-1.0)*x6155*x6156))+((x6154*x6162))+(((-1.0)*x6149*x6161))+(((-1.0)*x6150*x6159))+(((-1.0)*x6152*x6153))+(((-1.0)*x6154*x6160))+((x6152*x6162))+((x6156*x6157))+(((-1.0)*x6154*x6158))+(((-1.0)*x6153*x6154))+((x6149*x6159)))),IkReal((((x6150*x6170))+(((-1.0)*x6149*x6170))+((x6149*x6166))+((x6152*x6167))+(((-1.0)*x6150*x6168))+((x6154*x6167))+(((-1.0)*sj1*sj2*x6163))+(((-1.0)*x6154*x6169))+((x6149*x6164))+(((-1.0)*cj1*cj2*x6163))+((x6149*x6168))+(((-1.0)*x6155*x6165))+(((-1.0)*x6150*x6166))+(((-1.0)*x6152*x6169))+((x6157*x6165))+(((-1.0)*x6150*x6164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6171.valid){
continue;
}
CheckValue<IkReal> x6172=IKPowWithIntegerCheck(IKsign((((x6148*x6149))+(((-0.25)*x6147))+(((-1.5)*cj5*r20*x6150))+(((-1.0)*x6146))+(((-1.0)*x6147*x6151))+((x6146*x6151))+(((-1.0)*(0.75)*(r22*r22)))+(((-1.0)*x6148*x6150)))),-1);
if(!x6172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6171.value)+(((1.5707963267949)*(x6172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6173=(cj2*cj3);
IkReal x6174=IKsin(j4);
IkReal x6175=((0.866025403784439)*r22);
IkReal x6176=((1.0)*cj1);
IkReal x6177=(cj3*sj2);
IkReal x6178=((0.5)*r20);
IkReal x6179=(cj5*x6174);
IkReal x6180=IKcos(j4);
IkReal x6181=((1.0)*cj5*x6180);
IkReal x6182=(r20*sj5);
IkReal x6183=((0.5)*r21*sj5);
IkReal x6184=((0.866025403784439)*cj1);
IkReal x6185=((0.866025403784439)*sj1);
IkReal x6186=((0.5)*cj1*sj3);
IkReal x6187=((0.5)*sj1*sj3);
IkReal x6188=((0.866025403784439)*cj0*r12);
IkReal x6189=((0.866025403784439)*r02*sj0);
IkReal x6190=(cj0*cj5*x6174);
IkReal x6191=(cj0*sj5*x6174);
IkReal x6192=((0.5)*r10);
IkReal x6193=(cj0*cj5*x6180);
IkReal x6194=((0.5)*r11);
IkReal x6195=(cj0*sj5*x6180);
IkReal x6196=((0.5)*r00);
IkReal x6197=(cj5*sj0*x6180);
IkReal x6198=(cj5*sj0*x6174);
IkReal x6199=(r00*sj0*sj5);
IkReal x6200=((0.5)*r01);
IkReal x6201=(sj0*sj5*x6180);
IkReal x6202=((1.0)*cj0*cj5*x6180);
IkReal x6203=((1.0)*cj0*sj5*x6180);
IkReal x6204=(sj0*sj5*x6174);
IkReal x6205=((0.866025403784439)*cj0*r02);
IkReal x6206=((0.866025403784439)*r12*sj0);
evalcond[0]=((((-1.0)*x6178*x6179))+(((-1.0)*x6176*x6177))+((x6174*x6183))+((sj1*x6173))+(((-1.0)*x6180*x6182))+(((-1.0)*r21*x6181))+((x6174*x6175)));
evalcond[1]=(((x6180*x6183))+(((-1.0)*sj2*x6186))+((x6175*x6180))+(((-1.0)*cj2*x6184))+((x6174*x6182))+((r21*x6179))+(((-1.0)*cj5*x6178*x6180))+((cj2*x6187))+(((-1.0)*sj2*x6185)));
evalcond[2]=(((r11*x6190))+((x6194*x6195))+(((-1.0)*x6192*x6193))+((x6180*x6188))+(((-1.0)*x6200*x6201))+((r10*x6191))+((x6196*x6197))+(((-1.0)*x6180*x6189))+(((-1.0)*x6174*x6199))+(((0.5)*cj3))+(((-1.0)*r01*x6198)));
evalcond[3]=((((-1.0)*x6174*x6189))+(((-1.0)*x6200*x6204))+((r01*x6197))+((x6180*x6199))+((x6174*x6188))+(((-1.0)*x6190*x6192))+(((-1.0)*r11*x6202))+(((-1.0)*(1.0)*sj3))+((x6191*x6194))+(((-1.0)*r10*x6203))+((x6196*x6198)));
evalcond[4]=((((-1.0)*r00*x6203))+((x6191*x6200))+(((-1.0)*r10*sj0*sj5*x6180))+((x6194*x6204))+(((-1.0)*x6173*x6176))+(((-1.0)*sj1*x6177))+(((-1.0)*r01*x6202))+(((-1.0)*x6190*x6196))+(((-1.0)*r11*sj0*x6181))+(((-1.0)*x6192*x6198))+((x6174*x6205))+((x6174*x6206)));
evalcond[5]=(((r10*x6204))+((x6195*x6200))+((x6194*x6201))+(((-1.0)*sj2*x6187))+(((-1.0)*cj2*x6185))+(((-1.0)*x6193*x6196))+((r01*x6190))+(((-1.0)*x6192*x6197))+((x6180*x6205))+(((-1.0)*cj2*x6186))+((x6180*x6206))+((r11*x6198))+((sj2*x6184))+((r00*x6191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6207=((0.866025403784439)*cj0);
IkReal x6208=(cj5*r10);
IkReal x6209=(r11*sj5);
IkReal x6210=((0.866025403784439)*sj0);
IkReal x6211=(cj5*r00);
IkReal x6212=(r01*sj5);
IkReal x6213=((1.0)*r21);
IkReal x6214=(cj1*cj2*cj3*cj5);
IkReal x6215=((1.0)*r20);
IkReal x6216=(cj1*cj2*cj3*sj5);
IkReal x6217=(cj3*cj5*sj1*sj2);
IkReal x6218=(cj3*sj1*sj2*sj5);
IkReal x6219=(cj5*r01);
IkReal x6220=(cj0*cj1*cj3*sj2);
IkReal x6221=(r00*sj5);
IkReal x6222=(cj5*r11);
IkReal x6223=(cj1*cj3*sj0*sj2);
IkReal x6224=(r10*sj5);
IkReal x6225=((1.0)*cj0*cj2*cj3*sj1);
IkReal x6226=((1.0)*cj2*cj3*sj0*sj1);
IkReal x6227=((0.866025403784439)*cj3*r22);
IkReal x6228=(cj1*sj2);
IkReal x6229=((0.866025403784439)*cj0*cj3*r02);
IkReal x6230=(cj2*sj1);
IkReal x6231=((0.5)*r20);
IkReal x6232=((0.5)*r21);
IkReal x6233=((0.866025403784439)*cj3*r12*sj0);
IkReal x6234=((0.5)*cj0*cj1*cj3*sj2);
IkReal x6235=((0.5)*cj0*cj2*cj3*sj1);
IkReal x6236=((0.5)*cj1*cj3*sj0*sj2);
IkReal x6237=((0.5)*cj2*cj3*sj0*sj1);
CheckValue<IkReal> x6238 = IKatan2WithCheck(IkReal(((((-1.0)*x6221*x6225))+(((-1.0)*x6224*x6226))+(((-1.0)*x6215*x6218))+(((-1.0)*x6213*x6214))+((x6219*x6220))+(((-1.0)*x6215*x6216))+(((-1.0)*x6219*x6225))+((x6222*x6223))+((x6220*x6221))+((x6223*x6224))+(((-1.0)*x6222*x6226))+(((-1.0)*x6213*x6217)))),IkReal((((x6209*x6236))+(((-1.0)*cj1*cj2*x6227))+(((-1.0)*x6211*x6234))+(((-1.0)*x6218*x6232))+((x6228*x6233))+(((-1.0)*x6230*x6233))+((x6212*x6234))+(((-1.0)*x6229*x6230))+(((-1.0)*x6208*x6236))+(((-1.0)*x6209*x6237))+((x6208*x6237))+((x6214*x6231))+((x6228*x6229))+(((-1.0)*x6212*x6235))+((x6211*x6235))+(((-1.0)*sj1*sj2*x6227))+(((-1.0)*x6216*x6232))+((x6217*x6231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6238.valid){
continue;
}
CheckValue<IkReal> x6239=IKPowWithIntegerCheck(IKsign((((x6207*x6209))+(((-0.5)*cj0*r12))+((x6210*x6211))+(((-1.0)*x6207*x6208))+((r02*(((0.5)*sj0))))+(((-1.0)*x6210*x6212)))),-1);
if(!x6239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6238.value)+(((1.5707963267949)*(x6239.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6240=(cj2*cj3);
IkReal x6241=IKsin(j4);
IkReal x6242=((0.866025403784439)*r22);
IkReal x6243=((1.0)*cj1);
IkReal x6244=(cj3*sj2);
IkReal x6245=((0.5)*r20);
IkReal x6246=(cj5*x6241);
IkReal x6247=IKcos(j4);
IkReal x6248=((1.0)*cj5*x6247);
IkReal x6249=(r20*sj5);
IkReal x6250=((0.5)*r21*sj5);
IkReal x6251=((0.866025403784439)*cj1);
IkReal x6252=((0.866025403784439)*sj1);
IkReal x6253=((0.5)*cj1*sj3);
IkReal x6254=((0.5)*sj1*sj3);
IkReal x6255=((0.866025403784439)*cj0*r12);
IkReal x6256=((0.866025403784439)*r02*sj0);
IkReal x6257=(cj0*cj5*x6241);
IkReal x6258=(cj0*sj5*x6241);
IkReal x6259=((0.5)*r10);
IkReal x6260=(cj0*cj5*x6247);
IkReal x6261=((0.5)*r11);
IkReal x6262=(cj0*sj5*x6247);
IkReal x6263=((0.5)*r00);
IkReal x6264=(cj5*sj0*x6247);
IkReal x6265=(cj5*sj0*x6241);
IkReal x6266=(r00*sj0*sj5);
IkReal x6267=((0.5)*r01);
IkReal x6268=(sj0*sj5*x6247);
IkReal x6269=((1.0)*cj0*cj5*x6247);
IkReal x6270=((1.0)*cj0*sj5*x6247);
IkReal x6271=(sj0*sj5*x6241);
IkReal x6272=((0.866025403784439)*cj0*r02);
IkReal x6273=((0.866025403784439)*r12*sj0);
evalcond[0]=((((-1.0)*x6245*x6246))+((x6241*x6250))+((sj1*x6240))+((x6241*x6242))+(((-1.0)*r21*x6248))+(((-1.0)*x6243*x6244))+(((-1.0)*x6247*x6249)));
evalcond[1]=((((-1.0)*cj5*x6245*x6247))+((x6247*x6250))+((x6242*x6247))+(((-1.0)*cj2*x6251))+(((-1.0)*sj2*x6253))+((r21*x6246))+(((-1.0)*sj2*x6252))+((cj2*x6254))+((x6241*x6249)));
evalcond[2]=((((-1.0)*x6267*x6268))+((x6263*x6264))+((r11*x6257))+((x6247*x6255))+((x6261*x6262))+(((-1.0)*x6259*x6260))+(((-1.0)*x6241*x6266))+(((-1.0)*x6247*x6256))+(((-1.0)*r01*x6265))+(((0.5)*cj3))+((r10*x6258)));
evalcond[3]=(((x6247*x6266))+(((-1.0)*x6241*x6256))+(((-1.0)*x6267*x6271))+((x6258*x6261))+((r01*x6264))+(((-1.0)*r10*x6270))+(((-1.0)*r11*x6269))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x6257*x6259))+((x6241*x6255))+((x6263*x6265)));
evalcond[4]=((((-1.0)*r00*x6270))+(((-1.0)*r01*x6269))+(((-1.0)*r10*sj0*sj5*x6247))+(((-1.0)*x6240*x6243))+((x6261*x6271))+(((-1.0)*x6257*x6263))+(((-1.0)*sj1*x6244))+(((-1.0)*x6259*x6265))+((x6241*x6273))+(((-1.0)*r11*sj0*x6248))+((x6241*x6272))+((x6258*x6267)));
evalcond[5]=((((-1.0)*x6260*x6263))+((x6262*x6267))+(((-1.0)*cj2*x6253))+((x6247*x6273))+((r01*x6257))+((r11*x6265))+(((-1.0)*sj2*x6254))+(((-1.0)*x6259*x6264))+(((-1.0)*cj2*x6252))+((r00*x6258))+((sj2*x6251))+((x6247*x6272))+((r10*x6271))+((x6261*x6268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6274=((0.866025403784439)*cj0);
IkReal x6275=(cj5*r00);
IkReal x6276=(r01*sj5);
IkReal x6277=((0.866025403784439)*sj0);
IkReal x6278=(cj5*r10);
IkReal x6279=(r11*sj5);
IkReal x6280=(cj5*sj3);
IkReal x6281=(sj3*sj5);
IkReal x6282=(cj5*r11);
IkReal x6283=(cj0*cj1*cj3*sj2);
IkReal x6284=(r10*sj5);
IkReal x6285=(cj5*r01);
IkReal x6286=(cj2*cj3*sj0*sj1);
IkReal x6287=(r00*sj5);
IkReal x6288=((1.0)*cj0*cj2*cj3*sj1);
IkReal x6289=((1.0)*cj1*cj3*sj0*sj2);
IkReal x6290=(cj1*sj2);
IkReal x6291=((0.866025403784439)*cj0*cj3*r12);
IkReal x6292=(cj2*sj1);
IkReal x6293=((0.866025403784439)*cj3*r02*sj0);
IkReal x6294=((0.5)*cj0*cj1*cj3*sj2);
IkReal x6295=((0.5)*cj0*cj2*cj3*sj1);
IkReal x6296=((0.5)*cj1*cj3*sj0*sj2);
IkReal x6297=((0.5)*cj2*cj3*sj0*sj1);
CheckValue<IkReal> x6298=IKPowWithIntegerCheck(IKsign((((x6277*x6278))+((r02*(((0.5)*cj0))))+(((-1.0)*x6274*x6276))+(((-1.0)*x6277*x6279))+((x6274*x6275))+((r12*(((0.5)*sj0)))))),-1);
if(!x6298.valid){
continue;
}
CheckValue<IkReal> x6299 = IKatan2WithCheck(IkReal(((((-1.0)*x6285*x6289))+(((-1.0)*x6284*x6288))+(((-1.0)*r20*x6281))+((x6286*x6287))+((x6285*x6286))+((x6283*x6284))+(((-1.0)*x6287*x6289))+((x6282*x6283))+(((-1.0)*r21*x6280))+(((-1.0)*x6282*x6288)))),IkReal(((((0.5)*r20*x6280))+((x6278*x6295))+(((-1.0)*x6291*x6292))+(((-1.0)*(0.866025403784439)*r22*sj3))+((x6279*x6294))+((x6290*x6291))+(((-1.0)*x6275*x6297))+(((-1.0)*x6279*x6295))+((x6275*x6296))+(((-1.0)*x6290*x6293))+(((-1.0)*x6278*x6294))+(((-0.5)*r21*x6281))+((x6276*x6297))+((x6292*x6293))+(((-1.0)*x6276*x6296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6298.value)))+(x6299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6300=(cj2*cj3);
IkReal x6301=IKsin(j4);
IkReal x6302=((0.866025403784439)*r22);
IkReal x6303=((1.0)*cj1);
IkReal x6304=(cj3*sj2);
IkReal x6305=((0.5)*r20);
IkReal x6306=(cj5*x6301);
IkReal x6307=IKcos(j4);
IkReal x6308=((1.0)*cj5*x6307);
IkReal x6309=(r20*sj5);
IkReal x6310=((0.5)*r21*sj5);
IkReal x6311=((0.866025403784439)*cj1);
IkReal x6312=((0.866025403784439)*sj1);
IkReal x6313=((0.5)*cj1*sj3);
IkReal x6314=((0.5)*sj1*sj3);
IkReal x6315=((0.866025403784439)*cj0*r12);
IkReal x6316=((0.866025403784439)*r02*sj0);
IkReal x6317=(cj0*cj5*x6301);
IkReal x6318=(cj0*sj5*x6301);
IkReal x6319=((0.5)*r10);
IkReal x6320=(cj0*cj5*x6307);
IkReal x6321=((0.5)*r11);
IkReal x6322=(cj0*sj5*x6307);
IkReal x6323=((0.5)*r00);
IkReal x6324=(cj5*sj0*x6307);
IkReal x6325=(cj5*sj0*x6301);
IkReal x6326=(r00*sj0*sj5);
IkReal x6327=((0.5)*r01);
IkReal x6328=(sj0*sj5*x6307);
IkReal x6329=((1.0)*cj0*cj5*x6307);
IkReal x6330=((1.0)*cj0*sj5*x6307);
IkReal x6331=(sj0*sj5*x6301);
IkReal x6332=((0.866025403784439)*cj0*r02);
IkReal x6333=((0.866025403784439)*r12*sj0);
evalcond[0]=((((-1.0)*r21*x6308))+((sj1*x6300))+(((-1.0)*x6305*x6306))+((x6301*x6310))+((x6301*x6302))+(((-1.0)*x6303*x6304))+(((-1.0)*x6307*x6309)));
evalcond[1]=(((x6302*x6307))+((x6301*x6309))+(((-1.0)*sj2*x6312))+((r21*x6306))+(((-1.0)*cj5*x6305*x6307))+(((-1.0)*sj2*x6313))+(((-1.0)*cj2*x6311))+((x6307*x6310))+((cj2*x6314)));
evalcond[2]=(((x6321*x6322))+(((-1.0)*x6319*x6320))+((x6307*x6315))+((r11*x6317))+((r10*x6318))+(((-1.0)*x6301*x6326))+(((-1.0)*x6307*x6316))+((x6323*x6324))+(((0.5)*cj3))+(((-1.0)*x6327*x6328))+(((-1.0)*r01*x6325)));
evalcond[3]=((((-1.0)*r10*x6330))+(((-1.0)*x6317*x6319))+((r01*x6324))+((x6318*x6321))+((x6307*x6326))+((x6301*x6315))+(((-1.0)*x6301*x6316))+((x6323*x6325))+(((-1.0)*r11*x6329))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x6327*x6331)));
evalcond[4]=(((x6318*x6327))+(((-1.0)*r10*sj0*sj5*x6307))+((x6301*x6333))+(((-1.0)*r00*x6330))+((x6301*x6332))+(((-1.0)*x6319*x6325))+(((-1.0)*sj1*x6304))+((x6321*x6331))+(((-1.0)*r11*sj0*x6308))+(((-1.0)*x6300*x6303))+(((-1.0)*x6317*x6323))+(((-1.0)*r01*x6329)));
evalcond[5]=(((x6307*x6333))+(((-1.0)*cj2*x6312))+(((-1.0)*x6320*x6323))+(((-1.0)*x6319*x6324))+((x6322*x6327))+(((-1.0)*cj2*x6313))+((x6307*x6332))+((x6321*x6328))+((sj2*x6311))+(((-1.0)*sj2*x6314))+((r00*x6318))+((r10*x6331))+((r11*x6325))+((r01*x6317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - jaco (8d473c7fd9ac8dcae6286be5d4b0f69d)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
