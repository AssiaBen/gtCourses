/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2016-11-23 12:33:43.763336
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74;
x0=IKsin(j[5]);
x1=IKcos(j[4]);
x2=IKsin(j[0]);
x3=IKsin(j[3]);
x4=(x2*x3);
x5=IKcos(j[3]);
x6=IKsin(j[1]);
x7=IKsin(j[2]);
x8=IKcos(j[0]);
x9=(x6*x7*x8);
x10=IKcos(j[1]);
x11=IKcos(j[2]);
x12=(x10*x11*x8);
x13=((((-1.0)*(1.0)*x9))+(((-1.0)*(1.0)*x12)));
x14=(x13*x5);
x15=(x14+x4);
x16=(x1*x15);
x17=IKsin(j[4]);
x18=((1.0)*x17);
x19=(x2*x5);
x20=((0.5)*x19);
x21=(x11*x6);
x22=((0.866025403784439)*x21);
x23=(x22*x8);
x24=(x10*x7);
x25=((0.866025403784439)*x24);
x26=(x25*x8);
x27=(x3*(((((-1.0)*(0.5)*x12))+(((-1.0)*(0.5)*x9)))));
x28=(x23+x20+(((-1.0)*(1.0)*x27))+(((-1.0)*(1.0)*x26)));
x29=IKcos(j[5]);
x30=((0.433012701892219)*x21);
x31=((0.433012701892219)*x24);
x32=(x8*((x31+(((-1.0)*(1.0)*x30)))));
x33=(x13*x3);
x34=(x32+(((-1.0)*(0.75)*x33))+((x18*(((((-1.0)*(0.5)*x4))+(((-1.0)*(0.5)*x14))))))+(((0.75)*x19))+((x1*(((((0.25)*x19))+(((-1.0)*(0.5)*x27))+(((-1.0)*(1.0)*x32)))))));
x35=(x11*x6*x8);
x36=(x10*x7*x8);
x37=(x15*x17);
x38=(x1*(((((-1.0)*(1.0)*x23))+x27+x26+(((-1.0)*(1.0)*x20)))));
x39=((0.41)*x6);
x40=(x3*x8);
x41=(x2*x6*x7);
x42=(x10*x11*x2);
x43=((((-1.0)*(1.0)*x42))+(((-1.0)*(1.0)*x41)));
x44=(x43*x5);
x45=((((-1.0)*(1.0)*x40))+x44);
x46=(x1*x45);
x47=(x5*x8);
x48=((0.5)*x47);
x49=(x2*x22);
x50=(x2*x25);
x51=(x3*(((((-1.0)*(0.5)*x42))+(((-1.0)*(0.5)*x41)))));
x52=((((-1.0)*(1.0)*x48))+(((-1.0)*(1.0)*x50))+(((-1.0)*(1.0)*x51))+x49);
x53=(x2*x30);
x54=(x2*x31);
x55=(x3*x43);
x56=(((x1*(((((-1.0)*(1.0)*x53))+(((0.25)*x47))+x54+(((0.5)*x51))))))+(((-1.0)*(1.0)*x54))+(((0.75)*x47))+(((0.75)*x55))+x53+((x17*(((((-1.0)*(0.5)*x40))+(((0.5)*x44)))))));
x57=(x11*x2*x6);
x58=(x10*x2*x7);
x59=(x17*x45);
x60=(x1*(((((-1.0)*(1.0)*x49))+x48+x51+x50)));
x61=(x21+(((-1.0)*(1.0)*x24)));
x62=(x1*x5*x61);
x63=(x6*x7);
x64=((0.866025403784439)*x63);
x65=(x10*x11);
x66=((0.866025403784439)*x65);
x67=((((0.5)*x21))+(((-1.0)*(0.5)*x24)));
x68=(x3*x67);
x69=(x66+x64+(((-1.0)*(1.0)*x68)));
x70=((0.433012701892219)*x63);
x71=((0.433012701892219)*x65);
x72=(((x1*(((((-1.0)*(1.0)*x70))+(((-1.0)*(1.0)*x71))+(((0.5)*x68))))))+((x3*(((((-1.0)*(0.866025403784439)*x25))+(((0.866025403784439)*x22))))))+((x17*x5*x67))+x71+x70);
x73=(x17*x5*x61);
x74=(x1*((x68+(((-1.0)*(1.0)*x64))+(((-1.0)*(1.0)*x66)))));
eerot[0]=(((x0*(((((-1.0)*(1.0)*x16))+(((-1.0)*(1.0)*x18*x28))))))+((x29*x34)));
eerot[1]=(((x0*x34))+((x29*((x16+((x17*x28)))))));
eerot[2]=((((0.25)*x36))+(((0.866025403784439)*x38))+(((0.433012701892219)*x19))+(((-1.0)*(0.433012701892219)*x33))+(((-1.0)*(0.25)*x35))+(((0.866025403784439)*x37)));
eetrans[0]=((((0.190525588832577)*x38))+(((-1.0)*(0.169320160077543)*x33))+(((0.169320160077543)*x19))+(((-1.0)*(0.34776408)*x35))+(((0.34776408)*x36))+(((-1.0)*(0.00975)*x2))+((x39*x8))+(((0.190525588832577)*x37)));
eerot[3]=(((x29*x56))+((x0*((((x17*x52))+x46)))));
eerot[4]=(((x29*(((((-1.0)*(1.0)*x18*x52))+(((-1.0)*(1.0)*x46))))))+((x0*x56)));
eerot[5]=((((0.25)*x57))+(((-1.0)*(0.25)*x58))+(((-1.0)*(0.866025403784439)*x60))+(((0.433012701892219)*x55))+(((0.433012701892219)*x47))+(((-1.0)*(0.866025403784439)*x59)));
eetrans[1]=((((0.34776408)*x57))+(((-1.0)*(0.190525588832577)*x59))+(((-1.0)*(0.190525588832577)*x60))+(((-1.0)*(1.0)*x2*x39))+(((0.169320160077543)*x47))+(((-1.0)*(0.34776408)*x58))+(((-1.0)*(0.00975)*x8))+(((0.169320160077543)*x55)));
eerot[6]=(((x29*x72))+((x0*((x62+((x17*x69)))))));
eerot[7]=(((x29*(((((-1.0)*(1.0)*x18*x69))+(((-1.0)*(1.0)*x62))))))+((x0*x72)));
eerot[8]=((((0.25)*x63))+(((0.25)*x65))+(((-1.0)*(0.866025403784439)*x74))+((x3*((x30+(((-1.0)*(1.0)*x31))))))+(((-1.0)*(0.866025403784439)*x73)));
eetrans[2]=((0.2755)+(((0.34776408)*x63))+(((-1.0)*(0.41)*x10))+((x3*(((((-1.0)*(0.169320160077543)*x24))+(((0.169320160077543)*x21))))))+(((-1.0)*(0.190525588832577)*x73))+(((0.34776408)*x65))+(((-1.0)*(0.190525588832577)*x74)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*(((1.0)*r00)));
new_r01=r01;
new_r02=((-1.0)*(((1.0)*r02)));
new_px=((((-1.0)*(0.26275704)*r02))+px);
new_r10=r10;
new_r11=((-1.0)*(((1.0)*r11)));
new_r12=r12;
new_py=((((0.26275704)*r12))+(((-1.0)*(1.0)*py)));
new_r20=r20;
new_r21=((-1.0)*(((1.0)*r21)));
new_r22=r22;
new_pz=((0.2755)+(((-1.0)*(1.0)*pz))+(((0.26275704)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x75=((1.0)*py);
IkReal x76=((1.0)*pz);
IkReal x77=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=((((-1.0)*r20*x75))+((pz*r10)));
rxp0_1=((((-1.0)*r00*x76))+((px*r20)));
rxp0_2=(((py*r00))+(((-1.0)*r10*x77)));
rxp1_0=((((-1.0)*r21*x75))+((pz*r11)));
rxp1_1=((((-1.0)*r01*x76))+((px*r21)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x77)));
rxp2_0=((((-1.0)*r22*x75))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x76))+((px*r22)));
rxp2_2=((((-1.0)*r12*x77))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x78=((0.0740573656612548)*r10);
IkReal x79=((-0.00975)+py);
IkReal x80=(x79+x78);
IkReal x81=((0.14811473132251)*r11);
IkReal x82=((-1.0)*x81);
IkReal x83=((-1.0)*x78);
IkReal x84=(x83+x79);
IkReal x85=((114108.225350135)*r11);
IkReal x86=((-1.0)*x85);
IkReal x87=((2668758.76698047)*rxp0_1);
IkReal x88=((-1.0)*x87);
IkReal x89=((1540808.59251835)*rxp2_1);
IkReal x90=((-1.0)*x89);
IkReal x91=(x90+x86+x88);
IkReal x92=((1421595.70558544)*px);
IkReal x93=((256552.099176271)*r00);
IkReal x94=((-1.0)*x93);
IkReal x95=((208903.647968128)*r02);
IkReal x96=((-1.0)*x95);
IkReal x97=((2713.54926137516)*r21);
IkReal x98=((63464.3853123405)*rxp0_2);
IkReal x99=((278312.744756426)*rxp1_0);
IkReal x100=((36641.1799440339)*rxp2_2);
IkReal x101=((6509167.72434262)*npx);
IkReal x102=(px*x101);
IkReal x103=((3758069.73784963)*npz);
IkReal x104=(px*x103);
IkReal x105=((3254583.86217131)*pp);
IkReal x106=(r00*x105);
IkReal x107=((-1.0)*x106);
IkReal x108=((1879034.86892482)*pp);
IkReal x109=(r02*x108);
IkReal x110=((-1.0)*x109);
IkReal x111=(x102+x104+x100+x107+x98+x99+x92+x96+x94+x97+x110);
IkReal x112=((2713.54926137516)*r01);
IkReal x113=((63464.3853123405)*rxp0_0);
IkReal x114=((36641.1799440339)*rxp2_0);
IkReal x115=(x114+x113+x112);
IkReal x116=((1421595.70558544)*pz);
IkReal x117=((-1.0)*x116);
IkReal x118=((256552.099176271)*r20);
IkReal x119=((208903.647968128)*r22);
IkReal x120=((278312.744756426)*rxp1_2);
IkReal x121=((-1.0)*x120);
IkReal x122=(pz*x101);
IkReal x123=((-1.0)*x122);
IkReal x124=(pz*x103);
IkReal x125=((-1.0)*x124);
IkReal x126=(r20*x105);
IkReal x127=(r22*x108);
IkReal x128=(x125+x126+x127+x121+x123+x119+x118+x117);
IkReal x129=((228216.45070027)*r10);
IkReal x130=((5337517.53396095)*rxp1_1);
IkReal x131=(x130+(((-1.0)*x129)));
IkReal x132=((513104.198352541)*r01);
IkReal x133=((5427.09852275031)*r20);
IkReal x134=((556625.489512853)*rxp0_0);
IkReal x135=((-1.0)*(((126928.770624681)*rxp1_2)));
IkReal x136=((13018335.4486852)*npy);
IkReal x137=(px*x136);
IkReal x138=((6509167.72434262)*pp);
IkReal x139=(r01*x138);
IkReal x140=(x139+x133+x132+x135+x134+(((-1.0)*x137)));
IkReal x141=((5427.09852275031)*r00);
IkReal x142=((126928.770624681)*rxp1_0);
IkReal x143=((((-1.0)*x142))+x141);
IkReal x144=((513104.198352541)*r21);
IkReal x145=((556625.489512853)*rxp0_2);
IkReal x146=(pz*x136);
IkReal x147=(r21*x138);
IkReal x148=(x146+(((-1.0)*x145))+(((-1.0)*x147))+(((-1.0)*x144)));
IkReal x149=(x90+x85+x87);
IkReal x150=((-1.0)*x97);
IkReal x151=((-1.0)*x98);
IkReal x152=((-1.0)*x99);
IkReal x153=((-1.0)*x102);
IkReal x154=(x106+x104+x100+x150+x152+x151+x153+x92+x93+x96+x110);
IkReal x155=((-1.0)*x112);
IkReal x156=((-1.0)*x113);
IkReal x157=(x156+x155+x114);
IkReal x158=((-1.0)*x118);
IkReal x159=((-1.0)*x126);
IkReal x160=(x125+x127+x120+x122+x159+x158+x119+x117);
IkReal x161=((-1.0)*x114);
IkReal x162=(x156+x155+x161);
IkReal x163=((-1.0)*x119);
IkReal x164=((-1.0)*x127);
IkReal x165=(x124+x120+x122+x159+x158+x163+x164+x116);
IkReal x166=(x85+x87+x89);
IkReal x167=(x142+(((-1.0)*x141)));
IkReal x168=(x147+x145+x144+(((-1.0)*x146)));
IkReal x169=(x129+(((-1.0)*x130)));
IkReal x170=(x161+x113+x112);
IkReal x171=(x124+x126+x121+x123+x163+x164+x118+x116);
IkReal x172=(x86+x89+x88);
IkReal x173=((-1.0)*(((2.0)*px)));
IkReal x174=((0.14811473132251)*r00);
IkReal x175=((((-1.0)*x174))+x173);
IkReal x176=((0.296229462645019)*r01);
IkReal x177=(x173+x174);
IkReal x178=((228216.45070027)*r01);
IkReal x179=((5337517.53396095)*rxp0_0);
IkReal x180=((3081617.1850367)*rxp2_0);
IkReal x181=((2843191.41117088)*py);
IkReal x182=((513104.198352541)*r10);
IkReal x183=((-1.0)*(((417807.295936257)*r12)));
IkReal x184=((556625.489512853)*rxp1_1);
IkReal x185=((13018335.4486852)*npx*py);
IkReal x186=((7516139.47569927)*npz*py);
IkReal x187=(r10*x138);
IkReal x188=((-1.0)*(((3758069.73784963)*pp*r12)));
IkReal x189=((((-1.0)*x187))+(((-1.0)*x182))+x188+x183+x181+x184+x185+x186);
IkReal x190=((73282.3598880679)*rxp2_1);
IkReal x191=((5427.09852275031)*r11);
IkReal x192=((126928.770624681)*rxp0_1);
IkReal x193=(x192+x191);
IkReal x194=((456432.901400539)*r00);
IkReal x195=((10675035.0679219)*rxp1_0);
IkReal x196=((((1026208.39670508)*r11))+(((-1.0)*(26036670.8973705)*npy*py))+(((1113250.97902571)*rxp0_1))+(((13018335.4486852)*pp*r11)));
IkReal x197=((10854.1970455006)*r10);
IkReal x198=((253857.541249362)*rxp1_1);
IkReal x199=((-1.0)*x178);
IkReal x200=((-1.0)*x179);
IkReal x201=((-1.0)*x184);
IkReal x202=((-1.0)*x185);
IkReal x203=((((-1.0)*x191))+(((-1.0)*x192)));
IkReal x204=((-1.0)*x190);
IkReal x205=((-1.0)*x180);
IkReal x206=((-0.00975)+(((-1.0)*(1.0)*py)));
IkReal x207=(x83+x206);
IkReal x208=(x206+x78);
IkReal x209=((-1.0)*x92);
IkReal x210=((-1.0)*x104);
IkReal x211=(x106+x100+x109+x152+x153+x98+x95+x93+x97+x210+x209);
IkReal x212=(x133+x137+x135+(((-1.0)*x139))+(((-1.0)*x134))+(((-1.0)*x132)));
IkReal x213=(x102+x100+x107+x109+x150+x151+x99+x95+x94+x210+x209);
op[0]=x80;
op[1]=x80;
op[2]=x82;
op[3]=x82;
op[4]=x84;
op[5]=x84;
op[6]=(x91+x111);
op[7]=(x128+x115);
op[8]=(x131+x140);
op[9]=(x148+x143);
op[10]=(x154+x149);
op[11]=(x157+x160);
op[12]=(x165+x162);
op[13]=(x166+x111);
op[14]=(x167+x168);
op[15]=(x140+x169);
op[16]=(x171+x170);
op[17]=(x154+x172);
op[18]=0;
op[19]=x80;
op[20]=0;
op[21]=x82;
op[22]=0;
op[23]=x84;
op[24]=x175;
op[25]=x175;
op[26]=x176;
op[27]=x176;
op[28]=x177;
op[29]=x177;
op[30]=(x179+x178+x189+x180);
op[31]=(x193+x190);
op[32]=((((-1.0)*x195))+x194+x196);
op[33]=((((-1.0)*x198))+x197);
op[34]=(x200+x202+x201+x199+x188+x183+x181+x182+x187+x180+x186);
op[35]=(x203+x190);
op[36]=(x204+x203);
op[37]=(x205+x200+x199+x189);
op[38]=((((-1.0)*x197))+x198);
op[39]=((((-1.0)*x194))+x195+x196);
op[40]=(x204+x193);
op[41]=(x179+x178+x205+x202+x201+x188+x183+x181+x182+x187+x186);
op[42]=0;
op[43]=x175;
op[44]=0;
op[45]=x176;
op[46]=0;
op[47]=x177;
op[48]=x207;
op[49]=x207;
op[50]=x81;
op[51]=x81;
op[52]=x208;
op[53]=x208;
op[54]=(x211+x166);
op[55]=(x128+x162);
op[56]=(x212+x169);
op[57]=(x148+x167);
op[58]=(x213+x172);
op[59]=(x170+x160);
op[60]=(x165+x115);
op[61]=(x91+x211);
op[62]=(x143+x168);
op[63]=(x131+x212);
op[64]=(x157+x171);
op[65]=(x149+x213);
op[66]=0;
op[67]=x207;
op[68]=0;
op[69]=x81;
op[70]=0;
op[71]=x208;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j5array[16], cj5array[16], sj5array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj5 = zeror[ij0+1], htj1 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj5)||isnan(htj1)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x214=htj0*htj0;
CheckValue<IkReal> x215=IKPowWithIntegerCheck(((1.0)+x214),-1);
if(!x215.valid){
continue;
}
cj0array[numsolutions]=((x215.value)*(((1.0)+(((-1.0)*x214)))));
CheckValue<IkReal> x216=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x216.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x216.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x217=htj5*htj5;
CheckValue<IkReal> x218=IKPowWithIntegerCheck(((1.0)+x217),-1);
if(!x218.valid){
continue;
}
cj5array[numsolutions]=((x218.value)*(((1.0)+(((-1.0)*x217)))));
CheckValue<IkReal> x219=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x219.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x219.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x220=htj1*htj1;
CheckValue<IkReal> x221=IKPowWithIntegerCheck(((1.0)+x220),-1);
if(!x221.valid){
continue;
}
cj1array[numsolutions]=((x221.value)*(((1.0)+(((-1.0)*x220)))));
CheckValue<IkReal> x222=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x222.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x222.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj5 = 1;
_nj1 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij0]-cj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij0]-sj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij5[1] = 0; _ij1[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j5 = j5array[ij0]; cj5 = cj5array[ij0]; sj5 = sj5array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x223=((3.99988736317185)*pz);
IkReal x224=((3.99988736317185)*cj0*px);
IkReal x225=((3.99988736317185)*py*sj0);
IkReal x226=((0.29622112105825)*sj1);
IkReal x227=(cj5*r20);
IkReal x228=(r21*sj5);
IkReal x229=(cj5*r00);
IkReal x230=((0.29622112105825)*cj0*cj1);
IkReal x231=(r01*sj5);
IkReal x232=(cj5*r10);
IkReal x233=((0.29622112105825)*cj1*sj0);
IkReal x234=(r11*sj5);
IkReal x235=((0.29622112105825)*cj1);
IkReal x236=((0.29622112105825)*cj0*sj1);
IkReal x237=((0.29622112105825)*sj0*sj1);
if( IKabs((((x229*x230))+((cj1*x224))+(((-1.0)*sj1*x223))+(((-1.0)*x230*x231))+(((-1.0)*x233*x234))+((cj1*x225))+((x232*x233))+((x226*x228))+(((-1.0)*x226*x227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.63995381890046)+((x231*x236))+(((-1.0)*x227*x235))+((x234*x237))+(((-1.0)*sj1*x225))+((x228*x235))+(((-1.0)*x229*x236))+(((-1.0)*sj1*x224))+(((-1.0)*x232*x237))+(((-1.0)*cj1*x223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x229*x230))+((cj1*x224))+(((-1.0)*sj1*x223))+(((-1.0)*x230*x231))+(((-1.0)*x233*x234))+((cj1*x225))+((x232*x233))+((x226*x228))+(((-1.0)*x226*x227))))+IKsqr(((1.63995381890046)+((x231*x236))+(((-1.0)*x227*x235))+((x234*x237))+(((-1.0)*sj1*x225))+((x228*x235))+(((-1.0)*x229*x236))+(((-1.0)*sj1*x224))+(((-1.0)*x232*x237))+(((-1.0)*cj1*x223))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x229*x230))+((cj1*x224))+(((-1.0)*sj1*x223))+(((-1.0)*x230*x231))+(((-1.0)*x233*x234))+((cj1*x225))+((x232*x233))+((x226*x228))+(((-1.0)*x226*x227))), ((1.63995381890046)+((x231*x236))+(((-1.0)*x227*x235))+((x234*x237))+(((-1.0)*sj1*x225))+((x228*x235))+(((-1.0)*x229*x236))+(((-1.0)*sj1*x224))+(((-1.0)*x232*x237))+(((-1.0)*cj1*x223))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x238=((0.0740573656612548)*cj5);
IkReal x239=((0.0740573656612548)*sj5);
IkReal x240=IKcos(j2);
IkReal x241=((0.25000704)*cj1);
IkReal x242=IKsin(j2);
IkReal x243=((0.25000704)*sj1);
evalcond[0]=((((-1.0)*x240*x241))+(((-1.0)*r20*x238))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-1.0)*x242*x243))+((r21*x239)));
evalcond[1]=((((-1.0)*x240*x243))+((x241*x242))+(((0.41)*sj1))+((r11*sj0*x239))+(((-1.0)*(1.0)*py*sj0))+(((-1.0)*cj0*r00*x238))+((cj0*r01*x239))+(((-1.0)*(1.0)*cj0*px))+(((-1.0)*r10*sj0*x238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
j3eval[0]=((((-1.0)*(1.0)*cj1*sj2))+((cj2*sj1)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*(1.0)*sj1*sj2)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x244=((1.0)*cj5);
if( IKabs((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*r00*sj0*x244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x244))))+IKsqr(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*r00*sj0*x244))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x244))), ((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*r00*sj0*x244))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x245=((0.866025403784439)*cj5);
IkReal x246=((0.866025403784439)*sj5);
evalcond[0]=((((-1.0)*(0.866025403784439)*(IKsin(j3))))+(((-1.0)*(0.5)*r22))+((r21*x246))+(((-1.0)*r20*x245)));
evalcond[1]=((((-1.0)*cj0*r10*x245))+((r00*sj0*x245))+(((-1.0)*(0.5)*cj0*r12))+((cj0*r11*x246))+(((0.5)*r02*sj0))+(((-1.0)*r01*sj0*x246))+(((0.866025403784439)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x247=r22*r22;
IkReal x248=r20*r20;
IkReal x249=r21*r21;
IkReal x250=((1.15470053837925)*r22);
IkReal x251=(cj5*r20);
IkReal x252=(r21*sj5);
IkReal x253=(cj5*r20*r21*sj5);
IkReal x254=cj5*cj5;
IkReal x255=(x249*x254);
IkReal x256=(x248*x254);
IkReal x257=((0.866025403784439)*r22);
IkReal x258=((0.5)*r20);
IkReal x259=(cj3*cj5);
IkReal x260=((0.5)*r21);
IkReal x261=(cj3*sj5);
IkReal x262=((0.25)*sj3);
j4eval[0]=(x247+(((0.333333333333333)*x249))+x255+((x250*x252))+(((1.33333333333333)*x248))+(((-1.0)*x250*x251))+(((2.0)*x253))+(((-1.0)*x256)));
j4eval[1]=((IKabs((((cj5*sj3*x260))+((sj3*sj5*x258))+((x260*x261))+((cj3*x257))+(((-1.0)*x258*x259)))))+(IKabs(((((-1.0)*r21*x259))+(((0.433012701892219)*r22*sj3))+(((-1.0)*r20*x261))+(((-1.0)*x251*x262))+((x252*x262))))));
j4eval[2]=IKsign(((((-0.75)*x256))+(((0.75)*x247))+x248+(((0.25)*x249))+(((1.5)*x253))+((x252*x257))+(((0.75)*x255))+(((-1.0)*x251*x257))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x263=((1.73205080756888)*cj0);
IkReal x264=((1.73205080756888)*sj0);
IkReal x265=(((cj5*r00*x263))+(((-1.0)*r01*sj5*x263))+((cj0*r02))+((r12*sj0))+((cj5*r10*x264))+(((-1.0)*r11*sj5*x264)));
j4eval[0]=x265;
j4eval[1]=IKsign(x265);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x266=(cj0*r01*r21);
IkReal x267=(r11*r21*sj0);
IkReal x268=(cj0*r00*r20);
IkReal x269=(cj0*r02*r22);
IkReal x270=(r10*r20*sj0);
IkReal x271=(r12*r22*sj0);
IkReal x272=(cj0*cj5*r00*r22);
IkReal x273=(cj0*cj5*r02*r20);
IkReal x274=(cj0*r01*r22*sj5);
IkReal x275=(cj0*r02*r21*sj5);
IkReal x276=(cj5*r10*r22*sj0);
IkReal x277=(cj5*r12*r20*sj0);
IkReal x278=(r11*r22*sj0*sj5);
IkReal x279=(r12*r21*sj0*sj5);
IkReal x280=(cj0*cj5*r00*r21*sj5);
IkReal x281=(cj0*cj5*r01*r20*sj5);
IkReal x282=(cj5*r10*r21*sj0*sj5);
IkReal x283=(cj5*r11*r20*sj0*sj5);
IkReal x284=cj5*cj5;
IkReal x285=(cj0*r00*r20*x284);
IkReal x286=(cj0*r01*r21*x284);
IkReal x287=(r10*r20*sj0*x284);
IkReal x288=(r11*r21*sj0*x284);
j4eval[0]=((((3.0)*x283))+(((3.0)*x282))+x267+x266+(((3.0)*x286))+(((1.73205080756888)*x279))+(((-3.0)*x285))+(((-1.73205080756888)*x272))+(((4.0)*x268))+(((3.0)*x271))+(((1.73205080756888)*x278))+(((-1.73205080756888)*x277))+(((-1.73205080756888)*x273))+(((3.0)*x269))+(((1.73205080756888)*x274))+(((-3.0)*x287))+(((3.0)*x288))+(((1.73205080756888)*x275))+(((-1.73205080756888)*x276))+(((3.0)*x281))+(((4.0)*x270))+(((3.0)*x280)));
j4eval[1]=IKsign(((((0.866025403784439)*x274))+(((1.5)*x282))+(((1.5)*x286))+(((-0.866025403784439)*x277))+(((1.5)*x283))+(((-0.866025403784439)*x272))+(((-0.866025403784439)*x276))+(((0.866025403784439)*x278))+(((1.5)*x281))+(((1.5)*x280))+(((1.5)*x271))+(((-1.5)*x287))+(((-0.866025403784439)*x273))+(((2.0)*x268))+(((0.866025403784439)*x279))+(((1.5)*x288))+(((0.5)*x266))+(((2.0)*x270))+(((-1.5)*x285))+(((0.866025403784439)*x275))+(((1.5)*x269))+(((0.5)*x267))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x289=(cj0*r01);
IkReal x290=(cj5*sj3);
IkReal x291=(cj0*r00);
IkReal x292=(sj3*sj5);
IkReal x293=(r11*sj0);
IkReal x294=(r10*sj0);
IkReal x295=((0.866025403784439)*sj3);
IkReal x296=(cj0*r02);
IkReal x297=(r12*sj0);
IkReal x298=((0.5)*cj5*sj3);
IkReal x299=((0.5)*sj3*sj5);
IkReal x300=((2.0)*r20);
IkReal x301=((0.5)*r21);
IkReal x302=((1.5)*r22);
IkReal x303=((0.866025403784439)*cj5*r22);
IkReal x304=((0.866025403784439)*cj5*r20);
IkReal x305=((0.866025403784439)*r22*sj5);
IkReal x306=((0.866025403784439)*r21*sj5);
IkReal x307=((1.5)*cj5*r21*sj5);
IkReal x308=((1.5)*cj5*r20*sj5);
IkReal x309=cj5*cj5;
IkReal x310=((1.5)*r20*x309);
IkReal x311=((1.5)*r21*x309);
CheckValue<IkReal> x312=IKPowWithIntegerCheck(IKsign((((x293*x311))+((x297*x302))+((x297*x306))+(((-1.0)*x291*x310))+((x296*x306))+((x291*x307))+((x296*x302))+((x289*x301))+((x289*x311))+((x294*x300))+(((-1.0)*x291*x303))+(((-1.0)*x294*x310))+((x289*x308))+(((-1.0)*x297*x304))+((x293*x305))+((x291*x300))+((x294*x307))+(((-1.0)*x296*x304))+(((-1.0)*x294*x303))+((x289*x305))+((x293*x301))+((x293*x308)))),-1);
if(!x312.valid){
continue;
}
CheckValue<IkReal> x313 = IKatan2WithCheck(IkReal((((x292*x294))+((x289*x290))+((x290*x293))+((x291*x292)))),IkReal((((x293*x299))+(((-1.0)*x294*x298))+((x295*x296))+(((-1.0)*x291*x298))+((x289*x299))+((x295*x297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x312.value)))+(x313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x314=IKcos(j4);
IkReal x315=((0.866025403784439)*r22);
IkReal x316=IKsin(j4);
IkReal x317=(cj5*x316);
IkReal x318=(r20*sj5);
IkReal x319=((0.5)*r20);
IkReal x320=((0.5)*r21*sj5);
IkReal x321=((1.0)*cj5*x314);
IkReal x322=((0.866025403784439)*cj0*r02);
IkReal x323=((0.866025403784439)*r12*sj0);
IkReal x324=((0.5)*r00);
IkReal x325=(cj0*cj5*x316);
IkReal x326=((1.0)*cj0*cj5*x314);
IkReal x327=((1.0)*cj0*sj5*x314);
IkReal x328=((0.5)*r01);
IkReal x329=(cj0*sj5*x316);
IkReal x330=((0.5)*r10);
IkReal x331=(cj5*sj0*x316);
IkReal x332=((0.5)*r11);
IkReal x333=(sj0*sj5*x316);
IkReal x334=((0.866025403784439)*cj0*r12);
IkReal x335=((0.866025403784439)*r02*sj0);
IkReal x336=(cj0*cj5*x314);
IkReal x337=(cj0*sj5*x314);
IkReal x338=(cj5*sj0*x314);
IkReal x339=(r00*sj0*sj5);
IkReal x340=(sj0*sj5*x314);
evalcond[0]=((((-1.0)*cj5*x314*x319))+((x316*x318))+((r21*x317))+((x314*x320))+(((-1.0)*(0.5)*sj3))+((x314*x315)));
evalcond[1]=(((x315*x316))+((x316*x320))+(((-1.0)*r21*x321))+(((-1.0)*x317*x319))+(((-1.0)*(1.0)*cj3))+(((-1.0)*x314*x318)));
evalcond[2]=((((-1.0)*x324*x325))+((x316*x323))+((x328*x329))+(((-1.0)*r10*sj0*sj5*x314))+(((-1.0)*r01*x326))+((x332*x333))+((x316*x322))+(((-1.0)*x330*x331))+(((-1.0)*r00*x327))+(((-1.0)*r11*sj0*x321)));
evalcond[3]=((((-1.0)*r01*x331))+((x314*x334))+(((-1.0)*x316*x339))+(((-1.0)*x328*x340))+(((-1.0)*x330*x336))+((x324*x338))+((r11*x325))+((x332*x337))+(((-1.0)*x314*x335))+(((0.5)*cj3))+((r10*x329)));
evalcond[4]=(((x324*x331))+(((-1.0)*x325*x330))+(((-1.0)*x328*x333))+((r01*x338))+(((-1.0)*r11*x326))+((x316*x334))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x316*x335))+(((-1.0)*r10*x327))+((x329*x332))+((x314*x339)));
evalcond[5]=((0.866025403784439)+((x332*x340))+((r11*x331))+((r01*x325))+((x314*x323))+((r10*x333))+((r00*x329))+((x328*x337))+(((-1.0)*x324*x336))+((x314*x322))+(((-1.0)*x330*x338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x341=((1.73205080756888)*cj0);
IkReal x342=(cj5*r00);
IkReal x343=(r01*sj5);
IkReal x344=((1.73205080756888)*sj0);
IkReal x345=(cj5*r10);
IkReal x346=(r11*sj5);
IkReal x347=((0.866025403784439)*sj3);
IkReal x348=(cj3*cj5);
IkReal x349=(cj3*sj5);
IkReal x350=((0.5)*cj0*sj3);
IkReal x351=((0.5)*sj0*sj3);
IkReal x352=(cj0*sj3);
IkReal x353=((1.0)*sj0*sj3);
CheckValue<IkReal> x354 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12*x347))+(((0.5)*r20*x348))+((x345*x350))+((x343*x351))+(((-1.0)*x346*x350))+(((-1.0)*x342*x351))+(((-0.5)*r21*x349))+((r02*sj0*x347))+(((-1.0)*(0.866025403784439)*cj3*r22)))),IkReal(((((-1.0)*r00*sj5*x353))+((cj5*r11*x352))+((r10*sj5*x352))+((r21*x348))+((r20*x349))+(((-1.0)*cj5*r01*x353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x354.valid){
continue;
}
CheckValue<IkReal> x355=IKPowWithIntegerCheck(IKsign(((((-1.0)*x341*x343))+((x344*x345))+((cj0*r02))+((r12*sj0))+((x341*x342))+(((-1.0)*x344*x346)))),-1);
if(!x355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x354.value)+(((1.5707963267949)*(x355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x356=IKcos(j4);
IkReal x357=((0.866025403784439)*r22);
IkReal x358=IKsin(j4);
IkReal x359=(cj5*x358);
IkReal x360=(r20*sj5);
IkReal x361=((0.5)*r20);
IkReal x362=((0.5)*r21*sj5);
IkReal x363=((1.0)*cj5*x356);
IkReal x364=((0.866025403784439)*cj0*r02);
IkReal x365=((0.866025403784439)*r12*sj0);
IkReal x366=((0.5)*r00);
IkReal x367=(cj0*cj5*x358);
IkReal x368=((1.0)*cj0*cj5*x356);
IkReal x369=((1.0)*cj0*sj5*x356);
IkReal x370=((0.5)*r01);
IkReal x371=(cj0*sj5*x358);
IkReal x372=((0.5)*r10);
IkReal x373=(cj5*sj0*x358);
IkReal x374=((0.5)*r11);
IkReal x375=(sj0*sj5*x358);
IkReal x376=((0.866025403784439)*cj0*r12);
IkReal x377=((0.866025403784439)*r02*sj0);
IkReal x378=(cj0*cj5*x356);
IkReal x379=(cj0*sj5*x356);
IkReal x380=(cj5*sj0*x356);
IkReal x381=(r00*sj0*sj5);
IkReal x382=(sj0*sj5*x356);
evalcond[0]=((((-1.0)*cj5*x356*x361))+((x356*x357))+(((-1.0)*(0.5)*sj3))+((x358*x360))+((x356*x362))+((r21*x359)));
evalcond[1]=((((-1.0)*x356*x360))+(((-1.0)*(1.0)*cj3))+(((-1.0)*x359*x361))+((x357*x358))+(((-1.0)*r21*x363))+((x358*x362)));
evalcond[2]=((((-1.0)*x366*x367))+(((-1.0)*r10*sj0*sj5*x356))+(((-1.0)*r00*x369))+((x370*x371))+((x374*x375))+(((-1.0)*r11*sj0*x363))+((x358*x365))+(((-1.0)*r01*x368))+(((-1.0)*x372*x373))+((x358*x364)));
evalcond[3]=((((-1.0)*x372*x378))+((x374*x379))+((r10*x371))+(((-1.0)*x370*x382))+((r11*x367))+(((-1.0)*r01*x373))+(((-1.0)*x358*x381))+(((0.5)*cj3))+(((-1.0)*x356*x377))+((x356*x376))+((x366*x380)));
evalcond[4]=(((x366*x373))+(((-1.0)*r10*x369))+(((-1.0)*x358*x377))+(((-1.0)*x370*x375))+((r01*x380))+((x371*x374))+((x356*x381))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x367*x372))+(((-1.0)*r11*x368))+((x358*x376)));
evalcond[5]=((0.866025403784439)+(((-1.0)*x372*x380))+((x374*x382))+((r10*x375))+((x356*x364))+((x370*x379))+((r00*x371))+((r11*x373))+(((-1.0)*x366*x378))+((r01*x367))+((x356*x365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x383=((0.866025403784439)*r22);
IkReal x384=((0.5)*r20);
IkReal x385=(cj3*cj5);
IkReal x386=((0.5)*r21);
IkReal x387=(cj3*sj5);
IkReal x388=((0.25)*sj3);
IkReal x389=(cj5*r20);
IkReal x390=(r21*sj5);
IkReal x391=r20*r20;
IkReal x392=r21*r21;
IkReal x393=((0.75)*(cj5*cj5));
CheckValue<IkReal> x394=IKPowWithIntegerCheck(IKsign((x391+(((1.5)*cj5*r20*x390))+((x392*x393))+(((0.75)*(r22*r22)))+(((0.25)*x392))+((x383*x390))+(((-1.0)*x383*x389))+(((-1.0)*x391*x393)))),-1);
if(!x394.valid){
continue;
}
CheckValue<IkReal> x395 = IKatan2WithCheck(IkReal((((cj5*sj3*x386))+((sj3*sj5*x384))+((x386*x387))+(((-1.0)*x384*x385))+((cj3*x383)))),IkReal((((x388*x390))+(((-1.0)*x388*x389))+(((-1.0)*r20*x387))+(((0.433012701892219)*r22*sj3))+(((-1.0)*r21*x385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x394.value)))+(x395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x396=IKcos(j4);
IkReal x397=((0.866025403784439)*r22);
IkReal x398=IKsin(j4);
IkReal x399=(cj5*x398);
IkReal x400=(r20*sj5);
IkReal x401=((0.5)*r20);
IkReal x402=((0.5)*r21*sj5);
IkReal x403=((1.0)*cj5*x396);
IkReal x404=((0.866025403784439)*cj0*r02);
IkReal x405=((0.866025403784439)*r12*sj0);
IkReal x406=((0.5)*r00);
IkReal x407=(cj0*cj5*x398);
IkReal x408=((1.0)*cj0*cj5*x396);
IkReal x409=((1.0)*cj0*sj5*x396);
IkReal x410=((0.5)*r01);
IkReal x411=(cj0*sj5*x398);
IkReal x412=((0.5)*r10);
IkReal x413=(cj5*sj0*x398);
IkReal x414=((0.5)*r11);
IkReal x415=(sj0*sj5*x398);
IkReal x416=((0.866025403784439)*cj0*r12);
IkReal x417=((0.866025403784439)*r02*sj0);
IkReal x418=(cj0*cj5*x396);
IkReal x419=(cj0*sj5*x396);
IkReal x420=(cj5*sj0*x396);
IkReal x421=(r00*sj0*sj5);
IkReal x422=(sj0*sj5*x396);
evalcond[0]=(((x398*x400))+((x396*x397))+(((-1.0)*(0.5)*sj3))+(((-1.0)*cj5*x396*x401))+((x396*x402))+((r21*x399)));
evalcond[1]=((((-1.0)*r21*x403))+(((-1.0)*(1.0)*cj3))+(((-1.0)*x396*x400))+(((-1.0)*x399*x401))+((x398*x402))+((x397*x398)));
evalcond[2]=((((-1.0)*r00*x409))+((x410*x411))+(((-1.0)*r11*sj0*x403))+((x398*x404))+(((-1.0)*x406*x407))+((x398*x405))+(((-1.0)*x412*x413))+(((-1.0)*r10*sj0*sj5*x396))+((x414*x415))+(((-1.0)*r01*x408)));
evalcond[3]=(((x396*x416))+((r11*x407))+((x414*x419))+(((-1.0)*x410*x422))+(((-1.0)*x396*x417))+(((-1.0)*x398*x421))+((x406*x420))+(((-1.0)*r01*x413))+((r10*x411))+(((0.5)*cj3))+(((-1.0)*x412*x418)));
evalcond[4]=(((r01*x420))+(((-1.0)*r10*x409))+(((-1.0)*x410*x415))+(((-1.0)*r11*x408))+(((-1.0)*x398*x417))+((x398*x416))+(((-1.0)*x407*x412))+((x396*x421))+((x411*x414))+((x406*x413))+(((-1.0)*(1.0)*sj3)));
evalcond[5]=((0.866025403784439)+((r00*x411))+((r11*x413))+(((-1.0)*x412*x420))+((x396*x405))+((x396*x404))+((x410*x419))+((x414*x422))+((r01*x407))+(((-1.0)*x406*x418))+((r10*x415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x423=((1.0)*sj5);
if( IKabs(((((-1.0)*r21*x423))+((cj5*r20))+(((0.577350269189626)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r11*x423))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x423))+((cj5*r20))+(((0.577350269189626)*r22))))+IKsqr(((((-1.0)*cj0*r11*x423))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r21*x423))+((cj5*r20))+(((0.577350269189626)*r22))), ((((-1.0)*cj0*r11*x423))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x424=((0.866025403784439)*cj5);
IkReal x425=((0.866025403784439)*sj5);
evalcond[0]=((((-1.0)*(0.5)*r22))+(((-1.0)*r20*x424))+(((0.866025403784439)*(IKsin(j3))))+((r21*x425)));
evalcond[1]=((((-1.0)*cj0*r10*x424))+((r00*sj0*x424))+(((-1.0)*r01*sj0*x425))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0))+((cj0*r11*x425))+(((0.866025403784439)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x426=(r02*sj0);
IkReal x427=(cj0*r12);
IkReal x428=(cj0*cj5*r10);
IkReal x429=(cj0*r11*sj5);
IkReal x430=(cj5*r00*sj0);
IkReal x431=(r01*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x430))+(((-1.73205080756888)*x428))+x426+(((-1.0)*x427))+(((1.73205080756888)*x429))+(((-1.73205080756888)*x431)));
j4eval[1]=IKsign(((((0.5)*x426))+(((-0.5)*x427))+(((0.866025403784439)*x429))+(((0.866025403784439)*x430))+(((-0.866025403784439)*x431))+(((-0.866025403784439)*x428))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x432=r20*r20;
IkReal x433=r21*r21;
IkReal x434=r22*r22;
IkReal x435=((3.46410161513775)*r22);
IkReal x436=(cj5*r20);
IkReal x437=(r21*sj5);
IkReal x438=(cj5*r20*r21*sj5);
IkReal x439=cj5*cj5;
IkReal x440=(x432*x439);
IkReal x441=(x433*x439);
IkReal x442=((0.866025403784439)*r22);
IkReal x443=((0.5)*r20);
IkReal x444=(cj3*cj5);
IkReal x445=((0.5)*r21);
IkReal x446=(cj3*sj5);
IkReal x447=((0.25)*sj3);
j4eval[0]=((((-6.0)*x438))+((x435*x436))+(((3.0)*x440))+(((-3.0)*x434))+(((-4.0)*x432))+(((-1.0)*x435*x437))+(((-3.0)*x441))+(((-1.0)*x433)));
j4eval[1]=IKsign(((((-0.75)*x434))+(((-0.25)*x433))+(((0.75)*x440))+(((-1.0)*x437*x442))+(((-1.5)*x438))+((x436*x442))+(((-1.0)*x432))+(((-0.75)*x441))));
j4eval[2]=((IKabs((((sj3*sj5*x443))+((cj5*sj3*x445))+((cj3*x442))+((x445*x446))+(((-1.0)*x443*x444)))))+(IKabs(((((0.433012701892219)*r22*sj3))+(((-1.0)*x436*x447))+(((-1.0)*r21*x444))+((x437*x447))+(((-1.0)*r20*x446))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x448=(cj0*r01*r21);
IkReal x449=(r11*r21*sj0);
IkReal x450=(cj0*r00*r20);
IkReal x451=(cj0*r02*r22);
IkReal x452=(r10*r20*sj0);
IkReal x453=(r12*r22*sj0);
IkReal x454=(cj0*cj5*r00*r22);
IkReal x455=(cj0*cj5*r02*r20);
IkReal x456=(cj0*r01*r22*sj5);
IkReal x457=(cj0*r02*r21*sj5);
IkReal x458=(cj5*r10*r22*sj0);
IkReal x459=(cj5*r12*r20*sj0);
IkReal x460=(r11*r22*sj0*sj5);
IkReal x461=(r12*r21*sj0*sj5);
IkReal x462=(cj0*cj5*r00*r21*sj5);
IkReal x463=(cj0*cj5*r01*r20*sj5);
IkReal x464=(cj5*r10*r21*sj0*sj5);
IkReal x465=(cj5*r11*r20*sj0*sj5);
IkReal x466=cj5*cj5;
IkReal x467=(cj0*r00*r20*x466);
IkReal x468=(cj0*r01*r21*x466);
IkReal x469=(r10*r20*sj0*x466);
IkReal x470=(r11*r21*sj0*x466);
j4eval[0]=((((4.0)*x450))+(((-1.73205080756888)*x459))+(((-3.0)*x467))+(((3.0)*x470))+(((3.0)*x463))+(((-1.73205080756888)*x454))+(((3.0)*x453))+(((-1.73205080756888)*x455))+(((1.73205080756888)*x460))+(((1.73205080756888)*x457))+(((-1.73205080756888)*x458))+(((3.0)*x465))+(((3.0)*x464))+(((-3.0)*x469))+x448+x449+(((3.0)*x451))+(((1.73205080756888)*x456))+(((3.0)*x468))+(((4.0)*x452))+(((3.0)*x462))+(((1.73205080756888)*x461)));
j4eval[1]=IKsign(((((-1.5)*x467))+(((2.0)*x450))+(((0.866025403784439)*x457))+(((-0.866025403784439)*x458))+(((1.5)*x451))+(((0.866025403784439)*x460))+(((1.5)*x465))+(((-0.866025403784439)*x459))+(((0.866025403784439)*x461))+(((-0.866025403784439)*x454))+(((1.5)*x464))+(((0.5)*x449))+(((1.5)*x463))+(((1.5)*x470))+(((-0.866025403784439)*x455))+(((0.866025403784439)*x456))+(((2.0)*x452))+(((1.5)*x453))+(((0.5)*x448))+(((-1.5)*x469))+(((1.5)*x462))+(((1.5)*x468))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x471=(cj0*r01);
IkReal x472=((1.0)*cj5*sj3);
IkReal x473=(cj0*r00);
IkReal x474=((1.0)*sj3*sj5);
IkReal x475=(r11*sj0);
IkReal x476=(r10*sj0);
IkReal x477=((0.866025403784439)*sj3);
IkReal x478=(cj0*r02);
IkReal x479=(r12*sj0);
IkReal x480=((0.5)*sj3);
IkReal x481=(cj0*cj5*r00);
IkReal x482=(cj0*r01*sj5);
IkReal x483=(cj5*r10*sj0);
IkReal x484=(r11*sj0*sj5);
IkReal x485=((2.0)*r20);
IkReal x486=((0.5)*r21);
IkReal x487=((1.5)*r22);
IkReal x488=((0.866025403784439)*r22);
IkReal x489=(cj5*r20);
IkReal x490=((0.866025403784439)*cj0*r02);
IkReal x491=(r21*sj5);
IkReal x492=((0.866025403784439)*r12*sj0);
IkReal x493=((1.5)*r21*sj5);
IkReal x494=((1.5)*cj5*r20);
IkReal x495=cj5*cj5;
IkReal x496=((1.5)*r20*x495);
IkReal x497=((1.5)*r21*x495);
CheckValue<IkReal> x498=IKPowWithIntegerCheck(IKsign((((x483*x493))+((x473*x485))+((x478*x487))+((x491*x492))+(((-1.0)*x473*x496))+((x475*x486))+(((-1.0)*x489*x492))+((x471*x486))+((x482*x488))+((x476*x485))+((x479*x487))+((x490*x491))+((x471*x497))+((x482*x494))+(((-1.0)*x481*x488))+((x475*x497))+(((-1.0)*x489*x490))+((x484*x488))+(((-1.0)*x483*x488))+((x481*x493))+(((-1.0)*x476*x496))+((x484*x494)))),-1);
if(!x498.valid){
continue;
}
CheckValue<IkReal> x499 = IKatan2WithCheck(IkReal(((((-1.0)*x473*x474))+(((-1.0)*x472*x475))+(((-1.0)*x471*x472))+(((-1.0)*x474*x476)))),IkReal(((((-1.0)*x477*x479))+((x480*x483))+(((-1.0)*x477*x478))+(((-1.0)*x480*x484))+(((-1.0)*x480*x482))+((x480*x481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x498.value)))+(x499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x500=IKsin(j4);
IkReal x501=((0.866025403784439)*r22);
IkReal x502=((0.5)*r20);
IkReal x503=(cj5*x500);
IkReal x504=IKcos(j4);
IkReal x505=((1.0)*cj5*x504);
IkReal x506=(r20*sj5);
IkReal x507=((0.5)*r21*sj5);
IkReal x508=((0.866025403784439)*cj0*r02);
IkReal x509=((0.866025403784439)*r12*sj0);
IkReal x510=((0.5)*r00);
IkReal x511=(cj0*cj5*x500);
IkReal x512=((1.0)*cj0*cj5*x504);
IkReal x513=((1.0)*cj0*sj5*x504);
IkReal x514=((0.5)*r01);
IkReal x515=(cj0*sj5*x500);
IkReal x516=((0.5)*r10);
IkReal x517=(cj5*sj0*x500);
IkReal x518=((0.5)*r11);
IkReal x519=(sj0*sj5*x500);
IkReal x520=((0.866025403784439)*cj0*r12);
IkReal x521=((0.866025403784439)*r02*sj0);
IkReal x522=(cj0*cj5*x504);
IkReal x523=(cj0*sj5*x504);
IkReal x524=(cj5*sj0*x504);
IkReal x525=(r00*sj0*sj5);
IkReal x526=(sj0*sj5*x504);
evalcond[0]=((((-1.0)*r21*x505))+(((-1.0)*x502*x503))+((x500*x501))+(((-1.0)*x504*x506))+cj3+((x500*x507)));
evalcond[1]=(((x504*x507))+((x500*x506))+(((-1.0)*cj5*x502*x504))+(((0.5)*sj3))+((x501*x504))+((r21*x503)));
evalcond[2]=(((x518*x519))+(((-1.0)*r11*sj0*x505))+((x514*x515))+(((-1.0)*r00*x513))+(((-1.0)*r01*x512))+((x500*x508))+(((-1.0)*x516*x517))+(((-1.0)*x510*x511))+(((-1.0)*r10*sj0*sj5*x504))+((x500*x509)));
evalcond[3]=((((-1.0)*r01*x517))+(((-1.0)*x504*x521))+(((-1.0)*x500*x525))+((x510*x524))+((x504*x520))+((r10*x515))+(((-1.0)*x516*x522))+((x518*x523))+((r11*x511))+(((-1.0)*x514*x526))+(((0.5)*cj3)));
evalcond[4]=(((x500*x520))+((x515*x518))+((x510*x517))+(((-1.0)*r10*x513))+(((-1.0)*x511*x516))+((x504*x525))+(((-1.0)*x514*x519))+(((-1.0)*r11*x512))+(((-1.0)*x500*x521))+((r01*x524))+(((-1.0)*(1.0)*sj3)));
evalcond[5]=((-0.866025403784439)+((r11*x517))+(((-1.0)*x516*x524))+((r10*x519))+(((-1.0)*x510*x522))+((r01*x511))+((x504*x508))+((r00*x515))+((x518*x526))+((x504*x509))+((x514*x523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x527=((0.866025403784439)*r22);
IkReal x528=((0.5)*r20);
IkReal x529=(cj3*cj5);
IkReal x530=((0.5)*r21);
IkReal x531=(cj3*sj5);
IkReal x532=((0.25)*sj3);
IkReal x533=(cj5*r20);
IkReal x534=(r21*sj5);
IkReal x535=r20*r20;
IkReal x536=r21*r21;
IkReal x537=((0.75)*(cj5*cj5));
CheckValue<IkReal> x538=IKPowWithIntegerCheck(IKsign(((((-1.0)*x536*x537))+(((-0.25)*x536))+((x527*x533))+(((-1.5)*cj5*r20*x534))+((x535*x537))+(((-1.0)*(0.75)*(r22*r22)))+(((-1.0)*x535))+(((-1.0)*x527*x534)))),-1);
if(!x538.valid){
continue;
}
CheckValue<IkReal> x539 = IKatan2WithCheck(IkReal((((cj5*sj3*x530))+((cj3*x527))+(((-1.0)*x528*x529))+((x530*x531))+((sj3*sj5*x528)))),IkReal(((((-1.0)*r20*x531))+(((0.433012701892219)*r22*sj3))+((x532*x534))+(((-1.0)*x532*x533))+(((-1.0)*r21*x529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x538.value)))+(x539.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x540=IKsin(j4);
IkReal x541=((0.866025403784439)*r22);
IkReal x542=((0.5)*r20);
IkReal x543=(cj5*x540);
IkReal x544=IKcos(j4);
IkReal x545=((1.0)*cj5*x544);
IkReal x546=(r20*sj5);
IkReal x547=((0.5)*r21*sj5);
IkReal x548=((0.866025403784439)*cj0*r02);
IkReal x549=((0.866025403784439)*r12*sj0);
IkReal x550=((0.5)*r00);
IkReal x551=(cj0*cj5*x540);
IkReal x552=((1.0)*cj0*cj5*x544);
IkReal x553=((1.0)*cj0*sj5*x544);
IkReal x554=((0.5)*r01);
IkReal x555=(cj0*sj5*x540);
IkReal x556=((0.5)*r10);
IkReal x557=(cj5*sj0*x540);
IkReal x558=((0.5)*r11);
IkReal x559=(sj0*sj5*x540);
IkReal x560=((0.866025403784439)*cj0*r12);
IkReal x561=((0.866025403784439)*r02*sj0);
IkReal x562=(cj0*cj5*x544);
IkReal x563=(cj0*sj5*x544);
IkReal x564=(cj5*sj0*x544);
IkReal x565=(r00*sj0*sj5);
IkReal x566=(sj0*sj5*x544);
evalcond[0]=((((-1.0)*x542*x543))+(((-1.0)*r21*x545))+((x540*x547))+(((-1.0)*x544*x546))+cj3+((x540*x541)));
evalcond[1]=(((r21*x543))+(((0.5)*sj3))+((x541*x544))+((x544*x547))+((x540*x546))+(((-1.0)*cj5*x542*x544)));
evalcond[2]=((((-1.0)*r01*x552))+((x540*x549))+((x558*x559))+(((-1.0)*x550*x551))+(((-1.0)*r11*sj0*x545))+(((-1.0)*x556*x557))+(((-1.0)*r00*x553))+((x540*x548))+(((-1.0)*r10*sj0*sj5*x544))+((x554*x555)));
evalcond[3]=(((r10*x555))+((x550*x564))+(((-1.0)*r01*x557))+((r11*x551))+(((-1.0)*x556*x562))+(((-1.0)*x540*x565))+(((-1.0)*x554*x566))+(((-1.0)*x544*x561))+(((0.5)*cj3))+((x544*x560))+((x558*x563)));
evalcond[4]=((((-1.0)*x554*x559))+((r01*x564))+((x550*x557))+(((-1.0)*r10*x553))+((x540*x560))+(((-1.0)*x551*x556))+((x544*x565))+(((-1.0)*x540*x561))+((x555*x558))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r11*x552)));
evalcond[5]=((-0.866025403784439)+((r10*x559))+((x558*x566))+((x544*x548))+((r01*x551))+((r11*x557))+((x544*x549))+(((-1.0)*x556*x564))+((x554*x563))+((r00*x555))+(((-1.0)*x550*x562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x567=((0.866025403784439)*cj0);
IkReal x568=(cj5*r10);
IkReal x569=(r11*sj5);
IkReal x570=((0.866025403784439)*sj0);
IkReal x571=(cj5*r00);
IkReal x572=(r01*sj5);
IkReal x573=((1.0)*cj0*cj3);
IkReal x574=((1.0)*cj3*sj0);
IkReal x575=((0.5)*cj0*cj3);
IkReal x576=((0.5)*cj3*sj0);
CheckValue<IkReal> x577 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11*x574))+(((-1.0)*r10*sj5*x574))+(((-1.0)*cj5*r01*x573))+(((-1.0)*r00*sj5*x573)))),IkReal(((((-1.0)*cj3*r02*x567))+(((-1.0)*x569*x576))+(((-1.0)*cj3*r12*x570))+((x571*x575))+((x568*x576))+(((-1.0)*x572*x575)))),IKFAST_ATAN2_MAGTHRESH);
if(!x577.valid){
continue;
}
CheckValue<IkReal> x578=IKPowWithIntegerCheck(IKsign((((x567*x569))+(((-1.0)*x570*x572))+(((-0.5)*cj0*r12))+(((-1.0)*x567*x568))+((r02*(((0.5)*sj0))))+((x570*x571)))),-1);
if(!x578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x577.value)+(((1.5707963267949)*(x578.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x579=IKsin(j4);
IkReal x580=((0.866025403784439)*r22);
IkReal x581=((0.5)*r20);
IkReal x582=(cj5*x579);
IkReal x583=IKcos(j4);
IkReal x584=((1.0)*cj5*x583);
IkReal x585=(r20*sj5);
IkReal x586=((0.5)*r21*sj5);
IkReal x587=((0.866025403784439)*cj0*r02);
IkReal x588=((0.866025403784439)*r12*sj0);
IkReal x589=((0.5)*r00);
IkReal x590=(cj0*cj5*x579);
IkReal x591=((1.0)*cj0*cj5*x583);
IkReal x592=((1.0)*cj0*sj5*x583);
IkReal x593=((0.5)*r01);
IkReal x594=(cj0*sj5*x579);
IkReal x595=((0.5)*r10);
IkReal x596=(cj5*sj0*x579);
IkReal x597=((0.5)*r11);
IkReal x598=(sj0*sj5*x579);
IkReal x599=((0.866025403784439)*cj0*r12);
IkReal x600=((0.866025403784439)*r02*sj0);
IkReal x601=(cj0*cj5*x583);
IkReal x602=(cj0*sj5*x583);
IkReal x603=(cj5*sj0*x583);
IkReal x604=(r00*sj0*sj5);
IkReal x605=(sj0*sj5*x583);
evalcond[0]=((((-1.0)*x583*x585))+(((-1.0)*x581*x582))+(((-1.0)*r21*x584))+cj3+((x579*x586))+((x579*x580)));
evalcond[1]=((((-1.0)*cj5*x581*x583))+((x580*x583))+((x583*x586))+(((0.5)*sj3))+((x579*x585))+((r21*x582)));
evalcond[2]=(((x593*x594))+((x579*x587))+((x579*x588))+(((-1.0)*r10*sj0*sj5*x583))+(((-1.0)*r11*sj0*x584))+(((-1.0)*r00*x592))+(((-1.0)*r01*x591))+(((-1.0)*x595*x596))+(((-1.0)*x589*x590))+((x597*x598)));
evalcond[3]=(((x589*x603))+((r11*x590))+(((-1.0)*x579*x604))+(((-1.0)*x595*x601))+(((-1.0)*r01*x596))+((r10*x594))+(((-1.0)*x593*x605))+(((0.5)*cj3))+((x597*x602))+(((-1.0)*x583*x600))+((x583*x599)));
evalcond[4]=(((x594*x597))+(((-1.0)*x590*x595))+(((-1.0)*x579*x600))+(((-1.0)*r11*x591))+(((-1.0)*x593*x598))+((x579*x599))+(((-1.0)*(1.0)*sj3))+((x589*x596))+(((-1.0)*r10*x592))+((r01*x603))+((x583*x604)));
evalcond[5]=((-0.866025403784439)+((x597*x605))+((r10*x598))+((r11*x596))+((x593*x602))+((x583*x587))+((r01*x590))+(((-1.0)*x595*x603))+((x583*x588))+(((-1.0)*x589*x601))+((r00*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x606=((1.0)*sj5);
if( IKabs((((cj5*r20))+(((0.577350269189626)*r22))+(((-1.0)*r21*x606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))+(((-1.0)*cj0*r11*x606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20))+(((0.577350269189626)*r22))+(((-1.0)*r21*x606))))+IKsqr((((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))+(((-1.0)*cj0*r11*x606))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r20))+(((0.577350269189626)*r22))+(((-1.0)*r21*x606))), (((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))+(((-1.0)*cj0*r11*x606))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x607=((0.866025403784439)*cj5);
IkReal x608=((0.866025403784439)*sj5);
evalcond[0]=((((-1.0)*r20*x607))+((r21*x608))+(((-1.0)*(0.5)*r22))+(((0.866025403784439)*(IKsin(j3)))));
evalcond[1]=((((-1.0)*(0.5)*cj0*r12))+(((-1.0)*r01*sj0*x608))+(((0.5)*r02*sj0))+((cj0*r11*x608))+((r00*sj0*x607))+(((-1.0)*cj0*r10*x607))+(((0.866025403784439)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x609=(r02*sj0);
IkReal x610=(cj0*r12);
IkReal x611=(cj0*cj5*r10);
IkReal x612=(cj0*r11*sj5);
IkReal x613=(cj5*r00*sj0);
IkReal x614=(r01*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x612))+(((1.73205080756888)*x613))+(((-1.73205080756888)*x611))+(((-1.0)*x610))+(((-1.73205080756888)*x614))+x609);
j4eval[1]=IKsign(((((-0.5)*x610))+(((-0.866025403784439)*x614))+(((-0.866025403784439)*x611))+(((0.5)*x609))+(((0.866025403784439)*x613))+(((0.866025403784439)*x612))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x615=r20*r20;
IkReal x616=r21*r21;
IkReal x617=r22*r22;
IkReal x618=((3.46410161513775)*r22);
IkReal x619=(cj5*r20);
IkReal x620=(r21*sj5);
IkReal x621=(cj5*r20*r21*sj5);
IkReal x622=cj5*cj5;
IkReal x623=(x615*x622);
IkReal x624=(x616*x622);
IkReal x625=((0.866025403784439)*r22);
IkReal x626=((0.5)*r20);
IkReal x627=(cj3*cj5);
IkReal x628=((0.5)*r21);
IkReal x629=(cj3*sj5);
IkReal x630=((0.25)*sj3);
j4eval[0]=((((3.0)*x623))+(((-3.0)*x617))+(((-3.0)*x624))+(((-1.0)*x618*x620))+(((-4.0)*x615))+(((-1.0)*x616))+(((-6.0)*x621))+((x618*x619)));
j4eval[1]=IKsign((((x619*x625))+(((-1.5)*x621))+(((-1.0)*x620*x625))+(((-0.25)*x616))+(((-0.75)*x624))+(((-1.0)*x615))+(((0.75)*x623))+(((-0.75)*x617))));
j4eval[2]=((IKabs(((((-1.0)*x619*x630))+((x620*x630))+(((0.433012701892219)*r22*sj3))+(((-1.0)*r20*x629))+(((-1.0)*r21*x627)))))+(IKabs((((cj5*sj3*x628))+((cj3*x625))+((x628*x629))+(((-1.0)*x626*x627))+((sj3*sj5*x626))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x631=(cj0*r01*r21);
IkReal x632=(r11*r21*sj0);
IkReal x633=(cj0*r00*r20);
IkReal x634=(cj0*r02*r22);
IkReal x635=(r10*r20*sj0);
IkReal x636=(r12*r22*sj0);
IkReal x637=(cj0*cj5*r00*r22);
IkReal x638=(cj0*cj5*r02*r20);
IkReal x639=(cj0*r01*r22*sj5);
IkReal x640=(cj0*r02*r21*sj5);
IkReal x641=(cj5*r10*r22*sj0);
IkReal x642=(cj5*r12*r20*sj0);
IkReal x643=(r11*r22*sj0*sj5);
IkReal x644=(r12*r21*sj0*sj5);
IkReal x645=(cj0*cj5*r00*r21*sj5);
IkReal x646=(cj0*cj5*r01*r20*sj5);
IkReal x647=(cj5*r10*r21*sj0*sj5);
IkReal x648=(cj5*r11*r20*sj0*sj5);
IkReal x649=cj5*cj5;
IkReal x650=(cj0*r00*r20*x649);
IkReal x651=(cj0*r01*r21*x649);
IkReal x652=(r10*r20*sj0*x649);
IkReal x653=(r11*r21*sj0*x649);
j4eval[0]=((((-3.0)*x652))+(((3.0)*x653))+(((1.73205080756888)*x640))+(((-1.73205080756888)*x637))+(((1.73205080756888)*x639))+(((3.0)*x651))+(((4.0)*x635))+x632+x631+(((4.0)*x633))+(((-1.73205080756888)*x641))+(((-3.0)*x650))+(((-1.73205080756888)*x638))+(((3.0)*x646))+(((-1.73205080756888)*x642))+(((3.0)*x648))+(((3.0)*x645))+(((3.0)*x634))+(((3.0)*x647))+(((1.73205080756888)*x644))+(((3.0)*x636))+(((1.73205080756888)*x643)));
j4eval[1]=IKsign(((((1.5)*x646))+(((1.5)*x634))+(((1.5)*x651))+(((1.5)*x653))+(((0.5)*x631))+(((0.866025403784439)*x643))+(((-0.866025403784439)*x638))+(((0.866025403784439)*x644))+(((0.866025403784439)*x639))+(((0.5)*x632))+(((-0.866025403784439)*x641))+(((-0.866025403784439)*x642))+(((1.5)*x647))+(((-1.5)*x652))+(((-0.866025403784439)*x637))+(((2.0)*x633))+(((1.5)*x648))+(((1.5)*x645))+(((-1.5)*x650))+(((0.866025403784439)*x640))+(((2.0)*x635))+(((1.5)*x636))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x654=(cj0*r01);
IkReal x655=((1.0)*cj5*sj3);
IkReal x656=(cj0*r00);
IkReal x657=((1.0)*sj3*sj5);
IkReal x658=(r11*sj0);
IkReal x659=(r10*sj0);
IkReal x660=((0.866025403784439)*sj3);
IkReal x661=(cj0*r02);
IkReal x662=(r12*sj0);
IkReal x663=((0.5)*sj3);
IkReal x664=(cj0*cj5*r00);
IkReal x665=(cj0*r01*sj5);
IkReal x666=(cj5*r10*sj0);
IkReal x667=(r11*sj0*sj5);
IkReal x668=((2.0)*r20);
IkReal x669=((0.5)*r21);
IkReal x670=((1.5)*r22);
IkReal x671=((0.866025403784439)*r22);
IkReal x672=(cj5*r20);
IkReal x673=((0.866025403784439)*cj0*r02);
IkReal x674=(r21*sj5);
IkReal x675=((0.866025403784439)*r12*sj0);
IkReal x676=((1.5)*r21*sj5);
IkReal x677=((1.5)*cj5*r20);
IkReal x678=cj5*cj5;
IkReal x679=((1.5)*r20*x678);
IkReal x680=((1.5)*r21*x678);
CheckValue<IkReal> x681=IKPowWithIntegerCheck(IKsign((((x656*x668))+((x654*x669))+(((-1.0)*x664*x671))+(((-1.0)*x656*x679))+((x666*x676))+(((-1.0)*x666*x671))+((x667*x677))+((x673*x674))+(((-1.0)*x672*x673))+((x665*x677))+((x667*x671))+((x654*x680))+((x661*x670))+((x665*x671))+(((-1.0)*x672*x675))+(((-1.0)*x659*x679))+((x662*x670))+((x658*x680))+((x658*x669))+((x659*x668))+((x674*x675))+((x664*x676)))),-1);
if(!x681.valid){
continue;
}
CheckValue<IkReal> x682 = IKatan2WithCheck(IkReal(((((-1.0)*x654*x655))+(((-1.0)*x655*x658))+(((-1.0)*x656*x657))+(((-1.0)*x657*x659)))),IkReal(((((-1.0)*x663*x667))+((x663*x666))+(((-1.0)*x660*x661))+(((-1.0)*x663*x665))+((x663*x664))+(((-1.0)*x660*x662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x681.value)))+(x682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x683=IKsin(j4);
IkReal x684=((0.866025403784439)*r22);
IkReal x685=((0.5)*r20);
IkReal x686=(cj5*x683);
IkReal x687=IKcos(j4);
IkReal x688=((1.0)*cj5*x687);
IkReal x689=(r20*sj5);
IkReal x690=((0.5)*r21*sj5);
IkReal x691=((0.866025403784439)*cj0*r02);
IkReal x692=((0.866025403784439)*r12*sj0);
IkReal x693=((0.5)*r00);
IkReal x694=(cj0*cj5*x683);
IkReal x695=((1.0)*cj0*cj5*x687);
IkReal x696=((1.0)*cj0*sj5*x687);
IkReal x697=((0.5)*r01);
IkReal x698=(cj0*sj5*x683);
IkReal x699=((0.5)*r10);
IkReal x700=(cj5*sj0*x683);
IkReal x701=((0.5)*r11);
IkReal x702=(sj0*sj5*x683);
IkReal x703=((0.866025403784439)*cj0*r12);
IkReal x704=((0.866025403784439)*r02*sj0);
IkReal x705=(cj0*cj5*x687);
IkReal x706=(cj0*sj5*x687);
IkReal x707=(cj5*sj0*x687);
IkReal x708=(r00*sj0*sj5);
IkReal x709=(sj0*sj5*x687);
evalcond[0]=((((-1.0)*x687*x689))+(((-1.0)*x685*x686))+((x683*x690))+cj3+((x683*x684))+(((-1.0)*r21*x688)));
evalcond[1]=(((r21*x686))+(((0.5)*sj3))+((x687*x690))+(((-1.0)*cj5*x685*x687))+((x683*x689))+((x684*x687)));
evalcond[2]=((((-1.0)*r11*sj0*x688))+(((-1.0)*r01*x695))+(((-1.0)*r10*sj0*sj5*x687))+((x683*x692))+((x683*x691))+(((-1.0)*x693*x694))+(((-1.0)*r00*x696))+(((-1.0)*x699*x700))+((x701*x702))+((x697*x698)));
evalcond[3]=(((x687*x703))+((x693*x707))+(((-1.0)*r01*x700))+(((-1.0)*x697*x709))+(((-1.0)*x683*x708))+((x701*x706))+(((0.5)*cj3))+(((-1.0)*x687*x704))+((r10*x698))+(((-1.0)*x699*x705))+((r11*x694)));
evalcond[4]=((((-1.0)*x697*x702))+(((-1.0)*x683*x704))+((x693*x700))+((x687*x708))+(((-1.0)*x694*x699))+(((-1.0)*r11*x695))+(((-1.0)*(1.0)*sj3))+((x683*x703))+((r01*x707))+((x698*x701))+(((-1.0)*r10*x696)));
evalcond[5]=((-0.866025403784439)+((r00*x698))+((x701*x709))+((x687*x691))+((x697*x706))+(((-1.0)*x693*x705))+((x687*x692))+((r01*x694))+((r10*x702))+((r11*x700))+(((-1.0)*x699*x707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x710=((0.866025403784439)*r22);
IkReal x711=((0.5)*r20);
IkReal x712=(cj3*cj5);
IkReal x713=((0.5)*r21);
IkReal x714=(cj3*sj5);
IkReal x715=((0.25)*sj3);
IkReal x716=(cj5*r20);
IkReal x717=(r21*sj5);
IkReal x718=r20*r20;
IkReal x719=r21*r21;
IkReal x720=((0.75)*(cj5*cj5));
CheckValue<IkReal> x721=IKPowWithIntegerCheck(IKsign((((x710*x716))+(((-1.0)*x710*x717))+(((-1.0)*x718))+((x718*x720))+(((-1.0)*(0.75)*(r22*r22)))+(((-1.5)*cj5*r20*x717))+(((-1.0)*x719*x720))+(((-0.25)*x719)))),-1);
if(!x721.valid){
continue;
}
CheckValue<IkReal> x722 = IKatan2WithCheck(IkReal((((cj3*x710))+(((-1.0)*x711*x712))+((cj5*sj3*x713))+((x713*x714))+((sj3*sj5*x711)))),IkReal(((((-1.0)*r20*x714))+((x715*x717))+(((0.433012701892219)*r22*sj3))+(((-1.0)*x715*x716))+(((-1.0)*r21*x712)))),IKFAST_ATAN2_MAGTHRESH);
if(!x722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x721.value)))+(x722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x723=IKsin(j4);
IkReal x724=((0.866025403784439)*r22);
IkReal x725=((0.5)*r20);
IkReal x726=(cj5*x723);
IkReal x727=IKcos(j4);
IkReal x728=((1.0)*cj5*x727);
IkReal x729=(r20*sj5);
IkReal x730=((0.5)*r21*sj5);
IkReal x731=((0.866025403784439)*cj0*r02);
IkReal x732=((0.866025403784439)*r12*sj0);
IkReal x733=((0.5)*r00);
IkReal x734=(cj0*cj5*x723);
IkReal x735=((1.0)*cj0*cj5*x727);
IkReal x736=((1.0)*cj0*sj5*x727);
IkReal x737=((0.5)*r01);
IkReal x738=(cj0*sj5*x723);
IkReal x739=((0.5)*r10);
IkReal x740=(cj5*sj0*x723);
IkReal x741=((0.5)*r11);
IkReal x742=(sj0*sj5*x723);
IkReal x743=((0.866025403784439)*cj0*r12);
IkReal x744=((0.866025403784439)*r02*sj0);
IkReal x745=(cj0*cj5*x727);
IkReal x746=(cj0*sj5*x727);
IkReal x747=(cj5*sj0*x727);
IkReal x748=(r00*sj0*sj5);
IkReal x749=(sj0*sj5*x727);
evalcond[0]=((((-1.0)*x725*x726))+(((-1.0)*r21*x728))+cj3+((x723*x730))+(((-1.0)*x727*x729))+((x723*x724)));
evalcond[1]=(((x727*x730))+(((0.5)*sj3))+((x723*x729))+(((-1.0)*cj5*x725*x727))+((x724*x727))+((r21*x726)));
evalcond[2]=(((x723*x732))+(((-1.0)*x739*x740))+((x723*x731))+(((-1.0)*r00*x736))+(((-1.0)*r10*sj0*sj5*x727))+(((-1.0)*r01*x735))+(((-1.0)*x733*x734))+((x741*x742))+((x737*x738))+(((-1.0)*r11*sj0*x728)));
evalcond[3]=(((x733*x747))+(((-1.0)*x727*x744))+((x727*x743))+(((-1.0)*x723*x748))+((r10*x738))+((r11*x734))+(((-1.0)*x739*x745))+(((-1.0)*r01*x740))+((x741*x746))+(((0.5)*cj3))+(((-1.0)*x737*x749)));
evalcond[4]=((((-1.0)*x737*x742))+(((-1.0)*x723*x744))+((x727*x748))+(((-1.0)*r11*x735))+((r01*x747))+((x723*x743))+((x733*x740))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r10*x736))+((x738*x741))+(((-1.0)*x734*x739)));
evalcond[5]=((-0.866025403784439)+((r11*x740))+((x727*x732))+((r00*x738))+(((-1.0)*x739*x747))+((x727*x731))+((x737*x746))+((r01*x734))+(((-1.0)*x733*x745))+((x741*x749))+((r10*x742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x750=((0.866025403784439)*cj0);
IkReal x751=(cj5*r10);
IkReal x752=(r11*sj5);
IkReal x753=((0.866025403784439)*sj0);
IkReal x754=(cj5*r00);
IkReal x755=(r01*sj5);
IkReal x756=((1.0)*cj0*cj3);
IkReal x757=((1.0)*cj3*sj0);
IkReal x758=((0.5)*cj0*cj3);
IkReal x759=((0.5)*cj3*sj0);
CheckValue<IkReal> x760 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r01*x756))+(((-1.0)*r10*sj5*x757))+(((-1.0)*cj5*r11*x757))+(((-1.0)*r00*sj5*x756)))),IkReal(((((-1.0)*x752*x759))+((x751*x759))+(((-1.0)*x755*x758))+((x754*x758))+(((-1.0)*cj3*r12*x753))+(((-1.0)*cj3*r02*x750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x760.valid){
continue;
}
CheckValue<IkReal> x761=IKPowWithIntegerCheck(IKsign(((((-1.0)*x750*x751))+(((-1.0)*x753*x755))+((x750*x752))+(((-0.5)*cj0*r12))+((x753*x754))+((r02*(((0.5)*sj0)))))),-1);
if(!x761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x760.value)+(((1.5707963267949)*(x761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x762=IKsin(j4);
IkReal x763=((0.866025403784439)*r22);
IkReal x764=((0.5)*r20);
IkReal x765=(cj5*x762);
IkReal x766=IKcos(j4);
IkReal x767=((1.0)*cj5*x766);
IkReal x768=(r20*sj5);
IkReal x769=((0.5)*r21*sj5);
IkReal x770=((0.866025403784439)*cj0*r02);
IkReal x771=((0.866025403784439)*r12*sj0);
IkReal x772=((0.5)*r00);
IkReal x773=(cj0*cj5*x762);
IkReal x774=((1.0)*cj0*cj5*x766);
IkReal x775=((1.0)*cj0*sj5*x766);
IkReal x776=((0.5)*r01);
IkReal x777=(cj0*sj5*x762);
IkReal x778=((0.5)*r10);
IkReal x779=(cj5*sj0*x762);
IkReal x780=((0.5)*r11);
IkReal x781=(sj0*sj5*x762);
IkReal x782=((0.866025403784439)*cj0*r12);
IkReal x783=((0.866025403784439)*r02*sj0);
IkReal x784=(cj0*cj5*x766);
IkReal x785=(cj0*sj5*x766);
IkReal x786=(cj5*sj0*x766);
IkReal x787=(r00*sj0*sj5);
IkReal x788=(sj0*sj5*x766);
evalcond[0]=(((x762*x769))+(((-1.0)*x764*x765))+((x762*x763))+(((-1.0)*x766*x768))+cj3+(((-1.0)*r21*x767)));
evalcond[1]=((((-1.0)*cj5*x764*x766))+((x763*x766))+((r21*x765))+(((0.5)*sj3))+((x766*x769))+((x762*x768)));
evalcond[2]=(((x780*x781))+((x762*x771))+(((-1.0)*x778*x779))+((x762*x770))+(((-1.0)*x772*x773))+(((-1.0)*r00*x775))+((x776*x777))+(((-1.0)*r10*sj0*sj5*x766))+(((-1.0)*r01*x774))+(((-1.0)*r11*sj0*x767)));
evalcond[3]=(((r10*x777))+(((-1.0)*x776*x788))+((r11*x773))+((x772*x786))+(((-1.0)*r01*x779))+((x780*x785))+(((-1.0)*x766*x783))+(((-1.0)*x778*x784))+(((0.5)*cj3))+((x766*x782))+(((-1.0)*x762*x787)));
evalcond[4]=(((x772*x779))+((r01*x786))+(((-1.0)*r10*x775))+(((-1.0)*r11*x774))+((x777*x780))+((x762*x782))+(((-1.0)*x773*x778))+(((-1.0)*x776*x781))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x762*x783))+((x766*x787)));
evalcond[5]=((-0.866025403784439)+((x766*x770))+((r00*x777))+((r01*x773))+(((-1.0)*x778*x786))+((r10*x781))+((x766*x771))+((r11*x779))+((x776*x785))+((x780*x788))+(((-1.0)*x772*x784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x789=((1.0)*cj5);
if( IKabs((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x789)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x789))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x789))))+IKsqr(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x789))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x789))), ((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x789))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x790=((0.866025403784439)*cj5);
IkReal x791=((0.866025403784439)*sj5);
evalcond[0]=((((-1.0)*(0.866025403784439)*(IKsin(j3))))+(((-1.0)*(0.5)*r22))+(((-1.0)*r20*x790))+((r21*x791)));
evalcond[1]=(((r00*sj0*x790))+(((-1.0)*(0.5)*cj0*r12))+((cj0*r11*x791))+(((0.5)*r02*sj0))+(((-1.0)*cj0*r10*x790))+(((-1.0)*r01*sj0*x791))+(((0.866025403784439)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x792=r22*r22;
IkReal x793=r20*r20;
IkReal x794=r21*r21;
IkReal x795=((1.15470053837925)*r22);
IkReal x796=(cj5*r20);
IkReal x797=(r21*sj5);
IkReal x798=(cj5*r20*r21*sj5);
IkReal x799=cj5*cj5;
IkReal x800=(x794*x799);
IkReal x801=(x793*x799);
IkReal x802=((0.866025403784439)*r22);
IkReal x803=((0.5)*r20);
IkReal x804=(cj3*cj5);
IkReal x805=((0.5)*r21);
IkReal x806=(cj3*sj5);
IkReal x807=((0.25)*sj3);
j4eval[0]=((((-1.0)*x801))+(((0.333333333333333)*x794))+x800+((x795*x797))+(((-1.0)*x795*x796))+(((1.33333333333333)*x793))+(((2.0)*x798))+x792);
j4eval[1]=((IKabs(((((-1.0)*x796*x807))+(((0.433012701892219)*r22*sj3))+(((-1.0)*r20*x806))+(((-1.0)*r21*x804))+((x797*x807)))))+(IKabs(((((-1.0)*x803*x804))+((cj5*sj3*x805))+((sj3*sj5*x803))+((x805*x806))+((cj3*x802))))));
j4eval[2]=IKsign(((((0.25)*x794))+(((1.5)*x798))+((x797*x802))+(((-1.0)*x796*x802))+(((0.75)*x800))+(((0.75)*x792))+(((-0.75)*x801))+x793));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x808=((1.73205080756888)*cj0);
IkReal x809=((1.73205080756888)*sj0);
IkReal x810=(((cj5*r00*x808))+((cj5*r10*x809))+((cj0*r02))+((r12*sj0))+(((-1.0)*r01*sj5*x808))+(((-1.0)*r11*sj5*x809)));
j4eval[0]=x810;
j4eval[1]=IKsign(x810);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x811=(cj0*r01*r21);
IkReal x812=(r11*r21*sj0);
IkReal x813=(cj0*r00*r20);
IkReal x814=(cj0*r02*r22);
IkReal x815=(r10*r20*sj0);
IkReal x816=(r12*r22*sj0);
IkReal x817=(cj0*cj5*r00*r22);
IkReal x818=(cj0*cj5*r02*r20);
IkReal x819=(cj0*r01*r22*sj5);
IkReal x820=(cj0*r02*r21*sj5);
IkReal x821=(cj5*r10*r22*sj0);
IkReal x822=(cj5*r12*r20*sj0);
IkReal x823=(r11*r22*sj0*sj5);
IkReal x824=(r12*r21*sj0*sj5);
IkReal x825=(cj0*cj5*r00*r21*sj5);
IkReal x826=(cj0*cj5*r01*r20*sj5);
IkReal x827=(cj5*r10*r21*sj0*sj5);
IkReal x828=(cj5*r11*r20*sj0*sj5);
IkReal x829=cj5*cj5;
IkReal x830=(cj0*r00*r20*x829);
IkReal x831=(cj0*r01*r21*x829);
IkReal x832=(r10*r20*sj0*x829);
IkReal x833=(r11*r21*sj0*x829);
j4eval[0]=((((1.73205080756888)*x824))+(((3.0)*x827))+(((-3.0)*x830))+(((1.73205080756888)*x819))+(((3.0)*x826))+(((3.0)*x825))+(((-1.73205080756888)*x817))+(((-1.73205080756888)*x818))+(((3.0)*x828))+(((3.0)*x833))+(((1.73205080756888)*x823))+(((4.0)*x813))+x811+x812+(((-3.0)*x832))+(((3.0)*x814))+(((-1.73205080756888)*x822))+(((-1.73205080756888)*x821))+(((3.0)*x831))+(((1.73205080756888)*x820))+(((3.0)*x816))+(((4.0)*x815)));
j4eval[1]=IKsign(((((0.866025403784439)*x820))+(((1.5)*x831))+(((1.5)*x825))+(((0.866025403784439)*x823))+(((1.5)*x833))+(((1.5)*x828))+(((-0.866025403784439)*x818))+(((-0.866025403784439)*x817))+(((0.866025403784439)*x819))+(((1.5)*x826))+(((-0.866025403784439)*x822))+(((-1.5)*x832))+(((2.0)*x813))+(((0.866025403784439)*x824))+(((-0.866025403784439)*x821))+(((1.5)*x827))+(((0.5)*x812))+(((2.0)*x815))+(((0.5)*x811))+(((1.5)*x816))+(((1.5)*x814))+(((-1.5)*x830))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x834=(cj0*r01);
IkReal x835=(cj5*sj3);
IkReal x836=(cj0*r00);
IkReal x837=(sj3*sj5);
IkReal x838=(r11*sj0);
IkReal x839=(r10*sj0);
IkReal x840=((0.866025403784439)*sj3);
IkReal x841=(cj0*r02);
IkReal x842=(r12*sj0);
IkReal x843=((0.5)*cj5*sj3);
IkReal x844=((0.5)*sj3*sj5);
IkReal x845=((2.0)*r20);
IkReal x846=((0.5)*r21);
IkReal x847=((1.5)*r22);
IkReal x848=((0.866025403784439)*cj5*r22);
IkReal x849=((0.866025403784439)*cj5*r20);
IkReal x850=((0.866025403784439)*r22*sj5);
IkReal x851=((0.866025403784439)*r21*sj5);
IkReal x852=((1.5)*cj5*r21*sj5);
IkReal x853=((1.5)*cj5*r20*sj5);
IkReal x854=cj5*cj5;
IkReal x855=((1.5)*r20*x854);
IkReal x856=((1.5)*r21*x854);
CheckValue<IkReal> x857 = IKatan2WithCheck(IkReal((((x834*x835))+((x835*x838))+((x836*x837))+((x837*x839)))),IkReal((((x840*x841))+((x838*x844))+((x840*x842))+(((-1.0)*x836*x843))+((x834*x844))+(((-1.0)*x839*x843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x857.valid){
continue;
}
CheckValue<IkReal> x858=IKPowWithIntegerCheck(IKsign((((x838*x850))+(((-1.0)*x839*x848))+((x834*x856))+(((-1.0)*x836*x848))+(((-1.0)*x836*x855))+(((-1.0)*x842*x849))+((x839*x852))+((x842*x851))+((x836*x845))+(((-1.0)*x841*x849))+((x842*x847))+((x834*x853))+((x838*x856))+((x841*x851))+((x834*x846))+((x834*x850))+((x836*x852))+((x838*x853))+(((-1.0)*x839*x855))+((x839*x845))+((x838*x846))+((x841*x847)))),-1);
if(!x858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x857.value)+(((1.5707963267949)*(x858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x859=IKcos(j4);
IkReal x860=((0.866025403784439)*r22);
IkReal x861=IKsin(j4);
IkReal x862=(cj5*x861);
IkReal x863=(r20*sj5);
IkReal x864=((0.5)*r20);
IkReal x865=((0.5)*r21*sj5);
IkReal x866=((1.0)*cj5*x859);
IkReal x867=((0.866025403784439)*cj0*r02);
IkReal x868=((0.866025403784439)*r12*sj0);
IkReal x869=((0.5)*r00);
IkReal x870=(cj0*cj5*x861);
IkReal x871=((1.0)*cj0*cj5*x859);
IkReal x872=((1.0)*cj0*sj5*x859);
IkReal x873=((0.5)*r01);
IkReal x874=(cj0*sj5*x861);
IkReal x875=((0.5)*r10);
IkReal x876=(cj5*sj0*x861);
IkReal x877=((0.5)*r11);
IkReal x878=(sj0*sj5*x861);
IkReal x879=((0.866025403784439)*cj0*r12);
IkReal x880=((0.866025403784439)*r02*sj0);
IkReal x881=(cj0*cj5*x859);
IkReal x882=(cj0*sj5*x859);
IkReal x883=(cj5*sj0*x859);
IkReal x884=(r00*sj0*sj5);
IkReal x885=(sj0*sj5*x859);
evalcond[0]=((((-1.0)*cj5*x859*x864))+((x861*x863))+((x859*x860))+(((-1.0)*(0.5)*sj3))+((x859*x865))+((r21*x862)));
evalcond[1]=(((x861*x865))+((x860*x861))+(((-1.0)*x859*x863))+(((-1.0)*(1.0)*cj3))+(((-1.0)*r21*x866))+(((-1.0)*x862*x864)));
evalcond[2]=((((-1.0)*r10*sj0*sj5*x859))+(((-1.0)*x875*x876))+(((-1.0)*r01*x871))+((x861*x868))+(((-1.0)*x869*x870))+((x861*x867))+((x877*x878))+((x873*x874))+(((-1.0)*r00*x872))+(((-1.0)*r11*sj0*x866)));
evalcond[3]=((((-1.0)*x859*x880))+((r10*x874))+(((-1.0)*r01*x876))+(((-1.0)*x873*x885))+(((-1.0)*x861*x884))+((x869*x883))+(((-1.0)*x875*x881))+((x859*x879))+((r11*x870))+((x877*x882))+(((0.5)*cj3)));
evalcond[4]=(((x869*x876))+(((-1.0)*x873*x878))+(((-1.0)*r10*x872))+((x861*x879))+(((-1.0)*x861*x880))+(((-1.0)*x870*x875))+((x859*x884))+(((-1.0)*r11*x871))+((r01*x883))+((x874*x877))+(((-1.0)*(1.0)*sj3)));
evalcond[5]=((0.866025403784439)+((r00*x874))+((x859*x867))+((r01*x870))+((r11*x876))+((x877*x885))+(((-1.0)*x875*x883))+((r10*x878))+(((-1.0)*x869*x881))+((x859*x868))+((x873*x882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x886=((1.73205080756888)*cj0);
IkReal x887=(cj5*r00);
IkReal x888=(r01*sj5);
IkReal x889=((1.73205080756888)*sj0);
IkReal x890=(cj5*r10);
IkReal x891=(r11*sj5);
IkReal x892=((0.866025403784439)*sj3);
IkReal x893=(cj3*cj5);
IkReal x894=(cj3*sj5);
IkReal x895=((0.5)*cj0*sj3);
IkReal x896=((0.5)*sj0*sj3);
IkReal x897=(cj0*sj3);
IkReal x898=((1.0)*sj0*sj3);
CheckValue<IkReal> x899=IKPowWithIntegerCheck(IKsign((((cj0*r02))+(((-1.0)*x886*x888))+((r12*sj0))+(((-1.0)*x889*x891))+((x886*x887))+((x889*x890)))),-1);
if(!x899.valid){
continue;
}
CheckValue<IkReal> x900 = IKatan2WithCheck(IkReal(((((-0.5)*r21*x894))+(((-1.0)*cj0*r12*x892))+(((-1.0)*x891*x895))+((x888*x896))+(((-1.0)*x887*x896))+(((0.5)*r20*x893))+((r02*sj0*x892))+(((-1.0)*(0.866025403784439)*cj3*r22))+((x890*x895)))),IkReal((((r21*x893))+(((-1.0)*cj5*r01*x898))+((r20*x894))+((r10*sj5*x897))+(((-1.0)*r00*sj5*x898))+((cj5*r11*x897)))),IKFAST_ATAN2_MAGTHRESH);
if(!x900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x899.value)))+(x900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x901=IKcos(j4);
IkReal x902=((0.866025403784439)*r22);
IkReal x903=IKsin(j4);
IkReal x904=(cj5*x903);
IkReal x905=(r20*sj5);
IkReal x906=((0.5)*r20);
IkReal x907=((0.5)*r21*sj5);
IkReal x908=((1.0)*cj5*x901);
IkReal x909=((0.866025403784439)*cj0*r02);
IkReal x910=((0.866025403784439)*r12*sj0);
IkReal x911=((0.5)*r00);
IkReal x912=(cj0*cj5*x903);
IkReal x913=((1.0)*cj0*cj5*x901);
IkReal x914=((1.0)*cj0*sj5*x901);
IkReal x915=((0.5)*r01);
IkReal x916=(cj0*sj5*x903);
IkReal x917=((0.5)*r10);
IkReal x918=(cj5*sj0*x903);
IkReal x919=((0.5)*r11);
IkReal x920=(sj0*sj5*x903);
IkReal x921=((0.866025403784439)*cj0*r12);
IkReal x922=((0.866025403784439)*r02*sj0);
IkReal x923=(cj0*cj5*x901);
IkReal x924=(cj0*sj5*x901);
IkReal x925=(cj5*sj0*x901);
IkReal x926=(r00*sj0*sj5);
IkReal x927=(sj0*sj5*x901);
evalcond[0]=(((r21*x904))+(((-1.0)*cj5*x901*x906))+(((-1.0)*(0.5)*sj3))+((x903*x905))+((x901*x907))+((x901*x902)));
evalcond[1]=((((-1.0)*r21*x908))+((x903*x907))+(((-1.0)*(1.0)*cj3))+(((-1.0)*x901*x905))+(((-1.0)*x904*x906))+((x902*x903)));
evalcond[2]=((((-1.0)*r11*sj0*x908))+(((-1.0)*r01*x913))+((x903*x910))+(((-1.0)*x917*x918))+(((-1.0)*r00*x914))+((x915*x916))+(((-1.0)*x911*x912))+((x919*x920))+(((-1.0)*r10*sj0*sj5*x901))+((x903*x909)));
evalcond[3]=(((r10*x916))+((r11*x912))+(((-1.0)*x915*x927))+(((-1.0)*r01*x918))+((x919*x924))+((x901*x921))+(((-1.0)*x901*x922))+(((0.5)*cj3))+(((-1.0)*x917*x923))+(((-1.0)*x903*x926))+((x911*x925)));
evalcond[4]=((((-1.0)*x903*x922))+(((-1.0)*x915*x920))+((x911*x918))+((x901*x926))+(((-1.0)*r11*x913))+(((-1.0)*x912*x917))+(((-1.0)*r10*x914))+((x916*x919))+((r01*x925))+(((-1.0)*(1.0)*sj3))+((x903*x921)));
evalcond[5]=((0.866025403784439)+((r01*x912))+((x915*x924))+((x919*x927))+(((-1.0)*x917*x925))+(((-1.0)*x911*x923))+((r11*x918))+((r00*x916))+((x901*x910))+((r10*x920))+((x901*x909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x928=((0.866025403784439)*r22);
IkReal x929=((0.5)*r20);
IkReal x930=(cj3*cj5);
IkReal x931=((0.5)*r21);
IkReal x932=(cj3*sj5);
IkReal x933=((0.25)*sj3);
IkReal x934=(cj5*r20);
IkReal x935=(r21*sj5);
IkReal x936=r20*r20;
IkReal x937=r21*r21;
IkReal x938=((0.75)*(cj5*cj5));
CheckValue<IkReal> x939 = IKatan2WithCheck(IkReal(((((-1.0)*x929*x930))+((cj5*sj3*x931))+((cj3*x928))+((x931*x932))+((sj3*sj5*x929)))),IkReal(((((0.433012701892219)*r22*sj3))+(((-1.0)*r20*x932))+(((-1.0)*r21*x930))+(((-1.0)*x933*x934))+((x933*x935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x939.valid){
continue;
}
CheckValue<IkReal> x940=IKPowWithIntegerCheck(IKsign(((((1.5)*cj5*r20*x935))+(((0.75)*(r22*r22)))+(((-1.0)*x936*x938))+(((0.25)*x937))+((x937*x938))+((x928*x935))+x936+(((-1.0)*x928*x934)))),-1);
if(!x940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x939.value)+(((1.5707963267949)*(x940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x941=IKcos(j4);
IkReal x942=((0.866025403784439)*r22);
IkReal x943=IKsin(j4);
IkReal x944=(cj5*x943);
IkReal x945=(r20*sj5);
IkReal x946=((0.5)*r20);
IkReal x947=((0.5)*r21*sj5);
IkReal x948=((1.0)*cj5*x941);
IkReal x949=((0.866025403784439)*cj0*r02);
IkReal x950=((0.866025403784439)*r12*sj0);
IkReal x951=((0.5)*r00);
IkReal x952=(cj0*cj5*x943);
IkReal x953=((1.0)*cj0*cj5*x941);
IkReal x954=((1.0)*cj0*sj5*x941);
IkReal x955=((0.5)*r01);
IkReal x956=(cj0*sj5*x943);
IkReal x957=((0.5)*r10);
IkReal x958=(cj5*sj0*x943);
IkReal x959=((0.5)*r11);
IkReal x960=(sj0*sj5*x943);
IkReal x961=((0.866025403784439)*cj0*r12);
IkReal x962=((0.866025403784439)*r02*sj0);
IkReal x963=(cj0*cj5*x941);
IkReal x964=(cj0*sj5*x941);
IkReal x965=(cj5*sj0*x941);
IkReal x966=(r00*sj0*sj5);
IkReal x967=(sj0*sj5*x941);
evalcond[0]=(((x941*x947))+(((-1.0)*cj5*x941*x946))+(((-1.0)*(0.5)*sj3))+((x941*x942))+((x943*x945))+((r21*x944)));
evalcond[1]=((((-1.0)*(1.0)*cj3))+(((-1.0)*x941*x945))+(((-1.0)*r21*x948))+(((-1.0)*x944*x946))+((x942*x943))+((x943*x947)));
evalcond[2]=((((-1.0)*r01*x953))+(((-1.0)*x957*x958))+(((-1.0)*r11*sj0*x948))+(((-1.0)*r10*sj0*sj5*x941))+((x959*x960))+((x943*x949))+((x943*x950))+(((-1.0)*x951*x952))+((x955*x956))+(((-1.0)*r00*x954)));
evalcond[3]=(((x941*x961))+(((-1.0)*r01*x958))+((x959*x964))+(((-1.0)*x955*x967))+(((0.5)*cj3))+((r11*x952))+(((-1.0)*x943*x966))+(((-1.0)*x941*x962))+(((-1.0)*x957*x963))+((r10*x956))+((x951*x965)));
evalcond[4]=(((x956*x959))+(((-1.0)*x943*x962))+((r01*x965))+((x941*x966))+(((-1.0)*r11*x953))+((x951*x958))+((x943*x961))+(((-1.0)*x955*x960))+(((-1.0)*x952*x957))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r10*x954)));
evalcond[5]=((0.866025403784439)+((x941*x950))+((r00*x956))+(((-1.0)*x957*x965))+((x959*x967))+((r11*x958))+((r10*x960))+(((-1.0)*x951*x963))+((r01*x952))+((x941*x949))+((x955*x964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x968=((1.0)*sj5);
if( IKabs(((((-1.0)*r21*x968))+((cj5*r20))+(((0.577350269189626)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x968))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x968))+((cj5*r20))+(((0.577350269189626)*r22))))+IKsqr((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x968))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r21*x968))+((cj5*r20))+(((0.577350269189626)*r22))), (((cj0*cj5*r10))+(((-1.0)*cj0*r11*x968))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x969=((0.866025403784439)*cj5);
IkReal x970=((0.866025403784439)*sj5);
evalcond[0]=((((-1.0)*r20*x969))+((r21*x970))+(((-1.0)*(0.5)*r22))+(((0.866025403784439)*(IKsin(j3)))));
evalcond[1]=((((-1.0)*r01*sj0*x970))+(((-1.0)*(0.5)*cj0*r12))+(((-1.0)*cj0*r10*x969))+((cj0*r11*x970))+(((0.5)*r02*sj0))+((r00*sj0*x969))+(((0.866025403784439)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x971=(r02*sj0);
IkReal x972=(cj0*r12);
IkReal x973=(cj0*cj5*r10);
IkReal x974=(cj0*r11*sj5);
IkReal x975=(cj5*r00*sj0);
IkReal x976=(r01*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x974))+(((-1.0)*x972))+x971+(((-1.73205080756888)*x973))+(((-1.73205080756888)*x976))+(((1.73205080756888)*x975)));
j4eval[1]=IKsign(((((-0.866025403784439)*x973))+(((0.5)*x971))+(((-0.866025403784439)*x976))+(((-0.5)*x972))+(((0.866025403784439)*x974))+(((0.866025403784439)*x975))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x977=r20*r20;
IkReal x978=r21*r21;
IkReal x979=r22*r22;
IkReal x980=((3.46410161513775)*r22);
IkReal x981=(cj5*r20);
IkReal x982=(r21*sj5);
IkReal x983=(cj5*r20*r21*sj5);
IkReal x984=cj5*cj5;
IkReal x985=(x977*x984);
IkReal x986=(x978*x984);
IkReal x987=((0.866025403784439)*r22);
IkReal x988=((0.5)*r20);
IkReal x989=(cj3*cj5);
IkReal x990=((0.5)*r21);
IkReal x991=(cj3*sj5);
IkReal x992=((0.25)*sj3);
j4eval[0]=((((-1.0)*x980*x982))+(((-4.0)*x977))+(((3.0)*x985))+(((-3.0)*x986))+((x980*x981))+(((-6.0)*x983))+(((-3.0)*x979))+(((-1.0)*x978)));
j4eval[1]=IKsign(((((-1.5)*x983))+(((-1.0)*x982*x987))+(((-1.0)*x977))+(((-0.75)*x979))+((x981*x987))+(((0.75)*x985))+(((-0.25)*x978))+(((-0.75)*x986))));
j4eval[2]=((IKabs((((x990*x991))+((sj3*sj5*x988))+((cj5*sj3*x990))+(((-1.0)*x988*x989))+((cj3*x987)))))+(IKabs(((((-1.0)*x981*x992))+(((0.433012701892219)*r22*sj3))+((x982*x992))+(((-1.0)*r20*x991))+(((-1.0)*r21*x989))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x993=(cj0*r01*r21);
IkReal x994=(r11*r21*sj0);
IkReal x995=(cj0*r00*r20);
IkReal x996=(cj0*r02*r22);
IkReal x997=(r10*r20*sj0);
IkReal x998=(r12*r22*sj0);
IkReal x999=(cj0*cj5*r00*r22);
IkReal x1000=(cj0*cj5*r02*r20);
IkReal x1001=(cj0*r01*r22*sj5);
IkReal x1002=(cj0*r02*r21*sj5);
IkReal x1003=(cj5*r10*r22*sj0);
IkReal x1004=(cj5*r12*r20*sj0);
IkReal x1005=(r11*r22*sj0*sj5);
IkReal x1006=(r12*r21*sj0*sj5);
IkReal x1007=(cj0*cj5*r00*r21*sj5);
IkReal x1008=(cj0*cj5*r01*r20*sj5);
IkReal x1009=(cj5*r10*r21*sj0*sj5);
IkReal x1010=(cj5*r11*r20*sj0*sj5);
IkReal x1011=cj5*cj5;
IkReal x1012=(cj0*r00*r20*x1011);
IkReal x1013=(cj0*r01*r21*x1011);
IkReal x1014=(r10*r20*sj0*x1011);
IkReal x1015=(r11*r21*sj0*x1011);
j4eval[0]=((((1.73205080756888)*x1002))+(((3.0)*x1013))+(((4.0)*x995))+(((1.73205080756888)*x1001))+(((-3.0)*x1014))+(((3.0)*x998))+(((3.0)*x1015))+(((3.0)*x1010))+(((1.73205080756888)*x1006))+(((3.0)*x996))+(((3.0)*x1008))+(((-3.0)*x1012))+(((-1.73205080756888)*x1000))+(((1.73205080756888)*x1005))+(((3.0)*x1007))+(((4.0)*x997))+(((-1.73205080756888)*x1003))+(((-1.73205080756888)*x1004))+x994+x993+(((3.0)*x1009))+(((-1.73205080756888)*x999)));
j4eval[1]=IKsign(((((-0.866025403784439)*x1000))+(((1.5)*x1008))+(((1.5)*x1007))+(((1.5)*x998))+(((2.0)*x995))+(((1.5)*x1015))+(((0.5)*x994))+(((1.5)*x1010))+(((-1.5)*x1014))+(((-0.866025403784439)*x1003))+(((1.5)*x996))+(((-1.5)*x1012))+(((-0.866025403784439)*x999))+(((1.5)*x1013))+(((2.0)*x997))+(((-0.866025403784439)*x1004))+(((0.866025403784439)*x1001))+(((0.5)*x993))+(((0.866025403784439)*x1002))+(((0.866025403784439)*x1005))+(((0.866025403784439)*x1006))+(((1.5)*x1009))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1016=(cj0*r01);
IkReal x1017=((1.0)*cj5*sj3);
IkReal x1018=(cj0*r00);
IkReal x1019=((1.0)*sj3*sj5);
IkReal x1020=(r11*sj0);
IkReal x1021=(r10*sj0);
IkReal x1022=((0.866025403784439)*sj3);
IkReal x1023=(cj0*r02);
IkReal x1024=(r12*sj0);
IkReal x1025=((0.5)*sj3);
IkReal x1026=(cj0*cj5*r00);
IkReal x1027=(cj0*r01*sj5);
IkReal x1028=(cj5*r10*sj0);
IkReal x1029=(r11*sj0*sj5);
IkReal x1030=((2.0)*r20);
IkReal x1031=((0.5)*r21);
IkReal x1032=((1.5)*r22);
IkReal x1033=((0.866025403784439)*r22);
IkReal x1034=(cj5*r20);
IkReal x1035=((0.866025403784439)*cj0*r02);
IkReal x1036=(r21*sj5);
IkReal x1037=((0.866025403784439)*r12*sj0);
IkReal x1038=((1.5)*r21*sj5);
IkReal x1039=((1.5)*cj5*r20);
IkReal x1040=cj5*cj5;
IkReal x1041=((1.5)*r20*x1040);
IkReal x1042=((1.5)*r21*x1040);
CheckValue<IkReal> x1043 = IKatan2WithCheck(IkReal(((((-1.0)*x1018*x1019))+(((-1.0)*x1016*x1017))+(((-1.0)*x1017*x1020))+(((-1.0)*x1019*x1021)))),IkReal(((((-1.0)*x1025*x1029))+(((-1.0)*x1025*x1027))+(((-1.0)*x1022*x1023))+((x1025*x1026))+(((-1.0)*x1022*x1024))+((x1025*x1028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1043.valid){
continue;
}
CheckValue<IkReal> x1044=IKPowWithIntegerCheck(IKsign((((x1024*x1032))+(((-1.0)*x1021*x1041))+((x1029*x1033))+((x1020*x1042))+((x1035*x1036))+(((-1.0)*x1028*x1033))+((x1029*x1039))+((x1027*x1039))+((x1023*x1032))+(((-1.0)*x1026*x1033))+(((-1.0)*x1034*x1035))+((x1026*x1038))+(((-1.0)*x1018*x1041))+((x1016*x1042))+((x1027*x1033))+((x1036*x1037))+((x1016*x1031))+((x1018*x1030))+((x1020*x1031))+((x1028*x1038))+((x1021*x1030))+(((-1.0)*x1034*x1037)))),-1);
if(!x1044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1043.value)+(((1.5707963267949)*(x1044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1045=IKsin(j4);
IkReal x1046=((0.866025403784439)*r22);
IkReal x1047=((0.5)*r20);
IkReal x1048=(cj5*x1045);
IkReal x1049=IKcos(j4);
IkReal x1050=((1.0)*cj5*x1049);
IkReal x1051=(r20*sj5);
IkReal x1052=((0.5)*r21*sj5);
IkReal x1053=((0.866025403784439)*cj0*r02);
IkReal x1054=((0.866025403784439)*r12*sj0);
IkReal x1055=((0.5)*r00);
IkReal x1056=(cj0*cj5*x1045);
IkReal x1057=((1.0)*cj0*cj5*x1049);
IkReal x1058=((1.0)*cj0*sj5*x1049);
IkReal x1059=((0.5)*r01);
IkReal x1060=(cj0*sj5*x1045);
IkReal x1061=((0.5)*r10);
IkReal x1062=(cj5*sj0*x1045);
IkReal x1063=((0.5)*r11);
IkReal x1064=(sj0*sj5*x1045);
IkReal x1065=((0.866025403784439)*cj0*r12);
IkReal x1066=((0.866025403784439)*r02*sj0);
IkReal x1067=(cj0*cj5*x1049);
IkReal x1068=(cj0*sj5*x1049);
IkReal x1069=(cj5*sj0*x1049);
IkReal x1070=(r00*sj0*sj5);
IkReal x1071=(sj0*sj5*x1049);
evalcond[0]=((((-1.0)*r21*x1050))+((x1045*x1052))+cj3+(((-1.0)*x1047*x1048))+(((-1.0)*x1049*x1051))+((x1045*x1046)));
evalcond[1]=((((-1.0)*cj5*x1047*x1049))+(((0.5)*sj3))+((x1045*x1051))+((x1049*x1052))+((r21*x1048))+((x1046*x1049)));
evalcond[2]=((((-1.0)*r10*sj0*sj5*x1049))+((x1063*x1064))+(((-1.0)*r11*sj0*x1050))+((x1045*x1053))+(((-1.0)*x1061*x1062))+(((-1.0)*r00*x1058))+((x1059*x1060))+(((-1.0)*x1055*x1056))+(((-1.0)*r01*x1057))+((x1045*x1054)));
evalcond[3]=(((r11*x1056))+(((-1.0)*x1061*x1067))+((x1063*x1068))+(((-1.0)*r01*x1062))+(((-1.0)*x1045*x1070))+((x1049*x1065))+(((-1.0)*x1049*x1066))+(((-1.0)*x1059*x1071))+((r10*x1060))+(((0.5)*cj3))+((x1055*x1069)));
evalcond[4]=((((-1.0)*x1059*x1064))+((x1055*x1062))+((x1060*x1063))+((r01*x1069))+(((-1.0)*x1045*x1066))+(((-1.0)*r11*x1057))+((x1045*x1065))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x1056*x1061))+((x1049*x1070))+(((-1.0)*r10*x1058)));
evalcond[5]=((-0.866025403784439)+((x1059*x1068))+((x1063*x1071))+((r10*x1064))+((x1049*x1054))+((r00*x1060))+((r01*x1056))+(((-1.0)*x1061*x1069))+((r11*x1062))+((x1049*x1053))+(((-1.0)*x1055*x1067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1072=((0.866025403784439)*r22);
IkReal x1073=((0.5)*r20);
IkReal x1074=(cj3*cj5);
IkReal x1075=((0.5)*r21);
IkReal x1076=(cj3*sj5);
IkReal x1077=((0.25)*sj3);
IkReal x1078=(cj5*r20);
IkReal x1079=(r21*sj5);
IkReal x1080=r20*r20;
IkReal x1081=r21*r21;
IkReal x1082=((0.75)*(cj5*cj5));
CheckValue<IkReal> x1083 = IKatan2WithCheck(IkReal((((x1075*x1076))+((cj5*sj3*x1075))+((sj3*sj5*x1073))+((cj3*x1072))+(((-1.0)*x1073*x1074)))),IkReal(((((-1.0)*r21*x1074))+(((-1.0)*r20*x1076))+(((0.433012701892219)*r22*sj3))+(((-1.0)*x1077*x1078))+((x1077*x1079)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1083.valid){
continue;
}
CheckValue<IkReal> x1084=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1080))+((x1080*x1082))+(((-1.0)*x1081*x1082))+(((-0.25)*x1081))+((x1072*x1078))+(((-1.0)*(0.75)*(r22*r22)))+(((-1.5)*cj5*r20*x1079))+(((-1.0)*x1072*x1079)))),-1);
if(!x1084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1083.value)+(((1.5707963267949)*(x1084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1085=IKsin(j4);
IkReal x1086=((0.866025403784439)*r22);
IkReal x1087=((0.5)*r20);
IkReal x1088=(cj5*x1085);
IkReal x1089=IKcos(j4);
IkReal x1090=((1.0)*cj5*x1089);
IkReal x1091=(r20*sj5);
IkReal x1092=((0.5)*r21*sj5);
IkReal x1093=((0.866025403784439)*cj0*r02);
IkReal x1094=((0.866025403784439)*r12*sj0);
IkReal x1095=((0.5)*r00);
IkReal x1096=(cj0*cj5*x1085);
IkReal x1097=((1.0)*cj0*cj5*x1089);
IkReal x1098=((1.0)*cj0*sj5*x1089);
IkReal x1099=((0.5)*r01);
IkReal x1100=(cj0*sj5*x1085);
IkReal x1101=((0.5)*r10);
IkReal x1102=(cj5*sj0*x1085);
IkReal x1103=((0.5)*r11);
IkReal x1104=(sj0*sj5*x1085);
IkReal x1105=((0.866025403784439)*cj0*r12);
IkReal x1106=((0.866025403784439)*r02*sj0);
IkReal x1107=(cj0*cj5*x1089);
IkReal x1108=(cj0*sj5*x1089);
IkReal x1109=(cj5*sj0*x1089);
IkReal x1110=(r00*sj0*sj5);
IkReal x1111=(sj0*sj5*x1089);
evalcond[0]=((((-1.0)*x1087*x1088))+((x1085*x1086))+(((-1.0)*r21*x1090))+(((-1.0)*x1089*x1091))+cj3+((x1085*x1092)));
evalcond[1]=(((r21*x1088))+(((-1.0)*cj5*x1087*x1089))+(((0.5)*sj3))+((x1086*x1089))+((x1085*x1091))+((x1089*x1092)));
evalcond[2]=((((-1.0)*r00*x1098))+(((-1.0)*r11*sj0*x1090))+((x1099*x1100))+(((-1.0)*x1095*x1096))+(((-1.0)*r01*x1097))+((x1085*x1094))+(((-1.0)*r10*sj0*sj5*x1089))+((x1103*x1104))+(((-1.0)*x1101*x1102))+((x1085*x1093)));
evalcond[3]=(((r10*x1100))+(((-1.0)*x1099*x1111))+((x1095*x1109))+((x1103*x1108))+(((-1.0)*x1101*x1107))+(((-1.0)*x1085*x1110))+(((-1.0)*x1089*x1106))+(((-1.0)*r01*x1102))+(((0.5)*cj3))+((x1089*x1105))+((r11*x1096)));
evalcond[4]=(((r01*x1109))+(((-1.0)*x1096*x1101))+(((-1.0)*x1099*x1104))+((x1100*x1103))+(((-1.0)*r10*x1098))+((x1085*x1105))+(((-1.0)*r11*x1097))+((x1095*x1102))+(((-1.0)*x1085*x1106))+(((-1.0)*(1.0)*sj3))+((x1089*x1110)));
evalcond[5]=((-0.866025403784439)+((x1089*x1094))+(((-1.0)*x1101*x1109))+((r11*x1102))+((r00*x1100))+(((-1.0)*x1095*x1107))+((x1103*x1111))+((x1099*x1108))+((r10*x1104))+((x1089*x1093))+((r01*x1096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1112=((0.866025403784439)*cj0);
IkReal x1113=(cj5*r10);
IkReal x1114=(r11*sj5);
IkReal x1115=((0.866025403784439)*sj0);
IkReal x1116=(cj5*r00);
IkReal x1117=(r01*sj5);
IkReal x1118=((1.0)*cj0*cj3);
IkReal x1119=((1.0)*cj3*sj0);
IkReal x1120=((0.5)*cj0*cj3);
IkReal x1121=((0.5)*cj3*sj0);
CheckValue<IkReal> x1122=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1115*x1117))+((x1112*x1114))+(((-1.0)*x1112*x1113))+(((-0.5)*cj0*r12))+((x1115*x1116))+((r02*(((0.5)*sj0)))))),-1);
if(!x1122.valid){
continue;
}
CheckValue<IkReal> x1123 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5*x1119))+(((-1.0)*r00*sj5*x1118))+(((-1.0)*cj5*r01*x1118))+(((-1.0)*cj5*r11*x1119)))),IkReal((((x1116*x1120))+(((-1.0)*cj3*r12*x1115))+((x1113*x1121))+(((-1.0)*x1114*x1121))+(((-1.0)*x1117*x1120))+(((-1.0)*cj3*r02*x1112)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1122.value)))+(x1123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1124=IKsin(j4);
IkReal x1125=((0.866025403784439)*r22);
IkReal x1126=((0.5)*r20);
IkReal x1127=(cj5*x1124);
IkReal x1128=IKcos(j4);
IkReal x1129=((1.0)*cj5*x1128);
IkReal x1130=(r20*sj5);
IkReal x1131=((0.5)*r21*sj5);
IkReal x1132=((0.866025403784439)*cj0*r02);
IkReal x1133=((0.866025403784439)*r12*sj0);
IkReal x1134=((0.5)*r00);
IkReal x1135=(cj0*cj5*x1124);
IkReal x1136=((1.0)*cj0*cj5*x1128);
IkReal x1137=((1.0)*cj0*sj5*x1128);
IkReal x1138=((0.5)*r01);
IkReal x1139=(cj0*sj5*x1124);
IkReal x1140=((0.5)*r10);
IkReal x1141=(cj5*sj0*x1124);
IkReal x1142=((0.5)*r11);
IkReal x1143=(sj0*sj5*x1124);
IkReal x1144=((0.866025403784439)*cj0*r12);
IkReal x1145=((0.866025403784439)*r02*sj0);
IkReal x1146=(cj0*cj5*x1128);
IkReal x1147=(cj0*sj5*x1128);
IkReal x1148=(cj5*sj0*x1128);
IkReal x1149=(r00*sj0*sj5);
IkReal x1150=(sj0*sj5*x1128);
evalcond[0]=((((-1.0)*r21*x1129))+(((-1.0)*x1126*x1127))+(((-1.0)*x1128*x1130))+((x1124*x1131))+cj3+((x1124*x1125)));
evalcond[1]=(((x1125*x1128))+(((0.5)*sj3))+((r21*x1127))+((x1128*x1131))+((x1124*x1130))+(((-1.0)*cj5*x1126*x1128)));
evalcond[2]=(((x1124*x1133))+(((-1.0)*x1140*x1141))+(((-1.0)*r10*sj0*sj5*x1128))+(((-1.0)*r00*x1137))+((x1138*x1139))+((x1142*x1143))+(((-1.0)*r11*sj0*x1129))+(((-1.0)*x1134*x1135))+((x1124*x1132))+(((-1.0)*r01*x1136)));
evalcond[3]=((((-1.0)*x1124*x1149))+(((-1.0)*x1138*x1150))+((x1142*x1147))+(((-1.0)*x1140*x1146))+(((-1.0)*r01*x1141))+((x1128*x1144))+((r11*x1135))+((x1134*x1148))+((r10*x1139))+(((0.5)*cj3))+(((-1.0)*x1128*x1145)));
evalcond[4]=((((-1.0)*x1138*x1143))+((x1124*x1144))+(((-1.0)*r10*x1137))+(((-1.0)*r11*x1136))+((x1134*x1141))+(((-1.0)*x1135*x1140))+((r01*x1148))+(((-1.0)*(1.0)*sj3))+((x1128*x1149))+((x1139*x1142))+(((-1.0)*x1124*x1145)));
evalcond[5]=((-0.866025403784439)+((x1128*x1132))+((x1128*x1133))+((x1142*x1150))+((r11*x1141))+((r10*x1143))+((x1138*x1147))+(((-1.0)*x1134*x1146))+((r01*x1135))+(((-1.0)*x1140*x1148))+((r00*x1139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1151=((1.0)*cj5);
if( IKabs((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x1151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((-1.0)*r00*sj0*x1151))+(((0.577350269189626)*cj0*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x1151))))+IKsqr(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((-1.0)*r00*sj0*x1151))+(((0.577350269189626)*cj0*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x1151))), ((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((-1.0)*r00*sj0*x1151))+(((0.577350269189626)*cj0*r12))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1152=((0.866025403784439)*cj5);
IkReal x1153=((0.866025403784439)*sj5);
evalcond[0]=((((-1.0)*r20*x1152))+(((-1.0)*(0.866025403784439)*(IKsin(j3))))+(((-1.0)*(0.5)*r22))+((r21*x1153)));
evalcond[1]=(((cj0*r11*x1153))+((r00*sj0*x1152))+(((-1.0)*(0.5)*cj0*r12))+(((-1.0)*r01*sj0*x1153))+(((0.5)*r02*sj0))+(((0.866025403784439)*(IKcos(j3))))+(((-1.0)*cj0*r10*x1152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1154=r22*r22;
IkReal x1155=r20*r20;
IkReal x1156=r21*r21;
IkReal x1157=((1.15470053837925)*r22);
IkReal x1158=(cj5*r20);
IkReal x1159=(r21*sj5);
IkReal x1160=(cj5*r20*r21*sj5);
IkReal x1161=cj5*cj5;
IkReal x1162=(x1156*x1161);
IkReal x1163=(x1155*x1161);
IkReal x1164=((0.866025403784439)*r22);
IkReal x1165=((0.5)*r20);
IkReal x1166=(cj3*cj5);
IkReal x1167=((0.5)*r21);
IkReal x1168=(cj3*sj5);
IkReal x1169=((0.25)*sj3);
j4eval[0]=(x1154+(((-1.0)*x1157*x1158))+(((0.333333333333333)*x1156))+(((1.33333333333333)*x1155))+x1162+((x1157*x1159))+(((-1.0)*x1163))+(((2.0)*x1160)));
j4eval[1]=((IKabs((((sj3*sj5*x1165))+((x1167*x1168))+(((-1.0)*x1165*x1166))+((cj3*x1164))+((cj5*sj3*x1167)))))+(IKabs(((((-1.0)*r21*x1166))+(((-1.0)*r20*x1168))+(((0.433012701892219)*r22*sj3))+(((-1.0)*x1158*x1169))+((x1159*x1169))))));
j4eval[2]=IKsign((x1155+(((0.75)*x1154))+(((-1.0)*x1158*x1164))+(((-0.75)*x1163))+(((1.5)*x1160))+(((0.25)*x1156))+((x1159*x1164))+(((0.75)*x1162))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1170=((1.73205080756888)*cj0);
IkReal x1171=((1.73205080756888)*sj0);
IkReal x1172=((((-1.0)*r01*sj5*x1170))+((cj5*r10*x1171))+((cj0*r02))+((r12*sj0))+(((-1.0)*r11*sj5*x1171))+((cj5*r00*x1170)));
j4eval[0]=x1172;
j4eval[1]=IKsign(x1172);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1173=(cj0*r01*r21);
IkReal x1174=(r11*r21*sj0);
IkReal x1175=(cj0*r00*r20);
IkReal x1176=(cj0*r02*r22);
IkReal x1177=(r10*r20*sj0);
IkReal x1178=(r12*r22*sj0);
IkReal x1179=(cj0*cj5*r00*r22);
IkReal x1180=(cj0*cj5*r02*r20);
IkReal x1181=(cj0*r01*r22*sj5);
IkReal x1182=(cj0*r02*r21*sj5);
IkReal x1183=(cj5*r10*r22*sj0);
IkReal x1184=(cj5*r12*r20*sj0);
IkReal x1185=(r11*r22*sj0*sj5);
IkReal x1186=(r12*r21*sj0*sj5);
IkReal x1187=(cj0*cj5*r00*r21*sj5);
IkReal x1188=(cj0*cj5*r01*r20*sj5);
IkReal x1189=(cj5*r10*r21*sj0*sj5);
IkReal x1190=(cj5*r11*r20*sj0*sj5);
IkReal x1191=cj5*cj5;
IkReal x1192=(cj0*r00*r20*x1191);
IkReal x1193=(cj0*r01*r21*x1191);
IkReal x1194=(r10*r20*sj0*x1191);
IkReal x1195=(r11*r21*sj0*x1191);
j4eval[0]=((((3.0)*x1190))+(((3.0)*x1195))+(((1.73205080756888)*x1181))+(((-1.73205080756888)*x1180))+(((-3.0)*x1194))+(((1.73205080756888)*x1182))+(((3.0)*x1187))+(((4.0)*x1177))+(((-3.0)*x1192))+(((-1.73205080756888)*x1184))+(((3.0)*x1188))+(((3.0)*x1189))+x1173+x1174+(((3.0)*x1178))+(((4.0)*x1175))+(((-1.73205080756888)*x1179))+(((-1.73205080756888)*x1183))+(((3.0)*x1176))+(((1.73205080756888)*x1185))+(((1.73205080756888)*x1186))+(((3.0)*x1193)));
j4eval[1]=IKsign(((((1.5)*x1195))+(((1.5)*x1188))+(((0.5)*x1173))+(((-0.866025403784439)*x1179))+(((-1.5)*x1192))+(((2.0)*x1177))+(((1.5)*x1190))+(((-1.5)*x1194))+(((0.866025403784439)*x1182))+(((-0.866025403784439)*x1184))+(((1.5)*x1176))+(((0.866025403784439)*x1181))+(((2.0)*x1175))+(((1.5)*x1178))+(((1.5)*x1193))+(((-0.866025403784439)*x1180))+(((0.5)*x1174))+(((1.5)*x1187))+(((0.866025403784439)*x1185))+(((0.866025403784439)*x1186))+(((-0.866025403784439)*x1183))+(((1.5)*x1189))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1196=(cj0*r01);
IkReal x1197=(cj5*sj3);
IkReal x1198=(cj0*r00);
IkReal x1199=(sj3*sj5);
IkReal x1200=(r11*sj0);
IkReal x1201=(r10*sj0);
IkReal x1202=((0.866025403784439)*sj3);
IkReal x1203=(cj0*r02);
IkReal x1204=(r12*sj0);
IkReal x1205=((0.5)*cj5*sj3);
IkReal x1206=((0.5)*sj3*sj5);
IkReal x1207=((2.0)*r20);
IkReal x1208=((0.5)*r21);
IkReal x1209=((1.5)*r22);
IkReal x1210=((0.866025403784439)*cj5*r22);
IkReal x1211=((0.866025403784439)*cj5*r20);
IkReal x1212=((0.866025403784439)*r22*sj5);
IkReal x1213=((0.866025403784439)*r21*sj5);
IkReal x1214=((1.5)*cj5*r21*sj5);
IkReal x1215=((1.5)*cj5*r20*sj5);
IkReal x1216=cj5*cj5;
IkReal x1217=((1.5)*r20*x1216);
IkReal x1218=((1.5)*r21*x1216);
CheckValue<IkReal> x1219 = IKatan2WithCheck(IkReal((((x1197*x1200))+((x1198*x1199))+((x1196*x1197))+((x1199*x1201)))),IkReal((((x1196*x1206))+(((-1.0)*x1201*x1205))+((x1202*x1203))+((x1200*x1206))+((x1202*x1204))+(((-1.0)*x1198*x1205)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1219.valid){
continue;
}
CheckValue<IkReal> x1220=IKPowWithIntegerCheck(IKsign((((x1204*x1213))+((x1203*x1209))+((x1198*x1214))+((x1196*x1218))+((x1196*x1215))+((x1200*x1218))+((x1204*x1209))+((x1203*x1213))+(((-1.0)*x1201*x1217))+(((-1.0)*x1198*x1210))+((x1196*x1212))+(((-1.0)*x1204*x1211))+((x1201*x1207))+(((-1.0)*x1203*x1211))+((x1201*x1214))+(((-1.0)*x1201*x1210))+(((-1.0)*x1198*x1217))+((x1198*x1207))+((x1200*x1212))+((x1200*x1208))+((x1196*x1208))+((x1200*x1215)))),-1);
if(!x1220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1219.value)+(((1.5707963267949)*(x1220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1221=IKcos(j4);
IkReal x1222=((0.866025403784439)*r22);
IkReal x1223=IKsin(j4);
IkReal x1224=(cj5*x1223);
IkReal x1225=(r20*sj5);
IkReal x1226=((0.5)*r20);
IkReal x1227=((0.5)*r21*sj5);
IkReal x1228=((1.0)*cj5*x1221);
IkReal x1229=((0.866025403784439)*cj0*r02);
IkReal x1230=((0.866025403784439)*r12*sj0);
IkReal x1231=((0.5)*r00);
IkReal x1232=(cj0*cj5*x1223);
IkReal x1233=((1.0)*cj0*cj5*x1221);
IkReal x1234=((1.0)*cj0*sj5*x1221);
IkReal x1235=((0.5)*r01);
IkReal x1236=(cj0*sj5*x1223);
IkReal x1237=((0.5)*r10);
IkReal x1238=(cj5*sj0*x1223);
IkReal x1239=((0.5)*r11);
IkReal x1240=(sj0*sj5*x1223);
IkReal x1241=((0.866025403784439)*cj0*r12);
IkReal x1242=((0.866025403784439)*r02*sj0);
IkReal x1243=(cj0*cj5*x1221);
IkReal x1244=(cj0*sj5*x1221);
IkReal x1245=(cj5*sj0*x1221);
IkReal x1246=(r00*sj0*sj5);
IkReal x1247=(sj0*sj5*x1221);
evalcond[0]=(((r21*x1224))+(((-1.0)*cj5*x1221*x1226))+(((-1.0)*(0.5)*sj3))+((x1221*x1222))+((x1223*x1225))+((x1221*x1227)));
evalcond[1]=((((-1.0)*(1.0)*cj3))+(((-1.0)*x1221*x1225))+(((-1.0)*x1224*x1226))+((x1223*x1227))+((x1222*x1223))+(((-1.0)*r21*x1228)));
evalcond[2]=((((-1.0)*x1237*x1238))+((x1223*x1229))+((x1235*x1236))+(((-1.0)*r10*sj0*sj5*x1221))+((x1239*x1240))+(((-1.0)*r01*x1233))+(((-1.0)*r11*sj0*x1228))+(((-1.0)*x1231*x1232))+(((-1.0)*r00*x1234))+((x1223*x1230)));
evalcond[3]=((((-1.0)*r01*x1238))+(((-1.0)*x1221*x1242))+(((-1.0)*x1237*x1243))+((r10*x1236))+((x1231*x1245))+((x1221*x1241))+(((-1.0)*x1223*x1246))+((r11*x1232))+((x1239*x1244))+(((0.5)*cj3))+(((-1.0)*x1235*x1247)));
evalcond[4]=((((-1.0)*r10*x1234))+(((-1.0)*x1223*x1242))+((x1221*x1246))+(((-1.0)*x1235*x1240))+(((-1.0)*x1232*x1237))+((r01*x1245))+((x1223*x1241))+((x1231*x1238))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r11*x1233))+((x1236*x1239)));
evalcond[5]=((0.866025403784439)+(((-1.0)*x1231*x1243))+((r00*x1236))+((x1221*x1230))+((r11*x1238))+((r10*x1240))+((x1235*x1244))+((x1221*x1229))+(((-1.0)*x1237*x1245))+((x1239*x1247))+((r01*x1232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1248=((1.73205080756888)*cj0);
IkReal x1249=(cj5*r00);
IkReal x1250=(r01*sj5);
IkReal x1251=((1.73205080756888)*sj0);
IkReal x1252=(cj5*r10);
IkReal x1253=(r11*sj5);
IkReal x1254=((0.866025403784439)*sj3);
IkReal x1255=(cj3*cj5);
IkReal x1256=(cj3*sj5);
IkReal x1257=((0.5)*cj0*sj3);
IkReal x1258=((0.5)*sj0*sj3);
IkReal x1259=(cj0*sj3);
IkReal x1260=((1.0)*sj0*sj3);
CheckValue<IkReal> x1261 = IKatan2WithCheck(IkReal(((((-1.0)*x1253*x1257))+(((-1.0)*x1249*x1258))+(((-0.5)*r21*x1256))+(((-1.0)*cj0*r12*x1254))+((r02*sj0*x1254))+(((0.5)*r20*x1255))+(((-1.0)*(0.866025403784439)*cj3*r22))+((x1250*x1258))+((x1252*x1257)))),IkReal((((r21*x1255))+(((-1.0)*r00*sj5*x1260))+((r10*sj5*x1259))+((r20*x1256))+((cj5*r11*x1259))+(((-1.0)*cj5*r01*x1260)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1261.valid){
continue;
}
CheckValue<IkReal> x1262=IKPowWithIntegerCheck(IKsign((((x1251*x1252))+(((-1.0)*x1251*x1253))+((cj0*r02))+((x1248*x1249))+(((-1.0)*x1248*x1250))+((r12*sj0)))),-1);
if(!x1262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1261.value)+(((1.5707963267949)*(x1262.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1263=IKcos(j4);
IkReal x1264=((0.866025403784439)*r22);
IkReal x1265=IKsin(j4);
IkReal x1266=(cj5*x1265);
IkReal x1267=(r20*sj5);
IkReal x1268=((0.5)*r20);
IkReal x1269=((0.5)*r21*sj5);
IkReal x1270=((1.0)*cj5*x1263);
IkReal x1271=((0.866025403784439)*cj0*r02);
IkReal x1272=((0.866025403784439)*r12*sj0);
IkReal x1273=((0.5)*r00);
IkReal x1274=(cj0*cj5*x1265);
IkReal x1275=((1.0)*cj0*cj5*x1263);
IkReal x1276=((1.0)*cj0*sj5*x1263);
IkReal x1277=((0.5)*r01);
IkReal x1278=(cj0*sj5*x1265);
IkReal x1279=((0.5)*r10);
IkReal x1280=(cj5*sj0*x1265);
IkReal x1281=((0.5)*r11);
IkReal x1282=(sj0*sj5*x1265);
IkReal x1283=((0.866025403784439)*cj0*r12);
IkReal x1284=((0.866025403784439)*r02*sj0);
IkReal x1285=(cj0*cj5*x1263);
IkReal x1286=(cj0*sj5*x1263);
IkReal x1287=(cj5*sj0*x1263);
IkReal x1288=(r00*sj0*sj5);
IkReal x1289=(sj0*sj5*x1263);
evalcond[0]=(((r21*x1266))+((x1263*x1264))+(((-1.0)*cj5*x1263*x1268))+(((-1.0)*(0.5)*sj3))+((x1265*x1267))+((x1263*x1269)));
evalcond[1]=((((-1.0)*r21*x1270))+(((-1.0)*(1.0)*cj3))+((x1265*x1269))+((x1264*x1265))+(((-1.0)*x1266*x1268))+(((-1.0)*x1263*x1267)));
evalcond[2]=(((x1265*x1271))+(((-1.0)*r10*sj0*sj5*x1263))+((x1265*x1272))+((x1277*x1278))+(((-1.0)*x1273*x1274))+((x1281*x1282))+(((-1.0)*x1279*x1280))+(((-1.0)*r00*x1276))+(((-1.0)*r11*sj0*x1270))+(((-1.0)*r01*x1275)));
evalcond[3]=(((x1273*x1287))+((r10*x1278))+((r11*x1274))+(((-1.0)*r01*x1280))+(((-1.0)*x1265*x1288))+(((-1.0)*x1263*x1284))+((x1281*x1286))+((x1263*x1283))+(((0.5)*cj3))+(((-1.0)*x1277*x1289))+(((-1.0)*x1279*x1285)));
evalcond[4]=((((-1.0)*r11*x1275))+((x1273*x1280))+(((-1.0)*x1274*x1279))+(((-1.0)*x1265*x1284))+(((-1.0)*x1277*x1282))+((x1278*x1281))+((x1265*x1283))+(((-1.0)*r10*x1276))+(((-1.0)*(1.0)*sj3))+((x1263*x1288))+((r01*x1287)));
evalcond[5]=((0.866025403784439)+((x1281*x1289))+((x1263*x1271))+(((-1.0)*x1273*x1285))+((x1263*x1272))+((x1277*x1286))+((r11*x1280))+((r01*x1274))+(((-1.0)*x1279*x1287))+((r10*x1282))+((r00*x1278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1290=((0.866025403784439)*r22);
IkReal x1291=((0.5)*r20);
IkReal x1292=(cj3*cj5);
IkReal x1293=((0.5)*r21);
IkReal x1294=(cj3*sj5);
IkReal x1295=((0.25)*sj3);
IkReal x1296=(cj5*r20);
IkReal x1297=(r21*sj5);
IkReal x1298=r20*r20;
IkReal x1299=r21*r21;
IkReal x1300=((0.75)*(cj5*cj5));
CheckValue<IkReal> x1301=IKPowWithIntegerCheck(IKsign(((((0.75)*(r22*r22)))+x1298+(((-1.0)*x1290*x1296))+(((1.5)*cj5*r20*x1297))+(((-1.0)*x1298*x1300))+((x1290*x1297))+(((0.25)*x1299))+((x1299*x1300)))),-1);
if(!x1301.valid){
continue;
}
CheckValue<IkReal> x1302 = IKatan2WithCheck(IkReal((((cj5*sj3*x1293))+((x1293*x1294))+((cj3*x1290))+((sj3*sj5*x1291))+(((-1.0)*x1291*x1292)))),IkReal(((((-1.0)*r20*x1294))+(((0.433012701892219)*r22*sj3))+(((-1.0)*r21*x1292))+(((-1.0)*x1295*x1296))+((x1295*x1297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1301.value)))+(x1302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1303=IKcos(j4);
IkReal x1304=((0.866025403784439)*r22);
IkReal x1305=IKsin(j4);
IkReal x1306=(cj5*x1305);
IkReal x1307=(r20*sj5);
IkReal x1308=((0.5)*r20);
IkReal x1309=((0.5)*r21*sj5);
IkReal x1310=((1.0)*cj5*x1303);
IkReal x1311=((0.866025403784439)*cj0*r02);
IkReal x1312=((0.866025403784439)*r12*sj0);
IkReal x1313=((0.5)*r00);
IkReal x1314=(cj0*cj5*x1305);
IkReal x1315=((1.0)*cj0*cj5*x1303);
IkReal x1316=((1.0)*cj0*sj5*x1303);
IkReal x1317=((0.5)*r01);
IkReal x1318=(cj0*sj5*x1305);
IkReal x1319=((0.5)*r10);
IkReal x1320=(cj5*sj0*x1305);
IkReal x1321=((0.5)*r11);
IkReal x1322=(sj0*sj5*x1305);
IkReal x1323=((0.866025403784439)*cj0*r12);
IkReal x1324=((0.866025403784439)*r02*sj0);
IkReal x1325=(cj0*cj5*x1303);
IkReal x1326=(cj0*sj5*x1303);
IkReal x1327=(cj5*sj0*x1303);
IkReal x1328=(r00*sj0*sj5);
IkReal x1329=(sj0*sj5*x1303);
evalcond[0]=((((-1.0)*cj5*x1303*x1308))+((r21*x1306))+((x1303*x1309))+((x1305*x1307))+(((-1.0)*(0.5)*sj3))+((x1303*x1304)));
evalcond[1]=(((x1304*x1305))+(((-1.0)*r21*x1310))+(((-1.0)*(1.0)*cj3))+(((-1.0)*x1303*x1307))+(((-1.0)*x1306*x1308))+((x1305*x1309)));
evalcond[2]=(((x1305*x1311))+(((-1.0)*r01*x1315))+(((-1.0)*r00*x1316))+((x1321*x1322))+((x1317*x1318))+(((-1.0)*r10*sj0*sj5*x1303))+((x1305*x1312))+(((-1.0)*x1319*x1320))+(((-1.0)*r11*sj0*x1310))+(((-1.0)*x1313*x1314)));
evalcond[3]=((((-1.0)*x1317*x1329))+(((-1.0)*x1319*x1325))+((x1313*x1327))+(((-1.0)*x1305*x1328))+(((-1.0)*x1303*x1324))+((x1303*x1323))+((r11*x1314))+((x1321*x1326))+(((0.5)*cj3))+(((-1.0)*r01*x1320))+((r10*x1318)));
evalcond[4]=(((x1303*x1328))+(((-1.0)*r10*x1316))+(((-1.0)*r11*x1315))+(((-1.0)*x1314*x1319))+((x1305*x1323))+((r01*x1327))+((x1313*x1320))+(((-1.0)*(1.0)*sj3))+((x1318*x1321))+(((-1.0)*x1317*x1322))+(((-1.0)*x1305*x1324)));
evalcond[5]=((0.866025403784439)+((r00*x1318))+((x1303*x1311))+((r01*x1314))+((x1321*x1329))+((r11*x1320))+((x1303*x1312))+(((-1.0)*x1319*x1327))+((x1317*x1326))+(((-1.0)*x1313*x1325))+((r10*x1322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1330=((1.0)*cj5);
if( IKabs((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x1330)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x1330))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x1330))))+IKsqr(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x1330))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r21*sj5))+(((-1.0)*(0.577350269189626)*r22))+(((-1.0)*r20*x1330))), ((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x1330))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1331=((0.866025403784439)*cj5);
IkReal x1332=((0.866025403784439)*sj5);
evalcond[0]=((((-1.0)*(0.866025403784439)*(IKsin(j3))))+(((-1.0)*(0.5)*r22))+(((-1.0)*r20*x1331))+((r21*x1332)));
evalcond[1]=(((r00*sj0*x1331))+(((-1.0)*(0.5)*cj0*r12))+((cj0*r11*x1332))+(((-1.0)*cj0*r10*x1331))+(((0.5)*r02*sj0))+(((-1.0)*r01*sj0*x1332))+(((0.866025403784439)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1333=r22*r22;
IkReal x1334=r20*r20;
IkReal x1335=r21*r21;
IkReal x1336=((1.15470053837925)*r22);
IkReal x1337=(cj5*r20);
IkReal x1338=(r21*sj5);
IkReal x1339=(cj5*r20*r21*sj5);
IkReal x1340=cj5*cj5;
IkReal x1341=(x1335*x1340);
IkReal x1342=(x1334*x1340);
IkReal x1343=((0.866025403784439)*r22);
IkReal x1344=((0.5)*r20);
IkReal x1345=(cj3*cj5);
IkReal x1346=((0.5)*r21);
IkReal x1347=(cj3*sj5);
IkReal x1348=((0.25)*sj3);
j4eval[0]=((((2.0)*x1339))+x1333+(((0.333333333333333)*x1335))+(((1.33333333333333)*x1334))+(((-1.0)*x1342))+((x1336*x1338))+(((-1.0)*x1336*x1337))+x1341);
j4eval[1]=((IKabs((((x1338*x1348))+(((0.433012701892219)*r22*sj3))+(((-1.0)*r20*x1347))+(((-1.0)*x1337*x1348))+(((-1.0)*r21*x1345)))))+(IKabs((((sj3*sj5*x1344))+(((-1.0)*x1344*x1345))+((cj5*sj3*x1346))+((x1346*x1347))+((cj3*x1343))))));
j4eval[2]=IKsign((((x1338*x1343))+x1334+(((-0.75)*x1342))+(((1.5)*x1339))+(((-1.0)*x1337*x1343))+(((0.75)*x1333))+(((0.25)*x1335))+(((0.75)*x1341))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1349=((1.73205080756888)*cj0);
IkReal x1350=((1.73205080756888)*sj0);
IkReal x1351=((((-1.0)*r01*sj5*x1349))+((cj5*r00*x1349))+(((-1.0)*r11*sj5*x1350))+((cj0*r02))+((r12*sj0))+((cj5*r10*x1350)));
j4eval[0]=x1351;
j4eval[1]=IKsign(x1351);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1352=(cj0*r01*r21);
IkReal x1353=(r11*r21*sj0);
IkReal x1354=(cj0*r00*r20);
IkReal x1355=(cj0*r02*r22);
IkReal x1356=(r10*r20*sj0);
IkReal x1357=(r12*r22*sj0);
IkReal x1358=(cj0*cj5*r00*r22);
IkReal x1359=(cj0*cj5*r02*r20);
IkReal x1360=(cj0*r01*r22*sj5);
IkReal x1361=(cj0*r02*r21*sj5);
IkReal x1362=(cj5*r10*r22*sj0);
IkReal x1363=(cj5*r12*r20*sj0);
IkReal x1364=(r11*r22*sj0*sj5);
IkReal x1365=(r12*r21*sj0*sj5);
IkReal x1366=(cj0*cj5*r00*r21*sj5);
IkReal x1367=(cj0*cj5*r01*r20*sj5);
IkReal x1368=(cj5*r10*r21*sj0*sj5);
IkReal x1369=(cj5*r11*r20*sj0*sj5);
IkReal x1370=cj5*cj5;
IkReal x1371=(cj0*r00*r20*x1370);
IkReal x1372=(cj0*r01*r21*x1370);
IkReal x1373=(r10*r20*sj0*x1370);
IkReal x1374=(r11*r21*sj0*x1370);
j4eval[0]=((((-3.0)*x1371))+(((1.73205080756888)*x1360))+(((1.73205080756888)*x1365))+(((3.0)*x1369))+(((-1.73205080756888)*x1362))+(((3.0)*x1367))+(((4.0)*x1354))+(((3.0)*x1374))+(((-1.73205080756888)*x1363))+(((3.0)*x1372))+(((3.0)*x1357))+(((3.0)*x1366))+(((1.73205080756888)*x1361))+(((3.0)*x1355))+x1353+x1352+(((4.0)*x1356))+(((-1.73205080756888)*x1359))+(((1.73205080756888)*x1364))+(((-1.73205080756888)*x1358))+(((3.0)*x1368))+(((-3.0)*x1373)));
j4eval[1]=IKsign(((((1.5)*x1369))+(((-0.866025403784439)*x1358))+(((0.5)*x1352))+(((1.5)*x1366))+(((1.5)*x1367))+(((2.0)*x1354))+(((0.5)*x1353))+(((-0.866025403784439)*x1359))+(((0.866025403784439)*x1361))+(((1.5)*x1355))+(((2.0)*x1356))+(((-0.866025403784439)*x1363))+(((-1.5)*x1373))+(((-1.5)*x1371))+(((1.5)*x1374))+(((0.866025403784439)*x1365))+(((1.5)*x1372))+(((-0.866025403784439)*x1362))+(((0.866025403784439)*x1364))+(((0.866025403784439)*x1360))+(((1.5)*x1368))+(((1.5)*x1357))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1375=(cj0*r01);
IkReal x1376=(cj5*sj3);
IkReal x1377=(cj0*r00);
IkReal x1378=(sj3*sj5);
IkReal x1379=(r11*sj0);
IkReal x1380=(r10*sj0);
IkReal x1381=((0.866025403784439)*sj3);
IkReal x1382=(cj0*r02);
IkReal x1383=(r12*sj0);
IkReal x1384=((0.5)*cj5*sj3);
IkReal x1385=((0.5)*sj3*sj5);
IkReal x1386=((2.0)*r20);
IkReal x1387=((0.5)*r21);
IkReal x1388=((1.5)*r22);
IkReal x1389=((0.866025403784439)*cj5*r22);
IkReal x1390=((0.866025403784439)*cj5*r20);
IkReal x1391=((0.866025403784439)*r22*sj5);
IkReal x1392=((0.866025403784439)*r21*sj5);
IkReal x1393=((1.5)*cj5*r21*sj5);
IkReal x1394=((1.5)*cj5*r20*sj5);
IkReal x1395=cj5*cj5;
IkReal x1396=((1.5)*r20*x1395);
IkReal x1397=((1.5)*r21*x1395);
CheckValue<IkReal> x1398=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1383*x1390))+((x1379*x1387))+((x1377*x1393))+((x1375*x1387))+((x1379*x1391))+((x1379*x1394))+((x1375*x1391))+((x1380*x1393))+(((-1.0)*x1380*x1396))+(((-1.0)*x1382*x1390))+((x1375*x1394))+(((-1.0)*x1377*x1396))+((x1377*x1386))+(((-1.0)*x1377*x1389))+((x1383*x1388))+((x1382*x1388))+((x1379*x1397))+((x1383*x1392))+(((-1.0)*x1380*x1389))+((x1375*x1397))+((x1380*x1386))+((x1382*x1392)))),-1);
if(!x1398.valid){
continue;
}
CheckValue<IkReal> x1399 = IKatan2WithCheck(IkReal((((x1378*x1380))+((x1377*x1378))+((x1376*x1379))+((x1375*x1376)))),IkReal((((x1375*x1385))+(((-1.0)*x1377*x1384))+((x1381*x1383))+((x1381*x1382))+(((-1.0)*x1380*x1384))+((x1379*x1385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1398.value)))+(x1399.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1400=IKcos(j4);
IkReal x1401=((0.866025403784439)*r22);
IkReal x1402=IKsin(j4);
IkReal x1403=(cj5*x1402);
IkReal x1404=(r20*sj5);
IkReal x1405=((0.5)*r20);
IkReal x1406=((0.5)*r21*sj5);
IkReal x1407=((1.0)*cj5*x1400);
IkReal x1408=((0.866025403784439)*cj0*r02);
IkReal x1409=((0.866025403784439)*r12*sj0);
IkReal x1410=((0.5)*r00);
IkReal x1411=(cj0*cj5*x1402);
IkReal x1412=((1.0)*cj0*cj5*x1400);
IkReal x1413=((1.0)*cj0*sj5*x1400);
IkReal x1414=((0.5)*r01);
IkReal x1415=(cj0*sj5*x1402);
IkReal x1416=((0.5)*r10);
IkReal x1417=(cj5*sj0*x1402);
IkReal x1418=((0.5)*r11);
IkReal x1419=(sj0*sj5*x1402);
IkReal x1420=((0.866025403784439)*cj0*r12);
IkReal x1421=((0.866025403784439)*r02*sj0);
IkReal x1422=(cj0*cj5*x1400);
IkReal x1423=(cj0*sj5*x1400);
IkReal x1424=(cj5*sj0*x1400);
IkReal x1425=(r00*sj0*sj5);
IkReal x1426=(sj0*sj5*x1400);
evalcond[0]=(((x1400*x1406))+((x1400*x1401))+((r21*x1403))+(((-1.0)*cj5*x1400*x1405))+(((-1.0)*(0.5)*sj3))+((x1402*x1404)));
evalcond[1]=(((x1401*x1402))+((x1402*x1406))+(((-1.0)*r21*x1407))+(((-1.0)*(1.0)*cj3))+(((-1.0)*x1400*x1404))+(((-1.0)*x1403*x1405)));
evalcond[2]=(((x1402*x1409))+(((-1.0)*r11*sj0*x1407))+(((-1.0)*x1410*x1411))+((x1418*x1419))+(((-1.0)*r01*x1412))+((x1414*x1415))+(((-1.0)*r00*x1413))+(((-1.0)*x1416*x1417))+((x1402*x1408))+(((-1.0)*r10*sj0*sj5*x1400)));
evalcond[3]=(((r10*x1415))+((x1400*x1420))+(((-1.0)*x1402*x1425))+((x1410*x1424))+((x1418*x1423))+((r11*x1411))+(((-1.0)*x1414*x1426))+(((-1.0)*r01*x1417))+(((-1.0)*x1400*x1421))+(((0.5)*cj3))+(((-1.0)*x1416*x1422)));
evalcond[4]=((((-1.0)*x1402*x1421))+((x1410*x1417))+((x1400*x1425))+(((-1.0)*x1414*x1419))+((r01*x1424))+(((-1.0)*r11*x1412))+(((-1.0)*x1411*x1416))+(((-1.0)*(1.0)*sj3))+((x1415*x1418))+(((-1.0)*r10*x1413))+((x1402*x1420)));
evalcond[5]=((0.866025403784439)+((x1414*x1423))+(((-1.0)*x1416*x1424))+((x1400*x1409))+((x1400*x1408))+((x1418*x1426))+((r01*x1411))+((r11*x1417))+(((-1.0)*x1410*x1422))+((r00*x1415))+((r10*x1419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1427=((1.73205080756888)*cj0);
IkReal x1428=(cj5*r00);
IkReal x1429=(r01*sj5);
IkReal x1430=((1.73205080756888)*sj0);
IkReal x1431=(cj5*r10);
IkReal x1432=(r11*sj5);
IkReal x1433=((0.866025403784439)*sj3);
IkReal x1434=(cj3*cj5);
IkReal x1435=(cj3*sj5);
IkReal x1436=((0.5)*cj0*sj3);
IkReal x1437=((0.5)*sj0*sj3);
IkReal x1438=(cj0*sj3);
IkReal x1439=((1.0)*sj0*sj3);
CheckValue<IkReal> x1440=IKPowWithIntegerCheck(IKsign((((x1427*x1428))+((x1430*x1431))+((cj0*r02))+((r12*sj0))+(((-1.0)*x1427*x1429))+(((-1.0)*x1430*x1432)))),-1);
if(!x1440.valid){
continue;
}
CheckValue<IkReal> x1441 = IKatan2WithCheck(IkReal((((x1429*x1437))+(((-1.0)*cj0*r12*x1433))+(((-1.0)*x1432*x1436))+(((-0.5)*r21*x1435))+((x1431*x1436))+(((-1.0)*x1428*x1437))+((r02*sj0*x1433))+(((-1.0)*(0.866025403784439)*cj3*r22))+(((0.5)*r20*x1434)))),IkReal((((r21*x1434))+(((-1.0)*cj5*r01*x1439))+((cj5*r11*x1438))+(((-1.0)*r00*sj5*x1439))+((r20*x1435))+((r10*sj5*x1438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1440.value)))+(x1441.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1442=IKcos(j4);
IkReal x1443=((0.866025403784439)*r22);
IkReal x1444=IKsin(j4);
IkReal x1445=(cj5*x1444);
IkReal x1446=(r20*sj5);
IkReal x1447=((0.5)*r20);
IkReal x1448=((0.5)*r21*sj5);
IkReal x1449=((1.0)*cj5*x1442);
IkReal x1450=((0.866025403784439)*cj0*r02);
IkReal x1451=((0.866025403784439)*r12*sj0);
IkReal x1452=((0.5)*r00);
IkReal x1453=(cj0*cj5*x1444);
IkReal x1454=((1.0)*cj0*cj5*x1442);
IkReal x1455=((1.0)*cj0*sj5*x1442);
IkReal x1456=((0.5)*r01);
IkReal x1457=(cj0*sj5*x1444);
IkReal x1458=((0.5)*r10);
IkReal x1459=(cj5*sj0*x1444);
IkReal x1460=((0.5)*r11);
IkReal x1461=(sj0*sj5*x1444);
IkReal x1462=((0.866025403784439)*cj0*r12);
IkReal x1463=((0.866025403784439)*r02*sj0);
IkReal x1464=(cj0*cj5*x1442);
IkReal x1465=(cj0*sj5*x1442);
IkReal x1466=(cj5*sj0*x1442);
IkReal x1467=(r00*sj0*sj5);
IkReal x1468=(sj0*sj5*x1442);
evalcond[0]=(((x1442*x1443))+((r21*x1445))+(((-1.0)*(0.5)*sj3))+((x1444*x1446))+((x1442*x1448))+(((-1.0)*cj5*x1442*x1447)));
evalcond[1]=(((x1443*x1444))+(((-1.0)*(1.0)*cj3))+(((-1.0)*r21*x1449))+((x1444*x1448))+(((-1.0)*x1442*x1446))+(((-1.0)*x1445*x1447)));
evalcond[2]=(((x1456*x1457))+(((-1.0)*r00*x1455))+((x1460*x1461))+((x1444*x1450))+(((-1.0)*r01*x1454))+(((-1.0)*x1452*x1453))+(((-1.0)*x1458*x1459))+((x1444*x1451))+(((-1.0)*r10*sj0*sj5*x1442))+(((-1.0)*r11*sj0*x1449)));
evalcond[3]=(((x1460*x1465))+((r11*x1453))+((r10*x1457))+(((-1.0)*x1458*x1464))+(((-1.0)*x1444*x1467))+((x1442*x1462))+(((0.5)*cj3))+((x1452*x1466))+(((-1.0)*x1456*x1468))+(((-1.0)*r01*x1459))+(((-1.0)*x1442*x1463)));
evalcond[4]=((((-1.0)*r10*x1455))+((x1442*x1467))+(((-1.0)*r11*x1454))+((x1452*x1459))+((x1457*x1460))+((r01*x1466))+(((-1.0)*x1453*x1458))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x1456*x1461))+(((-1.0)*x1444*x1463))+((x1444*x1462)));
evalcond[5]=((0.866025403784439)+((r11*x1459))+((x1460*x1468))+(((-1.0)*x1458*x1466))+((x1442*x1450))+((r01*x1453))+((r00*x1457))+((x1456*x1465))+((r10*x1461))+((x1442*x1451))+(((-1.0)*x1452*x1464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1469=((0.866025403784439)*r22);
IkReal x1470=((0.5)*r20);
IkReal x1471=(cj3*cj5);
IkReal x1472=((0.5)*r21);
IkReal x1473=(cj3*sj5);
IkReal x1474=((0.25)*sj3);
IkReal x1475=(cj5*r20);
IkReal x1476=(r21*sj5);
IkReal x1477=r20*r20;
IkReal x1478=r21*r21;
IkReal x1479=((0.75)*(cj5*cj5));
CheckValue<IkReal> x1480 = IKatan2WithCheck(IkReal((((cj3*x1469))+((sj3*sj5*x1470))+(((-1.0)*x1470*x1471))+((x1472*x1473))+((cj5*sj3*x1472)))),IkReal(((((-1.0)*x1474*x1475))+(((0.433012701892219)*r22*sj3))+(((-1.0)*r21*x1471))+(((-1.0)*r20*x1473))+((x1474*x1476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1480.valid){
continue;
}
CheckValue<IkReal> x1481=IKPowWithIntegerCheck(IKsign(((((0.75)*(r22*r22)))+((x1478*x1479))+(((-1.0)*x1469*x1475))+(((-1.0)*x1477*x1479))+(((1.5)*cj5*r20*x1476))+x1477+(((0.25)*x1478))+((x1469*x1476)))),-1);
if(!x1481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1480.value)+(((1.5707963267949)*(x1481.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1482=IKcos(j4);
IkReal x1483=((0.866025403784439)*r22);
IkReal x1484=IKsin(j4);
IkReal x1485=(cj5*x1484);
IkReal x1486=(r20*sj5);
IkReal x1487=((0.5)*r20);
IkReal x1488=((0.5)*r21*sj5);
IkReal x1489=((1.0)*cj5*x1482);
IkReal x1490=((0.866025403784439)*cj0*r02);
IkReal x1491=((0.866025403784439)*r12*sj0);
IkReal x1492=((0.5)*r00);
IkReal x1493=(cj0*cj5*x1484);
IkReal x1494=((1.0)*cj0*cj5*x1482);
IkReal x1495=((1.0)*cj0*sj5*x1482);
IkReal x1496=((0.5)*r01);
IkReal x1497=(cj0*sj5*x1484);
IkReal x1498=((0.5)*r10);
IkReal x1499=(cj5*sj0*x1484);
IkReal x1500=((0.5)*r11);
IkReal x1501=(sj0*sj5*x1484);
IkReal x1502=((0.866025403784439)*cj0*r12);
IkReal x1503=((0.866025403784439)*r02*sj0);
IkReal x1504=(cj0*cj5*x1482);
IkReal x1505=(cj0*sj5*x1482);
IkReal x1506=(cj5*sj0*x1482);
IkReal x1507=(r00*sj0*sj5);
IkReal x1508=(sj0*sj5*x1482);
evalcond[0]=(((x1482*x1483))+((x1484*x1486))+((x1482*x1488))+(((-1.0)*cj5*x1482*x1487))+(((-1.0)*(0.5)*sj3))+((r21*x1485)));
evalcond[1]=((((-1.0)*(1.0)*cj3))+((x1483*x1484))+(((-1.0)*x1485*x1487))+((x1484*x1488))+(((-1.0)*x1482*x1486))+(((-1.0)*r21*x1489)));
evalcond[2]=((((-1.0)*r11*sj0*x1489))+(((-1.0)*x1492*x1493))+(((-1.0)*r10*sj0*sj5*x1482))+(((-1.0)*r00*x1495))+(((-1.0)*x1498*x1499))+(((-1.0)*r01*x1494))+((x1500*x1501))+((x1484*x1491))+((x1484*x1490))+((x1496*x1497)));
evalcond[3]=((((-1.0)*r01*x1499))+(((-1.0)*x1496*x1508))+((r10*x1497))+(((-1.0)*x1498*x1504))+((r11*x1493))+((x1500*x1505))+((x1492*x1506))+((x1482*x1502))+(((0.5)*cj3))+(((-1.0)*x1482*x1503))+(((-1.0)*x1484*x1507)));
evalcond[4]=((((-1.0)*x1493*x1498))+((x1497*x1500))+(((-1.0)*x1496*x1501))+((x1492*x1499))+(((-1.0)*r10*x1495))+((x1484*x1502))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x1484*x1503))+((r01*x1506))+(((-1.0)*r11*x1494))+((x1482*x1507)));
evalcond[5]=((0.866025403784439)+((x1500*x1508))+((r00*x1497))+((r10*x1501))+((x1496*x1505))+(((-1.0)*x1498*x1506))+((x1482*x1491))+((r11*x1499))+((x1482*x1490))+(((-1.0)*x1492*x1504))+((r01*x1493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1509=((1.0)*sj5);
if( IKabs((((cj5*r20))+(((0.577350269189626)*r22))+(((-1.0)*r21*x1509)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r11*x1509))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20))+(((0.577350269189626)*r22))+(((-1.0)*r21*x1509))))+IKsqr(((((-1.0)*cj0*r11*x1509))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r20))+(((0.577350269189626)*r22))+(((-1.0)*r21*x1509))), ((((-1.0)*cj0*r11*x1509))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1510=((0.866025403784439)*cj5);
IkReal x1511=((0.866025403784439)*sj5);
evalcond[0]=((((-1.0)*r20*x1510))+((r21*x1511))+(((-1.0)*(0.5)*r22))+(((0.866025403784439)*(IKsin(j3)))));
evalcond[1]=((((-1.0)*r01*sj0*x1511))+((cj0*r11*x1511))+(((-1.0)*(0.5)*cj0*r12))+((r00*sj0*x1510))+(((0.5)*r02*sj0))+(((-1.0)*cj0*r10*x1510))+(((0.866025403784439)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1512=(r02*sj0);
IkReal x1513=(cj0*r12);
IkReal x1514=(cj0*cj5*r10);
IkReal x1515=(cj0*r11*sj5);
IkReal x1516=(cj5*r00*sj0);
IkReal x1517=(r01*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x1515))+x1512+(((1.73205080756888)*x1516))+(((-1.73205080756888)*x1514))+(((-1.0)*x1513))+(((-1.73205080756888)*x1517)));
j4eval[1]=IKsign(((((-0.866025403784439)*x1514))+(((-0.5)*x1513))+(((0.866025403784439)*x1516))+(((0.866025403784439)*x1515))+(((0.5)*x1512))+(((-0.866025403784439)*x1517))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1518=r20*r20;
IkReal x1519=r21*r21;
IkReal x1520=r22*r22;
IkReal x1521=((3.46410161513775)*r22);
IkReal x1522=(cj5*r20);
IkReal x1523=(r21*sj5);
IkReal x1524=(cj5*r20*r21*sj5);
IkReal x1525=cj5*cj5;
IkReal x1526=(x1518*x1525);
IkReal x1527=(x1519*x1525);
IkReal x1528=((0.866025403784439)*r22);
IkReal x1529=((0.5)*r20);
IkReal x1530=(cj3*cj5);
IkReal x1531=((0.5)*r21);
IkReal x1532=(cj3*sj5);
IkReal x1533=((0.25)*sj3);
j4eval[0]=((((-1.0)*x1521*x1523))+(((-3.0)*x1527))+(((3.0)*x1526))+(((-1.0)*x1519))+(((-3.0)*x1520))+(((-6.0)*x1524))+(((-4.0)*x1518))+((x1521*x1522)));
j4eval[1]=IKsign(((((-1.5)*x1524))+((x1522*x1528))+(((-1.0)*x1518))+(((-0.75)*x1527))+(((-0.25)*x1519))+(((-1.0)*x1523*x1528))+(((0.75)*x1526))+(((-0.75)*x1520))));
j4eval[2]=((IKabs(((((-1.0)*x1522*x1533))+(((0.433012701892219)*r22*sj3))+((x1523*x1533))+(((-1.0)*r21*x1530))+(((-1.0)*r20*x1532)))))+(IKabs((((x1531*x1532))+((sj3*sj5*x1529))+((cj3*x1528))+((cj5*sj3*x1531))+(((-1.0)*x1529*x1530))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1534=(cj0*r01*r21);
IkReal x1535=(r11*r21*sj0);
IkReal x1536=(cj0*r00*r20);
IkReal x1537=(cj0*r02*r22);
IkReal x1538=(r10*r20*sj0);
IkReal x1539=(r12*r22*sj0);
IkReal x1540=(cj0*cj5*r00*r22);
IkReal x1541=(cj0*cj5*r02*r20);
IkReal x1542=(cj0*r01*r22*sj5);
IkReal x1543=(cj0*r02*r21*sj5);
IkReal x1544=(cj5*r10*r22*sj0);
IkReal x1545=(cj5*r12*r20*sj0);
IkReal x1546=(r11*r22*sj0*sj5);
IkReal x1547=(r12*r21*sj0*sj5);
IkReal x1548=(cj0*cj5*r00*r21*sj5);
IkReal x1549=(cj0*cj5*r01*r20*sj5);
IkReal x1550=(cj5*r10*r21*sj0*sj5);
IkReal x1551=(cj5*r11*r20*sj0*sj5);
IkReal x1552=cj5*cj5;
IkReal x1553=(cj0*r00*r20*x1552);
IkReal x1554=(cj0*r01*r21*x1552);
IkReal x1555=(r10*r20*sj0*x1552);
IkReal x1556=(r11*r21*sj0*x1552);
j4eval[0]=((((-1.73205080756888)*x1540))+(((3.0)*x1556))+(((3.0)*x1539))+(((1.73205080756888)*x1546))+(((-3.0)*x1553))+(((1.73205080756888)*x1543))+(((3.0)*x1551))+(((-1.73205080756888)*x1544))+(((3.0)*x1550))+(((4.0)*x1536))+(((4.0)*x1538))+(((1.73205080756888)*x1542))+(((3.0)*x1548))+(((3.0)*x1549))+(((-3.0)*x1555))+(((-1.73205080756888)*x1541))+(((3.0)*x1537))+(((3.0)*x1554))+x1535+x1534+(((-1.73205080756888)*x1545))+(((1.73205080756888)*x1547)));
j4eval[1]=IKsign(((((1.5)*x1556))+(((2.0)*x1538))+(((-0.866025403784439)*x1544))+(((0.866025403784439)*x1542))+(((1.5)*x1554))+(((2.0)*x1536))+(((0.866025403784439)*x1546))+(((-1.5)*x1555))+(((0.866025403784439)*x1543))+(((1.5)*x1551))+(((0.866025403784439)*x1547))+(((1.5)*x1550))+(((-1.5)*x1553))+(((-0.866025403784439)*x1545))+(((-0.866025403784439)*x1540))+(((1.5)*x1548))+(((1.5)*x1537))+(((1.5)*x1549))+(((1.5)*x1539))+(((0.5)*x1534))+(((-0.866025403784439)*x1541))+(((0.5)*x1535))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1557=(cj0*r01);
IkReal x1558=((1.0)*cj5*sj3);
IkReal x1559=(cj0*r00);
IkReal x1560=((1.0)*sj3*sj5);
IkReal x1561=(r11*sj0);
IkReal x1562=(r10*sj0);
IkReal x1563=((0.866025403784439)*sj3);
IkReal x1564=(cj0*r02);
IkReal x1565=(r12*sj0);
IkReal x1566=((0.5)*sj3);
IkReal x1567=(cj0*cj5*r00);
IkReal x1568=(cj0*r01*sj5);
IkReal x1569=(cj5*r10*sj0);
IkReal x1570=(r11*sj0*sj5);
IkReal x1571=((2.0)*r20);
IkReal x1572=((0.5)*r21);
IkReal x1573=((1.5)*r22);
IkReal x1574=((0.866025403784439)*r22);
IkReal x1575=(cj5*r20);
IkReal x1576=((0.866025403784439)*cj0*r02);
IkReal x1577=(r21*sj5);
IkReal x1578=((0.866025403784439)*r12*sj0);
IkReal x1579=((1.5)*r21*sj5);
IkReal x1580=((1.5)*cj5*r20);
IkReal x1581=cj5*cj5;
IkReal x1582=((1.5)*r20*x1581);
IkReal x1583=((1.5)*r21*x1581);
CheckValue<IkReal> x1584=IKPowWithIntegerCheck(IKsign((((x1557*x1583))+((x1570*x1580))+(((-1.0)*x1569*x1574))+(((-1.0)*x1567*x1574))+(((-1.0)*x1575*x1578))+((x1576*x1577))+((x1567*x1579))+((x1577*x1578))+((x1568*x1574))+((x1561*x1572))+((x1559*x1571))+((x1565*x1573))+(((-1.0)*x1575*x1576))+((x1557*x1572))+((x1564*x1573))+((x1570*x1574))+(((-1.0)*x1559*x1582))+((x1561*x1583))+(((-1.0)*x1562*x1582))+((x1568*x1580))+((x1569*x1579))+((x1562*x1571)))),-1);
if(!x1584.valid){
continue;
}
CheckValue<IkReal> x1585 = IKatan2WithCheck(IkReal(((((-1.0)*x1560*x1562))+(((-1.0)*x1558*x1561))+(((-1.0)*x1557*x1558))+(((-1.0)*x1559*x1560)))),IkReal(((((-1.0)*x1563*x1565))+((x1566*x1569))+(((-1.0)*x1566*x1570))+((x1566*x1567))+(((-1.0)*x1563*x1564))+(((-1.0)*x1566*x1568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1584.value)))+(x1585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1586=IKsin(j4);
IkReal x1587=((0.866025403784439)*r22);
IkReal x1588=((0.5)*r20);
IkReal x1589=(cj5*x1586);
IkReal x1590=IKcos(j4);
IkReal x1591=((1.0)*cj5*x1590);
IkReal x1592=(r20*sj5);
IkReal x1593=((0.5)*r21*sj5);
IkReal x1594=((0.866025403784439)*cj0*r02);
IkReal x1595=((0.866025403784439)*r12*sj0);
IkReal x1596=((0.5)*r00);
IkReal x1597=(cj0*cj5*x1586);
IkReal x1598=((1.0)*cj0*cj5*x1590);
IkReal x1599=((1.0)*cj0*sj5*x1590);
IkReal x1600=((0.5)*r01);
IkReal x1601=(cj0*sj5*x1586);
IkReal x1602=((0.5)*r10);
IkReal x1603=(cj5*sj0*x1586);
IkReal x1604=((0.5)*r11);
IkReal x1605=(sj0*sj5*x1586);
IkReal x1606=((0.866025403784439)*cj0*r12);
IkReal x1607=((0.866025403784439)*r02*sj0);
IkReal x1608=(cj0*cj5*x1590);
IkReal x1609=(cj0*sj5*x1590);
IkReal x1610=(cj5*sj0*x1590);
IkReal x1611=(r00*sj0*sj5);
IkReal x1612=(sj0*sj5*x1590);
evalcond[0]=((((-1.0)*x1588*x1589))+((x1586*x1593))+((x1586*x1587))+cj3+(((-1.0)*x1590*x1592))+(((-1.0)*r21*x1591)));
evalcond[1]=(((r21*x1589))+(((-1.0)*cj5*x1588*x1590))+(((0.5)*sj3))+((x1587*x1590))+((x1590*x1593))+((x1586*x1592)));
evalcond[2]=((((-1.0)*r11*sj0*x1591))+(((-1.0)*x1602*x1603))+(((-1.0)*r01*x1598))+((x1600*x1601))+(((-1.0)*x1596*x1597))+((x1586*x1594))+(((-1.0)*r00*x1599))+((x1604*x1605))+((x1586*x1595))+(((-1.0)*r10*sj0*sj5*x1590)));
evalcond[3]=(((x1596*x1610))+(((-1.0)*r01*x1603))+(((-1.0)*x1600*x1612))+((x1590*x1606))+((x1604*x1609))+((r11*x1597))+((r10*x1601))+(((-1.0)*x1602*x1608))+(((0.5)*cj3))+(((-1.0)*x1590*x1607))+(((-1.0)*x1586*x1611)));
evalcond[4]=(((r01*x1610))+(((-1.0)*x1586*x1607))+((x1590*x1611))+(((-1.0)*r11*x1598))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x1600*x1605))+((x1596*x1603))+(((-1.0)*r10*x1599))+((x1601*x1604))+(((-1.0)*x1597*x1602))+((x1586*x1606)));
evalcond[5]=((-0.866025403784439)+((x1604*x1612))+((x1600*x1609))+((x1590*x1595))+(((-1.0)*x1602*x1610))+(((-1.0)*x1596*x1608))+((x1590*x1594))+((r01*x1597))+((r10*x1605))+((r11*x1603))+((r00*x1601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1613=((0.866025403784439)*r22);
IkReal x1614=((0.5)*r20);
IkReal x1615=(cj3*cj5);
IkReal x1616=((0.5)*r21);
IkReal x1617=(cj3*sj5);
IkReal x1618=((0.25)*sj3);
IkReal x1619=(cj5*r20);
IkReal x1620=(r21*sj5);
IkReal x1621=r20*r20;
IkReal x1622=r21*r21;
IkReal x1623=((0.75)*(cj5*cj5));
CheckValue<IkReal> x1624 = IKatan2WithCheck(IkReal((((sj3*sj5*x1614))+(((-1.0)*x1614*x1615))+((cj3*x1613))+((x1616*x1617))+((cj5*sj3*x1616)))),IkReal((((x1618*x1620))+(((-1.0)*r20*x1617))+(((-1.0)*r21*x1615))+(((0.433012701892219)*r22*sj3))+(((-1.0)*x1618*x1619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1624.valid){
continue;
}
CheckValue<IkReal> x1625=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1621))+(((-1.0)*x1613*x1620))+((x1613*x1619))+(((-1.5)*cj5*r20*x1620))+(((-1.0)*x1622*x1623))+(((-1.0)*(0.75)*(r22*r22)))+(((-0.25)*x1622))+((x1621*x1623)))),-1);
if(!x1625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1624.value)+(((1.5707963267949)*(x1625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1626=IKsin(j4);
IkReal x1627=((0.866025403784439)*r22);
IkReal x1628=((0.5)*r20);
IkReal x1629=(cj5*x1626);
IkReal x1630=IKcos(j4);
IkReal x1631=((1.0)*cj5*x1630);
IkReal x1632=(r20*sj5);
IkReal x1633=((0.5)*r21*sj5);
IkReal x1634=((0.866025403784439)*cj0*r02);
IkReal x1635=((0.866025403784439)*r12*sj0);
IkReal x1636=((0.5)*r00);
IkReal x1637=(cj0*cj5*x1626);
IkReal x1638=((1.0)*cj0*cj5*x1630);
IkReal x1639=((1.0)*cj0*sj5*x1630);
IkReal x1640=((0.5)*r01);
IkReal x1641=(cj0*sj5*x1626);
IkReal x1642=((0.5)*r10);
IkReal x1643=(cj5*sj0*x1626);
IkReal x1644=((0.5)*r11);
IkReal x1645=(sj0*sj5*x1626);
IkReal x1646=((0.866025403784439)*cj0*r12);
IkReal x1647=((0.866025403784439)*r02*sj0);
IkReal x1648=(cj0*cj5*x1630);
IkReal x1649=(cj0*sj5*x1630);
IkReal x1650=(cj5*sj0*x1630);
IkReal x1651=(r00*sj0*sj5);
IkReal x1652=(sj0*sj5*x1630);
evalcond[0]=((((-1.0)*x1628*x1629))+(((-1.0)*x1630*x1632))+cj3+((x1626*x1627))+((x1626*x1633))+(((-1.0)*r21*x1631)));
evalcond[1]=((((-1.0)*cj5*x1628*x1630))+((x1627*x1630))+(((0.5)*sj3))+((x1630*x1633))+((r21*x1629))+((x1626*x1632)));
evalcond[2]=((((-1.0)*r10*sj0*sj5*x1630))+(((-1.0)*x1642*x1643))+((x1626*x1635))+((x1626*x1634))+(((-1.0)*r00*x1639))+(((-1.0)*r01*x1638))+((x1640*x1641))+(((-1.0)*r11*sj0*x1631))+(((-1.0)*x1636*x1637))+((x1644*x1645)));
evalcond[3]=((((-1.0)*x1626*x1651))+((r10*x1641))+((x1644*x1649))+((r11*x1637))+(((-1.0)*r01*x1643))+(((-1.0)*x1642*x1648))+((x1636*x1650))+(((-1.0)*x1630*x1647))+((x1630*x1646))+(((-1.0)*x1640*x1652))+(((0.5)*cj3)));
evalcond[4]=(((x1630*x1651))+(((-1.0)*r11*x1638))+((x1641*x1644))+(((-1.0)*r10*x1639))+(((-1.0)*x1637*x1642))+(((-1.0)*x1626*x1647))+((r01*x1650))+((x1626*x1646))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x1640*x1645))+((x1636*x1643)));
evalcond[5]=((-0.866025403784439)+((x1640*x1649))+(((-1.0)*x1636*x1648))+((r11*x1643))+((x1630*x1635))+((x1630*x1634))+((r10*x1645))+((r01*x1637))+((x1644*x1652))+((r00*x1641))+(((-1.0)*x1642*x1650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1653=((0.866025403784439)*cj0);
IkReal x1654=(cj5*r10);
IkReal x1655=(r11*sj5);
IkReal x1656=((0.866025403784439)*sj0);
IkReal x1657=(cj5*r00);
IkReal x1658=(r01*sj5);
IkReal x1659=((1.0)*cj0*cj3);
IkReal x1660=((1.0)*cj3*sj0);
IkReal x1661=((0.5)*cj0*cj3);
IkReal x1662=((0.5)*cj3*sj0);
CheckValue<IkReal> x1663 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5*x1659))+(((-1.0)*cj5*r01*x1659))+(((-1.0)*cj5*r11*x1660))+(((-1.0)*r10*sj5*x1660)))),IkReal(((((-1.0)*cj3*r12*x1656))+((x1657*x1661))+(((-1.0)*x1655*x1662))+((x1654*x1662))+(((-1.0)*x1658*x1661))+(((-1.0)*cj3*r02*x1653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1663.valid){
continue;
}
CheckValue<IkReal> x1664=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1653*x1654))+(((-0.5)*cj0*r12))+((x1656*x1657))+(((-1.0)*x1656*x1658))+((x1653*x1655))+((r02*(((0.5)*sj0)))))),-1);
if(!x1664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1663.value)+(((1.5707963267949)*(x1664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1665=IKsin(j4);
IkReal x1666=((0.866025403784439)*r22);
IkReal x1667=((0.5)*r20);
IkReal x1668=(cj5*x1665);
IkReal x1669=IKcos(j4);
IkReal x1670=((1.0)*cj5*x1669);
IkReal x1671=(r20*sj5);
IkReal x1672=((0.5)*r21*sj5);
IkReal x1673=((0.866025403784439)*cj0*r02);
IkReal x1674=((0.866025403784439)*r12*sj0);
IkReal x1675=((0.5)*r00);
IkReal x1676=(cj0*cj5*x1665);
IkReal x1677=((1.0)*cj0*cj5*x1669);
IkReal x1678=((1.0)*cj0*sj5*x1669);
IkReal x1679=((0.5)*r01);
IkReal x1680=(cj0*sj5*x1665);
IkReal x1681=((0.5)*r10);
IkReal x1682=(cj5*sj0*x1665);
IkReal x1683=((0.5)*r11);
IkReal x1684=(sj0*sj5*x1665);
IkReal x1685=((0.866025403784439)*cj0*r12);
IkReal x1686=((0.866025403784439)*r02*sj0);
IkReal x1687=(cj0*cj5*x1669);
IkReal x1688=(cj0*sj5*x1669);
IkReal x1689=(cj5*sj0*x1669);
IkReal x1690=(r00*sj0*sj5);
IkReal x1691=(sj0*sj5*x1669);
evalcond[0]=(((x1665*x1672))+((x1665*x1666))+cj3+(((-1.0)*x1669*x1671))+(((-1.0)*r21*x1670))+(((-1.0)*x1667*x1668)));
evalcond[1]=(((x1665*x1671))+(((-1.0)*cj5*x1667*x1669))+(((0.5)*sj3))+((x1666*x1669))+((r21*x1668))+((x1669*x1672)));
evalcond[2]=(((x1665*x1673))+(((-1.0)*x1681*x1682))+((x1683*x1684))+((x1665*x1674))+(((-1.0)*r11*sj0*x1670))+((x1679*x1680))+(((-1.0)*r00*x1678))+(((-1.0)*r10*sj0*sj5*x1669))+(((-1.0)*x1675*x1676))+(((-1.0)*r01*x1677)));
evalcond[3]=(((x1669*x1685))+(((-1.0)*x1681*x1687))+((x1675*x1689))+(((-1.0)*x1665*x1690))+((r10*x1680))+(((-1.0)*x1669*x1686))+(((0.5)*cj3))+(((-1.0)*x1679*x1691))+(((-1.0)*r01*x1682))+((x1683*x1688))+((r11*x1676)));
evalcond[4]=((((-1.0)*r11*x1677))+(((-1.0)*r10*x1678))+((x1665*x1685))+(((-1.0)*x1679*x1684))+(((-1.0)*x1665*x1686))+((x1669*x1690))+(((-1.0)*(1.0)*sj3))+((x1680*x1683))+(((-1.0)*x1676*x1681))+((r01*x1689))+((x1675*x1682)));
evalcond[5]=((-0.866025403784439)+((r11*x1682))+((x1669*x1674))+((x1679*x1688))+((r10*x1684))+((r00*x1680))+((x1683*x1691))+(((-1.0)*x1681*x1689))+((r01*x1676))+((x1669*x1673))+(((-1.0)*x1675*x1687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1692=((0.577350269189626)*cj0);
IkReal x1693=((0.577350269189626)*sj0);
IkReal x1694=(r01*sj5);
IkReal x1695=(r11*sj5);
IkReal x1696=((1.0)*r00);
IkReal x1697=(cj0*cj5);
IkReal x1698=(cj5*sj0);
if( IKabs(((((-1.0)*r12*x1693))+(((-1.0)*r02*x1692))+(((-1.0)*x1696*x1697))+(((-1.0)*r10*x1698))+((cj0*x1694))+((sj0*x1695)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1693))+((r12*x1692))+(((-1.0)*cj0*x1695))+((sj0*x1694))+((r10*x1697))+(((-1.0)*x1696*x1698)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1693))+(((-1.0)*r02*x1692))+(((-1.0)*x1696*x1697))+(((-1.0)*r10*x1698))+((cj0*x1694))+((sj0*x1695))))+IKsqr(((((-1.0)*r02*x1693))+((r12*x1692))+(((-1.0)*cj0*x1695))+((sj0*x1694))+((r10*x1697))+(((-1.0)*x1696*x1698))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r12*x1693))+(((-1.0)*r02*x1692))+(((-1.0)*x1696*x1697))+(((-1.0)*r10*x1698))+((cj0*x1694))+((sj0*x1695))), ((((-1.0)*r02*x1693))+((r12*x1692))+(((-1.0)*cj0*x1695))+((sj0*x1694))+((r10*x1697))+(((-1.0)*x1696*x1698))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1699=((0.5)*cj0);
IkReal x1700=((0.5)*sj0);
IkReal x1701=((0.866025403784439)*cj0*cj5);
IkReal x1702=((0.866025403784439)*cj0*sj5);
IkReal x1703=((0.866025403784439)*cj5*sj0);
IkReal x1704=((0.866025403784439)*sj0*sj5);
evalcond[0]=((((-1.0)*r12*x1699))+((r00*x1703))+(((-1.0)*r01*x1704))+(((-1.0)*r10*x1701))+((r02*x1700))+(((0.866025403784439)*(IKcos(j3))))+((r11*x1702)));
evalcond[1]=((((-1.0)*r12*x1700))+(((-1.0)*r10*x1703))+(((-1.0)*(0.866025403784439)*(IKsin(j3))))+(((-1.0)*r02*x1699))+((r01*x1702))+((r11*x1704))+(((-1.0)*r00*x1701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1705=(cj0*r02);
IkReal x1706=(r12*sj0);
IkReal x1707=(cj0*cj5*r00);
IkReal x1708=(cj0*r01*sj5);
IkReal x1709=(cj5*r10*sj0);
IkReal x1710=(r11*sj0*sj5);
IkReal x1711=(cj5*sj3);
IkReal x1712=(sj3*sj5);
j4eval[0]=((((1.73205080756888)*x1709))+(((1.73205080756888)*x1707))+x1706+x1705+(((-1.73205080756888)*x1710))+(((-1.73205080756888)*x1708)));
j4eval[1]=((((0.5)*(IKabs((((r20*x1711))+(((-1.0)*(1.73205080756888)*r22*sj3))+(((-1.0)*r21*x1712)))))))+(IKabs((((r20*x1712))+((r21*x1711))))));
j4eval[2]=IKsign(((((0.5)*x1705))+(((0.866025403784439)*x1709))+(((-0.866025403784439)*x1708))+(((-0.866025403784439)*x1710))+(((0.866025403784439)*x1707))+(((0.5)*x1706))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1713=r20*r20;
IkReal x1714=r21*r21;
IkReal x1715=r22*r22;
IkReal x1716=(cj5*r20*r22);
IkReal x1717=(r21*r22*sj5);
IkReal x1718=(cj5*r20*r21*sj5);
IkReal x1719=cj5*cj5;
IkReal x1720=(x1713*x1719);
IkReal x1721=(x1714*x1719);
j4eval[0]=((((3.0)*x1720))+(((-4.0)*x1713))+(((-6.0)*x1718))+(((-3.46410161513775)*x1717))+(((-3.0)*x1721))+(((3.46410161513775)*x1716))+(((-1.0)*x1714))+(((-3.0)*x1715)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.5)*x1721))+(((-1.5)*x1715))+(((-3.0)*x1718))+(((-1.73205080756888)*x1717))+(((1.73205080756888)*x1716))+(((-0.5)*x1714))+(((-2.0)*x1713))+(((1.5)*x1720))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1722=(r01*r21*sj0);
IkReal x1723=(cj0*r10*r20);
IkReal x1724=(cj0*r11*r21);
IkReal x1725=(cj0*r12*r22);
IkReal x1726=(r00*r20*sj0);
IkReal x1727=(r02*r22*sj0);
IkReal x1728=((1.73205080756888)*r22);
IkReal x1729=(cj0*cj5*r10);
IkReal x1730=(cj0*cj5*r12*r20);
IkReal x1731=(cj0*r11*sj5);
IkReal x1732=(cj0*r12*r21*sj5);
IkReal x1733=(cj5*r00*sj0);
IkReal x1734=(cj5*r02*r20*sj0);
IkReal x1735=(r01*sj0*sj5);
IkReal x1736=(r02*r21*sj0*sj5);
IkReal x1737=(cj0*cj5*r10*r21*sj5);
IkReal x1738=(cj0*cj5*r11*r20*sj5);
IkReal x1739=(cj5*r00*r21*sj0*sj5);
IkReal x1740=(cj5*r01*r20*sj0*sj5);
IkReal x1741=cj5*cj5;
IkReal x1742=(cj0*r10*r20*x1741);
IkReal x1743=(cj0*r11*r21*x1741);
IkReal x1744=(r00*r20*sj0*x1741);
IkReal x1745=(r01*r21*sj0*x1741);
IkReal x1746=((0.866025403784439)*r22);
IkReal x1747=(cj3*r21);
IkReal x1748=(cj3*r20);
j4eval[0]=((((3.0)*x1742))+(((-4.0)*x1723))+((x1728*x1729))+(((-3.0)*x1725))+(((-3.0)*x1744))+(((3.0)*x1740))+(((-3.0)*x1743))+(((-3.0)*x1737))+(((1.73205080756888)*x1730))+(((-3.0)*x1738))+(((-1.0)*x1724))+(((3.0)*x1745))+(((-1.73205080756888)*x1734))+(((-1.0)*x1728*x1731))+x1722+(((3.0)*x1727))+((x1728*x1735))+(((4.0)*x1726))+(((1.73205080756888)*x1736))+(((3.0)*x1739))+(((-1.73205080756888)*x1732))+(((-1.0)*x1728*x1733)));
j4eval[1]=IKsign(((((-0.5)*x1724))+((x1735*x1746))+((x1729*x1746))+(((-1.5)*x1743))+(((-1.0)*x1731*x1746))+(((-0.866025403784439)*x1734))+(((1.5)*x1727))+(((-0.866025403784439)*x1732))+(((0.5)*x1722))+(((2.0)*x1726))+(((-1.5)*x1737))+(((1.5)*x1745))+(((1.5)*x1739))+(((0.866025403784439)*x1736))+(((-1.5)*x1744))+(((-1.5)*x1738))+(((0.866025403784439)*x1730))+(((-1.0)*x1733*x1746))+(((-2.0)*x1723))+(((-1.5)*x1725))+(((1.5)*x1742))+(((1.5)*x1740))));
j4eval[2]=((((0.5)*(IKabs((((sj5*x1747))+(((-1.0)*cj5*x1748))+((cj3*x1728)))))))+(IKabs((((sj5*x1748))+((cj5*x1747))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1749=(cj0*r02);
IkReal x1750=(r12*sj0);
IkReal x1751=(cj0*cj5*r00);
IkReal x1752=(cj0*r01*sj5);
IkReal x1753=(cj5*r10*sj0);
IkReal x1754=(r11*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x1751))+(((-1.73205080756888)*x1754))+(((-1.73205080756888)*x1752))+x1749+(((1.73205080756888)*x1753))+x1750);
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((-0.866025403784439)*x1752))+(((0.5)*x1750))+(((0.5)*x1749))+(((0.866025403784439)*x1751))+(((0.866025403784439)*x1753))+(((-0.866025403784439)*x1754))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1755=r20*r20;
IkReal x1756=r21*r21;
IkReal x1757=r22*r22;
IkReal x1758=(cj5*r20*r22);
IkReal x1759=(r21*r22*sj5);
IkReal x1760=(cj5*r20*r21*sj5);
IkReal x1761=cj5*cj5;
IkReal x1762=(x1755*x1761);
IkReal x1763=(x1756*x1761);
j4eval[0]=((((-4.0)*x1755))+(((3.0)*x1762))+(((-1.0)*x1756))+(((-3.0)*x1763))+(((-6.0)*x1760))+(((3.46410161513775)*x1758))+(((-3.46410161513775)*x1759))+(((-3.0)*x1757)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.5)*x1763))+(((-1.5)*x1757))+(((-0.5)*x1756))+(((-1.73205080756888)*x1759))+(((-3.0)*x1760))+(((1.73205080756888)*x1758))+(((-2.0)*x1755))+(((1.5)*x1762))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1764=((1.73205080756888)*cj0);
IkReal x1765=((1.73205080756888)*sj0);
IkReal x1766=(((cj5*r00*x1765))+(((-1.0)*cj5*r10*x1764))+(((-1.0)*r01*sj5*x1765))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*sj5*x1764)));
j4eval[0]=x1766;
j4eval[1]=IKsign(x1766);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1767=((1.73205080756888)*cj0*cj5);
IkReal x1768=((1.73205080756888)*cj0*sj5);
IkReal x1769=((1.73205080756888)*cj5*sj0);
IkReal x1770=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x1771=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1770))+((r00*x1769))+((r11*x1768))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r10*x1767)))),-1);
if(!x1771.valid){
continue;
}
CheckValue<IkReal> x1772 = IKatan2WithCheck(IkReal(((((-1.0)*(0.5)*cj5*r20))+(((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((0.866025403784439)*r22))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5))+(((0.5)*r21*sj5)))),IkReal((((r00*x1768))+((r11*x1769))+(((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21))+((r01*x1767))+((r10*x1770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1771.value)))+(x1772.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1773=IKsin(j4);
IkReal x1774=((0.866025403784439)*r22);
IkReal x1775=((0.5)*r20);
IkReal x1776=(cj5*x1773);
IkReal x1777=IKcos(j4);
IkReal x1778=((1.0)*cj5*x1777);
IkReal x1779=(r20*sj5);
IkReal x1780=((0.5)*r21*sj5);
IkReal x1781=((0.866025403784439)*cj0*r02);
IkReal x1782=((0.866025403784439)*r12*sj0);
IkReal x1783=(cj0*cj5*x1773);
IkReal x1784=(cj0*sj5*x1773);
IkReal x1785=(cj5*sj0*x1773);
IkReal x1786=(sj0*sj5*x1773);
IkReal x1787=((0.5)*r00);
IkReal x1788=(cj0*cj5*x1777);
IkReal x1789=((0.5)*r01);
IkReal x1790=(cj0*sj5*x1777);
IkReal x1791=((0.5)*r10);
IkReal x1792=(cj5*sj0*x1777);
IkReal x1793=((0.5)*r11);
IkReal x1794=(sj0*sj5*x1777);
IkReal x1795=((0.866025403784439)*cj0*r12);
IkReal x1796=((0.866025403784439)*r02*sj0);
IkReal x1797=(r00*sj0*sj5);
IkReal x1798=((1.0)*cj0*cj5*x1777);
IkReal x1799=((1.0)*cj0*sj5*x1777);
evalcond[0]=((((-1.0)*r21*x1778))+((x1773*x1780))+(((-1.0)*x1777*x1779))+(((-1.0)*x1775*x1776))+((x1773*x1774)));
evalcond[1]=((-0.866025403784439)+((x1773*x1779))+((x1777*x1780))+(((-1.0)*cj5*x1775*x1777))+((x1774*x1777))+((r21*x1776)));
evalcond[2]=((-0.5)+((r11*x1785))+(((-1.0)*x1791*x1792))+((r00*x1784))+((x1793*x1794))+((x1789*x1790))+((r10*x1786))+((x1777*x1781))+((r01*x1783))+(((-1.0)*x1787*x1788))+((x1777*x1782)));
evalcond[3]=(((r11*x1783))+(((-1.0)*x1788*x1791))+(((-1.0)*x1777*x1796))+(((-1.0)*x1789*x1794))+((x1790*x1793))+((r10*x1784))+(((-1.0)*r01*x1785))+((x1787*x1792))+((x1777*x1795))+(((-1.0)*x1773*x1797)));
evalcond[4]=((-1.0)+(((-1.0)*x1773*x1796))+(((-1.0)*r11*x1798))+((x1777*x1797))+(((-1.0)*x1783*x1791))+(((-1.0)*x1786*x1789))+((x1773*x1795))+((r01*x1792))+(((-1.0)*r10*x1799))+((x1784*x1793))+((x1785*x1787)));
evalcond[5]=(((x1786*x1793))+(((-1.0)*r01*x1798))+(((-1.0)*x1785*x1791))+((x1773*x1781))+(((-1.0)*r00*x1799))+((x1784*x1789))+((x1773*x1782))+(((-1.0)*r11*sj0*x1778))+(((-1.0)*x1783*x1787))+(((-1.0)*r10*sj0*sj5*x1777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1800=((1.73205080756888)*r21);
IkReal x1801=(cj5*r20);
IkReal x1802=(r21*sj5);
IkReal x1803=r20*r20;
IkReal x1804=r21*r21;
IkReal x1805=((1.5)*(cj5*cj5));
CheckValue<IkReal> x1806 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x1800)))),IkReal(((((0.866025403784439)*x1801))+(((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x1802)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1806.valid){
continue;
}
CheckValue<IkReal> x1807=IKPowWithIntegerCheck(IKsign((((x1803*x1805))+(((1.73205080756888)*r22*x1801))+(((-1.0)*x1804*x1805))+(((-0.5)*x1804))+(((-1.0)*r22*sj5*x1800))+(((-3.0)*cj5*r20*x1802))+(((-1.0)*(1.5)*(r22*r22)))+(((-2.0)*x1803)))),-1);
if(!x1807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1806.value)+(((1.5707963267949)*(x1807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1808=IKsin(j4);
IkReal x1809=((0.866025403784439)*r22);
IkReal x1810=((0.5)*r20);
IkReal x1811=(cj5*x1808);
IkReal x1812=IKcos(j4);
IkReal x1813=((1.0)*cj5*x1812);
IkReal x1814=(r20*sj5);
IkReal x1815=((0.5)*r21*sj5);
IkReal x1816=((0.866025403784439)*cj0*r02);
IkReal x1817=((0.866025403784439)*r12*sj0);
IkReal x1818=(cj0*cj5*x1808);
IkReal x1819=(cj0*sj5*x1808);
IkReal x1820=(cj5*sj0*x1808);
IkReal x1821=(sj0*sj5*x1808);
IkReal x1822=((0.5)*r00);
IkReal x1823=(cj0*cj5*x1812);
IkReal x1824=((0.5)*r01);
IkReal x1825=(cj0*sj5*x1812);
IkReal x1826=((0.5)*r10);
IkReal x1827=(cj5*sj0*x1812);
IkReal x1828=((0.5)*r11);
IkReal x1829=(sj0*sj5*x1812);
IkReal x1830=((0.866025403784439)*cj0*r12);
IkReal x1831=((0.866025403784439)*r02*sj0);
IkReal x1832=(r00*sj0*sj5);
IkReal x1833=((1.0)*cj0*cj5*x1812);
IkReal x1834=((1.0)*cj0*sj5*x1812);
evalcond[0]=((((-1.0)*x1812*x1814))+((x1808*x1809))+((x1808*x1815))+(((-1.0)*r21*x1813))+(((-1.0)*x1810*x1811)));
evalcond[1]=((-0.866025403784439)+((x1812*x1815))+((x1809*x1812))+((r21*x1811))+(((-1.0)*cj5*x1810*x1812))+((x1808*x1814)));
evalcond[2]=((-0.5)+(((-1.0)*x1822*x1823))+((r00*x1819))+(((-1.0)*x1826*x1827))+((r10*x1821))+((r11*x1820))+((x1812*x1817))+((x1824*x1825))+((x1812*x1816))+((r01*x1818))+((x1828*x1829)));
evalcond[3]=(((r10*x1819))+((r11*x1818))+(((-1.0)*x1824*x1829))+(((-1.0)*r01*x1820))+(((-1.0)*x1823*x1826))+((x1822*x1827))+(((-1.0)*x1812*x1831))+((x1812*x1830))+((x1825*x1828))+(((-1.0)*x1808*x1832)));
evalcond[4]=((-1.0)+((r01*x1827))+(((-1.0)*x1821*x1824))+((x1820*x1822))+(((-1.0)*r11*x1833))+(((-1.0)*x1818*x1826))+(((-1.0)*x1808*x1831))+((x1819*x1828))+(((-1.0)*r10*x1834))+((x1812*x1832))+((x1808*x1830)));
evalcond[5]=(((x1821*x1828))+((x1819*x1824))+(((-1.0)*x1818*x1822))+(((-1.0)*r11*sj0*x1813))+(((-1.0)*r10*sj0*sj5*x1812))+(((-1.0)*x1820*x1826))+(((-1.0)*r01*x1833))+(((-1.0)*r00*x1834))+((x1808*x1816))+((x1808*x1817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1835=((0.866025403784439)*cj0);
IkReal x1836=((0.866025403784439)*sj0);
CheckValue<IkReal> x1837=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x1835))+(((0.5)*r12*sj0))+(((-1.0)*r11*sj5*x1836))+((cj5*r00*x1835))+((cj5*r10*x1836))+(((0.5)*cj0*r02)))),-1);
if(!x1837.valid){
continue;
}
CheckValue<IkReal> x1838 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1837.value)))+(x1838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1839=IKsin(j4);
IkReal x1840=((0.866025403784439)*r22);
IkReal x1841=((0.5)*r20);
IkReal x1842=(cj5*x1839);
IkReal x1843=IKcos(j4);
IkReal x1844=((1.0)*cj5*x1843);
IkReal x1845=(r20*sj5);
IkReal x1846=((0.5)*r21*sj5);
IkReal x1847=((0.866025403784439)*cj0*r02);
IkReal x1848=((0.866025403784439)*r12*sj0);
IkReal x1849=(cj0*cj5*x1839);
IkReal x1850=(cj0*sj5*x1839);
IkReal x1851=(cj5*sj0*x1839);
IkReal x1852=(sj0*sj5*x1839);
IkReal x1853=((0.5)*r00);
IkReal x1854=(cj0*cj5*x1843);
IkReal x1855=((0.5)*r01);
IkReal x1856=(cj0*sj5*x1843);
IkReal x1857=((0.5)*r10);
IkReal x1858=(cj5*sj0*x1843);
IkReal x1859=((0.5)*r11);
IkReal x1860=(sj0*sj5*x1843);
IkReal x1861=((0.866025403784439)*cj0*r12);
IkReal x1862=((0.866025403784439)*r02*sj0);
IkReal x1863=(r00*sj0*sj5);
IkReal x1864=((1.0)*cj0*cj5*x1843);
IkReal x1865=((1.0)*cj0*sj5*x1843);
evalcond[0]=(((x1839*x1846))+(((-1.0)*r21*x1844))+(((-1.0)*x1841*x1842))+((x1839*x1840))+(((-1.0)*x1843*x1845)));
evalcond[1]=((-0.866025403784439)+((x1839*x1845))+(((-1.0)*cj5*x1841*x1843))+((r21*x1842))+((x1843*x1846))+((x1840*x1843)));
evalcond[2]=((-0.5)+((r01*x1849))+((r00*x1850))+((x1859*x1860))+((r11*x1851))+(((-1.0)*x1853*x1854))+(((-1.0)*x1857*x1858))+((x1843*x1848))+((r10*x1852))+((x1855*x1856))+((x1843*x1847)));
evalcond[3]=((((-1.0)*x1855*x1860))+(((-1.0)*x1854*x1857))+(((-1.0)*x1839*x1863))+((x1856*x1859))+(((-1.0)*r01*x1851))+((x1853*x1858))+((r10*x1850))+((x1843*x1861))+(((-1.0)*x1843*x1862))+((r11*x1849)));
evalcond[4]=((-1.0)+((x1851*x1853))+((r01*x1858))+(((-1.0)*r10*x1865))+((x1843*x1863))+((x1850*x1859))+(((-1.0)*r11*x1864))+(((-1.0)*x1852*x1855))+(((-1.0)*x1839*x1862))+((x1839*x1861))+(((-1.0)*x1849*x1857)));
evalcond[5]=(((x1850*x1855))+(((-1.0)*x1849*x1853))+(((-1.0)*r00*x1865))+((x1852*x1859))+(((-1.0)*r01*x1864))+(((-1.0)*r10*sj0*sj5*x1843))+((x1839*x1848))+(((-1.0)*x1851*x1857))+(((-1.0)*r11*sj0*x1844))+((x1839*x1847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1866=(cj0*r02);
IkReal x1867=(r12*sj0);
IkReal x1868=(cj0*cj5*r00);
IkReal x1869=(cj0*r01*sj5);
IkReal x1870=(cj5*r10*sj0);
IkReal x1871=(r11*sj0*sj5);
j4eval[0]=((((-1.73205080756888)*x1871))+(((1.73205080756888)*x1868))+x1867+x1866+(((1.73205080756888)*x1870))+(((-1.73205080756888)*x1869)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.866025403784439)*x1870))+(((0.866025403784439)*x1868))+(((0.5)*x1866))+(((0.5)*x1867))+(((-0.866025403784439)*x1871))+(((-0.866025403784439)*x1869))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1872=r20*r20;
IkReal x1873=r21*r21;
IkReal x1874=r22*r22;
IkReal x1875=(cj5*r20*r22);
IkReal x1876=(r21*r22*sj5);
IkReal x1877=(cj5*r20*r21*sj5);
IkReal x1878=cj5*cj5;
IkReal x1879=(x1872*x1878);
IkReal x1880=(x1873*x1878);
j4eval[0]=((((-3.0)*x1880))+(((-6.0)*x1877))+(((-4.0)*x1872))+(((-3.0)*x1874))+(((3.0)*x1879))+(((3.46410161513775)*x1875))+(((-1.0)*x1873))+(((-3.46410161513775)*x1876)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-2.0)*x1872))+(((-3.0)*x1877))+(((-1.73205080756888)*x1876))+(((-0.5)*x1873))+(((1.5)*x1879))+(((-1.5)*x1874))+(((1.73205080756888)*x1875))+(((-1.5)*x1880))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1881=((1.73205080756888)*cj0);
IkReal x1882=((1.73205080756888)*sj0);
IkReal x1883=(((cj5*r00*x1882))+(((-1.0)*r01*sj5*x1882))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*cj5*r10*x1881))+((r11*sj5*x1881)));
j4eval[0]=x1883;
j4eval[1]=IKsign(x1883);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1884=((1.73205080756888)*cj0*cj5);
IkReal x1885=((1.73205080756888)*cj0*sj5);
IkReal x1886=((1.73205080756888)*cj5*sj0);
IkReal x1887=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x1888=IKPowWithIntegerCheck(IKsign((((r00*x1886))+(((-1.0)*r10*x1884))+((r11*x1885))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*x1887)))),-1);
if(!x1888.valid){
continue;
}
CheckValue<IkReal> x1889 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r20*sj5))+((cj5*r21))+((r10*x1887))+((r00*x1885))+((r11*x1886))+((r01*x1884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1888.value)))+(x1889.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1890=IKsin(j4);
IkReal x1891=((0.866025403784439)*r22);
IkReal x1892=((0.5)*r20);
IkReal x1893=(cj5*x1890);
IkReal x1894=IKcos(j4);
IkReal x1895=((1.0)*cj5*x1894);
IkReal x1896=(r20*sj5);
IkReal x1897=((0.5)*r21*sj5);
IkReal x1898=((0.866025403784439)*cj0*r02);
IkReal x1899=((0.866025403784439)*r12*sj0);
IkReal x1900=(cj0*cj5*x1890);
IkReal x1901=(cj0*sj5*x1890);
IkReal x1902=(cj5*sj0*x1890);
IkReal x1903=(sj0*sj5*x1890);
IkReal x1904=((0.5)*r00);
IkReal x1905=(cj0*cj5*x1894);
IkReal x1906=((0.5)*r01);
IkReal x1907=(cj0*sj5*x1894);
IkReal x1908=((0.5)*r10);
IkReal x1909=(cj5*sj0*x1894);
IkReal x1910=((0.5)*r11);
IkReal x1911=(sj0*sj5*x1894);
IkReal x1912=((0.866025403784439)*cj0*r12);
IkReal x1913=((0.866025403784439)*r02*sj0);
IkReal x1914=(r00*sj0*sj5);
IkReal x1915=((1.0)*cj0*cj5*x1894);
IkReal x1916=((1.0)*cj0*sj5*x1894);
evalcond[0]=((((-1.0)*r21*x1895))+((x1890*x1897))+((x1890*x1891))+(((-1.0)*x1894*x1896))+(((-1.0)*x1892*x1893)));
evalcond[1]=((-0.866025403784439)+((x1894*x1897))+((x1891*x1894))+(((-1.0)*cj5*x1892*x1894))+((r21*x1893))+((x1890*x1896)));
evalcond[2]=((0.5)+((r01*x1900))+((x1910*x1911))+((r00*x1901))+((r11*x1902))+((x1906*x1907))+((r10*x1903))+((x1894*x1898))+(((-1.0)*x1904*x1905))+(((-1.0)*x1908*x1909))+((x1894*x1899)));
evalcond[3]=(((x1894*x1912))+((r10*x1901))+(((-1.0)*x1906*x1911))+(((-1.0)*r01*x1902))+((x1904*x1909))+((x1907*x1910))+((r11*x1900))+(((-1.0)*x1905*x1908))+(((-1.0)*x1890*x1914))+(((-1.0)*x1894*x1913)));
evalcond[4]=((1.0)+(((-1.0)*x1903*x1906))+(((-1.0)*x1900*x1908))+((x1890*x1912))+((r01*x1909))+(((-1.0)*r11*x1915))+((x1894*x1914))+(((-1.0)*x1890*x1913))+((x1902*x1904))+(((-1.0)*r10*x1916))+((x1901*x1910)));
evalcond[5]=((((-1.0)*r11*sj0*x1895))+(((-1.0)*r10*sj0*sj5*x1894))+(((-1.0)*r01*x1915))+(((-1.0)*x1900*x1904))+((x1903*x1910))+((x1890*x1899))+(((-1.0)*x1902*x1908))+(((-1.0)*r00*x1916))+((x1901*x1906))+((x1890*x1898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1917=((1.73205080756888)*r21);
IkReal x1918=(cj5*r20);
IkReal x1919=(r21*sj5);
IkReal x1920=r20*r20;
IkReal x1921=r21*r21;
IkReal x1922=((1.5)*(cj5*cj5));
CheckValue<IkReal> x1923=IKPowWithIntegerCheck(IKsign(((((-0.5)*x1921))+(((1.73205080756888)*r22*x1918))+(((-1.0)*r22*sj5*x1917))+((x1920*x1922))+(((-3.0)*cj5*r20*x1919))+(((-1.0)*x1921*x1922))+(((-2.0)*x1920))+(((-1.0)*(1.5)*(r22*r22))))),-1);
if(!x1923.valid){
continue;
}
CheckValue<IkReal> x1924 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x1917))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x1919))+(((0.866025403784439)*x1918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1923.value)))+(x1924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1925=IKsin(j4);
IkReal x1926=((0.866025403784439)*r22);
IkReal x1927=((0.5)*r20);
IkReal x1928=(cj5*x1925);
IkReal x1929=IKcos(j4);
IkReal x1930=((1.0)*cj5*x1929);
IkReal x1931=(r20*sj5);
IkReal x1932=((0.5)*r21*sj5);
IkReal x1933=((0.866025403784439)*cj0*r02);
IkReal x1934=((0.866025403784439)*r12*sj0);
IkReal x1935=(cj0*cj5*x1925);
IkReal x1936=(cj0*sj5*x1925);
IkReal x1937=(cj5*sj0*x1925);
IkReal x1938=(sj0*sj5*x1925);
IkReal x1939=((0.5)*r00);
IkReal x1940=(cj0*cj5*x1929);
IkReal x1941=((0.5)*r01);
IkReal x1942=(cj0*sj5*x1929);
IkReal x1943=((0.5)*r10);
IkReal x1944=(cj5*sj0*x1929);
IkReal x1945=((0.5)*r11);
IkReal x1946=(sj0*sj5*x1929);
IkReal x1947=((0.866025403784439)*cj0*r12);
IkReal x1948=((0.866025403784439)*r02*sj0);
IkReal x1949=(r00*sj0*sj5);
IkReal x1950=((1.0)*cj0*cj5*x1929);
IkReal x1951=((1.0)*cj0*sj5*x1929);
evalcond[0]=((((-1.0)*x1927*x1928))+((x1925*x1932))+(((-1.0)*r21*x1930))+(((-1.0)*x1929*x1931))+((x1925*x1926)));
evalcond[1]=((-0.866025403784439)+((x1925*x1931))+(((-1.0)*cj5*x1927*x1929))+((x1929*x1932))+((x1926*x1929))+((r21*x1928)));
evalcond[2]=((0.5)+((r00*x1936))+((r11*x1937))+(((-1.0)*x1943*x1944))+((r01*x1935))+(((-1.0)*x1939*x1940))+((r10*x1938))+((x1929*x1934))+((x1941*x1942))+((x1945*x1946))+((x1929*x1933)));
evalcond[3]=(((x1939*x1944))+(((-1.0)*x1940*x1943))+(((-1.0)*x1929*x1948))+((x1942*x1945))+(((-1.0)*x1941*x1946))+((x1929*x1947))+((r10*x1936))+(((-1.0)*x1925*x1949))+(((-1.0)*r01*x1937))+((r11*x1935)));
evalcond[4]=((1.0)+(((-1.0)*r11*x1950))+((r01*x1944))+(((-1.0)*r10*x1951))+((x1929*x1949))+(((-1.0)*x1925*x1948))+((x1936*x1945))+(((-1.0)*x1935*x1943))+((x1925*x1947))+(((-1.0)*x1938*x1941))+((x1937*x1939)));
evalcond[5]=((((-1.0)*r10*sj0*sj5*x1929))+(((-1.0)*r00*x1951))+((x1925*x1933))+(((-1.0)*r11*sj0*x1930))+(((-1.0)*x1937*x1943))+(((-1.0)*x1935*x1939))+((x1925*x1934))+((x1936*x1941))+(((-1.0)*r01*x1950))+((x1938*x1945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1952=((0.866025403784439)*cj0);
IkReal x1953=((0.866025403784439)*sj0);
CheckValue<IkReal> x1954=IKPowWithIntegerCheck(IKsign((((cj5*r00*x1952))+(((0.5)*r12*sj0))+(((-1.0)*r11*sj5*x1953))+((cj5*r10*x1953))+(((-1.0)*r01*sj5*x1952))+(((0.5)*cj0*r02)))),-1);
if(!x1954.valid){
continue;
}
CheckValue<IkReal> x1955 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1954.value)))+(x1955.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1956=IKsin(j4);
IkReal x1957=((0.866025403784439)*r22);
IkReal x1958=((0.5)*r20);
IkReal x1959=(cj5*x1956);
IkReal x1960=IKcos(j4);
IkReal x1961=((1.0)*cj5*x1960);
IkReal x1962=(r20*sj5);
IkReal x1963=((0.5)*r21*sj5);
IkReal x1964=((0.866025403784439)*cj0*r02);
IkReal x1965=((0.866025403784439)*r12*sj0);
IkReal x1966=(cj0*cj5*x1956);
IkReal x1967=(cj0*sj5*x1956);
IkReal x1968=(cj5*sj0*x1956);
IkReal x1969=(sj0*sj5*x1956);
IkReal x1970=((0.5)*r00);
IkReal x1971=(cj0*cj5*x1960);
IkReal x1972=((0.5)*r01);
IkReal x1973=(cj0*sj5*x1960);
IkReal x1974=((0.5)*r10);
IkReal x1975=(cj5*sj0*x1960);
IkReal x1976=((0.5)*r11);
IkReal x1977=(sj0*sj5*x1960);
IkReal x1978=((0.866025403784439)*cj0*r12);
IkReal x1979=((0.866025403784439)*r02*sj0);
IkReal x1980=(r00*sj0*sj5);
IkReal x1981=((1.0)*cj0*cj5*x1960);
IkReal x1982=((1.0)*cj0*sj5*x1960);
evalcond[0]=(((x1956*x1963))+((x1956*x1957))+(((-1.0)*r21*x1961))+(((-1.0)*x1958*x1959))+(((-1.0)*x1960*x1962)));
evalcond[1]=((-0.866025403784439)+((r21*x1959))+((x1956*x1962))+((x1957*x1960))+((x1960*x1963))+(((-1.0)*cj5*x1958*x1960)));
evalcond[2]=((0.5)+((x1976*x1977))+(((-1.0)*x1970*x1971))+((x1960*x1964))+((r01*x1966))+(((-1.0)*x1974*x1975))+((x1960*x1965))+((x1972*x1973))+((r00*x1967))+((r10*x1969))+((r11*x1968)));
evalcond[3]=((((-1.0)*r01*x1968))+(((-1.0)*x1956*x1980))+(((-1.0)*x1971*x1974))+((r11*x1966))+((r10*x1967))+(((-1.0)*x1960*x1979))+((x1970*x1975))+((x1973*x1976))+((x1960*x1978))+(((-1.0)*x1972*x1977)));
evalcond[4]=((1.0)+((x1956*x1978))+(((-1.0)*r10*x1982))+((x1968*x1970))+((r01*x1975))+((x1967*x1976))+(((-1.0)*r11*x1981))+(((-1.0)*x1956*x1979))+(((-1.0)*x1969*x1972))+((x1960*x1980))+(((-1.0)*x1966*x1974)));
evalcond[5]=((((-1.0)*r11*sj0*x1961))+((x1967*x1972))+(((-1.0)*r00*x1982))+((x1969*x1976))+(((-1.0)*r01*x1981))+(((-1.0)*r10*sj0*sj5*x1960))+((x1956*x1965))+(((-1.0)*x1966*x1970))+(((-1.0)*x1968*x1974))+((x1956*x1964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1983=(r02*sj0);
IkReal x1984=(cj0*r12);
IkReal x1985=(cj0*cj5*r10);
IkReal x1986=(cj0*r11*sj5);
IkReal x1987=(cj5*r00*sj0);
IkReal x1988=(r01*sj0*sj5);
j4eval[0]=((((-1.73205080756888)*x1988))+(((1.73205080756888)*x1986))+(((-1.0)*x1984))+x1983+(((1.73205080756888)*x1987))+(((-1.73205080756888)*x1985)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((-0.866025403784439)*x1988))+(((0.5)*x1983))+(((0.866025403784439)*x1987))+(((-0.5)*x1984))+(((-0.866025403784439)*x1985))+(((0.866025403784439)*x1986))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1989=r20*r20;
IkReal x1990=r21*r21;
IkReal x1991=r22*r22;
IkReal x1992=(cj5*r20*r22);
IkReal x1993=(r21*r22*sj5);
IkReal x1994=(cj5*r20*r21*sj5);
IkReal x1995=cj5*cj5;
IkReal x1996=(x1989*x1995);
IkReal x1997=(x1990*x1995);
j4eval[0]=((((-3.0)*x1991))+(((3.46410161513775)*x1992))+(((-3.0)*x1997))+(((-6.0)*x1994))+(((-4.0)*x1989))+(((-3.46410161513775)*x1993))+(((3.0)*x1996))+(((-1.0)*x1990)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.5)*x1997))+(((1.5)*x1996))+(((-2.0)*x1989))+(((-1.73205080756888)*x1993))+(((1.73205080756888)*x1992))+(((-1.5)*x1991))+(((-0.5)*x1990))+(((-3.0)*x1994))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1998=((1.73205080756888)*cj0);
IkReal x1999=((1.73205080756888)*sj0);
IkReal x2000=(((cj5*r00*x1999))+(((-1.0)*r01*sj5*x1999))+(((-1.0)*cj5*r10*x1998))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*sj5*x1998)));
j4eval[0]=x2000;
j4eval[1]=IKsign(x2000);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2001=((1.73205080756888)*cj0*cj5);
IkReal x2002=((1.73205080756888)*cj0*sj5);
IkReal x2003=((1.73205080756888)*cj5*sj0);
IkReal x2004=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x2005=IKPowWithIntegerCheck(IKsign((((r00*x2003))+((r11*x2002))+(((-1.0)*r01*x2004))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r10*x2001)))),-1);
if(!x2005.valid){
continue;
}
CheckValue<IkReal> x2006 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r01*x2001))+((r00*x2002))+((r11*x2003))+((r10*x2004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2005.value)))+(x2006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2007=IKsin(j4);
IkReal x2008=((0.866025403784439)*r22);
IkReal x2009=((0.5)*r20);
IkReal x2010=(cj5*x2007);
IkReal x2011=IKcos(j4);
IkReal x2012=((1.0)*cj5*x2011);
IkReal x2013=(r20*sj5);
IkReal x2014=((0.5)*r21*sj5);
IkReal x2015=((0.866025403784439)*cj0*r02);
IkReal x2016=((0.866025403784439)*r12*sj0);
IkReal x2017=(cj0*cj5*x2007);
IkReal x2018=(cj0*sj5*x2007);
IkReal x2019=(cj5*sj0*x2007);
IkReal x2020=(sj0*sj5*x2007);
IkReal x2021=((0.5)*r00);
IkReal x2022=(cj0*cj5*x2011);
IkReal x2023=((0.5)*r01);
IkReal x2024=(cj0*sj5*x2011);
IkReal x2025=((0.5)*r10);
IkReal x2026=(cj5*sj0*x2011);
IkReal x2027=((0.5)*r11);
IkReal x2028=(sj0*sj5*x2011);
IkReal x2029=((0.866025403784439)*cj0*r12);
IkReal x2030=((0.866025403784439)*r02*sj0);
IkReal x2031=(r00*sj0*sj5);
IkReal x2032=((1.0)*cj0*cj5*x2011);
IkReal x2033=((1.0)*cj0*sj5*x2011);
evalcond[0]=((((-1.0)*x2011*x2013))+((x2007*x2014))+(((-1.0)*r21*x2012))+((x2007*x2008))+(((-1.0)*x2009*x2010)));
evalcond[1]=((-0.866025403784439)+((r21*x2010))+((x2008*x2011))+((x2011*x2014))+(((-1.0)*cj5*x2009*x2011))+((x2007*x2013)));
evalcond[2]=(((x2011*x2016))+((x2011*x2015))+((r10*x2020))+((r01*x2017))+(((-1.0)*x2025*x2026))+((r11*x2019))+(((-1.0)*x2021*x2022))+((x2023*x2024))+((x2027*x2028))+((r00*x2018)));
evalcond[3]=(((x2007*x2029))+((r01*x2026))+((x2018*x2027))+((x2011*x2031))+(((-1.0)*r11*x2032))+(((-1.0)*r10*x2033))+((x2019*x2021))+(((-1.0)*x2007*x2030))+(((-1.0)*x2020*x2023))+(((-1.0)*x2017*x2025)));
evalcond[4]=((0.5)+(((-1.0)*x2022*x2025))+((x2024*x2027))+((x2011*x2029))+(((-1.0)*x2007*x2031))+((x2021*x2026))+(((-1.0)*x2011*x2030))+(((-1.0)*x2023*x2028))+((r10*x2018))+(((-1.0)*r01*x2019))+((r11*x2017)));
evalcond[5]=((-1.0)+(((-1.0)*x2019*x2025))+(((-1.0)*r11*sj0*x2012))+((x2020*x2027))+(((-1.0)*r01*x2032))+(((-1.0)*r10*sj0*sj5*x2011))+(((-1.0)*x2017*x2021))+((x2007*x2016))+(((-1.0)*r00*x2033))+((x2018*x2023))+((x2007*x2015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2034=((1.73205080756888)*r21);
IkReal x2035=(cj5*r20);
IkReal x2036=(r21*sj5);
IkReal x2037=r20*r20;
IkReal x2038=r21*r21;
IkReal x2039=((1.5)*(cj5*cj5));
CheckValue<IkReal> x2040=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2037))+((x2037*x2039))+(((-3.0)*cj5*r20*x2036))+(((1.73205080756888)*r22*x2035))+(((-0.5)*x2038))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*x2038*x2039))+(((-1.0)*r22*sj5*x2034)))),-1);
if(!x2040.valid){
continue;
}
CheckValue<IkReal> x2041 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x2034))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x2036))+(((0.866025403784439)*x2035)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2040.value)))+(x2041.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2042=IKsin(j4);
IkReal x2043=((0.866025403784439)*r22);
IkReal x2044=((0.5)*r20);
IkReal x2045=(cj5*x2042);
IkReal x2046=IKcos(j4);
IkReal x2047=((1.0)*cj5*x2046);
IkReal x2048=(r20*sj5);
IkReal x2049=((0.5)*r21*sj5);
IkReal x2050=((0.866025403784439)*cj0*r02);
IkReal x2051=((0.866025403784439)*r12*sj0);
IkReal x2052=(cj0*cj5*x2042);
IkReal x2053=(cj0*sj5*x2042);
IkReal x2054=(cj5*sj0*x2042);
IkReal x2055=(sj0*sj5*x2042);
IkReal x2056=((0.5)*r00);
IkReal x2057=(cj0*cj5*x2046);
IkReal x2058=((0.5)*r01);
IkReal x2059=(cj0*sj5*x2046);
IkReal x2060=((0.5)*r10);
IkReal x2061=(cj5*sj0*x2046);
IkReal x2062=((0.5)*r11);
IkReal x2063=(sj0*sj5*x2046);
IkReal x2064=((0.866025403784439)*cj0*r12);
IkReal x2065=((0.866025403784439)*r02*sj0);
IkReal x2066=(r00*sj0*sj5);
IkReal x2067=((1.0)*cj0*cj5*x2046);
IkReal x2068=((1.0)*cj0*sj5*x2046);
evalcond[0]=(((x2042*x2049))+((x2042*x2043))+(((-1.0)*r21*x2047))+(((-1.0)*x2044*x2045))+(((-1.0)*x2046*x2048)));
evalcond[1]=((-0.866025403784439)+((x2046*x2049))+((x2043*x2046))+((r21*x2045))+(((-1.0)*cj5*x2044*x2046))+((x2042*x2048)));
evalcond[2]=((((-1.0)*x2056*x2057))+((x2046*x2051))+((x2046*x2050))+((r01*x2052))+((r00*x2053))+((r10*x2055))+(((-1.0)*x2060*x2061))+((r11*x2054))+((x2062*x2063))+((x2058*x2059)));
evalcond[3]=((((-1.0)*x2052*x2060))+(((-1.0)*r11*x2067))+((x2054*x2056))+(((-1.0)*x2042*x2065))+((x2053*x2062))+(((-1.0)*x2055*x2058))+((x2046*x2066))+((r01*x2061))+((x2042*x2064))+(((-1.0)*r10*x2068)));
evalcond[4]=((0.5)+(((-1.0)*r01*x2054))+((x2056*x2061))+((x2046*x2064))+(((-1.0)*x2058*x2063))+((x2059*x2062))+(((-1.0)*x2057*x2060))+(((-1.0)*x2046*x2065))+(((-1.0)*x2042*x2066))+((r10*x2053))+((r11*x2052)));
evalcond[5]=((-1.0)+((x2053*x2058))+(((-1.0)*r11*sj0*x2047))+(((-1.0)*x2052*x2056))+((x2042*x2050))+((x2042*x2051))+(((-1.0)*r00*x2068))+((x2055*x2062))+(((-1.0)*r01*x2067))+(((-1.0)*x2054*x2060))+(((-1.0)*r10*sj0*sj5*x2046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2069=((0.866025403784439)*cj0);
IkReal x2070=((0.866025403784439)*sj0);
CheckValue<IkReal> x2071 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2071.valid){
continue;
}
CheckValue<IkReal> x2072=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x2069))+(((-1.0)*(0.5)*cj0*r12))+((r11*sj5*x2069))+(((-1.0)*r01*sj5*x2070))+(((0.5)*r02*sj0))+((cj5*r00*x2070)))),-1);
if(!x2072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2071.value)+(((1.5707963267949)*(x2072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2073=IKsin(j4);
IkReal x2074=((0.866025403784439)*r22);
IkReal x2075=((0.5)*r20);
IkReal x2076=(cj5*x2073);
IkReal x2077=IKcos(j4);
IkReal x2078=((1.0)*cj5*x2077);
IkReal x2079=(r20*sj5);
IkReal x2080=((0.5)*r21*sj5);
IkReal x2081=((0.866025403784439)*cj0*r02);
IkReal x2082=((0.866025403784439)*r12*sj0);
IkReal x2083=(cj0*cj5*x2073);
IkReal x2084=(cj0*sj5*x2073);
IkReal x2085=(cj5*sj0*x2073);
IkReal x2086=(sj0*sj5*x2073);
IkReal x2087=((0.5)*r00);
IkReal x2088=(cj0*cj5*x2077);
IkReal x2089=((0.5)*r01);
IkReal x2090=(cj0*sj5*x2077);
IkReal x2091=((0.5)*r10);
IkReal x2092=(cj5*sj0*x2077);
IkReal x2093=((0.5)*r11);
IkReal x2094=(sj0*sj5*x2077);
IkReal x2095=((0.866025403784439)*cj0*r12);
IkReal x2096=((0.866025403784439)*r02*sj0);
IkReal x2097=(r00*sj0*sj5);
IkReal x2098=((1.0)*cj0*cj5*x2077);
IkReal x2099=((1.0)*cj0*sj5*x2077);
evalcond[0]=((((-1.0)*x2075*x2076))+(((-1.0)*x2077*x2079))+((x2073*x2074))+((x2073*x2080))+(((-1.0)*r21*x2078)));
evalcond[1]=((-0.866025403784439)+((x2073*x2079))+((x2074*x2077))+((x2077*x2080))+((r21*x2076))+(((-1.0)*cj5*x2075*x2077)));
evalcond[2]=(((x2077*x2081))+((r11*x2085))+((x2093*x2094))+(((-1.0)*x2091*x2092))+((r01*x2083))+((x2077*x2082))+(((-1.0)*x2087*x2088))+((r10*x2086))+((x2089*x2090))+((r00*x2084)));
evalcond[3]=((((-1.0)*x2083*x2091))+((r01*x2092))+((x2085*x2087))+((x2084*x2093))+(((-1.0)*r11*x2098))+(((-1.0)*r10*x2099))+((x2077*x2097))+((x2073*x2095))+(((-1.0)*x2086*x2089))+(((-1.0)*x2073*x2096)));
evalcond[4]=((0.5)+((x2087*x2092))+(((-1.0)*x2089*x2094))+((r10*x2084))+(((-1.0)*r01*x2085))+(((-1.0)*x2088*x2091))+((x2090*x2093))+(((-1.0)*x2073*x2097))+(((-1.0)*x2077*x2096))+((x2077*x2095))+((r11*x2083)));
evalcond[5]=((-1.0)+(((-1.0)*r11*sj0*x2078))+((x2086*x2093))+(((-1.0)*r10*sj0*sj5*x2077))+((x2084*x2089))+((x2073*x2081))+(((-1.0)*r01*x2098))+(((-1.0)*x2085*x2091))+(((-1.0)*r00*x2099))+(((-1.0)*x2083*x2087))+((x2073*x2082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2100=(r02*sj0);
IkReal x2101=(cj0*r12);
IkReal x2102=(cj0*cj5*r10);
IkReal x2103=(cj0*r11*sj5);
IkReal x2104=(cj5*r00*sj0);
IkReal x2105=(r01*sj0*sj5);
j4eval[0]=(x2100+(((-1.0)*x2101))+(((-1.73205080756888)*x2105))+(((1.73205080756888)*x2103))+(((1.73205080756888)*x2104))+(((-1.73205080756888)*x2102)));
j4eval[1]=IKsign(((((-0.866025403784439)*x2102))+(((0.866025403784439)*x2103))+(((-0.5)*x2101))+(((0.5)*x2100))+(((-0.866025403784439)*x2105))+(((0.866025403784439)*x2104))));
j4eval[2]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2106=r20*r20;
IkReal x2107=r21*r21;
IkReal x2108=r22*r22;
IkReal x2109=(cj5*r20*r22);
IkReal x2110=(r21*r22*sj5);
IkReal x2111=(cj5*r20*r21*sj5);
IkReal x2112=cj5*cj5;
IkReal x2113=(x2106*x2112);
IkReal x2114=(x2107*x2112);
j4eval[0]=((((-3.0)*x2114))+(((-3.0)*x2108))+(((-6.0)*x2111))+(((-4.0)*x2106))+(((-1.0)*x2107))+(((3.0)*x2113))+(((3.46410161513775)*x2109))+(((-3.46410161513775)*x2110)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-0.5)*x2107))+(((-3.0)*x2111))+(((-1.5)*x2108))+(((1.73205080756888)*x2109))+(((1.5)*x2113))+(((-1.5)*x2114))+(((-1.73205080756888)*x2110))+(((-2.0)*x2106))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2115=((1.73205080756888)*cj0);
IkReal x2116=((1.73205080756888)*sj0);
IkReal x2117=(((r11*sj5*x2115))+(((-1.0)*r01*sj5*x2116))+((cj5*r00*x2116))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*cj5*r10*x2115)));
j4eval[0]=x2117;
j4eval[1]=IKsign(x2117);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2118=((1.73205080756888)*cj0*cj5);
IkReal x2119=((1.73205080756888)*cj0*sj5);
IkReal x2120=((1.73205080756888)*cj5*sj0);
IkReal x2121=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x2122=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2118))+(((-1.0)*r01*x2121))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*x2119))+((r00*x2120)))),-1);
if(!x2122.valid){
continue;
}
CheckValue<IkReal> x2123 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r00*x2119))+((r01*x2118))+((r10*x2121))+((r11*x2120)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2122.value)))+(x2123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2124=IKsin(j4);
IkReal x2125=((0.866025403784439)*r22);
IkReal x2126=((0.5)*r20);
IkReal x2127=(cj5*x2124);
IkReal x2128=IKcos(j4);
IkReal x2129=((1.0)*cj5*x2128);
IkReal x2130=(r20*sj5);
IkReal x2131=((0.5)*r21*sj5);
IkReal x2132=((0.866025403784439)*cj0*r02);
IkReal x2133=((0.866025403784439)*r12*sj0);
IkReal x2134=(cj0*cj5*x2124);
IkReal x2135=(cj0*sj5*x2124);
IkReal x2136=(cj5*sj0*x2124);
IkReal x2137=(sj0*sj5*x2124);
IkReal x2138=((0.5)*r00);
IkReal x2139=(cj0*cj5*x2128);
IkReal x2140=((0.5)*r01);
IkReal x2141=(cj0*sj5*x2128);
IkReal x2142=((0.5)*r10);
IkReal x2143=(cj5*sj0*x2128);
IkReal x2144=((0.5)*r11);
IkReal x2145=(sj0*sj5*x2128);
IkReal x2146=((0.866025403784439)*cj0*r12);
IkReal x2147=((0.866025403784439)*r02*sj0);
IkReal x2148=(r00*sj0*sj5);
IkReal x2149=((1.0)*cj0*cj5*x2128);
IkReal x2150=((1.0)*cj0*sj5*x2128);
evalcond[0]=(((x2124*x2125))+((x2124*x2131))+(((-1.0)*x2126*x2127))+(((-1.0)*r21*x2129))+(((-1.0)*x2128*x2130)));
evalcond[1]=((-0.866025403784439)+((r21*x2127))+((x2128*x2131))+(((-1.0)*cj5*x2126*x2128))+((x2124*x2130))+((x2125*x2128)));
evalcond[2]=(((x2128*x2133))+((r01*x2134))+((x2140*x2141))+(((-1.0)*x2138*x2139))+((x2144*x2145))+((r00*x2135))+((x2128*x2132))+((r10*x2137))+((r11*x2136))+(((-1.0)*x2142*x2143)));
evalcond[3]=((((-1.0)*x2134*x2142))+(((-1.0)*r11*x2149))+(((-1.0)*x2124*x2147))+(((-1.0)*x2137*x2140))+(((-1.0)*r10*x2150))+((x2135*x2144))+((r01*x2143))+((x2124*x2146))+((x2136*x2138))+((x2128*x2148)));
evalcond[4]=((-0.5)+(((-1.0)*x2124*x2148))+(((-1.0)*x2140*x2145))+(((-1.0)*r01*x2136))+(((-1.0)*x2139*x2142))+((r11*x2134))+((x2128*x2146))+((x2138*x2143))+(((-1.0)*x2128*x2147))+((x2141*x2144))+((r10*x2135)));
evalcond[5]=((1.0)+((x2124*x2132))+(((-1.0)*r10*sj0*sj5*x2128))+(((-1.0)*r01*x2149))+(((-1.0)*x2136*x2142))+(((-1.0)*x2134*x2138))+((x2137*x2144))+((x2124*x2133))+((x2135*x2140))+(((-1.0)*r00*x2150))+(((-1.0)*r11*sj0*x2129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2151=((1.73205080756888)*r21);
IkReal x2152=(cj5*r20);
IkReal x2153=(r21*sj5);
IkReal x2154=r20*r20;
IkReal x2155=r21*r21;
IkReal x2156=((1.5)*(cj5*cj5));
CheckValue<IkReal> x2157=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2155*x2156))+(((1.73205080756888)*r22*x2152))+((x2154*x2156))+(((-1.0)*r22*sj5*x2151))+(((-2.0)*x2154))+(((-3.0)*cj5*r20*x2153))+(((-1.0)*(1.5)*(r22*r22)))+(((-0.5)*x2155)))),-1);
if(!x2157.valid){
continue;
}
CheckValue<IkReal> x2158 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x2151)))),IkReal(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*x2152))+(((-0.866025403784439)*x2153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2157.value)))+(x2158.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2159=IKsin(j4);
IkReal x2160=((0.866025403784439)*r22);
IkReal x2161=((0.5)*r20);
IkReal x2162=(cj5*x2159);
IkReal x2163=IKcos(j4);
IkReal x2164=((1.0)*cj5*x2163);
IkReal x2165=(r20*sj5);
IkReal x2166=((0.5)*r21*sj5);
IkReal x2167=((0.866025403784439)*cj0*r02);
IkReal x2168=((0.866025403784439)*r12*sj0);
IkReal x2169=(cj0*cj5*x2159);
IkReal x2170=(cj0*sj5*x2159);
IkReal x2171=(cj5*sj0*x2159);
IkReal x2172=(sj0*sj5*x2159);
IkReal x2173=((0.5)*r00);
IkReal x2174=(cj0*cj5*x2163);
IkReal x2175=((0.5)*r01);
IkReal x2176=(cj0*sj5*x2163);
IkReal x2177=((0.5)*r10);
IkReal x2178=(cj5*sj0*x2163);
IkReal x2179=((0.5)*r11);
IkReal x2180=(sj0*sj5*x2163);
IkReal x2181=((0.866025403784439)*cj0*r12);
IkReal x2182=((0.866025403784439)*r02*sj0);
IkReal x2183=(r00*sj0*sj5);
IkReal x2184=((1.0)*cj0*cj5*x2163);
IkReal x2185=((1.0)*cj0*sj5*x2163);
evalcond[0]=(((x2159*x2160))+((x2159*x2166))+(((-1.0)*r21*x2164))+(((-1.0)*x2161*x2162))+(((-1.0)*x2163*x2165)));
evalcond[1]=((-0.866025403784439)+((x2159*x2165))+(((-1.0)*cj5*x2161*x2163))+((x2163*x2166))+((r21*x2162))+((x2160*x2163)));
evalcond[2]=((((-1.0)*x2173*x2174))+((x2163*x2168))+(((-1.0)*x2177*x2178))+((x2163*x2167))+((r11*x2171))+((r00*x2170))+((r01*x2169))+((r10*x2172))+((x2175*x2176))+((x2179*x2180)));
evalcond[3]=(((x2170*x2179))+(((-1.0)*x2159*x2182))+(((-1.0)*x2172*x2175))+((x2163*x2183))+(((-1.0)*x2169*x2177))+((x2159*x2181))+((x2171*x2173))+(((-1.0)*r11*x2184))+(((-1.0)*r10*x2185))+((r01*x2178)));
evalcond[4]=((-0.5)+((x2173*x2178))+(((-1.0)*r01*x2171))+((x2163*x2181))+((r11*x2169))+((r10*x2170))+(((-1.0)*x2174*x2177))+(((-1.0)*x2175*x2180))+((x2176*x2179))+(((-1.0)*x2159*x2183))+(((-1.0)*x2163*x2182)));
evalcond[5]=((1.0)+((x2159*x2167))+(((-1.0)*x2171*x2177))+((x2170*x2175))+(((-1.0)*r11*sj0*x2164))+(((-1.0)*r01*x2184))+(((-1.0)*r10*sj0*sj5*x2163))+(((-1.0)*r00*x2185))+(((-1.0)*x2169*x2173))+((x2172*x2179))+((x2159*x2168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2186=((0.866025403784439)*cj0);
IkReal x2187=((0.866025403784439)*sj0);
CheckValue<IkReal> x2188 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2188.valid){
continue;
}
CheckValue<IkReal> x2189=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x2187))+((r11*sj5*x2186))+(((-1.0)*(0.5)*cj0*r12))+(((-1.0)*cj5*r10*x2186))+((cj5*r00*x2187))+(((0.5)*r02*sj0)))),-1);
if(!x2189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2188.value)+(((1.5707963267949)*(x2189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2190=IKsin(j4);
IkReal x2191=((0.866025403784439)*r22);
IkReal x2192=((0.5)*r20);
IkReal x2193=(cj5*x2190);
IkReal x2194=IKcos(j4);
IkReal x2195=((1.0)*cj5*x2194);
IkReal x2196=(r20*sj5);
IkReal x2197=((0.5)*r21*sj5);
IkReal x2198=((0.866025403784439)*cj0*r02);
IkReal x2199=((0.866025403784439)*r12*sj0);
IkReal x2200=(cj0*cj5*x2190);
IkReal x2201=(cj0*sj5*x2190);
IkReal x2202=(cj5*sj0*x2190);
IkReal x2203=(sj0*sj5*x2190);
IkReal x2204=((0.5)*r00);
IkReal x2205=(cj0*cj5*x2194);
IkReal x2206=((0.5)*r01);
IkReal x2207=(cj0*sj5*x2194);
IkReal x2208=((0.5)*r10);
IkReal x2209=(cj5*sj0*x2194);
IkReal x2210=((0.5)*r11);
IkReal x2211=(sj0*sj5*x2194);
IkReal x2212=((0.866025403784439)*cj0*r12);
IkReal x2213=((0.866025403784439)*r02*sj0);
IkReal x2214=(r00*sj0*sj5);
IkReal x2215=((1.0)*cj0*cj5*x2194);
IkReal x2216=((1.0)*cj0*sj5*x2194);
evalcond[0]=((((-1.0)*x2192*x2193))+((x2190*x2197))+(((-1.0)*r21*x2195))+(((-1.0)*x2194*x2196))+((x2190*x2191)));
evalcond[1]=((-0.866025403784439)+((x2190*x2196))+((x2194*x2197))+(((-1.0)*cj5*x2192*x2194))+((x2191*x2194))+((r21*x2193)));
evalcond[2]=(((x2194*x2198))+(((-1.0)*x2204*x2205))+((r01*x2200))+((r10*x2203))+((x2194*x2199))+((x2210*x2211))+((x2206*x2207))+((r00*x2201))+(((-1.0)*x2208*x2209))+((r11*x2202)));
evalcond[3]=(((x2194*x2214))+(((-1.0)*x2203*x2206))+(((-1.0)*x2200*x2208))+((x2202*x2204))+((r01*x2209))+((x2190*x2212))+((x2201*x2210))+(((-1.0)*x2190*x2213))+(((-1.0)*r11*x2215))+(((-1.0)*r10*x2216)));
evalcond[4]=((-0.5)+((x2204*x2209))+((r10*x2201))+(((-1.0)*x2206*x2211))+(((-1.0)*x2190*x2214))+((x2194*x2212))+(((-1.0)*x2205*x2208))+(((-1.0)*x2194*x2213))+((r11*x2200))+(((-1.0)*r01*x2202))+((x2207*x2210)));
evalcond[5]=((1.0)+(((-1.0)*x2200*x2204))+(((-1.0)*r01*x2215))+((x2190*x2198))+(((-1.0)*r11*sj0*x2195))+((x2201*x2206))+((x2203*x2210))+(((-1.0)*r00*x2216))+((x2190*x2199))+(((-1.0)*x2202*x2208))+(((-1.0)*r10*sj0*sj5*x2194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2217=(cj3*cj5);
IkReal x2218=(cj3*sj5);
IkReal x2219=((0.5)*r21);
IkReal x2220=((2.0)*r20);
IkReal x2221=(cj0*r10);
IkReal x2222=(cj0*r11);
IkReal x2223=((1.5)*r22);
IkReal x2224=(r00*sj0);
IkReal x2225=(r01*sj0);
IkReal x2226=((0.866025403784439)*cj5*r22);
IkReal x2227=(cj5*r20);
IkReal x2228=((0.866025403784439)*cj0*r12);
IkReal x2229=((0.866025403784439)*r22*sj5);
IkReal x2230=(r21*sj5);
IkReal x2231=((0.866025403784439)*r02*sj0);
IkReal x2232=((1.5)*cj5*r21*sj5);
IkReal x2233=((1.5)*cj5*r20*sj5);
IkReal x2234=cj5*cj5;
IkReal x2235=((1.5)*r20*x2234);
IkReal x2236=((1.5)*r21*x2234);
CheckValue<IkReal> x2237 = IKatan2WithCheck(IkReal((((r20*x2218))+((r21*x2217)))),IkReal(((((-0.5)*r20*x2217))+((x2218*x2219))+((cj3*(((0.866025403784439)*r22)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2237.valid){
continue;
}
CheckValue<IkReal> x2238=IKPowWithIntegerCheck(IKsign((((x2221*x2226))+((x2224*x2232))+(((-1.0)*x2224*x2226))+((x2221*x2235))+(((-1.0)*x2219*x2222))+(((-1.0)*cj0*r12*x2223))+((x2225*x2229))+((x2220*x2224))+((x2230*x2231))+((x2225*x2233))+(((-1.0)*x2221*x2232))+((x2219*x2225))+(((-1.0)*x2222*x2236))+((x2227*x2228))+(((-1.0)*x2227*x2231))+((x2225*x2236))+((r02*sj0*x2223))+(((-1.0)*x2224*x2235))+(((-1.0)*x2220*x2221))+(((-1.0)*x2222*x2229))+(((-1.0)*x2222*x2233))+(((-1.0)*x2228*x2230)))),-1);
if(!x2238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2237.value)+(((1.5707963267949)*(x2238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2239=IKsin(j4);
IkReal x2240=((0.866025403784439)*r22);
IkReal x2241=((0.5)*r20);
IkReal x2242=(cj5*x2239);
IkReal x2243=IKcos(j4);
IkReal x2244=((1.0)*cj5*x2243);
IkReal x2245=(r20*sj5);
IkReal x2246=((0.5)*r21*sj5);
IkReal x2247=((0.866025403784439)*cj0*r02);
IkReal x2248=((0.866025403784439)*r12*sj0);
IkReal x2249=(cj0*cj5*x2239);
IkReal x2250=(cj0*sj5*x2239);
IkReal x2251=(cj5*sj0*x2239);
IkReal x2252=(sj0*sj5*x2239);
IkReal x2253=((0.5)*r00);
IkReal x2254=(cj0*cj5*x2243);
IkReal x2255=((0.5)*r01);
IkReal x2256=(cj0*sj5*x2243);
IkReal x2257=((0.5)*r10);
IkReal x2258=(cj5*sj0*x2243);
IkReal x2259=((0.5)*r11);
IkReal x2260=(sj0*sj5*x2243);
IkReal x2261=((0.866025403784439)*cj0*r12);
IkReal x2262=((0.866025403784439)*r02*sj0);
IkReal x2263=(r00*sj0*sj5);
IkReal x2264=((1.0)*cj0*cj5*x2243);
IkReal x2265=((1.0)*cj0*sj5*x2243);
evalcond[0]=((((-1.0)*r21*x2244))+(((-1.0)*x2243*x2245))+(((-1.0)*x2241*x2242))+((x2239*x2246))+((x2239*x2240)));
evalcond[1]=((-0.866025403784439)+((x2239*x2245))+(((-1.0)*cj5*x2241*x2243))+((r21*x2242))+((x2243*x2246))+((x2240*x2243)));
evalcond[2]=(((x2259*x2260))+((r01*x2249))+((x2243*x2248))+((r00*x2250))+((x2255*x2256))+(((-1.0)*(0.5)*sj3))+((r11*x2251))+((x2243*x2247))+(((-1.0)*x2257*x2258))+((r10*x2252))+(((-1.0)*x2253*x2254)));
evalcond[3]=((((-1.0)*x2239*x2263))+((x2256*x2259))+((x2253*x2258))+((r10*x2250))+((x2243*x2261))+(((-1.0)*x2255*x2260))+(((-1.0)*x2243*x2262))+((r11*x2249))+(((-1.0)*x2254*x2257))+(((0.5)*cj3))+(((-1.0)*r01*x2251)));
evalcond[4]=((((-1.0)*r11*x2264))+((x2243*x2263))+(((-1.0)*r10*x2265))+(((-1.0)*x2239*x2262))+(((-1.0)*x2249*x2257))+((x2251*x2253))+((r01*x2258))+(((-1.0)*x2252*x2255))+(((-1.0)*(1.0)*sj3))+((x2239*x2261))+((x2250*x2259)));
evalcond[5]=((((-1.0)*r00*x2265))+((x2239*x2247))+(((-1.0)*x2251*x2257))+(((-1.0)*(1.0)*cj3))+(((-1.0)*x2249*x2253))+((x2252*x2259))+((x2239*x2248))+(((-1.0)*r10*sj0*sj5*x2243))+(((-1.0)*r11*sj0*x2244))+((x2250*x2255))+(((-1.0)*r01*x2264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2266=((1.73205080756888)*r21);
IkReal x2267=(cj5*r20);
IkReal x2268=(r21*sj5);
IkReal x2269=r20*r20;
IkReal x2270=r21*r21;
IkReal x2271=((1.5)*(cj5*cj5));
CheckValue<IkReal> x2272=IKPowWithIntegerCheck(IKsign(((((-3.0)*cj5*r20*x2268))+(((-2.0)*x2269))+((x2269*x2271))+(((-0.5)*x2270))+(((1.73205080756888)*r22*x2267))+(((-1.0)*r22*sj5*x2266))+(((-1.0)*x2270*x2271))+(((-1.0)*(1.5)*(r22*r22))))),-1);
if(!x2272.valid){
continue;
}
CheckValue<IkReal> x2273 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x2266))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((-0.866025403784439)*x2268))+(((-1.0)*(1.5)*r22))+(((0.866025403784439)*x2267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2272.value)))+(x2273.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2274=IKsin(j4);
IkReal x2275=((0.866025403784439)*r22);
IkReal x2276=((0.5)*r20);
IkReal x2277=(cj5*x2274);
IkReal x2278=IKcos(j4);
IkReal x2279=((1.0)*cj5*x2278);
IkReal x2280=(r20*sj5);
IkReal x2281=((0.5)*r21*sj5);
IkReal x2282=((0.866025403784439)*cj0*r02);
IkReal x2283=((0.866025403784439)*r12*sj0);
IkReal x2284=(cj0*cj5*x2274);
IkReal x2285=(cj0*sj5*x2274);
IkReal x2286=(cj5*sj0*x2274);
IkReal x2287=(sj0*sj5*x2274);
IkReal x2288=((0.5)*r00);
IkReal x2289=(cj0*cj5*x2278);
IkReal x2290=((0.5)*r01);
IkReal x2291=(cj0*sj5*x2278);
IkReal x2292=((0.5)*r10);
IkReal x2293=(cj5*sj0*x2278);
IkReal x2294=((0.5)*r11);
IkReal x2295=(sj0*sj5*x2278);
IkReal x2296=((0.866025403784439)*cj0*r12);
IkReal x2297=((0.866025403784439)*r02*sj0);
IkReal x2298=(r00*sj0*sj5);
IkReal x2299=((1.0)*cj0*cj5*x2278);
IkReal x2300=((1.0)*cj0*sj5*x2278);
evalcond[0]=(((x2274*x2275))+(((-1.0)*r21*x2279))+(((-1.0)*x2278*x2280))+((x2274*x2281))+(((-1.0)*x2276*x2277)));
evalcond[1]=((-0.866025403784439)+((x2275*x2278))+((r21*x2277))+((x2278*x2281))+(((-1.0)*cj5*x2276*x2278))+((x2274*x2280)));
evalcond[2]=(((x2294*x2295))+((r01*x2284))+((x2278*x2283))+(((-1.0)*x2288*x2289))+(((-1.0)*(0.5)*sj3))+((r11*x2286))+((x2290*x2291))+((x2278*x2282))+(((-1.0)*x2292*x2293))+((r00*x2285))+((r10*x2287)));
evalcond[3]=((((-1.0)*x2278*x2297))+(((-1.0)*x2290*x2295))+((x2278*x2296))+((x2288*x2293))+(((-1.0)*x2274*x2298))+((r11*x2284))+((r10*x2285))+(((0.5)*cj3))+(((-1.0)*x2289*x2292))+(((-1.0)*r01*x2286))+((x2291*x2294)));
evalcond[4]=(((x2285*x2294))+((x2274*x2296))+((x2286*x2288))+(((-1.0)*x2287*x2290))+(((-1.0)*x2274*x2297))+(((-1.0)*x2284*x2292))+(((-1.0)*r11*x2299))+((r01*x2293))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r10*x2300))+((x2278*x2298)));
evalcond[5]=(((x2287*x2294))+(((-1.0)*(1.0)*cj3))+((x2285*x2290))+((x2274*x2283))+(((-1.0)*r11*sj0*x2279))+((x2274*x2282))+(((-1.0)*x2286*x2292))+(((-1.0)*r10*sj0*sj5*x2278))+(((-1.0)*x2284*x2288))+(((-1.0)*r00*x2300))+(((-1.0)*r01*x2299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2301=(cj5*sj3);
IkReal x2302=(sj3*sj5);
IkReal x2303=((0.866025403784439)*cj0);
IkReal x2304=((0.866025403784439)*sj0);
CheckValue<IkReal> x2305=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x2303))+((cj5*r10*x2304))+(((0.5)*r12*sj0))+(((-1.0)*r11*sj5*x2304))+((cj5*r00*x2303))+(((0.5)*cj0*r02)))),-1);
if(!x2305.valid){
continue;
}
CheckValue<IkReal> x2306 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x2302))+(((-1.0)*r21*x2301)))),IkReal(((((-0.5)*r21*x2302))+(((-1.0)*(0.866025403784439)*r22*sj3))+(((0.5)*r20*x2301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2305.value)))+(x2306.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2307=IKsin(j4);
IkReal x2308=((0.866025403784439)*r22);
IkReal x2309=((0.5)*r20);
IkReal x2310=(cj5*x2307);
IkReal x2311=IKcos(j4);
IkReal x2312=((1.0)*cj5*x2311);
IkReal x2313=(r20*sj5);
IkReal x2314=((0.5)*r21*sj5);
IkReal x2315=((0.866025403784439)*cj0*r02);
IkReal x2316=((0.866025403784439)*r12*sj0);
IkReal x2317=(cj0*cj5*x2307);
IkReal x2318=(cj0*sj5*x2307);
IkReal x2319=(cj5*sj0*x2307);
IkReal x2320=(sj0*sj5*x2307);
IkReal x2321=((0.5)*r00);
IkReal x2322=(cj0*cj5*x2311);
IkReal x2323=((0.5)*r01);
IkReal x2324=(cj0*sj5*x2311);
IkReal x2325=((0.5)*r10);
IkReal x2326=(cj5*sj0*x2311);
IkReal x2327=((0.5)*r11);
IkReal x2328=(sj0*sj5*x2311);
IkReal x2329=((0.866025403784439)*cj0*r12);
IkReal x2330=((0.866025403784439)*r02*sj0);
IkReal x2331=(r00*sj0*sj5);
IkReal x2332=((1.0)*cj0*cj5*x2311);
IkReal x2333=((1.0)*cj0*sj5*x2311);
evalcond[0]=((((-1.0)*r21*x2312))+((x2307*x2308))+(((-1.0)*x2311*x2313))+(((-1.0)*x2309*x2310))+((x2307*x2314)));
evalcond[1]=((-0.866025403784439)+((x2311*x2314))+(((-1.0)*cj5*x2309*x2311))+((x2307*x2313))+((r21*x2310))+((x2308*x2311)));
evalcond[2]=(((r10*x2320))+((x2327*x2328))+((x2311*x2316))+(((-1.0)*(0.5)*sj3))+((r00*x2318))+((x2311*x2315))+((r01*x2317))+(((-1.0)*x2325*x2326))+((x2323*x2324))+(((-1.0)*x2321*x2322))+((r11*x2319)));
evalcond[3]=(((x2321*x2326))+((x2324*x2327))+(((-1.0)*x2311*x2330))+(((-1.0)*r01*x2319))+((r10*x2318))+((x2311*x2329))+((r11*x2317))+(((-1.0)*x2323*x2328))+(((0.5)*cj3))+(((-1.0)*x2307*x2331))+(((-1.0)*x2322*x2325)));
evalcond[4]=((((-1.0)*r10*x2333))+((x2318*x2327))+(((-1.0)*x2320*x2323))+(((-1.0)*r11*x2332))+(((-1.0)*x2317*x2325))+((x2319*x2321))+(((-1.0)*x2307*x2330))+((x2311*x2331))+((x2307*x2329))+(((-1.0)*(1.0)*sj3))+((r01*x2326)));
evalcond[5]=((((-1.0)*x2317*x2321))+(((-1.0)*(1.0)*cj3))+(((-1.0)*r10*sj0*sj5*x2311))+((x2307*x2316))+((x2318*x2323))+(((-1.0)*x2319*x2325))+((x2307*x2315))+(((-1.0)*r11*sj0*x2312))+(((-1.0)*r00*x2333))+((x2320*x2327))+(((-1.0)*r01*x2332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2334=((0.577350269189626)*cj0);
IkReal x2335=((0.577350269189626)*sj0);
IkReal x2336=(cj0*cj5);
IkReal x2337=(cj5*sj0);
IkReal x2338=((1.0)*cj0);
IkReal x2339=(r01*sj5);
IkReal x2340=(r11*sj5);
if( IKabs((((r02*x2334))+(((-1.0)*x2338*x2339))+(((-1.0)*sj0*x2340))+((r10*x2337))+((r12*x2335))+((r00*x2336)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2338*x2340))+(((-1.0)*r00*x2337))+((sj0*x2339))+((r12*x2334))+(((-1.0)*r02*x2335))+((r10*x2336)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x2334))+(((-1.0)*x2338*x2339))+(((-1.0)*sj0*x2340))+((r10*x2337))+((r12*x2335))+((r00*x2336))))+IKsqr(((((-1.0)*x2338*x2340))+(((-1.0)*r00*x2337))+((sj0*x2339))+((r12*x2334))+(((-1.0)*r02*x2335))+((r10*x2336))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r02*x2334))+(((-1.0)*x2338*x2339))+(((-1.0)*sj0*x2340))+((r10*x2337))+((r12*x2335))+((r00*x2336))), ((((-1.0)*x2338*x2340))+(((-1.0)*r00*x2337))+((sj0*x2339))+((r12*x2334))+(((-1.0)*r02*x2335))+((r10*x2336))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x2341=((0.5)*cj0);
IkReal x2342=((0.5)*sj0);
IkReal x2343=((0.866025403784439)*cj0*cj5);
IkReal x2344=((0.866025403784439)*cj0*sj5);
IkReal x2345=((0.866025403784439)*cj5*sj0);
IkReal x2346=((0.866025403784439)*sj0*sj5);
evalcond[0]=(((r02*x2342))+(((-1.0)*r12*x2341))+(((-1.0)*r01*x2346))+(((-1.0)*r10*x2343))+((r00*x2345))+((r11*x2344))+(((0.866025403784439)*(IKcos(j3)))));
evalcond[1]=((((-1.0)*r00*x2343))+((r01*x2344))+(((-1.0)*r10*x2345))+(((-1.0)*r02*x2341))+(((-1.0)*r12*x2342))+((r11*x2346))+(((0.866025403784439)*(IKsin(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2347=(cj0*r02);
IkReal x2348=(r12*sj0);
IkReal x2349=(cj0*cj5*r00);
IkReal x2350=(cj0*r01*sj5);
IkReal x2351=(cj5*r10*sj0);
IkReal x2352=(r11*sj0*sj5);
IkReal x2353=(cj5*sj3);
IkReal x2354=(sj3*sj5);
j4eval[0]=((((1.73205080756888)*x2351))+(((-1.73205080756888)*x2352))+x2348+x2347+(((1.73205080756888)*x2349))+(((-1.73205080756888)*x2350)));
j4eval[1]=((((0.5)*(IKabs((((r20*x2353))+(((-1.0)*(1.73205080756888)*r22*sj3))+(((-1.0)*r21*x2354)))))))+(IKabs((((r20*x2354))+((r21*x2353))))));
j4eval[2]=IKsign(((((0.5)*x2347))+(((0.866025403784439)*x2349))+(((-0.866025403784439)*x2350))+(((-0.866025403784439)*x2352))+(((0.5)*x2348))+(((0.866025403784439)*x2351))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2355=r20*r20;
IkReal x2356=r21*r21;
IkReal x2357=r22*r22;
IkReal x2358=(cj5*r20*r22);
IkReal x2359=(r21*r22*sj5);
IkReal x2360=(cj5*r20*r21*sj5);
IkReal x2361=cj5*cj5;
IkReal x2362=(x2355*x2361);
IkReal x2363=(x2356*x2361);
j4eval[0]=((((-4.0)*x2355))+(((-3.46410161513775)*x2359))+(((-1.0)*x2356))+(((-3.0)*x2357))+(((-6.0)*x2360))+(((3.0)*x2362))+(((3.46410161513775)*x2358))+(((-3.0)*x2363)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((1.5)*x2362))+(((-0.5)*x2356))+(((-1.73205080756888)*x2359))+(((-1.5)*x2363))+(((1.73205080756888)*x2358))+(((-2.0)*x2355))+(((-3.0)*x2360))+(((-1.5)*x2357))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2364=(cj0*r00*r20);
IkReal x2365=(cj0*r01*r21);
IkReal x2366=(cj0*r02*r22);
IkReal x2367=(r10*r20*sj0);
IkReal x2368=(r11*r21*sj0);
IkReal x2369=(r12*r22*sj0);
IkReal x2370=((1.73205080756888)*r22);
IkReal x2371=(cj0*cj5*r00);
IkReal x2372=(cj0*cj5*r02*r20);
IkReal x2373=(cj0*r01*sj5);
IkReal x2374=(cj0*r02*r21*sj5);
IkReal x2375=(cj5*r10*sj0);
IkReal x2376=(cj5*r12*r20*sj0);
IkReal x2377=(r11*sj0*sj5);
IkReal x2378=(r12*r21*sj0*sj5);
IkReal x2379=(cj0*cj5*r00*r21*sj5);
IkReal x2380=(cj0*cj5*r01*r20*sj5);
IkReal x2381=(cj5*r10*r21*sj0*sj5);
IkReal x2382=(cj5*r11*r20*sj0*sj5);
IkReal x2383=cj5*cj5;
IkReal x2384=(cj0*r00*r20*x2383);
IkReal x2385=(cj0*r01*r21*x2383);
IkReal x2386=(r10*r20*sj0*x2383);
IkReal x2387=(r11*r21*sj0*x2383);
IkReal x2388=(r21*sj3);
IkReal x2389=(r20*sj3);
IkReal x2390=((0.866025403784439)*r22);
j4eval[0]=((((-3.0)*x2380))+(((-3.0)*x2366))+(((3.0)*x2386))+((x2370*x2371))+(((3.0)*x2384))+(((-3.0)*x2382))+(((1.73205080756888)*x2376))+(((-3.0)*x2385))+(((-3.0)*x2369))+(((-1.0)*x2370*x2377))+(((-1.0)*x2365))+(((-1.73205080756888)*x2374))+(((1.73205080756888)*x2372))+(((-3.0)*x2381))+(((-3.0)*x2379))+(((-4.0)*x2364))+((x2370*x2375))+(((-1.73205080756888)*x2378))+(((-1.0)*x2368))+(((-3.0)*x2387))+(((-4.0)*x2367))+(((-1.0)*x2370*x2373)));
j4eval[1]=((IKabs((((sj5*x2389))+((cj5*x2388)))))+(((0.5)*(IKabs((((sj3*x2370))+(((-1.0)*cj5*x2389))+((sj5*x2388))))))));
j4eval[2]=IKsign(((((1.5)*x2386))+(((-0.5)*x2368))+(((-1.5)*x2380))+(((1.5)*x2384))+(((-1.5)*x2366))+(((-1.0)*x2373*x2390))+(((-1.5)*x2369))+(((-1.5)*x2379))+((x2375*x2390))+(((-1.5)*x2381))+(((-2.0)*x2367))+(((-1.5)*x2387))+(((-2.0)*x2364))+(((-0.5)*x2365))+(((-1.5)*x2382))+(((0.866025403784439)*x2372))+(((-1.5)*x2385))+(((-1.0)*x2377*x2390))+(((0.866025403784439)*x2376))+(((-0.866025403784439)*x2374))+(((-0.866025403784439)*x2378))+((x2371*x2390))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x2391=(r02*sj0);
IkReal x2392=(cj0*r12);
IkReal x2393=(cj0*cj5*r10);
IkReal x2394=(cj0*r11*sj5);
IkReal x2395=(cj5*r00*sj0);
IkReal x2396=(r01*sj0*sj5);
j4eval[0]=((((-1.73205080756888)*x2393))+(((-1.0)*x2392))+x2391+(((-1.73205080756888)*x2396))+(((1.73205080756888)*x2395))+(((1.73205080756888)*x2394)));
j4eval[1]=IKsign(((((-0.866025403784439)*x2396))+(((-0.5)*x2392))+(((-0.866025403784439)*x2393))+(((0.5)*x2391))+(((0.866025403784439)*x2394))+(((0.866025403784439)*x2395))));
j4eval[2]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x2397=r20*r20;
IkReal x2398=r21*r21;
IkReal x2399=r22*r22;
IkReal x2400=(cj5*r20*r22);
IkReal x2401=(r21*r22*sj5);
IkReal x2402=(cj5*r20*r21*sj5);
IkReal x2403=cj5*cj5;
IkReal x2404=(x2397*x2403);
IkReal x2405=(x2398*x2403);
j4eval[0]=((((-3.46410161513775)*x2401))+(((3.0)*x2404))+(((-1.0)*x2398))+(((3.46410161513775)*x2400))+(((-3.0)*x2405))+(((-4.0)*x2397))+(((-6.0)*x2402))+(((-3.0)*x2399)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-1.5)*x2399))+(((-0.5)*x2398))+(((1.5)*x2404))+(((-3.0)*x2402))+(((-1.73205080756888)*x2401))+(((1.73205080756888)*x2400))+(((-2.0)*x2397))+(((-1.5)*x2405))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x2406=((1.73205080756888)*cj0);
IkReal x2407=((1.73205080756888)*sj0);
IkReal x2408=((((-1.0)*r01*sj5*x2407))+(((-1.0)*cj5*r10*x2406))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((cj5*r00*x2407))+((r11*sj5*x2406)));
j4eval[0]=x2408;
j4eval[1]=IKsign(x2408);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2409=((1.73205080756888)*cj0*cj5);
IkReal x2410=((1.73205080756888)*cj0*sj5);
IkReal x2411=((1.73205080756888)*cj5*sj0);
IkReal x2412=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x2413 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r01))*((cj0*sj5))))+(((-0.866025403784439)*cj5*r10*sj0))+(((0.866025403784439)*r11*sj0*sj5))+(((-0.866025403784439)*cj0*cj5*r00))+(((1.5)*cj0*r02))+(((1.5)*r12*sj0)))),IkReal(((((-1.0)*r10*x2412))+(((-1.0)*r01*x2409))+(((-1.0)*r00*x2410))+(((-1.0)*r11*x2411)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2413.valid){
continue;
}
CheckValue<IkReal> x2414=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2412))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*x2410))+((r00*x2411))+(((-1.0)*r10*x2409)))),-1);
if(!x2414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2413.value)+(((1.5707963267949)*(x2414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2415=IKsin(j4);
IkReal x2416=((0.866025403784439)*r22);
IkReal x2417=((0.5)*r20);
IkReal x2418=(cj5*x2415);
IkReal x2419=IKcos(j4);
IkReal x2420=((1.0)*cj5*x2419);
IkReal x2421=(r20*sj5);
IkReal x2422=((0.5)*r21*sj5);
IkReal x2423=((0.866025403784439)*cj0*r02);
IkReal x2424=((0.866025403784439)*r12*sj0);
IkReal x2425=(cj0*cj5*x2415);
IkReal x2426=(cj0*sj5*x2415);
IkReal x2427=(cj5*sj0*x2415);
IkReal x2428=(sj0*sj5*x2415);
IkReal x2429=((0.5)*r00);
IkReal x2430=(cj0*cj5*x2419);
IkReal x2431=((0.5)*r01);
IkReal x2432=(cj0*sj5*x2419);
IkReal x2433=((0.5)*r10);
IkReal x2434=(cj5*sj0*x2419);
IkReal x2435=((0.5)*r11);
IkReal x2436=(sj0*sj5*x2419);
IkReal x2437=((0.866025403784439)*cj0*r12);
IkReal x2438=((0.866025403784439)*r02*sj0);
IkReal x2439=(r00*sj0*sj5);
IkReal x2440=((1.0)*cj0*cj5*x2419);
IkReal x2441=((1.0)*cj0*sj5*x2419);
evalcond[0]=((((-1.0)*r21*x2420))+(((-1.0)*x2417*x2418))+((x2415*x2422))+(((-1.0)*x2419*x2421))+((x2415*x2416)));
evalcond[1]=((0.866025403784439)+((x2415*x2421))+(((-1.0)*cj5*x2417*x2419))+((x2416*x2419))+((x2419*x2422))+((r21*x2418)));
evalcond[2]=(((r11*x2427))+(((-1.0)*x2433*x2434))+(((-1.0)*x2429*x2430))+((x2435*x2436))+((x2419*x2423))+((r00*x2426))+((r01*x2425))+((x2419*x2424))+((x2431*x2432))+((r10*x2428)));
evalcond[3]=(((r01*x2434))+(((-1.0)*x2425*x2433))+((x2415*x2437))+(((-1.0)*x2428*x2431))+(((-1.0)*x2415*x2438))+((x2426*x2435))+((x2427*x2429))+(((-1.0)*r11*x2440))+(((-1.0)*r10*x2441))+((x2419*x2439)));
evalcond[4]=((0.5)+(((-1.0)*r01*x2427))+((r10*x2426))+((r11*x2425))+((x2419*x2437))+((x2432*x2435))+(((-1.0)*x2430*x2433))+(((-1.0)*x2431*x2436))+(((-1.0)*x2419*x2438))+((x2429*x2434))+(((-1.0)*x2415*x2439)));
evalcond[5]=((1.0)+(((-1.0)*r00*x2441))+(((-1.0)*x2427*x2433))+(((-1.0)*r01*x2440))+((x2415*x2423))+((x2426*x2431))+(((-1.0)*r10*sj0*sj5*x2419))+(((-1.0)*x2425*x2429))+(((-1.0)*r11*sj0*x2420))+((x2428*x2435))+((x2415*x2424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2442=((1.73205080756888)*r21);
IkReal x2443=(cj5*r20);
IkReal x2444=(r21*sj5);
IkReal x2445=r20*r20;
IkReal x2446=r21*r21;
IkReal x2447=((1.5)*(cj5*cj5));
CheckValue<IkReal> x2448=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2445))+(((-3.0)*cj5*r20*x2444))+(((1.73205080756888)*r22*x2443))+(((-1.0)*r22*sj5*x2442))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*x2446*x2447))+((x2445*x2447))+(((-0.5)*x2446)))),-1);
if(!x2448.valid){
continue;
}
CheckValue<IkReal> x2449 = IKatan2WithCheck(IkReal(((((1.73205080756888)*r20*sj5))+((cj5*x2442)))),IkReal(((((-0.866025403784439)*x2443))+(((0.866025403784439)*x2444))+(((1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2448.value)))+(x2449.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2450=IKsin(j4);
IkReal x2451=((0.866025403784439)*r22);
IkReal x2452=((0.5)*r20);
IkReal x2453=(cj5*x2450);
IkReal x2454=IKcos(j4);
IkReal x2455=((1.0)*cj5*x2454);
IkReal x2456=(r20*sj5);
IkReal x2457=((0.5)*r21*sj5);
IkReal x2458=((0.866025403784439)*cj0*r02);
IkReal x2459=((0.866025403784439)*r12*sj0);
IkReal x2460=(cj0*cj5*x2450);
IkReal x2461=(cj0*sj5*x2450);
IkReal x2462=(cj5*sj0*x2450);
IkReal x2463=(sj0*sj5*x2450);
IkReal x2464=((0.5)*r00);
IkReal x2465=(cj0*cj5*x2454);
IkReal x2466=((0.5)*r01);
IkReal x2467=(cj0*sj5*x2454);
IkReal x2468=((0.5)*r10);
IkReal x2469=(cj5*sj0*x2454);
IkReal x2470=((0.5)*r11);
IkReal x2471=(sj0*sj5*x2454);
IkReal x2472=((0.866025403784439)*cj0*r12);
IkReal x2473=((0.866025403784439)*r02*sj0);
IkReal x2474=(r00*sj0*sj5);
IkReal x2475=((1.0)*cj0*cj5*x2454);
IkReal x2476=((1.0)*cj0*sj5*x2454);
evalcond[0]=((((-1.0)*x2452*x2453))+(((-1.0)*r21*x2455))+((x2450*x2457))+((x2450*x2451))+(((-1.0)*x2454*x2456)));
evalcond[1]=((0.866025403784439)+((x2454*x2457))+((x2451*x2454))+((r21*x2453))+((x2450*x2456))+(((-1.0)*cj5*x2452*x2454)));
evalcond[2]=(((r01*x2460))+((r11*x2462))+((x2470*x2471))+((x2466*x2467))+(((-1.0)*x2464*x2465))+((x2454*x2458))+((x2454*x2459))+((r10*x2463))+(((-1.0)*x2468*x2469))+((r00*x2461)));
evalcond[3]=((((-1.0)*r10*x2476))+((x2450*x2472))+((x2461*x2470))+(((-1.0)*x2463*x2466))+(((-1.0)*x2460*x2468))+((x2454*x2474))+((r01*x2469))+((x2462*x2464))+(((-1.0)*x2450*x2473))+(((-1.0)*r11*x2475)));
evalcond[4]=((0.5)+(((-1.0)*x2450*x2474))+((x2454*x2472))+(((-1.0)*r01*x2462))+((r11*x2460))+(((-1.0)*x2465*x2468))+(((-1.0)*x2454*x2473))+((x2467*x2470))+(((-1.0)*x2466*x2471))+((x2464*x2469))+((r10*x2461)));
evalcond[5]=((1.0)+((x2450*x2458))+((x2450*x2459))+(((-1.0)*r01*x2475))+(((-1.0)*r10*sj0*sj5*x2454))+((x2463*x2470))+(((-1.0)*r11*sj0*x2455))+((x2461*x2466))+(((-1.0)*x2460*x2464))+(((-1.0)*x2462*x2468))+(((-1.0)*r00*x2476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2477=((0.866025403784439)*cj0);
IkReal x2478=((0.866025403784439)*sj0);
CheckValue<IkReal> x2479 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2479.valid){
continue;
}
CheckValue<IkReal> x2480=IKPowWithIntegerCheck(IKsign((((cj5*r00*x2478))+(((-1.0)*(0.5)*cj0*r12))+((r11*sj5*x2477))+(((-1.0)*cj5*r10*x2477))+(((0.5)*r02*sj0))+(((-1.0)*r01*sj5*x2478)))),-1);
if(!x2480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2479.value)+(((1.5707963267949)*(x2480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2481=IKsin(j4);
IkReal x2482=((0.866025403784439)*r22);
IkReal x2483=((0.5)*r20);
IkReal x2484=(cj5*x2481);
IkReal x2485=IKcos(j4);
IkReal x2486=((1.0)*cj5*x2485);
IkReal x2487=(r20*sj5);
IkReal x2488=((0.5)*r21*sj5);
IkReal x2489=((0.866025403784439)*cj0*r02);
IkReal x2490=((0.866025403784439)*r12*sj0);
IkReal x2491=(cj0*cj5*x2481);
IkReal x2492=(cj0*sj5*x2481);
IkReal x2493=(cj5*sj0*x2481);
IkReal x2494=(sj0*sj5*x2481);
IkReal x2495=((0.5)*r00);
IkReal x2496=(cj0*cj5*x2485);
IkReal x2497=((0.5)*r01);
IkReal x2498=(cj0*sj5*x2485);
IkReal x2499=((0.5)*r10);
IkReal x2500=(cj5*sj0*x2485);
IkReal x2501=((0.5)*r11);
IkReal x2502=(sj0*sj5*x2485);
IkReal x2503=((0.866025403784439)*cj0*r12);
IkReal x2504=((0.866025403784439)*r02*sj0);
IkReal x2505=(r00*sj0*sj5);
IkReal x2506=((1.0)*cj0*cj5*x2485);
IkReal x2507=((1.0)*cj0*sj5*x2485);
evalcond[0]=(((x2481*x2482))+(((-1.0)*r21*x2486))+(((-1.0)*x2483*x2484))+((x2481*x2488))+(((-1.0)*x2485*x2487)));
evalcond[1]=((0.866025403784439)+((r21*x2484))+((x2481*x2487))+(((-1.0)*cj5*x2483*x2485))+((x2485*x2488))+((x2482*x2485)));
evalcond[2]=(((r00*x2492))+((x2485*x2489))+((x2497*x2498))+((r10*x2494))+((x2501*x2502))+((r01*x2491))+(((-1.0)*x2499*x2500))+(((-1.0)*x2495*x2496))+((r11*x2493))+((x2485*x2490)));
evalcond[3]=(((x2481*x2503))+(((-1.0)*x2491*x2499))+(((-1.0)*x2494*x2497))+(((-1.0)*x2481*x2504))+(((-1.0)*r11*x2506))+((x2485*x2505))+((r01*x2500))+((x2493*x2495))+((x2492*x2501))+(((-1.0)*r10*x2507)));
evalcond[4]=((0.5)+(((-1.0)*x2497*x2502))+((r10*x2492))+(((-1.0)*x2485*x2504))+(((-1.0)*x2496*x2499))+(((-1.0)*r01*x2493))+((x2485*x2503))+((x2498*x2501))+(((-1.0)*x2481*x2505))+((x2495*x2500))+((r11*x2491)));
evalcond[5]=((1.0)+((x2492*x2497))+(((-1.0)*x2491*x2495))+(((-1.0)*r11*sj0*x2486))+(((-1.0)*r10*sj0*sj5*x2485))+((x2481*x2489))+(((-1.0)*x2493*x2499))+(((-1.0)*r00*x2507))+((x2494*x2501))+(((-1.0)*r01*x2506))+((x2481*x2490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2508=(r02*sj0);
IkReal x2509=(cj0*r12);
IkReal x2510=(cj0*cj5*r10);
IkReal x2511=(cj0*r11*sj5);
IkReal x2512=(cj5*r00*sj0);
IkReal x2513=(r01*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x2511))+(((-1.73205080756888)*x2513))+(((-1.0)*x2509))+x2508+(((1.73205080756888)*x2512))+(((-1.73205080756888)*x2510)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((-0.866025403784439)*x2513))+(((0.866025403784439)*x2512))+(((0.866025403784439)*x2511))+(((-0.5)*x2509))+(((0.5)*x2508))+(((-0.866025403784439)*x2510))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2514=r20*r20;
IkReal x2515=r21*r21;
IkReal x2516=r22*r22;
IkReal x2517=(cj5*r20*r22);
IkReal x2518=(r21*r22*sj5);
IkReal x2519=(cj5*r20*r21*sj5);
IkReal x2520=cj5*cj5;
IkReal x2521=(x2514*x2520);
IkReal x2522=(x2515*x2520);
j4eval[0]=((((-6.0)*x2519))+(((-3.46410161513775)*x2518))+(((-1.0)*x2515))+(((-3.0)*x2522))+(((3.0)*x2521))+(((-4.0)*x2514))+(((-3.0)*x2516))+(((3.46410161513775)*x2517)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-1.5)*x2516))+(((-1.73205080756888)*x2518))+(((1.73205080756888)*x2517))+(((-3.0)*x2519))+(((-2.0)*x2514))+(((-1.5)*x2522))+(((-0.5)*x2515))+(((1.5)*x2521))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2523=((1.73205080756888)*cj0);
IkReal x2524=((1.73205080756888)*sj0);
IkReal x2525=(((r11*sj5*x2523))+(((-1.0)*r01*sj5*x2524))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((cj5*r00*x2524))+(((-1.0)*cj5*r10*x2523)));
j4eval[0]=x2525;
j4eval[1]=IKsign(x2525);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2526=((1.73205080756888)*cj0*cj5);
IkReal x2527=((1.73205080756888)*cj0*sj5);
IkReal x2528=((1.73205080756888)*cj5*sj0);
IkReal x2529=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x2530 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r01))*((cj0*sj5))))+(((-0.866025403784439)*cj5*r10*sj0))+(((0.866025403784439)*r11*sj0*sj5))+(((-0.866025403784439)*cj0*cj5*r00))+(((1.5)*cj0*r02))+(((1.5)*r12*sj0)))),IkReal(((((-1.0)*r11*x2528))+(((-1.0)*r00*x2527))+(((-1.0)*r10*x2529))+(((-1.0)*r01*x2526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2530.valid){
continue;
}
CheckValue<IkReal> x2531=IKPowWithIntegerCheck(IKsign((((r00*x2528))+(((-1.0)*r10*x2526))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*x2527))+(((-1.0)*r01*x2529)))),-1);
if(!x2531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2530.value)+(((1.5707963267949)*(x2531.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2532=IKsin(j4);
IkReal x2533=((0.866025403784439)*r22);
IkReal x2534=((0.5)*r20);
IkReal x2535=(cj5*x2532);
IkReal x2536=IKcos(j4);
IkReal x2537=((1.0)*cj5*x2536);
IkReal x2538=(r20*sj5);
IkReal x2539=((0.5)*r21*sj5);
IkReal x2540=((0.866025403784439)*cj0*r02);
IkReal x2541=((0.866025403784439)*r12*sj0);
IkReal x2542=(cj0*cj5*x2532);
IkReal x2543=(cj0*sj5*x2532);
IkReal x2544=(cj5*sj0*x2532);
IkReal x2545=(sj0*sj5*x2532);
IkReal x2546=((0.5)*r00);
IkReal x2547=(cj0*cj5*x2536);
IkReal x2548=((0.5)*r01);
IkReal x2549=(cj0*sj5*x2536);
IkReal x2550=((0.5)*r10);
IkReal x2551=(cj5*sj0*x2536);
IkReal x2552=((0.5)*r11);
IkReal x2553=(sj0*sj5*x2536);
IkReal x2554=((0.866025403784439)*cj0*r12);
IkReal x2555=((0.866025403784439)*r02*sj0);
IkReal x2556=(r00*sj0*sj5);
IkReal x2557=((1.0)*cj0*cj5*x2536);
IkReal x2558=((1.0)*cj0*sj5*x2536);
evalcond[0]=(((x2532*x2539))+(((-1.0)*x2536*x2538))+((x2532*x2533))+(((-1.0)*x2534*x2535))+(((-1.0)*r21*x2537)));
evalcond[1]=((0.866025403784439)+((x2532*x2538))+(((-1.0)*cj5*x2534*x2536))+((x2533*x2536))+((r21*x2535))+((x2536*x2539)));
evalcond[2]=(((x2536*x2541))+((r11*x2544))+((r10*x2545))+((x2536*x2540))+((r00*x2543))+((x2552*x2553))+(((-1.0)*x2546*x2547))+((x2548*x2549))+((r01*x2542))+(((-1.0)*x2550*x2551)));
evalcond[3]=((((-1.0)*r11*x2557))+(((-1.0)*x2532*x2555))+((x2544*x2546))+(((-1.0)*x2545*x2548))+(((-1.0)*r10*x2558))+((x2532*x2554))+((x2536*x2556))+(((-1.0)*x2542*x2550))+((r01*x2551))+((x2543*x2552)));
evalcond[4]=((-0.5)+(((-1.0)*x2547*x2550))+((x2549*x2552))+(((-1.0)*x2536*x2555))+(((-1.0)*x2548*x2553))+((x2536*x2554))+(((-1.0)*r01*x2544))+(((-1.0)*x2532*x2556))+((r10*x2543))+((x2546*x2551))+((r11*x2542)));
evalcond[5]=((-1.0)+(((-1.0)*x2542*x2546))+(((-1.0)*r01*x2557))+(((-1.0)*r11*sj0*x2537))+(((-1.0)*x2544*x2550))+((x2543*x2548))+(((-1.0)*r00*x2558))+(((-1.0)*r10*sj0*sj5*x2536))+((x2532*x2540))+((x2532*x2541))+((x2545*x2552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2559=((1.73205080756888)*r21);
IkReal x2560=(cj5*r20);
IkReal x2561=(r21*sj5);
IkReal x2562=r20*r20;
IkReal x2563=r21*r21;
IkReal x2564=((1.5)*(cj5*cj5));
CheckValue<IkReal> x2565=IKPowWithIntegerCheck(IKsign(((((1.73205080756888)*r22*x2560))+(((-2.0)*x2562))+(((-3.0)*cj5*r20*x2561))+(((-1.0)*x2563*x2564))+(((-0.5)*x2563))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*r22*sj5*x2559))+((x2562*x2564)))),-1);
if(!x2565.valid){
continue;
}
CheckValue<IkReal> x2566 = IKatan2WithCheck(IkReal(((((1.73205080756888)*r20*sj5))+((cj5*x2559)))),IkReal(((((0.866025403784439)*x2561))+(((-0.866025403784439)*x2560))+(((1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2565.value)))+(x2566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2567=IKsin(j4);
IkReal x2568=((0.866025403784439)*r22);
IkReal x2569=((0.5)*r20);
IkReal x2570=(cj5*x2567);
IkReal x2571=IKcos(j4);
IkReal x2572=((1.0)*cj5*x2571);
IkReal x2573=(r20*sj5);
IkReal x2574=((0.5)*r21*sj5);
IkReal x2575=((0.866025403784439)*cj0*r02);
IkReal x2576=((0.866025403784439)*r12*sj0);
IkReal x2577=(cj0*cj5*x2567);
IkReal x2578=(cj0*sj5*x2567);
IkReal x2579=(cj5*sj0*x2567);
IkReal x2580=(sj0*sj5*x2567);
IkReal x2581=((0.5)*r00);
IkReal x2582=(cj0*cj5*x2571);
IkReal x2583=((0.5)*r01);
IkReal x2584=(cj0*sj5*x2571);
IkReal x2585=((0.5)*r10);
IkReal x2586=(cj5*sj0*x2571);
IkReal x2587=((0.5)*r11);
IkReal x2588=(sj0*sj5*x2571);
IkReal x2589=((0.866025403784439)*cj0*r12);
IkReal x2590=((0.866025403784439)*r02*sj0);
IkReal x2591=(r00*sj0*sj5);
IkReal x2592=((1.0)*cj0*cj5*x2571);
IkReal x2593=((1.0)*cj0*sj5*x2571);
evalcond[0]=((((-1.0)*x2569*x2570))+((x2567*x2568))+(((-1.0)*x2571*x2573))+((x2567*x2574))+(((-1.0)*r21*x2572)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x2569*x2571))+((x2571*x2574))+((x2568*x2571))+((x2567*x2573))+((r21*x2570)));
evalcond[2]=((((-1.0)*x2581*x2582))+((r11*x2579))+((r01*x2577))+((x2587*x2588))+((x2583*x2584))+(((-1.0)*x2585*x2586))+((r10*x2580))+((x2571*x2575))+((r00*x2578))+((x2571*x2576)));
evalcond[3]=(((x2567*x2589))+((x2579*x2581))+((x2571*x2591))+((r01*x2586))+(((-1.0)*x2567*x2590))+(((-1.0)*x2577*x2585))+((x2578*x2587))+(((-1.0)*x2580*x2583))+(((-1.0)*r11*x2592))+(((-1.0)*r10*x2593)));
evalcond[4]=((-0.5)+(((-1.0)*x2583*x2588))+(((-1.0)*x2567*x2591))+(((-1.0)*x2582*x2585))+((r10*x2578))+((x2584*x2587))+((r11*x2577))+((x2571*x2589))+(((-1.0)*x2571*x2590))+((x2581*x2586))+(((-1.0)*r01*x2579)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x2593))+(((-1.0)*r01*x2592))+(((-1.0)*x2577*x2581))+((x2567*x2575))+((x2578*x2583))+((x2580*x2587))+(((-1.0)*x2579*x2585))+(((-1.0)*r11*sj0*x2572))+(((-1.0)*r10*sj0*sj5*x2571))+((x2567*x2576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2594=((0.866025403784439)*cj0);
IkReal x2595=((0.866025403784439)*sj0);
CheckValue<IkReal> x2596 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2596.valid){
continue;
}
CheckValue<IkReal> x2597=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x2594))+((r11*sj5*x2594))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0))+((cj5*r00*x2595))+(((-1.0)*r01*sj5*x2595)))),-1);
if(!x2597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2596.value)+(((1.5707963267949)*(x2597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2598=IKsin(j4);
IkReal x2599=((0.866025403784439)*r22);
IkReal x2600=((0.5)*r20);
IkReal x2601=(cj5*x2598);
IkReal x2602=IKcos(j4);
IkReal x2603=((1.0)*cj5*x2602);
IkReal x2604=(r20*sj5);
IkReal x2605=((0.5)*r21*sj5);
IkReal x2606=((0.866025403784439)*cj0*r02);
IkReal x2607=((0.866025403784439)*r12*sj0);
IkReal x2608=(cj0*cj5*x2598);
IkReal x2609=(cj0*sj5*x2598);
IkReal x2610=(cj5*sj0*x2598);
IkReal x2611=(sj0*sj5*x2598);
IkReal x2612=((0.5)*r00);
IkReal x2613=(cj0*cj5*x2602);
IkReal x2614=((0.5)*r01);
IkReal x2615=(cj0*sj5*x2602);
IkReal x2616=((0.5)*r10);
IkReal x2617=(cj5*sj0*x2602);
IkReal x2618=((0.5)*r11);
IkReal x2619=(sj0*sj5*x2602);
IkReal x2620=((0.866025403784439)*cj0*r12);
IkReal x2621=((0.866025403784439)*r02*sj0);
IkReal x2622=(r00*sj0*sj5);
IkReal x2623=((1.0)*cj0*cj5*x2602);
IkReal x2624=((1.0)*cj0*sj5*x2602);
evalcond[0]=((((-1.0)*x2600*x2601))+(((-1.0)*r21*x2603))+((x2598*x2605))+(((-1.0)*x2602*x2604))+((x2598*x2599)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x2600*x2602))+((r21*x2601))+((x2602*x2605))+((x2598*x2604))+((x2599*x2602)));
evalcond[2]=(((x2602*x2607))+((r10*x2611))+((r11*x2610))+(((-1.0)*x2612*x2613))+((x2602*x2606))+((x2618*x2619))+(((-1.0)*x2616*x2617))+((r01*x2608))+((r00*x2609))+((x2614*x2615)));
evalcond[3]=((((-1.0)*x2598*x2621))+(((-1.0)*x2611*x2614))+((x2598*x2620))+(((-1.0)*x2608*x2616))+((x2609*x2618))+((r01*x2617))+(((-1.0)*r10*x2624))+((x2602*x2622))+((x2610*x2612))+(((-1.0)*r11*x2623)));
evalcond[4]=((-0.5)+(((-1.0)*x2613*x2616))+(((-1.0)*r01*x2610))+(((-1.0)*x2598*x2622))+((x2615*x2618))+((x2602*x2620))+((r11*x2608))+((x2612*x2617))+((r10*x2609))+(((-1.0)*x2614*x2619))+(((-1.0)*x2602*x2621)));
evalcond[5]=((-1.0)+(((-1.0)*r11*sj0*x2603))+((x2598*x2607))+(((-1.0)*r01*x2623))+((x2609*x2614))+(((-1.0)*r10*sj0*sj5*x2602))+(((-1.0)*r00*x2624))+((x2611*x2618))+(((-1.0)*x2608*x2612))+(((-1.0)*x2610*x2616))+((x2598*x2606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2625=(cj5*sj3);
IkReal x2626=(sj3*sj5);
IkReal x2627=((0.5)*r21);
IkReal x2628=((2.0)*r20);
IkReal x2629=(cj0*r00);
IkReal x2630=(cj0*r01);
IkReal x2631=((1.5)*r22);
IkReal x2632=(r10*sj0);
IkReal x2633=(r11*sj0);
IkReal x2634=((0.866025403784439)*cj5*r22);
IkReal x2635=(cj5*r20);
IkReal x2636=((0.866025403784439)*cj0*r02);
IkReal x2637=((0.866025403784439)*r22*sj5);
IkReal x2638=(r21*sj5);
IkReal x2639=((0.866025403784439)*r12*sj0);
IkReal x2640=((1.5)*cj5*r21*sj5);
IkReal x2641=((1.5)*cj5*r20*sj5);
IkReal x2642=cj5*cj5;
IkReal x2643=((1.5)*r20*x2642);
IkReal x2644=((1.5)*r21*x2642);
CheckValue<IkReal> x2645=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2633*x2641))+((x2629*x2634))+(((-1.0)*x2632*x2640))+(((-1.0)*x2630*x2641))+(((-1.0)*x2627*x2630))+((x2635*x2636))+((x2632*x2634))+(((-1.0)*x2638*x2639))+(((-1.0)*x2628*x2632))+(((-1.0)*x2633*x2637))+(((-1.0)*x2630*x2644))+((x2635*x2639))+((x2629*x2643))+(((-1.0)*r12*sj0*x2631))+((x2632*x2643))+(((-1.0)*x2633*x2644))+(((-1.0)*x2628*x2629))+(((-1.0)*cj0*r02*x2631))+(((-1.0)*x2627*x2633))+(((-1.0)*x2629*x2640))+(((-1.0)*x2636*x2638))+(((-1.0)*x2630*x2637)))),-1);
if(!x2645.valid){
continue;
}
CheckValue<IkReal> x2646 = IKatan2WithCheck(IkReal((((r21*x2625))+((r20*x2626)))),IkReal((((sj3*(((0.866025403784439)*r22))))+((x2626*x2627))+(((-0.5)*r20*x2625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2645.value)))+(x2646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2647=IKsin(j4);
IkReal x2648=((0.866025403784439)*r22);
IkReal x2649=((0.5)*r20);
IkReal x2650=(cj5*x2647);
IkReal x2651=IKcos(j4);
IkReal x2652=((1.0)*cj5*x2651);
IkReal x2653=(r20*sj5);
IkReal x2654=((0.5)*r21*sj5);
IkReal x2655=((0.866025403784439)*cj0*r02);
IkReal x2656=((0.866025403784439)*r12*sj0);
IkReal x2657=(cj0*cj5*x2647);
IkReal x2658=(cj0*sj5*x2647);
IkReal x2659=(cj5*sj0*x2647);
IkReal x2660=(sj0*sj5*x2647);
IkReal x2661=((0.5)*r00);
IkReal x2662=(cj0*cj5*x2651);
IkReal x2663=((0.5)*r01);
IkReal x2664=(cj0*sj5*x2651);
IkReal x2665=((0.5)*r10);
IkReal x2666=(cj5*sj0*x2651);
IkReal x2667=((0.5)*r11);
IkReal x2668=(sj0*sj5*x2651);
IkReal x2669=((0.866025403784439)*cj0*r12);
IkReal x2670=((0.866025403784439)*r02*sj0);
IkReal x2671=(r00*sj0*sj5);
IkReal x2672=((1.0)*cj0*cj5*x2651);
IkReal x2673=((1.0)*cj0*sj5*x2651);
evalcond[0]=((((-1.0)*x2649*x2650))+((x2647*x2648))+((x2647*x2654))+(((-1.0)*x2651*x2653))+(((-1.0)*r21*x2652)));
evalcond[1]=((0.866025403784439)+((x2648*x2651))+((r21*x2650))+((x2651*x2654))+((x2647*x2653))+(((-1.0)*cj5*x2649*x2651)));
evalcond[2]=(((r10*x2660))+(((0.5)*sj3))+((x2651*x2656))+((r00*x2658))+(((-1.0)*x2661*x2662))+((x2663*x2664))+((r11*x2659))+(((-1.0)*x2665*x2666))+((x2667*x2668))+((r01*x2657))+((x2651*x2655)));
evalcond[3]=(((x2651*x2669))+((x2661*x2666))+(((-1.0)*x2662*x2665))+((r11*x2657))+(((-1.0)*x2651*x2670))+((x2664*x2667))+(((0.5)*cj3))+(((-1.0)*x2647*x2671))+(((-1.0)*x2663*x2668))+(((-1.0)*r01*x2659))+((r10*x2658)));
evalcond[4]=((((-1.0)*r11*x2672))+((x2658*x2667))+((x2659*x2661))+(((-1.0)*x2647*x2670))+(((-1.0)*x2657*x2665))+((x2647*x2669))+((r01*x2666))+(((-1.0)*x2660*x2663))+(((-1.0)*(1.0)*sj3))+((x2651*x2671))+(((-1.0)*r10*x2673)));
evalcond[5]=((((-1.0)*x2657*x2661))+(((-1.0)*r00*x2673))+(((-1.0)*r11*sj0*x2652))+((x2658*x2663))+(((-1.0)*r01*x2672))+(((-1.0)*x2659*x2665))+((x2660*x2667))+cj3+(((-1.0)*r10*sj0*sj5*x2651))+((x2647*x2655))+((x2647*x2656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2674=((1.73205080756888)*r21);
IkReal x2675=(cj5*r20);
IkReal x2676=(r21*sj5);
IkReal x2677=r20*r20;
IkReal x2678=r21*r21;
IkReal x2679=((1.5)*(cj5*cj5));
CheckValue<IkReal> x2680 = IKatan2WithCheck(IkReal(((((1.73205080756888)*r20*sj5))+((cj5*x2674)))),IkReal(((((-0.866025403784439)*x2675))+(((1.5)*r22))+(((0.866025403784439)*x2676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2680.valid){
continue;
}
CheckValue<IkReal> x2681=IKPowWithIntegerCheck(IKsign(((((-0.5)*x2678))+(((-3.0)*cj5*r20*x2676))+(((-1.0)*r22*sj5*x2674))+(((-1.0)*x2678*x2679))+((x2677*x2679))+(((1.73205080756888)*r22*x2675))+(((-1.0)*(1.5)*(r22*r22)))+(((-2.0)*x2677)))),-1);
if(!x2681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2680.value)+(((1.5707963267949)*(x2681.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2682=IKsin(j4);
IkReal x2683=((0.866025403784439)*r22);
IkReal x2684=((0.5)*r20);
IkReal x2685=(cj5*x2682);
IkReal x2686=IKcos(j4);
IkReal x2687=((1.0)*cj5*x2686);
IkReal x2688=(r20*sj5);
IkReal x2689=((0.5)*r21*sj5);
IkReal x2690=((0.866025403784439)*cj0*r02);
IkReal x2691=((0.866025403784439)*r12*sj0);
IkReal x2692=(cj0*cj5*x2682);
IkReal x2693=(cj0*sj5*x2682);
IkReal x2694=(cj5*sj0*x2682);
IkReal x2695=(sj0*sj5*x2682);
IkReal x2696=((0.5)*r00);
IkReal x2697=(cj0*cj5*x2686);
IkReal x2698=((0.5)*r01);
IkReal x2699=(cj0*sj5*x2686);
IkReal x2700=((0.5)*r10);
IkReal x2701=(cj5*sj0*x2686);
IkReal x2702=((0.5)*r11);
IkReal x2703=(sj0*sj5*x2686);
IkReal x2704=((0.866025403784439)*cj0*r12);
IkReal x2705=((0.866025403784439)*r02*sj0);
IkReal x2706=(r00*sj0*sj5);
IkReal x2707=((1.0)*cj0*cj5*x2686);
IkReal x2708=((1.0)*cj0*sj5*x2686);
evalcond[0]=(((x2682*x2689))+((x2682*x2683))+(((-1.0)*x2684*x2685))+(((-1.0)*r21*x2687))+(((-1.0)*x2686*x2688)));
evalcond[1]=((0.866025403784439)+((x2683*x2686))+((x2686*x2689))+((r21*x2685))+((x2682*x2688))+(((-1.0)*cj5*x2684*x2686)));
evalcond[2]=(((x2686*x2691))+(((-1.0)*x2700*x2701))+((r11*x2694))+(((0.5)*sj3))+((x2698*x2699))+((x2686*x2690))+((r00*x2693))+((r01*x2692))+(((-1.0)*x2696*x2697))+((r10*x2695))+((x2702*x2703)));
evalcond[3]=((((-1.0)*x2686*x2705))+(((-1.0)*x2697*x2700))+((x2686*x2704))+(((-1.0)*r01*x2694))+((x2699*x2702))+((x2696*x2701))+(((-1.0)*x2682*x2706))+((r10*x2693))+((r11*x2692))+(((0.5)*cj3))+(((-1.0)*x2698*x2703)));
evalcond[4]=((((-1.0)*r11*x2707))+(((-1.0)*x2695*x2698))+((x2682*x2704))+((r01*x2701))+(((-1.0)*r10*x2708))+(((-1.0)*x2682*x2705))+((x2693*x2702))+((x2686*x2706))+(((-1.0)*(1.0)*sj3))+((x2694*x2696))+(((-1.0)*x2692*x2700)));
evalcond[5]=(((x2695*x2702))+(((-1.0)*x2694*x2700))+((x2693*x2698))+(((-1.0)*r10*sj0*sj5*x2686))+(((-1.0)*r00*x2708))+cj3+(((-1.0)*x2692*x2696))+((x2682*x2690))+(((-1.0)*r01*x2707))+((x2682*x2691))+(((-1.0)*r11*sj0*x2687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2709=(cj5*sj3);
IkReal x2710=(sj3*sj5);
IkReal x2711=((0.866025403784439)*cj0);
IkReal x2712=((0.866025403784439)*sj0);
CheckValue<IkReal> x2713=IKPowWithIntegerCheck(IKsign((((cj5*r10*x2712))+(((0.5)*r12*sj0))+((cj5*r00*x2711))+(((-1.0)*r01*sj5*x2711))+(((0.5)*cj0*r02))+(((-1.0)*r11*sj5*x2712)))),-1);
if(!x2713.valid){
continue;
}
CheckValue<IkReal> x2714 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2709))+(((-1.0)*r20*x2710)))),IkReal(((((-0.5)*r21*x2710))+(((-1.0)*(0.866025403784439)*r22*sj3))+(((0.5)*r20*x2709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2713.value)))+(x2714.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2715=IKsin(j4);
IkReal x2716=((0.866025403784439)*r22);
IkReal x2717=((0.5)*r20);
IkReal x2718=(cj5*x2715);
IkReal x2719=IKcos(j4);
IkReal x2720=((1.0)*cj5*x2719);
IkReal x2721=(r20*sj5);
IkReal x2722=((0.5)*r21*sj5);
IkReal x2723=((0.866025403784439)*cj0*r02);
IkReal x2724=((0.866025403784439)*r12*sj0);
IkReal x2725=(cj0*cj5*x2715);
IkReal x2726=(cj0*sj5*x2715);
IkReal x2727=(cj5*sj0*x2715);
IkReal x2728=(sj0*sj5*x2715);
IkReal x2729=((0.5)*r00);
IkReal x2730=(cj0*cj5*x2719);
IkReal x2731=((0.5)*r01);
IkReal x2732=(cj0*sj5*x2719);
IkReal x2733=((0.5)*r10);
IkReal x2734=(cj5*sj0*x2719);
IkReal x2735=((0.5)*r11);
IkReal x2736=(sj0*sj5*x2719);
IkReal x2737=((0.866025403784439)*cj0*r12);
IkReal x2738=((0.866025403784439)*r02*sj0);
IkReal x2739=(r00*sj0*sj5);
IkReal x2740=((1.0)*cj0*cj5*x2719);
IkReal x2741=((1.0)*cj0*sj5*x2719);
evalcond[0]=((((-1.0)*x2717*x2718))+((x2715*x2716))+(((-1.0)*r21*x2720))+((x2715*x2722))+(((-1.0)*x2719*x2721)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x2717*x2719))+((x2716*x2719))+((x2715*x2721))+((x2719*x2722))+((r21*x2718)));
evalcond[2]=(((r01*x2725))+((r10*x2728))+((r00*x2726))+((x2735*x2736))+(((0.5)*sj3))+((x2719*x2724))+(((-1.0)*x2729*x2730))+(((-1.0)*x2733*x2734))+((x2719*x2723))+((r11*x2727))+((x2731*x2732)));
evalcond[3]=((((-1.0)*x2731*x2736))+(((-1.0)*x2719*x2738))+((r11*x2725))+(((-1.0)*x2715*x2739))+((r10*x2726))+((x2719*x2737))+((x2729*x2734))+(((-1.0)*r01*x2727))+((x2732*x2735))+(((0.5)*cj3))+(((-1.0)*x2730*x2733)));
evalcond[4]=((((-1.0)*r10*x2741))+(((-1.0)*x2715*x2738))+((x2726*x2735))+((r01*x2734))+(((-1.0)*x2725*x2733))+((x2719*x2739))+(((-1.0)*x2728*x2731))+((x2727*x2729))+((x2715*x2737))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r11*x2740)));
evalcond[5]=((((-1.0)*r00*x2741))+cj3+((x2726*x2731))+(((-1.0)*x2725*x2729))+((x2715*x2723))+(((-1.0)*r01*x2740))+(((-1.0)*x2727*x2733))+((x2715*x2724))+(((-1.0)*r11*sj0*x2720))+(((-1.0)*r10*sj0*sj5*x2719))+((x2728*x2735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2742=((0.577350269189626)*cj0);
IkReal x2743=((0.577350269189626)*sj0);
IkReal x2744=(r01*sj5);
IkReal x2745=(r11*sj5);
IkReal x2746=((1.0)*r00);
IkReal x2747=(cj0*cj5);
IkReal x2748=(cj5*sj0);
if( IKabs(((((-1.0)*r12*x2743))+((sj0*x2745))+(((-1.0)*x2746*x2747))+((cj0*x2744))+(((-1.0)*r02*x2742))+(((-1.0)*r10*x2748)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x2743))+((r10*x2747))+((r12*x2742))+(((-1.0)*cj0*x2745))+((sj0*x2744))+(((-1.0)*x2746*x2748)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x2743))+((sj0*x2745))+(((-1.0)*x2746*x2747))+((cj0*x2744))+(((-1.0)*r02*x2742))+(((-1.0)*r10*x2748))))+IKsqr(((((-1.0)*r02*x2743))+((r10*x2747))+((r12*x2742))+(((-1.0)*cj0*x2745))+((sj0*x2744))+(((-1.0)*x2746*x2748))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r12*x2743))+((sj0*x2745))+(((-1.0)*x2746*x2747))+((cj0*x2744))+(((-1.0)*r02*x2742))+(((-1.0)*r10*x2748))), ((((-1.0)*r02*x2743))+((r10*x2747))+((r12*x2742))+(((-1.0)*cj0*x2745))+((sj0*x2744))+(((-1.0)*x2746*x2748))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x2749=((0.5)*cj0);
IkReal x2750=((0.5)*sj0);
IkReal x2751=((0.866025403784439)*cj0*cj5);
IkReal x2752=((0.866025403784439)*cj0*sj5);
IkReal x2753=((0.866025403784439)*cj5*sj0);
IkReal x2754=((0.866025403784439)*sj0*sj5);
evalcond[0]=(((r00*x2753))+((r02*x2750))+(((-1.0)*r01*x2754))+(((-1.0)*r12*x2749))+(((-1.0)*r10*x2751))+(((0.866025403784439)*(IKcos(j3))))+((r11*x2752)));
evalcond[1]=((((-1.0)*(0.866025403784439)*(IKsin(j3))))+((r01*x2752))+(((-1.0)*r12*x2750))+(((-1.0)*r10*x2753))+((r11*x2754))+(((-1.0)*r00*x2751))+(((-1.0)*r02*x2749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2755=(cj0*r02);
IkReal x2756=(r12*sj0);
IkReal x2757=(cj0*cj5*r00);
IkReal x2758=(cj0*r01*sj5);
IkReal x2759=(cj5*r10*sj0);
IkReal x2760=(r11*sj0*sj5);
IkReal x2761=(cj5*sj3);
IkReal x2762=(sj3*sj5);
j4eval[0]=((((1.73205080756888)*x2759))+x2756+x2755+(((1.73205080756888)*x2757))+(((-1.73205080756888)*x2758))+(((-1.73205080756888)*x2760)));
j4eval[1]=((IKabs((((r21*x2761))+((r20*x2762)))))+(((0.5)*(IKabs((((r20*x2761))+(((-1.0)*r21*x2762))+(((-1.0)*(1.73205080756888)*r22*sj3))))))));
j4eval[2]=IKsign(((((0.866025403784439)*x2759))+(((0.5)*x2755))+(((0.866025403784439)*x2757))+(((0.5)*x2756))+(((-0.866025403784439)*x2758))+(((-0.866025403784439)*x2760))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2763=r20*r20;
IkReal x2764=r21*r21;
IkReal x2765=r22*r22;
IkReal x2766=(cj5*r20*r22);
IkReal x2767=(r21*r22*sj5);
IkReal x2768=(cj5*r20*r21*sj5);
IkReal x2769=cj5*cj5;
IkReal x2770=(x2763*x2769);
IkReal x2771=(x2764*x2769);
j4eval[0]=((((-1.0)*x2764))+(((3.0)*x2770))+(((-3.46410161513775)*x2767))+(((-3.0)*x2765))+(((-4.0)*x2763))+(((3.46410161513775)*x2766))+(((-6.0)*x2768))+(((-3.0)*x2771)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((1.73205080756888)*x2766))+(((-2.0)*x2763))+(((-1.5)*x2771))+(((1.5)*x2770))+(((-0.5)*x2764))+(((-1.73205080756888)*x2767))+(((-1.5)*x2765))+(((-3.0)*x2768))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2772=(r01*r21*sj0);
IkReal x2773=(cj0*r10*r20);
IkReal x2774=(cj0*r11*r21);
IkReal x2775=(cj0*r12*r22);
IkReal x2776=(r00*r20*sj0);
IkReal x2777=(r02*r22*sj0);
IkReal x2778=((1.73205080756888)*r22);
IkReal x2779=(cj0*cj5*r10);
IkReal x2780=(cj0*cj5*r12*r20);
IkReal x2781=(cj0*r11*sj5);
IkReal x2782=(cj0*r12*r21*sj5);
IkReal x2783=(cj5*r00*sj0);
IkReal x2784=(cj5*r02*r20*sj0);
IkReal x2785=(r01*sj0*sj5);
IkReal x2786=(r02*r21*sj0*sj5);
IkReal x2787=(cj0*cj5*r10*r21*sj5);
IkReal x2788=(cj0*cj5*r11*r20*sj5);
IkReal x2789=(cj5*r00*r21*sj0*sj5);
IkReal x2790=(cj5*r01*r20*sj0*sj5);
IkReal x2791=cj5*cj5;
IkReal x2792=(cj0*r10*r20*x2791);
IkReal x2793=(cj0*r11*r21*x2791);
IkReal x2794=(r00*r20*sj0*x2791);
IkReal x2795=(r01*r21*sj0*x2791);
IkReal x2796=((0.866025403784439)*r22);
IkReal x2797=(cj3*r21);
IkReal x2798=(cj3*r20);
j4eval[0]=((((3.0)*x2790))+(((1.73205080756888)*x2780))+(((-1.0)*x2774))+((x2778*x2785))+(((3.0)*x2795))+(((-1.0)*x2778*x2783))+(((4.0)*x2776))+(((3.0)*x2777))+(((-1.0)*x2778*x2781))+(((1.73205080756888)*x2786))+(((3.0)*x2789))+(((-4.0)*x2773))+((x2778*x2779))+(((-1.73205080756888)*x2782))+(((3.0)*x2792))+(((-3.0)*x2787))+(((-3.0)*x2788))+(((-1.73205080756888)*x2784))+(((-3.0)*x2794))+(((-3.0)*x2775))+(((-3.0)*x2793))+x2772);
j4eval[1]=IKsign(((((-1.5)*x2794))+((x2779*x2796))+(((1.5)*x2789))+((x2785*x2796))+(((0.866025403784439)*x2780))+(((-1.5)*x2793))+(((-1.0)*x2783*x2796))+(((1.5)*x2777))+(((-0.866025403784439)*x2784))+(((0.5)*x2772))+(((-1.5)*x2775))+(((-1.0)*x2781*x2796))+(((-0.866025403784439)*x2782))+(((-1.5)*x2787))+(((1.5)*x2795))+(((-2.0)*x2773))+(((2.0)*x2776))+(((-0.5)*x2774))+(((0.866025403784439)*x2786))+(((1.5)*x2792))+(((-1.5)*x2788))+(((1.5)*x2790))));
j4eval[2]=((IKabs((((sj5*x2798))+((cj5*x2797)))))+(((0.5)*(IKabs(((((-1.0)*cj5*x2798))+((cj3*x2778))+((sj5*x2797))))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2799=(cj0*r02);
IkReal x2800=(r12*sj0);
IkReal x2801=(cj0*cj5*r00);
IkReal x2802=(cj0*r01*sj5);
IkReal x2803=(cj5*r10*sj0);
IkReal x2804=(r11*sj0*sj5);
j4eval[0]=(x2799+(((1.73205080756888)*x2801))+x2800+(((1.73205080756888)*x2803))+(((-1.73205080756888)*x2802))+(((-1.73205080756888)*x2804)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.5)*x2800))+(((-0.866025403784439)*x2804))+(((0.866025403784439)*x2803))+(((-0.866025403784439)*x2802))+(((0.5)*x2799))+(((0.866025403784439)*x2801))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2805=r20*r20;
IkReal x2806=r21*r21;
IkReal x2807=r22*r22;
IkReal x2808=(cj5*r20*r22);
IkReal x2809=(r21*r22*sj5);
IkReal x2810=(cj5*r20*r21*sj5);
IkReal x2811=cj5*cj5;
IkReal x2812=(x2805*x2811);
IkReal x2813=(x2806*x2811);
j4eval[0]=((((-3.0)*x2807))+(((-3.46410161513775)*x2809))+(((3.0)*x2812))+(((-6.0)*x2810))+(((-3.0)*x2813))+(((3.46410161513775)*x2808))+(((-4.0)*x2805))+(((-1.0)*x2806)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-3.0)*x2810))+(((-0.5)*x2806))+(((-2.0)*x2805))+(((1.5)*x2812))+(((1.73205080756888)*x2808))+(((-1.73205080756888)*x2809))+(((-1.5)*x2807))+(((-1.5)*x2813))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2814=((1.73205080756888)*cj0);
IkReal x2815=((1.73205080756888)*sj0);
IkReal x2816=(((cj5*r00*x2815))+((r11*sj5*x2814))+(((-1.0)*cj5*r10*x2814))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*sj5*x2815)));
j4eval[0]=x2816;
j4eval[1]=IKsign(x2816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2817=((1.73205080756888)*cj0*cj5);
IkReal x2818=((1.73205080756888)*cj0*sj5);
IkReal x2819=((1.73205080756888)*cj5*sj0);
IkReal x2820=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x2821=IKPowWithIntegerCheck(IKsign((((r00*x2819))+(((-1.0)*r10*x2817))+(((-1.0)*r01*x2820))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*x2818)))),-1);
if(!x2821.valid){
continue;
}
CheckValue<IkReal> x2822 = IKatan2WithCheck(IkReal(((((-1.0)*(0.5)*cj5*r20))+(((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((0.866025403784439)*r22))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5))+(((0.5)*r21*sj5)))),IkReal((((r11*x2819))+(((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21))+((r01*x2817))+((r10*x2820))+((r00*x2818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2821.value)))+(x2822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2823=IKsin(j4);
IkReal x2824=((0.866025403784439)*r22);
IkReal x2825=((0.5)*r20);
IkReal x2826=(cj5*x2823);
IkReal x2827=IKcos(j4);
IkReal x2828=((1.0)*cj5*x2827);
IkReal x2829=(r20*sj5);
IkReal x2830=((0.5)*r21*sj5);
IkReal x2831=((0.866025403784439)*cj0*r02);
IkReal x2832=((0.866025403784439)*r12*sj0);
IkReal x2833=(cj0*cj5*x2823);
IkReal x2834=(cj0*sj5*x2823);
IkReal x2835=(cj5*sj0*x2823);
IkReal x2836=(sj0*sj5*x2823);
IkReal x2837=((0.5)*r00);
IkReal x2838=(cj0*cj5*x2827);
IkReal x2839=((0.5)*r01);
IkReal x2840=(cj0*sj5*x2827);
IkReal x2841=((0.5)*r10);
IkReal x2842=(cj5*sj0*x2827);
IkReal x2843=((0.5)*r11);
IkReal x2844=(sj0*sj5*x2827);
IkReal x2845=((0.866025403784439)*cj0*r12);
IkReal x2846=((0.866025403784439)*r02*sj0);
IkReal x2847=(r00*sj0*sj5);
IkReal x2848=((1.0)*cj0*cj5*x2827);
IkReal x2849=((1.0)*cj0*sj5*x2827);
evalcond[0]=((((-1.0)*x2825*x2826))+(((-1.0)*x2827*x2829))+(((-1.0)*r21*x2828))+((x2823*x2824))+((x2823*x2830)));
evalcond[1]=((-0.866025403784439)+((x2827*x2830))+((r21*x2826))+((x2823*x2829))+((x2824*x2827))+(((-1.0)*cj5*x2825*x2827)));
evalcond[2]=((-0.5)+((r11*x2835))+(((-1.0)*x2841*x2842))+((r10*x2836))+((r00*x2834))+((x2827*x2831))+((x2827*x2832))+(((-1.0)*x2837*x2838))+((x2839*x2840))+((x2843*x2844))+((r01*x2833)));
evalcond[3]=((((-1.0)*x2827*x2846))+(((-1.0)*x2839*x2844))+(((-1.0)*r01*x2835))+((r10*x2834))+(((-1.0)*x2823*x2847))+((x2837*x2842))+((x2827*x2845))+(((-1.0)*x2838*x2841))+((r11*x2833))+((x2840*x2843)));
evalcond[4]=((-1.0)+((r01*x2842))+((x2823*x2845))+((x2827*x2847))+(((-1.0)*x2833*x2841))+(((-1.0)*r10*x2849))+((x2834*x2843))+(((-1.0)*x2823*x2846))+(((-1.0)*r11*x2848))+((x2835*x2837))+(((-1.0)*x2836*x2839)));
evalcond[5]=((((-1.0)*x2833*x2837))+(((-1.0)*x2835*x2841))+(((-1.0)*r10*sj0*sj5*x2827))+((x2823*x2832))+(((-1.0)*r00*x2849))+((x2834*x2839))+((x2836*x2843))+((x2823*x2831))+(((-1.0)*r11*sj0*x2828))+(((-1.0)*r01*x2848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2850=((1.73205080756888)*r21);
IkReal x2851=(cj5*r20);
IkReal x2852=(r21*sj5);
IkReal x2853=r20*r20;
IkReal x2854=r21*r21;
IkReal x2855=((1.5)*(cj5*cj5));
CheckValue<IkReal> x2856=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2853))+(((-1.0)*r22*sj5*x2850))+(((-0.5)*x2854))+(((1.73205080756888)*r22*x2851))+(((-3.0)*cj5*r20*x2852))+(((-1.0)*x2854*x2855))+((x2853*x2855))+(((-1.0)*(1.5)*(r22*r22))))),-1);
if(!x2856.valid){
continue;
}
CheckValue<IkReal> x2857 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x2850)))),IkReal(((((0.866025403784439)*x2851))+(((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x2852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2856.value)))+(x2857.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2858=IKsin(j4);
IkReal x2859=((0.866025403784439)*r22);
IkReal x2860=((0.5)*r20);
IkReal x2861=(cj5*x2858);
IkReal x2862=IKcos(j4);
IkReal x2863=((1.0)*cj5*x2862);
IkReal x2864=(r20*sj5);
IkReal x2865=((0.5)*r21*sj5);
IkReal x2866=((0.866025403784439)*cj0*r02);
IkReal x2867=((0.866025403784439)*r12*sj0);
IkReal x2868=(cj0*cj5*x2858);
IkReal x2869=(cj0*sj5*x2858);
IkReal x2870=(cj5*sj0*x2858);
IkReal x2871=(sj0*sj5*x2858);
IkReal x2872=((0.5)*r00);
IkReal x2873=(cj0*cj5*x2862);
IkReal x2874=((0.5)*r01);
IkReal x2875=(cj0*sj5*x2862);
IkReal x2876=((0.5)*r10);
IkReal x2877=(cj5*sj0*x2862);
IkReal x2878=((0.5)*r11);
IkReal x2879=(sj0*sj5*x2862);
IkReal x2880=((0.866025403784439)*cj0*r12);
IkReal x2881=((0.866025403784439)*r02*sj0);
IkReal x2882=(r00*sj0*sj5);
IkReal x2883=((1.0)*cj0*cj5*x2862);
IkReal x2884=((1.0)*cj0*sj5*x2862);
evalcond[0]=((((-1.0)*x2862*x2864))+(((-1.0)*x2860*x2861))+(((-1.0)*r21*x2863))+((x2858*x2865))+((x2858*x2859)));
evalcond[1]=((-0.866025403784439)+((x2859*x2862))+((r21*x2861))+((x2862*x2865))+(((-1.0)*cj5*x2860*x2862))+((x2858*x2864)));
evalcond[2]=((-0.5)+((r10*x2871))+((x2878*x2879))+((r01*x2868))+((x2874*x2875))+((r00*x2869))+((r11*x2870))+(((-1.0)*x2872*x2873))+((x2862*x2866))+(((-1.0)*x2876*x2877))+((x2862*x2867)));
evalcond[3]=((((-1.0)*r01*x2870))+((x2872*x2877))+(((-1.0)*x2862*x2881))+(((-1.0)*x2874*x2879))+((r11*x2868))+((x2862*x2880))+(((-1.0)*x2873*x2876))+((x2875*x2878))+(((-1.0)*x2858*x2882))+((r10*x2869)));
evalcond[4]=((-1.0)+(((-1.0)*x2858*x2881))+((r01*x2877))+((x2870*x2872))+(((-1.0)*x2871*x2874))+((x2858*x2880))+(((-1.0)*x2868*x2876))+((x2869*x2878))+((x2862*x2882))+(((-1.0)*r11*x2883))+(((-1.0)*r10*x2884)));
evalcond[5]=((((-1.0)*r01*x2883))+(((-1.0)*x2870*x2876))+((x2858*x2867))+((x2869*x2874))+((x2871*x2878))+((x2858*x2866))+(((-1.0)*r10*sj0*sj5*x2862))+(((-1.0)*r11*sj0*x2863))+(((-1.0)*x2868*x2872))+(((-1.0)*r00*x2884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2885=((0.866025403784439)*cj0);
IkReal x2886=((0.866025403784439)*sj0);
CheckValue<IkReal> x2887=IKPowWithIntegerCheck(IKsign((((cj5*r10*x2886))+(((-1.0)*r11*sj5*x2886))+(((0.5)*r12*sj0))+(((-1.0)*r01*sj5*x2885))+((cj5*r00*x2885))+(((0.5)*cj0*r02)))),-1);
if(!x2887.valid){
continue;
}
CheckValue<IkReal> x2888 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2887.value)))+(x2888.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2889=IKsin(j4);
IkReal x2890=((0.866025403784439)*r22);
IkReal x2891=((0.5)*r20);
IkReal x2892=(cj5*x2889);
IkReal x2893=IKcos(j4);
IkReal x2894=((1.0)*cj5*x2893);
IkReal x2895=(r20*sj5);
IkReal x2896=((0.5)*r21*sj5);
IkReal x2897=((0.866025403784439)*cj0*r02);
IkReal x2898=((0.866025403784439)*r12*sj0);
IkReal x2899=(cj0*cj5*x2889);
IkReal x2900=(cj0*sj5*x2889);
IkReal x2901=(cj5*sj0*x2889);
IkReal x2902=(sj0*sj5*x2889);
IkReal x2903=((0.5)*r00);
IkReal x2904=(cj0*cj5*x2893);
IkReal x2905=((0.5)*r01);
IkReal x2906=(cj0*sj5*x2893);
IkReal x2907=((0.5)*r10);
IkReal x2908=(cj5*sj0*x2893);
IkReal x2909=((0.5)*r11);
IkReal x2910=(sj0*sj5*x2893);
IkReal x2911=((0.866025403784439)*cj0*r12);
IkReal x2912=((0.866025403784439)*r02*sj0);
IkReal x2913=(r00*sj0*sj5);
IkReal x2914=((1.0)*cj0*cj5*x2893);
IkReal x2915=((1.0)*cj0*sj5*x2893);
evalcond[0]=(((x2889*x2890))+(((-1.0)*x2893*x2895))+(((-1.0)*x2891*x2892))+(((-1.0)*r21*x2894))+((x2889*x2896)));
evalcond[1]=((-0.866025403784439)+((r21*x2892))+((x2890*x2893))+(((-1.0)*cj5*x2891*x2893))+((x2889*x2895))+((x2893*x2896)));
evalcond[2]=((-0.5)+((r10*x2902))+((x2893*x2897))+((x2893*x2898))+((r11*x2901))+(((-1.0)*x2907*x2908))+(((-1.0)*x2903*x2904))+((x2909*x2910))+((r00*x2900))+((r01*x2899))+((x2905*x2906)));
evalcond[3]=(((r11*x2899))+(((-1.0)*r01*x2901))+((r10*x2900))+(((-1.0)*x2905*x2910))+((x2903*x2908))+(((-1.0)*x2893*x2912))+(((-1.0)*x2904*x2907))+(((-1.0)*x2889*x2913))+((x2893*x2911))+((x2906*x2909)));
evalcond[4]=((-1.0)+((x2889*x2911))+((x2893*x2913))+(((-1.0)*x2902*x2905))+(((-1.0)*r10*x2915))+(((-1.0)*r11*x2914))+((x2901*x2903))+(((-1.0)*x2899*x2907))+((r01*x2908))+((x2900*x2909))+(((-1.0)*x2889*x2912)));
evalcond[5]=(((x2889*x2897))+(((-1.0)*r00*x2915))+(((-1.0)*x2899*x2903))+(((-1.0)*r11*sj0*x2894))+((x2900*x2905))+((x2902*x2909))+(((-1.0)*x2901*x2907))+(((-1.0)*r01*x2914))+(((-1.0)*r10*sj0*sj5*x2893))+((x2889*x2898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2916=(cj0*r02);
IkReal x2917=(r12*sj0);
IkReal x2918=(cj0*cj5*r00);
IkReal x2919=(cj0*r01*sj5);
IkReal x2920=(cj5*r10*sj0);
IkReal x2921=(r11*sj0*sj5);
j4eval[0]=((((-1.73205080756888)*x2921))+x2916+x2917+(((-1.73205080756888)*x2919))+(((1.73205080756888)*x2920))+(((1.73205080756888)*x2918)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.866025403784439)*x2918))+(((-0.866025403784439)*x2921))+(((0.5)*x2917))+(((0.5)*x2916))+(((-0.866025403784439)*x2919))+(((0.866025403784439)*x2920))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2922=r20*r20;
IkReal x2923=r21*r21;
IkReal x2924=r22*r22;
IkReal x2925=(cj5*r20*r22);
IkReal x2926=(r21*r22*sj5);
IkReal x2927=(cj5*r20*r21*sj5);
IkReal x2928=cj5*cj5;
IkReal x2929=(x2922*x2928);
IkReal x2930=(x2923*x2928);
j4eval[0]=((((-1.0)*x2923))+(((3.46410161513775)*x2925))+(((-3.0)*x2924))+(((-3.46410161513775)*x2926))+(((-3.0)*x2930))+(((3.0)*x2929))+(((-4.0)*x2922))+(((-6.0)*x2927)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.73205080756888)*x2926))+(((-1.5)*x2930))+(((-3.0)*x2927))+(((-2.0)*x2922))+(((1.5)*x2929))+(((-0.5)*x2923))+(((1.73205080756888)*x2925))+(((-1.5)*x2924))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2931=((1.73205080756888)*cj0);
IkReal x2932=((1.73205080756888)*sj0);
IkReal x2933=(((cj5*r00*x2932))+(((-1.0)*r01*sj5*x2932))+(((-1.0)*cj5*r10*x2931))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*sj5*x2931)));
j4eval[0]=x2933;
j4eval[1]=IKsign(x2933);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2934=((1.73205080756888)*cj0*cj5);
IkReal x2935=((1.73205080756888)*cj0*sj5);
IkReal x2936=((1.73205080756888)*cj5*sj0);
IkReal x2937=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x2938=IKPowWithIntegerCheck(IKsign((((r00*x2936))+(((-1.0)*r10*x2934))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*x2937))+((r11*x2935)))),-1);
if(!x2938.valid){
continue;
}
CheckValue<IkReal> x2939 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r20*sj5))+((r10*x2937))+((cj5*r21))+((r00*x2935))+((r01*x2934))+((r11*x2936)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2938.value)))+(x2939.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2940=IKsin(j4);
IkReal x2941=((0.866025403784439)*r22);
IkReal x2942=((0.5)*r20);
IkReal x2943=(cj5*x2940);
IkReal x2944=IKcos(j4);
IkReal x2945=((1.0)*cj5*x2944);
IkReal x2946=(r20*sj5);
IkReal x2947=((0.5)*r21*sj5);
IkReal x2948=((0.866025403784439)*cj0*r02);
IkReal x2949=((0.866025403784439)*r12*sj0);
IkReal x2950=(cj0*cj5*x2940);
IkReal x2951=(cj0*sj5*x2940);
IkReal x2952=(cj5*sj0*x2940);
IkReal x2953=(sj0*sj5*x2940);
IkReal x2954=((0.5)*r00);
IkReal x2955=(cj0*cj5*x2944);
IkReal x2956=((0.5)*r01);
IkReal x2957=(cj0*sj5*x2944);
IkReal x2958=((0.5)*r10);
IkReal x2959=(cj5*sj0*x2944);
IkReal x2960=((0.5)*r11);
IkReal x2961=(sj0*sj5*x2944);
IkReal x2962=((0.866025403784439)*cj0*r12);
IkReal x2963=((0.866025403784439)*r02*sj0);
IkReal x2964=(r00*sj0*sj5);
IkReal x2965=((1.0)*cj0*cj5*x2944);
IkReal x2966=((1.0)*cj0*sj5*x2944);
evalcond[0]=(((x2940*x2941))+(((-1.0)*r21*x2945))+((x2940*x2947))+(((-1.0)*x2942*x2943))+(((-1.0)*x2944*x2946)));
evalcond[1]=((-0.866025403784439)+((r21*x2943))+((x2941*x2944))+((x2944*x2947))+(((-1.0)*cj5*x2942*x2944))+((x2940*x2946)));
evalcond[2]=((0.5)+((r10*x2953))+(((-1.0)*x2954*x2955))+(((-1.0)*x2958*x2959))+((r01*x2950))+((x2960*x2961))+((x2944*x2948))+((x2956*x2957))+((x2944*x2949))+((r00*x2951))+((r11*x2952)));
evalcond[3]=((((-1.0)*x2955*x2958))+((r11*x2950))+(((-1.0)*x2944*x2963))+(((-1.0)*x2940*x2964))+((x2944*x2962))+((x2954*x2959))+(((-1.0)*r01*x2952))+(((-1.0)*x2956*x2961))+((x2957*x2960))+((r10*x2951)));
evalcond[4]=((1.0)+(((-1.0)*x2950*x2958))+(((-1.0)*x2940*x2963))+((r01*x2959))+((x2944*x2964))+((x2951*x2960))+(((-1.0)*x2953*x2956))+((x2940*x2962))+(((-1.0)*r10*x2966))+((x2952*x2954))+(((-1.0)*r11*x2965)));
evalcond[5]=((((-1.0)*r11*sj0*x2945))+(((-1.0)*r10*sj0*sj5*x2944))+((x2953*x2960))+(((-1.0)*x2950*x2954))+((x2951*x2956))+(((-1.0)*r01*x2965))+((x2940*x2949))+((x2940*x2948))+(((-1.0)*x2952*x2958))+(((-1.0)*r00*x2966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2967=((1.73205080756888)*r21);
IkReal x2968=(cj5*r20);
IkReal x2969=(r21*sj5);
IkReal x2970=r20*r20;
IkReal x2971=r21*r21;
IkReal x2972=((1.5)*(cj5*cj5));
CheckValue<IkReal> x2973 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x2967))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x2969))+(((0.866025403784439)*x2968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2973.valid){
continue;
}
CheckValue<IkReal> x2974=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2971*x2972))+(((1.73205080756888)*r22*x2968))+(((-2.0)*x2970))+((x2970*x2972))+(((-3.0)*cj5*r20*x2969))+(((-0.5)*x2971))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*r22*sj5*x2967)))),-1);
if(!x2974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2973.value)+(((1.5707963267949)*(x2974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2975=IKsin(j4);
IkReal x2976=((0.866025403784439)*r22);
IkReal x2977=((0.5)*r20);
IkReal x2978=(cj5*x2975);
IkReal x2979=IKcos(j4);
IkReal x2980=((1.0)*cj5*x2979);
IkReal x2981=(r20*sj5);
IkReal x2982=((0.5)*r21*sj5);
IkReal x2983=((0.866025403784439)*cj0*r02);
IkReal x2984=((0.866025403784439)*r12*sj0);
IkReal x2985=(cj0*cj5*x2975);
IkReal x2986=(cj0*sj5*x2975);
IkReal x2987=(cj5*sj0*x2975);
IkReal x2988=(sj0*sj5*x2975);
IkReal x2989=((0.5)*r00);
IkReal x2990=(cj0*cj5*x2979);
IkReal x2991=((0.5)*r01);
IkReal x2992=(cj0*sj5*x2979);
IkReal x2993=((0.5)*r10);
IkReal x2994=(cj5*sj0*x2979);
IkReal x2995=((0.5)*r11);
IkReal x2996=(sj0*sj5*x2979);
IkReal x2997=((0.866025403784439)*cj0*r12);
IkReal x2998=((0.866025403784439)*r02*sj0);
IkReal x2999=(r00*sj0*sj5);
IkReal x3000=((1.0)*cj0*cj5*x2979);
IkReal x3001=((1.0)*cj0*sj5*x2979);
evalcond[0]=(((x2975*x2982))+(((-1.0)*x2977*x2978))+((x2975*x2976))+(((-1.0)*r21*x2980))+(((-1.0)*x2979*x2981)));
evalcond[1]=((-0.866025403784439)+((x2976*x2979))+(((-1.0)*cj5*x2977*x2979))+((x2975*x2981))+((x2979*x2982))+((r21*x2978)));
evalcond[2]=((0.5)+((x2991*x2992))+(((-1.0)*x2989*x2990))+((x2979*x2984))+(((-1.0)*x2993*x2994))+((r10*x2988))+((r01*x2985))+((x2979*x2983))+((x2995*x2996))+((r00*x2986))+((r11*x2987)));
evalcond[3]=(((x2992*x2995))+((x2989*x2994))+((r11*x2985))+(((-1.0)*x2975*x2999))+(((-1.0)*x2990*x2993))+(((-1.0)*r01*x2987))+(((-1.0)*x2991*x2996))+(((-1.0)*x2979*x2998))+((r10*x2986))+((x2979*x2997)));
evalcond[4]=((1.0)+(((-1.0)*x2988*x2991))+((x2979*x2999))+(((-1.0)*x2975*x2998))+(((-1.0)*x2985*x2993))+(((-1.0)*r11*x3000))+((x2987*x2989))+((r01*x2994))+(((-1.0)*r10*x3001))+((x2986*x2995))+((x2975*x2997)));
evalcond[5]=((((-1.0)*r10*sj0*sj5*x2979))+(((-1.0)*x2987*x2993))+((x2975*x2983))+(((-1.0)*x2985*x2989))+(((-1.0)*r11*sj0*x2980))+((x2975*x2984))+(((-1.0)*r00*x3001))+(((-1.0)*r01*x3000))+((x2988*x2995))+((x2986*x2991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3002=((0.866025403784439)*cj0);
IkReal x3003=((0.866025403784439)*sj0);
CheckValue<IkReal> x3004=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x3002))+(((0.5)*r12*sj0))+((cj5*r10*x3003))+((cj5*r00*x3002))+(((-1.0)*r11*sj5*x3003))+(((0.5)*cj0*r02)))),-1);
if(!x3004.valid){
continue;
}
CheckValue<IkReal> x3005 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3004.value)))+(x3005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3006=IKsin(j4);
IkReal x3007=((0.866025403784439)*r22);
IkReal x3008=((0.5)*r20);
IkReal x3009=(cj5*x3006);
IkReal x3010=IKcos(j4);
IkReal x3011=((1.0)*cj5*x3010);
IkReal x3012=(r20*sj5);
IkReal x3013=((0.5)*r21*sj5);
IkReal x3014=((0.866025403784439)*cj0*r02);
IkReal x3015=((0.866025403784439)*r12*sj0);
IkReal x3016=(cj0*cj5*x3006);
IkReal x3017=(cj0*sj5*x3006);
IkReal x3018=(cj5*sj0*x3006);
IkReal x3019=(sj0*sj5*x3006);
IkReal x3020=((0.5)*r00);
IkReal x3021=(cj0*cj5*x3010);
IkReal x3022=((0.5)*r01);
IkReal x3023=(cj0*sj5*x3010);
IkReal x3024=((0.5)*r10);
IkReal x3025=(cj5*sj0*x3010);
IkReal x3026=((0.5)*r11);
IkReal x3027=(sj0*sj5*x3010);
IkReal x3028=((0.866025403784439)*cj0*r12);
IkReal x3029=((0.866025403784439)*r02*sj0);
IkReal x3030=(r00*sj0*sj5);
IkReal x3031=((1.0)*cj0*cj5*x3010);
IkReal x3032=((1.0)*cj0*sj5*x3010);
evalcond[0]=(((x3006*x3007))+(((-1.0)*r21*x3011))+(((-1.0)*x3010*x3012))+((x3006*x3013))+(((-1.0)*x3008*x3009)));
evalcond[1]=((-0.866025403784439)+((r21*x3009))+((x3006*x3012))+(((-1.0)*cj5*x3008*x3010))+((x3010*x3013))+((x3007*x3010)));
evalcond[2]=((0.5)+((r11*x3018))+((r00*x3017))+(((-1.0)*x3024*x3025))+((x3010*x3015))+((x3010*x3014))+((x3022*x3023))+((r01*x3016))+(((-1.0)*x3020*x3021))+((x3026*x3027))+((r10*x3019)));
evalcond[3]=(((r11*x3016))+((x3023*x3026))+((x3010*x3028))+((r10*x3017))+((x3020*x3025))+(((-1.0)*x3010*x3029))+(((-1.0)*x3021*x3024))+(((-1.0)*x3022*x3027))+(((-1.0)*r01*x3018))+(((-1.0)*x3006*x3030)));
evalcond[4]=((1.0)+((r01*x3025))+(((-1.0)*x3006*x3029))+((x3006*x3028))+((x3017*x3026))+(((-1.0)*r11*x3031))+((x3010*x3030))+(((-1.0)*x3019*x3022))+(((-1.0)*r10*x3032))+(((-1.0)*x3016*x3024))+((x3018*x3020)));
evalcond[5]=(((x3019*x3026))+(((-1.0)*x3016*x3020))+(((-1.0)*x3018*x3024))+(((-1.0)*r11*sj0*x3011))+(((-1.0)*r10*sj0*sj5*x3010))+((x3006*x3014))+((x3006*x3015))+(((-1.0)*r00*x3032))+((x3017*x3022))+(((-1.0)*r01*x3031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3033=(r02*sj0);
IkReal x3034=(cj0*r12);
IkReal x3035=(cj0*cj5*r10);
IkReal x3036=(cj0*r11*sj5);
IkReal x3037=(cj5*r00*sj0);
IkReal x3038=(r01*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x3037))+(((-1.73205080756888)*x3035))+(((-1.0)*x3034))+(((-1.73205080756888)*x3038))+(((1.73205080756888)*x3036))+x3033);
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((-0.866025403784439)*x3038))+(((0.5)*x3033))+(((-0.5)*x3034))+(((0.866025403784439)*x3037))+(((0.866025403784439)*x3036))+(((-0.866025403784439)*x3035))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3039=r20*r20;
IkReal x3040=r21*r21;
IkReal x3041=r22*r22;
IkReal x3042=(cj5*r20*r22);
IkReal x3043=(r21*r22*sj5);
IkReal x3044=(cj5*r20*r21*sj5);
IkReal x3045=cj5*cj5;
IkReal x3046=(x3039*x3045);
IkReal x3047=(x3040*x3045);
j4eval[0]=((((3.46410161513775)*x3042))+(((-1.0)*x3040))+(((-3.0)*x3041))+(((-6.0)*x3044))+(((-3.46410161513775)*x3043))+(((3.0)*x3046))+(((-4.0)*x3039))+(((-3.0)*x3047)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.73205080756888)*x3043))+(((1.73205080756888)*x3042))+(((-1.5)*x3047))+(((-1.5)*x3041))+(((1.5)*x3046))+(((-2.0)*x3039))+(((-0.5)*x3040))+(((-3.0)*x3044))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3048=((1.73205080756888)*cj0);
IkReal x3049=((1.73205080756888)*sj0);
IkReal x3050=(((cj5*r00*x3049))+(((-1.0)*r01*sj5*x3049))+(((-1.0)*cj5*r10*x3048))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*sj5*x3048)));
j4eval[0]=x3050;
j4eval[1]=IKsign(x3050);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3051=((1.73205080756888)*cj0*cj5);
IkReal x3052=((1.73205080756888)*cj0*sj5);
IkReal x3053=((1.73205080756888)*cj5*sj0);
IkReal x3054=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x3055 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r11*x3053))+((r10*x3054))+((r01*x3051))+((r00*x3052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3055.valid){
continue;
}
CheckValue<IkReal> x3056=IKPowWithIntegerCheck(IKsign((((r11*x3052))+(((-1.0)*r10*x3051))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*x3054))+((r00*x3053)))),-1);
if(!x3056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3055.value)+(((1.5707963267949)*(x3056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3057=IKsin(j4);
IkReal x3058=((0.866025403784439)*r22);
IkReal x3059=((0.5)*r20);
IkReal x3060=(cj5*x3057);
IkReal x3061=IKcos(j4);
IkReal x3062=((1.0)*cj5*x3061);
IkReal x3063=(r20*sj5);
IkReal x3064=((0.5)*r21*sj5);
IkReal x3065=((0.866025403784439)*cj0*r02);
IkReal x3066=((0.866025403784439)*r12*sj0);
IkReal x3067=(cj0*cj5*x3057);
IkReal x3068=(cj0*sj5*x3057);
IkReal x3069=(cj5*sj0*x3057);
IkReal x3070=(sj0*sj5*x3057);
IkReal x3071=((0.5)*r00);
IkReal x3072=(cj0*cj5*x3061);
IkReal x3073=((0.5)*r01);
IkReal x3074=(cj0*sj5*x3061);
IkReal x3075=((0.5)*r10);
IkReal x3076=(cj5*sj0*x3061);
IkReal x3077=((0.5)*r11);
IkReal x3078=(sj0*sj5*x3061);
IkReal x3079=((0.866025403784439)*cj0*r12);
IkReal x3080=((0.866025403784439)*r02*sj0);
IkReal x3081=(r00*sj0*sj5);
IkReal x3082=((1.0)*cj0*cj5*x3061);
IkReal x3083=((1.0)*cj0*sj5*x3061);
evalcond[0]=((((-1.0)*x3059*x3060))+((x3057*x3058))+(((-1.0)*r21*x3062))+((x3057*x3064))+(((-1.0)*x3061*x3063)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x3059*x3061))+((x3057*x3063))+((x3061*x3064))+((r21*x3060))+((x3058*x3061)));
evalcond[2]=((((-1.0)*x3071*x3072))+((x3061*x3065))+((x3073*x3074))+((x3061*x3066))+((x3077*x3078))+(((-1.0)*x3075*x3076))+((r00*x3068))+((r01*x3067))+((r10*x3070))+((r11*x3069)));
evalcond[3]=((((-1.0)*r10*x3083))+((x3061*x3081))+((x3069*x3071))+((r01*x3076))+((x3057*x3079))+(((-1.0)*x3067*x3075))+(((-1.0)*r11*x3082))+((x3068*x3077))+(((-1.0)*x3070*x3073))+(((-1.0)*x3057*x3080)));
evalcond[4]=((0.5)+(((-1.0)*x3072*x3075))+((r11*x3067))+(((-1.0)*x3061*x3080))+((r10*x3068))+(((-1.0)*x3073*x3078))+((x3061*x3079))+((x3071*x3076))+((x3074*x3077))+(((-1.0)*x3057*x3081))+(((-1.0)*r01*x3069)));
evalcond[5]=((-1.0)+((x3070*x3077))+(((-1.0)*r11*sj0*x3062))+(((-1.0)*x3069*x3075))+(((-1.0)*r01*x3082))+(((-1.0)*r10*sj0*sj5*x3061))+(((-1.0)*r00*x3083))+((x3057*x3066))+((x3057*x3065))+((x3068*x3073))+(((-1.0)*x3067*x3071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3084=((1.73205080756888)*r21);
IkReal x3085=(cj5*r20);
IkReal x3086=(r21*sj5);
IkReal x3087=r20*r20;
IkReal x3088=r21*r21;
IkReal x3089=((1.5)*(cj5*cj5));
CheckValue<IkReal> x3090 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x3084))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*x3085))+(((-0.866025403784439)*x3086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3090.valid){
continue;
}
CheckValue<IkReal> x3091=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3088*x3089))+((x3087*x3089))+(((-2.0)*x3087))+(((-1.0)*r22*sj5*x3084))+(((-1.0)*(1.5)*(r22*r22)))+(((-0.5)*x3088))+(((1.73205080756888)*r22*x3085))+(((-3.0)*cj5*r20*x3086)))),-1);
if(!x3091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3090.value)+(((1.5707963267949)*(x3091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3092=IKsin(j4);
IkReal x3093=((0.866025403784439)*r22);
IkReal x3094=((0.5)*r20);
IkReal x3095=(cj5*x3092);
IkReal x3096=IKcos(j4);
IkReal x3097=((1.0)*cj5*x3096);
IkReal x3098=(r20*sj5);
IkReal x3099=((0.5)*r21*sj5);
IkReal x3100=((0.866025403784439)*cj0*r02);
IkReal x3101=((0.866025403784439)*r12*sj0);
IkReal x3102=(cj0*cj5*x3092);
IkReal x3103=(cj0*sj5*x3092);
IkReal x3104=(cj5*sj0*x3092);
IkReal x3105=(sj0*sj5*x3092);
IkReal x3106=((0.5)*r00);
IkReal x3107=(cj0*cj5*x3096);
IkReal x3108=((0.5)*r01);
IkReal x3109=(cj0*sj5*x3096);
IkReal x3110=((0.5)*r10);
IkReal x3111=(cj5*sj0*x3096);
IkReal x3112=((0.5)*r11);
IkReal x3113=(sj0*sj5*x3096);
IkReal x3114=((0.866025403784439)*cj0*r12);
IkReal x3115=((0.866025403784439)*r02*sj0);
IkReal x3116=(r00*sj0*sj5);
IkReal x3117=((1.0)*cj0*cj5*x3096);
IkReal x3118=((1.0)*cj0*sj5*x3096);
evalcond[0]=((((-1.0)*x3094*x3095))+(((-1.0)*x3096*x3098))+(((-1.0)*r21*x3097))+((x3092*x3093))+((x3092*x3099)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x3094*x3096))+((r21*x3095))+((x3092*x3098))+((x3093*x3096))+((x3096*x3099)));
evalcond[2]=(((x3096*x3101))+((x3112*x3113))+((r10*x3105))+((x3108*x3109))+((r11*x3104))+((r00*x3103))+(((-1.0)*x3106*x3107))+((r01*x3102))+((x3096*x3100))+(((-1.0)*x3110*x3111)));
evalcond[3]=(((x3096*x3116))+((r01*x3111))+(((-1.0)*r11*x3117))+(((-1.0)*x3102*x3110))+(((-1.0)*r10*x3118))+(((-1.0)*x3105*x3108))+(((-1.0)*x3092*x3115))+((x3104*x3106))+((x3103*x3112))+((x3092*x3114)));
evalcond[4]=((0.5)+(((-1.0)*x3096*x3115))+((r10*x3103))+(((-1.0)*r01*x3104))+(((-1.0)*x3092*x3116))+((x3106*x3111))+((r11*x3102))+((x3096*x3114))+(((-1.0)*x3107*x3110))+((x3109*x3112))+(((-1.0)*x3108*x3113)));
evalcond[5]=((-1.0)+((x3092*x3101))+(((-1.0)*r00*x3118))+(((-1.0)*x3102*x3106))+(((-1.0)*r10*sj0*sj5*x3096))+(((-1.0)*r11*sj0*x3097))+((x3092*x3100))+(((-1.0)*r01*x3117))+((x3103*x3108))+((x3105*x3112))+(((-1.0)*x3104*x3110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3119=((0.866025403784439)*cj0);
IkReal x3120=((0.866025403784439)*sj0);
CheckValue<IkReal> x3121=IKPowWithIntegerCheck(IKsign((((r11*sj5*x3119))+((cj5*r00*x3120))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0))+(((-1.0)*r01*sj5*x3120))+(((-1.0)*cj5*r10*x3119)))),-1);
if(!x3121.valid){
continue;
}
CheckValue<IkReal> x3122 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3121.value)))+(x3122.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3123=IKsin(j4);
IkReal x3124=((0.866025403784439)*r22);
IkReal x3125=((0.5)*r20);
IkReal x3126=(cj5*x3123);
IkReal x3127=IKcos(j4);
IkReal x3128=((1.0)*cj5*x3127);
IkReal x3129=(r20*sj5);
IkReal x3130=((0.5)*r21*sj5);
IkReal x3131=((0.866025403784439)*cj0*r02);
IkReal x3132=((0.866025403784439)*r12*sj0);
IkReal x3133=(cj0*cj5*x3123);
IkReal x3134=(cj0*sj5*x3123);
IkReal x3135=(cj5*sj0*x3123);
IkReal x3136=(sj0*sj5*x3123);
IkReal x3137=((0.5)*r00);
IkReal x3138=(cj0*cj5*x3127);
IkReal x3139=((0.5)*r01);
IkReal x3140=(cj0*sj5*x3127);
IkReal x3141=((0.5)*r10);
IkReal x3142=(cj5*sj0*x3127);
IkReal x3143=((0.5)*r11);
IkReal x3144=(sj0*sj5*x3127);
IkReal x3145=((0.866025403784439)*cj0*r12);
IkReal x3146=((0.866025403784439)*r02*sj0);
IkReal x3147=(r00*sj0*sj5);
IkReal x3148=((1.0)*cj0*cj5*x3127);
IkReal x3149=((1.0)*cj0*sj5*x3127);
evalcond[0]=((((-1.0)*x3125*x3126))+(((-1.0)*x3127*x3129))+((x3123*x3124))+((x3123*x3130))+(((-1.0)*r21*x3128)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x3125*x3127))+((x3124*x3127))+((r21*x3126))+((x3123*x3129))+((x3127*x3130)));
evalcond[2]=(((r01*x3133))+((x3139*x3140))+(((-1.0)*x3137*x3138))+((r10*x3136))+((r00*x3134))+((r11*x3135))+((x3127*x3132))+(((-1.0)*x3141*x3142))+((x3143*x3144))+((x3127*x3131)));
evalcond[3]=(((x3127*x3147))+((x3123*x3145))+(((-1.0)*x3123*x3146))+((x3134*x3143))+(((-1.0)*r10*x3149))+((r01*x3142))+(((-1.0)*x3133*x3141))+(((-1.0)*x3136*x3139))+((x3135*x3137))+(((-1.0)*r11*x3148)));
evalcond[4]=((0.5)+((r10*x3134))+(((-1.0)*x3138*x3141))+((x3127*x3145))+((r11*x3133))+(((-1.0)*x3123*x3147))+(((-1.0)*x3139*x3144))+((x3140*x3143))+((x3137*x3142))+(((-1.0)*x3127*x3146))+(((-1.0)*r01*x3135)));
evalcond[5]=((-1.0)+(((-1.0)*r10*sj0*sj5*x3127))+((x3123*x3131))+(((-1.0)*r01*x3148))+((x3134*x3139))+((x3123*x3132))+((x3136*x3143))+(((-1.0)*x3135*x3141))+(((-1.0)*r11*sj0*x3128))+(((-1.0)*r00*x3149))+(((-1.0)*x3133*x3137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3150=(r02*sj0);
IkReal x3151=(cj0*r12);
IkReal x3152=(cj0*cj5*r10);
IkReal x3153=(cj0*r11*sj5);
IkReal x3154=(cj5*r00*sj0);
IkReal x3155=(r01*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x3154))+x3150+(((1.73205080756888)*x3153))+(((-1.73205080756888)*x3152))+(((-1.0)*x3151))+(((-1.73205080756888)*x3155)));
j4eval[1]=IKsign(((((0.866025403784439)*x3153))+(((-0.866025403784439)*x3155))+(((0.5)*x3150))+(((-0.5)*x3151))+(((-0.866025403784439)*x3152))+(((0.866025403784439)*x3154))));
j4eval[2]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3156=r20*r20;
IkReal x3157=r21*r21;
IkReal x3158=r22*r22;
IkReal x3159=(cj5*r20*r22);
IkReal x3160=(r21*r22*sj5);
IkReal x3161=(cj5*r20*r21*sj5);
IkReal x3162=cj5*cj5;
IkReal x3163=(x3156*x3162);
IkReal x3164=(x3157*x3162);
j4eval[0]=((((-3.0)*x3164))+(((-3.0)*x3158))+(((3.0)*x3163))+(((-1.0)*x3157))+(((-3.46410161513775)*x3160))+(((3.46410161513775)*x3159))+(((-6.0)*x3161))+(((-4.0)*x3156)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.5)*x3164))+(((-2.0)*x3156))+(((1.73205080756888)*x3159))+(((-3.0)*x3161))+(((1.5)*x3163))+(((-0.5)*x3157))+(((-1.73205080756888)*x3160))+(((-1.5)*x3158))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3165=((1.73205080756888)*cj0);
IkReal x3166=((1.73205080756888)*sj0);
IkReal x3167=((((-1.0)*cj5*r10*x3165))+((r11*sj5*x3165))+(((-1.0)*r01*sj5*x3166))+((r02*sj0))+((cj5*r00*x3166))+(((-1.0)*(1.0)*cj0*r12)));
j4eval[0]=x3167;
j4eval[1]=IKsign(x3167);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3168=((1.73205080756888)*cj0*cj5);
IkReal x3169=((1.73205080756888)*cj0*sj5);
IkReal x3170=((1.73205080756888)*cj5*sj0);
IkReal x3171=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x3172 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r01*x3168))+((r11*x3170))+((r10*x3171))+((r00*x3169)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3172.valid){
continue;
}
CheckValue<IkReal> x3173=IKPowWithIntegerCheck(IKsign((((r11*x3169))+(((-1.0)*r01*x3171))+((r00*x3170))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r10*x3168)))),-1);
if(!x3173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3172.value)+(((1.5707963267949)*(x3173.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3174=IKsin(j4);
IkReal x3175=((0.866025403784439)*r22);
IkReal x3176=((0.5)*r20);
IkReal x3177=(cj5*x3174);
IkReal x3178=IKcos(j4);
IkReal x3179=((1.0)*cj5*x3178);
IkReal x3180=(r20*sj5);
IkReal x3181=((0.5)*r21*sj5);
IkReal x3182=((0.866025403784439)*cj0*r02);
IkReal x3183=((0.866025403784439)*r12*sj0);
IkReal x3184=(cj0*cj5*x3174);
IkReal x3185=(cj0*sj5*x3174);
IkReal x3186=(cj5*sj0*x3174);
IkReal x3187=(sj0*sj5*x3174);
IkReal x3188=((0.5)*r00);
IkReal x3189=(cj0*cj5*x3178);
IkReal x3190=((0.5)*r01);
IkReal x3191=(cj0*sj5*x3178);
IkReal x3192=((0.5)*r10);
IkReal x3193=(cj5*sj0*x3178);
IkReal x3194=((0.5)*r11);
IkReal x3195=(sj0*sj5*x3178);
IkReal x3196=((0.866025403784439)*cj0*r12);
IkReal x3197=((0.866025403784439)*r02*sj0);
IkReal x3198=(r00*sj0*sj5);
IkReal x3199=((1.0)*cj0*cj5*x3178);
IkReal x3200=((1.0)*cj0*sj5*x3178);
evalcond[0]=((((-1.0)*r21*x3179))+((x3174*x3181))+(((-1.0)*x3176*x3177))+(((-1.0)*x3178*x3180))+((x3174*x3175)));
evalcond[1]=((-0.866025403784439)+((x3178*x3181))+((x3175*x3178))+((r21*x3177))+((x3174*x3180))+(((-1.0)*cj5*x3176*x3178)));
evalcond[2]=(((x3178*x3182))+(((-1.0)*x3188*x3189))+((r00*x3185))+((x3194*x3195))+((x3190*x3191))+((x3178*x3183))+((r01*x3184))+((r11*x3186))+(((-1.0)*x3192*x3193))+((r10*x3187)));
evalcond[3]=(((x3186*x3188))+((x3174*x3196))+(((-1.0)*x3184*x3192))+(((-1.0)*r10*x3200))+((x3178*x3198))+(((-1.0)*x3174*x3197))+(((-1.0)*r11*x3199))+((x3185*x3194))+(((-1.0)*x3187*x3190))+((r01*x3193)));
evalcond[4]=((-0.5)+(((-1.0)*x3174*x3198))+(((-1.0)*r01*x3186))+((x3188*x3193))+(((-1.0)*x3178*x3197))+((x3191*x3194))+(((-1.0)*x3190*x3195))+((r10*x3185))+((x3178*x3196))+((r11*x3184))+(((-1.0)*x3189*x3192)));
evalcond[5]=((1.0)+((x3187*x3194))+((x3174*x3183))+(((-1.0)*x3186*x3192))+(((-1.0)*r11*sj0*x3179))+(((-1.0)*r00*x3200))+(((-1.0)*r01*x3199))+((x3185*x3190))+(((-1.0)*r10*sj0*sj5*x3178))+(((-1.0)*x3184*x3188))+((x3174*x3182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3201=((1.73205080756888)*r21);
IkReal x3202=(cj5*r20);
IkReal x3203=(r21*sj5);
IkReal x3204=r20*r20;
IkReal x3205=r21*r21;
IkReal x3206=((1.5)*(cj5*cj5));
CheckValue<IkReal> x3207 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x3201)))),IkReal(((((0.866025403784439)*x3202))+(((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x3203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3207.valid){
continue;
}
CheckValue<IkReal> x3208=IKPowWithIntegerCheck(IKsign(((((-0.5)*x3205))+((x3204*x3206))+(((-2.0)*x3204))+(((-3.0)*cj5*r20*x3203))+(((-1.0)*r22*sj5*x3201))+(((-1.0)*x3205*x3206))+(((-1.0)*(1.5)*(r22*r22)))+(((1.73205080756888)*r22*x3202)))),-1);
if(!x3208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3207.value)+(((1.5707963267949)*(x3208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3209=IKsin(j4);
IkReal x3210=((0.866025403784439)*r22);
IkReal x3211=((0.5)*r20);
IkReal x3212=(cj5*x3209);
IkReal x3213=IKcos(j4);
IkReal x3214=((1.0)*cj5*x3213);
IkReal x3215=(r20*sj5);
IkReal x3216=((0.5)*r21*sj5);
IkReal x3217=((0.866025403784439)*cj0*r02);
IkReal x3218=((0.866025403784439)*r12*sj0);
IkReal x3219=(cj0*cj5*x3209);
IkReal x3220=(cj0*sj5*x3209);
IkReal x3221=(cj5*sj0*x3209);
IkReal x3222=(sj0*sj5*x3209);
IkReal x3223=((0.5)*r00);
IkReal x3224=(cj0*cj5*x3213);
IkReal x3225=((0.5)*r01);
IkReal x3226=(cj0*sj5*x3213);
IkReal x3227=((0.5)*r10);
IkReal x3228=(cj5*sj0*x3213);
IkReal x3229=((0.5)*r11);
IkReal x3230=(sj0*sj5*x3213);
IkReal x3231=((0.866025403784439)*cj0*r12);
IkReal x3232=((0.866025403784439)*r02*sj0);
IkReal x3233=(r00*sj0*sj5);
IkReal x3234=((1.0)*cj0*cj5*x3213);
IkReal x3235=((1.0)*cj0*sj5*x3213);
evalcond[0]=(((x3209*x3216))+((x3209*x3210))+(((-1.0)*x3213*x3215))+(((-1.0)*r21*x3214))+(((-1.0)*x3211*x3212)));
evalcond[1]=((-0.866025403784439)+((x3210*x3213))+((x3209*x3215))+(((-1.0)*cj5*x3211*x3213))+((x3213*x3216))+((r21*x3212)));
evalcond[2]=(((x3229*x3230))+((x3213*x3217))+(((-1.0)*x3227*x3228))+((r00*x3220))+((x3225*x3226))+((r11*x3221))+((r01*x3219))+(((-1.0)*x3223*x3224))+((r10*x3222))+((x3213*x3218)));
evalcond[3]=((((-1.0)*r10*x3235))+((x3220*x3229))+((x3209*x3231))+((x3213*x3233))+(((-1.0)*x3209*x3232))+(((-1.0)*x3222*x3225))+(((-1.0)*x3219*x3227))+((r01*x3228))+((x3221*x3223))+(((-1.0)*r11*x3234)));
evalcond[4]=((-0.5)+((r10*x3220))+(((-1.0)*x3225*x3230))+((x3226*x3229))+(((-1.0)*x3224*x3227))+((x3213*x3231))+(((-1.0)*r01*x3221))+((x3223*x3228))+(((-1.0)*x3213*x3232))+((r11*x3219))+(((-1.0)*x3209*x3233)));
evalcond[5]=((1.0)+(((-1.0)*x3219*x3223))+(((-1.0)*r00*x3235))+(((-1.0)*r10*sj0*sj5*x3213))+((x3222*x3229))+(((-1.0)*x3221*x3227))+(((-1.0)*r01*x3234))+((x3220*x3225))+(((-1.0)*r11*sj0*x3214))+((x3209*x3218))+((x3209*x3217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3236=((0.866025403784439)*cj0);
IkReal x3237=((0.866025403784439)*sj0);
CheckValue<IkReal> x3238=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x3237))+((cj5*r00*x3237))+(((-1.0)*cj5*r10*x3236))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0))+((r11*sj5*x3236)))),-1);
if(!x3238.valid){
continue;
}
CheckValue<IkReal> x3239 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3238.value)))+(x3239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3240=IKsin(j4);
IkReal x3241=((0.866025403784439)*r22);
IkReal x3242=((0.5)*r20);
IkReal x3243=(cj5*x3240);
IkReal x3244=IKcos(j4);
IkReal x3245=((1.0)*cj5*x3244);
IkReal x3246=(r20*sj5);
IkReal x3247=((0.5)*r21*sj5);
IkReal x3248=((0.866025403784439)*cj0*r02);
IkReal x3249=((0.866025403784439)*r12*sj0);
IkReal x3250=(cj0*cj5*x3240);
IkReal x3251=(cj0*sj5*x3240);
IkReal x3252=(cj5*sj0*x3240);
IkReal x3253=(sj0*sj5*x3240);
IkReal x3254=((0.5)*r00);
IkReal x3255=(cj0*cj5*x3244);
IkReal x3256=((0.5)*r01);
IkReal x3257=(cj0*sj5*x3244);
IkReal x3258=((0.5)*r10);
IkReal x3259=(cj5*sj0*x3244);
IkReal x3260=((0.5)*r11);
IkReal x3261=(sj0*sj5*x3244);
IkReal x3262=((0.866025403784439)*cj0*r12);
IkReal x3263=((0.866025403784439)*r02*sj0);
IkReal x3264=(r00*sj0*sj5);
IkReal x3265=((1.0)*cj0*cj5*x3244);
IkReal x3266=((1.0)*cj0*sj5*x3244);
evalcond[0]=(((x3240*x3241))+((x3240*x3247))+(((-1.0)*r21*x3245))+(((-1.0)*x3244*x3246))+(((-1.0)*x3242*x3243)));
evalcond[1]=((-0.866025403784439)+((x3241*x3244))+((r21*x3243))+((x3240*x3246))+((x3244*x3247))+(((-1.0)*cj5*x3242*x3244)));
evalcond[2]=(((r10*x3253))+((r01*x3250))+(((-1.0)*x3258*x3259))+((r11*x3252))+((r00*x3251))+((x3244*x3248))+((x3244*x3249))+((x3260*x3261))+(((-1.0)*x3254*x3255))+((x3256*x3257)));
evalcond[3]=((((-1.0)*x3240*x3263))+(((-1.0)*x3250*x3258))+((x3240*x3262))+((x3252*x3254))+((x3244*x3264))+((r01*x3259))+(((-1.0)*r10*x3266))+((x3251*x3260))+(((-1.0)*r11*x3265))+(((-1.0)*x3253*x3256)));
evalcond[4]=((-0.5)+(((-1.0)*x3240*x3264))+(((-1.0)*x3255*x3258))+((x3244*x3262))+((r11*x3250))+((x3257*x3260))+(((-1.0)*x3256*x3261))+(((-1.0)*x3244*x3263))+((x3254*x3259))+((r10*x3251))+(((-1.0)*r01*x3252)));
evalcond[5]=((1.0)+((x3240*x3249))+((x3240*x3248))+(((-1.0)*r00*x3266))+((x3253*x3260))+(((-1.0)*x3250*x3254))+((x3251*x3256))+(((-1.0)*r11*sj0*x3245))+(((-1.0)*x3252*x3258))+(((-1.0)*r10*sj0*sj5*x3244))+(((-1.0)*r01*x3265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3267=(cj3*cj5);
IkReal x3268=(cj3*sj5);
IkReal x3269=((0.5)*r21);
IkReal x3270=((2.0)*r20);
IkReal x3271=(cj0*r10);
IkReal x3272=(cj0*r11);
IkReal x3273=((1.5)*r22);
IkReal x3274=(r00*sj0);
IkReal x3275=(r01*sj0);
IkReal x3276=((0.866025403784439)*cj5*r22);
IkReal x3277=(cj5*r20);
IkReal x3278=((0.866025403784439)*cj0*r12);
IkReal x3279=((0.866025403784439)*r22*sj5);
IkReal x3280=(r21*sj5);
IkReal x3281=((0.866025403784439)*r02*sj0);
IkReal x3282=((1.5)*cj5*r21*sj5);
IkReal x3283=((1.5)*cj5*r20*sj5);
IkReal x3284=cj5*cj5;
IkReal x3285=((1.5)*r20*x3284);
IkReal x3286=((1.5)*r21*x3284);
CheckValue<IkReal> x3287=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3274*x3285))+(((-1.0)*x3278*x3280))+((x3271*x3285))+(((-1.0)*cj0*r12*x3273))+((x3269*x3275))+((x3270*x3274))+((x3275*x3279))+(((-1.0)*x3274*x3276))+((x3271*x3276))+(((-1.0)*x3277*x3281))+((x3277*x3278))+((r02*sj0*x3273))+(((-1.0)*x3269*x3272))+(((-1.0)*x3272*x3286))+(((-1.0)*x3272*x3279))+(((-1.0)*x3270*x3271))+(((-1.0)*x3271*x3282))+((x3274*x3282))+((x3280*x3281))+((x3275*x3286))+(((-1.0)*x3272*x3283))+((x3275*x3283)))),-1);
if(!x3287.valid){
continue;
}
CheckValue<IkReal> x3288 = IKatan2WithCheck(IkReal((((r21*x3267))+((r20*x3268)))),IkReal((((x3268*x3269))+((cj3*(((0.866025403784439)*r22))))+(((-0.5)*r20*x3267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3287.value)))+(x3288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3289=IKsin(j4);
IkReal x3290=((0.866025403784439)*r22);
IkReal x3291=((0.5)*r20);
IkReal x3292=(cj5*x3289);
IkReal x3293=IKcos(j4);
IkReal x3294=((1.0)*cj5*x3293);
IkReal x3295=(r20*sj5);
IkReal x3296=((0.5)*r21*sj5);
IkReal x3297=((0.866025403784439)*cj0*r02);
IkReal x3298=((0.866025403784439)*r12*sj0);
IkReal x3299=(cj0*cj5*x3289);
IkReal x3300=(cj0*sj5*x3289);
IkReal x3301=(cj5*sj0*x3289);
IkReal x3302=(sj0*sj5*x3289);
IkReal x3303=((0.5)*r00);
IkReal x3304=(cj0*cj5*x3293);
IkReal x3305=((0.5)*r01);
IkReal x3306=(cj0*sj5*x3293);
IkReal x3307=((0.5)*r10);
IkReal x3308=(cj5*sj0*x3293);
IkReal x3309=((0.5)*r11);
IkReal x3310=(sj0*sj5*x3293);
IkReal x3311=((0.866025403784439)*cj0*r12);
IkReal x3312=((0.866025403784439)*r02*sj0);
IkReal x3313=(r00*sj0*sj5);
IkReal x3314=((1.0)*cj0*cj5*x3293);
IkReal x3315=((1.0)*cj0*sj5*x3293);
evalcond[0]=((((-1.0)*r21*x3294))+((x3289*x3290))+(((-1.0)*x3291*x3292))+((x3289*x3296))+(((-1.0)*x3293*x3295)));
evalcond[1]=((-0.866025403784439)+((r21*x3292))+((x3290*x3293))+((x3289*x3295))+(((-1.0)*cj5*x3291*x3293))+((x3293*x3296)));
evalcond[2]=(((r01*x3299))+((r00*x3300))+((r10*x3302))+((x3309*x3310))+((r11*x3301))+(((-1.0)*(0.5)*sj3))+((x3293*x3297))+((x3305*x3306))+((x3293*x3298))+(((-1.0)*x3307*x3308))+(((-1.0)*x3303*x3304)));
evalcond[3]=(((r10*x3300))+(((-1.0)*x3304*x3307))+((x3303*x3308))+(((-1.0)*x3293*x3312))+((r11*x3299))+(((-1.0)*x3305*x3310))+((x3293*x3311))+(((-1.0)*r01*x3301))+(((-1.0)*x3289*x3313))+((x3306*x3309))+(((0.5)*cj3)));
evalcond[4]=((((-1.0)*r10*x3315))+(((-1.0)*x3299*x3307))+((x3289*x3311))+((r01*x3308))+(((-1.0)*x3289*x3312))+((x3301*x3303))+((x3300*x3309))+(((-1.0)*x3302*x3305))+(((-1.0)*(1.0)*sj3))+((x3293*x3313))+(((-1.0)*r11*x3314)));
evalcond[5]=((((-1.0)*(1.0)*cj3))+(((-1.0)*x3301*x3307))+((x3302*x3309))+((x3300*x3305))+(((-1.0)*x3299*x3303))+((x3289*x3298))+(((-1.0)*r00*x3315))+(((-1.0)*r11*sj0*x3294))+(((-1.0)*r10*sj0*sj5*x3293))+(((-1.0)*r01*x3314))+((x3289*x3297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3316=((1.73205080756888)*r21);
IkReal x3317=(cj5*r20);
IkReal x3318=(r21*sj5);
IkReal x3319=r20*r20;
IkReal x3320=r21*r21;
IkReal x3321=((1.5)*(cj5*cj5));
CheckValue<IkReal> x3322=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3319))+(((1.73205080756888)*r22*x3317))+(((-3.0)*cj5*r20*x3318))+(((-1.0)*r22*sj5*x3316))+(((-1.0)*(1.5)*(r22*r22)))+((x3319*x3321))+(((-1.0)*x3320*x3321))+(((-0.5)*x3320)))),-1);
if(!x3322.valid){
continue;
}
CheckValue<IkReal> x3323 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x3316)))),IkReal(((((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x3318))+(((0.866025403784439)*x3317)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3322.value)))+(x3323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3324=IKsin(j4);
IkReal x3325=((0.866025403784439)*r22);
IkReal x3326=((0.5)*r20);
IkReal x3327=(cj5*x3324);
IkReal x3328=IKcos(j4);
IkReal x3329=((1.0)*cj5*x3328);
IkReal x3330=(r20*sj5);
IkReal x3331=((0.5)*r21*sj5);
IkReal x3332=((0.866025403784439)*cj0*r02);
IkReal x3333=((0.866025403784439)*r12*sj0);
IkReal x3334=(cj0*cj5*x3324);
IkReal x3335=(cj0*sj5*x3324);
IkReal x3336=(cj5*sj0*x3324);
IkReal x3337=(sj0*sj5*x3324);
IkReal x3338=((0.5)*r00);
IkReal x3339=(cj0*cj5*x3328);
IkReal x3340=((0.5)*r01);
IkReal x3341=(cj0*sj5*x3328);
IkReal x3342=((0.5)*r10);
IkReal x3343=(cj5*sj0*x3328);
IkReal x3344=((0.5)*r11);
IkReal x3345=(sj0*sj5*x3328);
IkReal x3346=((0.866025403784439)*cj0*r12);
IkReal x3347=((0.866025403784439)*r02*sj0);
IkReal x3348=(r00*sj0*sj5);
IkReal x3349=((1.0)*cj0*cj5*x3328);
IkReal x3350=((1.0)*cj0*sj5*x3328);
evalcond[0]=((((-1.0)*x3328*x3330))+((x3324*x3325))+(((-1.0)*r21*x3329))+((x3324*x3331))+(((-1.0)*x3326*x3327)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x3326*x3328))+((r21*x3327))+((x3325*x3328))+((x3328*x3331))+((x3324*x3330)));
evalcond[2]=(((r11*x3336))+(((-1.0)*x3338*x3339))+((r00*x3335))+(((-1.0)*x3342*x3343))+((x3328*x3333))+((r10*x3337))+((x3328*x3332))+(((-1.0)*(0.5)*sj3))+((x3340*x3341))+((r01*x3334))+((x3344*x3345)));
evalcond[3]=(((x3338*x3343))+(((-1.0)*r01*x3336))+((r10*x3335))+((x3328*x3346))+((r11*x3334))+(((-1.0)*x3340*x3345))+(((-1.0)*x3339*x3342))+((x3341*x3344))+(((-1.0)*x3328*x3347))+(((0.5)*cj3))+(((-1.0)*x3324*x3348)));
evalcond[4]=((((-1.0)*x3324*x3347))+((r01*x3343))+((x3328*x3348))+(((-1.0)*r11*x3349))+(((-1.0)*x3334*x3342))+(((-1.0)*x3337*x3340))+((x3336*x3338))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r10*x3350))+((x3335*x3344))+((x3324*x3346)));
evalcond[5]=((((-1.0)*r01*x3349))+(((-1.0)*(1.0)*cj3))+((x3335*x3340))+(((-1.0)*r00*x3350))+((x3337*x3344))+(((-1.0)*x3336*x3342))+(((-1.0)*r11*sj0*x3329))+((x3324*x3332))+(((-1.0)*r10*sj0*sj5*x3328))+(((-1.0)*x3334*x3338))+((x3324*x3333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3351=(cj5*sj3);
IkReal x3352=(sj3*sj5);
IkReal x3353=((0.866025403784439)*cj0);
IkReal x3354=((0.866025403784439)*sj0);
CheckValue<IkReal> x3355=IKPowWithIntegerCheck(IKsign((((cj5*r10*x3354))+(((-1.0)*r01*sj5*x3353))+(((0.5)*r12*sj0))+((cj5*r00*x3353))+(((-1.0)*r11*sj5*x3354))+(((0.5)*cj0*r02)))),-1);
if(!x3355.valid){
continue;
}
CheckValue<IkReal> x3356 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x3352))+(((-1.0)*r21*x3351)))),IkReal(((((-1.0)*(0.866025403784439)*r22*sj3))+(((0.5)*r20*x3351))+(((-0.5)*r21*x3352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3355.value)))+(x3356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3357=IKsin(j4);
IkReal x3358=((0.866025403784439)*r22);
IkReal x3359=((0.5)*r20);
IkReal x3360=(cj5*x3357);
IkReal x3361=IKcos(j4);
IkReal x3362=((1.0)*cj5*x3361);
IkReal x3363=(r20*sj5);
IkReal x3364=((0.5)*r21*sj5);
IkReal x3365=((0.866025403784439)*cj0*r02);
IkReal x3366=((0.866025403784439)*r12*sj0);
IkReal x3367=(cj0*cj5*x3357);
IkReal x3368=(cj0*sj5*x3357);
IkReal x3369=(cj5*sj0*x3357);
IkReal x3370=(sj0*sj5*x3357);
IkReal x3371=((0.5)*r00);
IkReal x3372=(cj0*cj5*x3361);
IkReal x3373=((0.5)*r01);
IkReal x3374=(cj0*sj5*x3361);
IkReal x3375=((0.5)*r10);
IkReal x3376=(cj5*sj0*x3361);
IkReal x3377=((0.5)*r11);
IkReal x3378=(sj0*sj5*x3361);
IkReal x3379=((0.866025403784439)*cj0*r12);
IkReal x3380=((0.866025403784439)*r02*sj0);
IkReal x3381=(r00*sj0*sj5);
IkReal x3382=((1.0)*cj0*cj5*x3361);
IkReal x3383=((1.0)*cj0*sj5*x3361);
evalcond[0]=((((-1.0)*x3361*x3363))+(((-1.0)*r21*x3362))+((x3357*x3358))+(((-1.0)*x3359*x3360))+((x3357*x3364)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x3359*x3361))+((r21*x3360))+((x3357*x3363))+((x3361*x3364))+((x3358*x3361)));
evalcond[2]=(((r00*x3368))+((x3377*x3378))+(((-1.0)*x3375*x3376))+(((-1.0)*x3371*x3372))+((r10*x3370))+(((-1.0)*(0.5)*sj3))+((r11*x3369))+((x3373*x3374))+((r01*x3367))+((x3361*x3366))+((x3361*x3365)));
evalcond[3]=(((r10*x3368))+((x3361*x3379))+(((-1.0)*x3372*x3375))+(((-1.0)*x3361*x3380))+((x3374*x3377))+((r11*x3367))+(((-1.0)*x3357*x3381))+(((0.5)*cj3))+(((-1.0)*x3373*x3378))+(((-1.0)*r01*x3369))+((x3371*x3376)));
evalcond[4]=((((-1.0)*x3367*x3375))+((r01*x3376))+((x3368*x3377))+((x3369*x3371))+(((-1.0)*x3370*x3373))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r11*x3382))+((x3357*x3379))+((x3361*x3381))+(((-1.0)*x3357*x3380))+(((-1.0)*r10*x3383)));
evalcond[5]=((((-1.0)*r11*sj0*x3362))+((x3368*x3373))+(((-1.0)*r01*x3382))+(((-1.0)*(1.0)*cj3))+(((-1.0)*x3367*x3371))+((x3370*x3377))+((x3357*x3365))+(((-1.0)*r10*sj0*sj5*x3361))+(((-1.0)*r00*x3383))+((x3357*x3366))+(((-1.0)*x3369*x3375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3384=((0.577350269189626)*cj0);
IkReal x3385=((0.577350269189626)*sj0);
IkReal x3386=(cj0*cj5);
IkReal x3387=(cj5*sj0);
IkReal x3388=((1.0)*cj0);
IkReal x3389=(r01*sj5);
IkReal x3390=(r11*sj5);
if( IKabs(((((-1.0)*x3388*x3389))+(((-1.0)*sj0*x3390))+((r02*x3384))+((r12*x3385))+((r00*x3386))+((r10*x3387)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x3389))+(((-1.0)*r00*x3387))+(((-1.0)*r02*x3385))+(((-1.0)*x3388*x3390))+((r12*x3384))+((r10*x3386)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3388*x3389))+(((-1.0)*sj0*x3390))+((r02*x3384))+((r12*x3385))+((r00*x3386))+((r10*x3387))))+IKsqr((((sj0*x3389))+(((-1.0)*r00*x3387))+(((-1.0)*r02*x3385))+(((-1.0)*x3388*x3390))+((r12*x3384))+((r10*x3386))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x3388*x3389))+(((-1.0)*sj0*x3390))+((r02*x3384))+((r12*x3385))+((r00*x3386))+((r10*x3387))), (((sj0*x3389))+(((-1.0)*r00*x3387))+(((-1.0)*r02*x3385))+(((-1.0)*x3388*x3390))+((r12*x3384))+((r10*x3386))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x3391=((0.5)*cj0);
IkReal x3392=((0.5)*sj0);
IkReal x3393=((0.866025403784439)*cj0*cj5);
IkReal x3394=((0.866025403784439)*cj0*sj5);
IkReal x3395=((0.866025403784439)*cj5*sj0);
IkReal x3396=((0.866025403784439)*sj0*sj5);
evalcond[0]=((((-1.0)*r01*x3396))+(((-1.0)*r10*x3393))+((r02*x3392))+((r00*x3395))+(((-1.0)*r12*x3391))+(((0.866025403784439)*(IKcos(j3))))+((r11*x3394)));
evalcond[1]=((((-1.0)*r10*x3395))+((r11*x3396))+(((-1.0)*r12*x3392))+((r01*x3394))+(((-1.0)*r02*x3391))+(((-1.0)*r00*x3393))+(((0.866025403784439)*(IKsin(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3397=(cj0*r02);
IkReal x3398=(r12*sj0);
IkReal x3399=(cj0*cj5*r00);
IkReal x3400=(cj0*r01*sj5);
IkReal x3401=(cj5*r10*sj0);
IkReal x3402=(r11*sj0*sj5);
IkReal x3403=(cj5*sj3);
IkReal x3404=(sj3*sj5);
j4eval[0]=((((-1.73205080756888)*x3402))+x3397+x3398+(((1.73205080756888)*x3399))+(((1.73205080756888)*x3401))+(((-1.73205080756888)*x3400)));
j4eval[1]=((((0.5)*(IKabs((((r20*x3403))+(((-1.0)*r21*x3404))+(((-1.0)*(1.73205080756888)*r22*sj3)))))))+(IKabs((((r20*x3404))+((r21*x3403))))));
j4eval[2]=IKsign(((((0.866025403784439)*x3399))+(((-0.866025403784439)*x3402))+(((0.5)*x3397))+(((0.866025403784439)*x3401))+(((-0.866025403784439)*x3400))+(((0.5)*x3398))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3405=r20*r20;
IkReal x3406=r21*r21;
IkReal x3407=r22*r22;
IkReal x3408=(cj5*r20*r22);
IkReal x3409=(r21*r22*sj5);
IkReal x3410=(cj5*r20*r21*sj5);
IkReal x3411=cj5*cj5;
IkReal x3412=(x3405*x3411);
IkReal x3413=(x3406*x3411);
j4eval[0]=((((-1.0)*x3406))+(((-3.0)*x3413))+(((3.0)*x3412))+(((-4.0)*x3405))+(((-3.46410161513775)*x3409))+(((-3.0)*x3407))+(((3.46410161513775)*x3408))+(((-6.0)*x3410)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-0.5)*x3406))+(((-1.5)*x3413))+(((1.73205080756888)*x3408))+(((-1.5)*x3407))+(((-3.0)*x3410))+(((-1.73205080756888)*x3409))+(((1.5)*x3412))+(((-2.0)*x3405))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3414=(cj0*r00*r20);
IkReal x3415=(cj0*r01*r21);
IkReal x3416=(cj0*r02*r22);
IkReal x3417=(r10*r20*sj0);
IkReal x3418=(r11*r21*sj0);
IkReal x3419=(r12*r22*sj0);
IkReal x3420=((1.73205080756888)*r22);
IkReal x3421=(cj0*cj5*r00);
IkReal x3422=(cj0*cj5*r02*r20);
IkReal x3423=(cj0*r01*sj5);
IkReal x3424=(cj0*r02*r21*sj5);
IkReal x3425=(cj5*r10*sj0);
IkReal x3426=(cj5*r12*r20*sj0);
IkReal x3427=(r11*sj0*sj5);
IkReal x3428=(r12*r21*sj0*sj5);
IkReal x3429=(cj0*cj5*r00*r21*sj5);
IkReal x3430=(cj0*cj5*r01*r20*sj5);
IkReal x3431=(cj5*r10*r21*sj0*sj5);
IkReal x3432=(cj5*r11*r20*sj0*sj5);
IkReal x3433=cj5*cj5;
IkReal x3434=(cj0*r00*r20*x3433);
IkReal x3435=(cj0*r01*r21*x3433);
IkReal x3436=(r10*r20*sj0*x3433);
IkReal x3437=(r11*r21*sj0*x3433);
IkReal x3438=(r21*sj3);
IkReal x3439=(r20*sj3);
IkReal x3440=((0.866025403784439)*r22);
j4eval[0]=((((1.73205080756888)*x3422))+(((3.0)*x3434))+(((-1.0)*x3420*x3427))+(((-4.0)*x3417))+((x3420*x3425))+(((-3.0)*x3429))+(((-1.0)*x3415))+(((1.73205080756888)*x3426))+(((-3.0)*x3416))+(((3.0)*x3436))+(((-3.0)*x3431))+(((-3.0)*x3437))+(((-3.0)*x3435))+(((-1.73205080756888)*x3428))+((x3420*x3421))+(((-1.73205080756888)*x3424))+(((-1.0)*x3418))+(((-3.0)*x3432))+(((-1.0)*x3420*x3423))+(((-4.0)*x3414))+(((-3.0)*x3430))+(((-3.0)*x3419)));
j4eval[1]=((IKabs((((sj5*x3439))+((cj5*x3438)))))+(((0.5)*(IKabs(((((-1.0)*cj5*x3439))+((sj5*x3438))+((sj3*x3420))))))));
j4eval[2]=IKsign(((((-0.5)*x3415))+(((-1.5)*x3431))+(((-1.5)*x3432))+(((-0.5)*x3418))+(((-1.5)*x3430))+(((-0.866025403784439)*x3424))+((x3425*x3440))+(((-1.5)*x3419))+(((-1.0)*x3427*x3440))+(((-2.0)*x3417))+(((-1.5)*x3429))+(((-1.5)*x3437))+(((0.866025403784439)*x3426))+(((1.5)*x3434))+(((0.866025403784439)*x3422))+(((-2.0)*x3414))+(((-1.5)*x3416))+(((-1.5)*x3435))+(((-0.866025403784439)*x3428))+((x3421*x3440))+(((1.5)*x3436))+(((-1.0)*x3423*x3440))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3441=(r02*sj0);
IkReal x3442=(cj0*r12);
IkReal x3443=(cj0*cj5*r10);
IkReal x3444=(cj0*r11*sj5);
IkReal x3445=(cj5*r00*sj0);
IkReal x3446=(r01*sj0*sj5);
j4eval[0]=((((-1.73205080756888)*x3446))+(((-1.0)*x3442))+(((1.73205080756888)*x3444))+(((-1.73205080756888)*x3443))+x3441+(((1.73205080756888)*x3445)));
j4eval[1]=IKsign(((((-0.866025403784439)*x3446))+(((-0.866025403784439)*x3443))+(((0.866025403784439)*x3445))+(((0.866025403784439)*x3444))+(((0.5)*x3441))+(((-0.5)*x3442))));
j4eval[2]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3447=r20*r20;
IkReal x3448=r21*r21;
IkReal x3449=r22*r22;
IkReal x3450=(cj5*r20*r22);
IkReal x3451=(r21*r22*sj5);
IkReal x3452=(cj5*r20*r21*sj5);
IkReal x3453=cj5*cj5;
IkReal x3454=(x3447*x3453);
IkReal x3455=(x3448*x3453);
j4eval[0]=((((-4.0)*x3447))+(((-3.0)*x3449))+(((-1.0)*x3448))+(((-6.0)*x3452))+(((-3.46410161513775)*x3451))+(((-3.0)*x3455))+(((3.0)*x3454))+(((3.46410161513775)*x3450)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-3.0)*x3452))+(((-2.0)*x3447))+(((1.5)*x3454))+(((1.73205080756888)*x3450))+(((-0.5)*x3448))+(((-1.73205080756888)*x3451))+(((-1.5)*x3455))+(((-1.5)*x3449))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3456=((1.73205080756888)*cj0);
IkReal x3457=((1.73205080756888)*sj0);
IkReal x3458=((((-1.0)*r01*sj5*x3457))+((r11*sj5*x3456))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*cj5*r10*x3456))+((cj5*r00*x3457)));
j4eval[0]=x3458;
j4eval[1]=IKsign(x3458);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3459=((1.73205080756888)*cj0*cj5);
IkReal x3460=((1.73205080756888)*cj0*sj5);
IkReal x3461=((1.73205080756888)*cj5*sj0);
IkReal x3462=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x3463=IKPowWithIntegerCheck(IKsign((((r00*x3461))+((r11*x3460))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r10*x3459))+(((-1.0)*r01*x3462)))),-1);
if(!x3463.valid){
continue;
}
CheckValue<IkReal> x3464 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r01))*((cj0*sj5))))+(((-0.866025403784439)*cj5*r10*sj0))+(((0.866025403784439)*r11*sj0*sj5))+(((-0.866025403784439)*cj0*cj5*r00))+(((1.5)*cj0*r02))+(((1.5)*r12*sj0)))),IkReal(((((-1.0)*r00*x3460))+(((-1.0)*r01*x3459))+(((-1.0)*r11*x3461))+(((-1.0)*r10*x3462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3463.value)))+(x3464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3465=IKsin(j4);
IkReal x3466=((0.866025403784439)*r22);
IkReal x3467=((0.5)*r20);
IkReal x3468=(cj5*x3465);
IkReal x3469=IKcos(j4);
IkReal x3470=((1.0)*cj5*x3469);
IkReal x3471=(r20*sj5);
IkReal x3472=((0.5)*r21*sj5);
IkReal x3473=((0.866025403784439)*cj0*r02);
IkReal x3474=((0.866025403784439)*r12*sj0);
IkReal x3475=(cj0*cj5*x3465);
IkReal x3476=(cj0*sj5*x3465);
IkReal x3477=(cj5*sj0*x3465);
IkReal x3478=(sj0*sj5*x3465);
IkReal x3479=((0.5)*r00);
IkReal x3480=(cj0*cj5*x3469);
IkReal x3481=((0.5)*r01);
IkReal x3482=(cj0*sj5*x3469);
IkReal x3483=((0.5)*r10);
IkReal x3484=(cj5*sj0*x3469);
IkReal x3485=((0.5)*r11);
IkReal x3486=(sj0*sj5*x3469);
IkReal x3487=((0.866025403784439)*cj0*r12);
IkReal x3488=((0.866025403784439)*r02*sj0);
IkReal x3489=(r00*sj0*sj5);
IkReal x3490=((1.0)*cj0*cj5*x3469);
IkReal x3491=((1.0)*cj0*sj5*x3469);
evalcond[0]=((((-1.0)*x3469*x3471))+(((-1.0)*x3467*x3468))+((x3465*x3466))+((x3465*x3472))+(((-1.0)*r21*x3470)));
evalcond[1]=((0.866025403784439)+((x3469*x3472))+((x3465*x3471))+((r21*x3468))+(((-1.0)*cj5*x3467*x3469))+((x3466*x3469)));
evalcond[2]=(((x3485*x3486))+((r11*x3477))+(((-1.0)*x3479*x3480))+((r01*x3475))+(((-1.0)*x3483*x3484))+((x3469*x3474))+((r10*x3478))+((r00*x3476))+((x3469*x3473))+((x3481*x3482)));
evalcond[3]=((((-1.0)*x3478*x3481))+(((-1.0)*r11*x3490))+((x3469*x3489))+(((-1.0)*r10*x3491))+((r01*x3484))+((x3476*x3485))+(((-1.0)*x3465*x3488))+((x3465*x3487))+(((-1.0)*x3475*x3483))+((x3477*x3479)));
evalcond[4]=((0.5)+((r10*x3476))+(((-1.0)*x3480*x3483))+((x3479*x3484))+((x3482*x3485))+(((-1.0)*x3469*x3488))+(((-1.0)*r01*x3477))+((r11*x3475))+(((-1.0)*x3481*x3486))+((x3469*x3487))+(((-1.0)*x3465*x3489)));
evalcond[5]=((1.0)+(((-1.0)*x3477*x3483))+((x3476*x3481))+(((-1.0)*r10*sj0*sj5*x3469))+(((-1.0)*r01*x3490))+((x3465*x3473))+((x3465*x3474))+(((-1.0)*x3475*x3479))+(((-1.0)*r11*sj0*x3470))+(((-1.0)*r00*x3491))+((x3478*x3485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3492=((1.73205080756888)*r21);
IkReal x3493=(cj5*r20);
IkReal x3494=(r21*sj5);
IkReal x3495=r20*r20;
IkReal x3496=r21*r21;
IkReal x3497=((1.5)*(cj5*cj5));
CheckValue<IkReal> x3498 = IKatan2WithCheck(IkReal(((((1.73205080756888)*r20*sj5))+((cj5*x3492)))),IkReal(((((-0.866025403784439)*x3493))+(((1.5)*r22))+(((0.866025403784439)*x3494)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3498.valid){
continue;
}
CheckValue<IkReal> x3499=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3496*x3497))+(((-0.5)*x3496))+((x3495*x3497))+(((-3.0)*cj5*r20*x3494))+(((1.73205080756888)*r22*x3493))+(((-2.0)*x3495))+(((-1.0)*r22*sj5*x3492))+(((-1.0)*(1.5)*(r22*r22))))),-1);
if(!x3499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3498.value)+(((1.5707963267949)*(x3499.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3500=IKsin(j4);
IkReal x3501=((0.866025403784439)*r22);
IkReal x3502=((0.5)*r20);
IkReal x3503=(cj5*x3500);
IkReal x3504=IKcos(j4);
IkReal x3505=((1.0)*cj5*x3504);
IkReal x3506=(r20*sj5);
IkReal x3507=((0.5)*r21*sj5);
IkReal x3508=((0.866025403784439)*cj0*r02);
IkReal x3509=((0.866025403784439)*r12*sj0);
IkReal x3510=(cj0*cj5*x3500);
IkReal x3511=(cj0*sj5*x3500);
IkReal x3512=(cj5*sj0*x3500);
IkReal x3513=(sj0*sj5*x3500);
IkReal x3514=((0.5)*r00);
IkReal x3515=(cj0*cj5*x3504);
IkReal x3516=((0.5)*r01);
IkReal x3517=(cj0*sj5*x3504);
IkReal x3518=((0.5)*r10);
IkReal x3519=(cj5*sj0*x3504);
IkReal x3520=((0.5)*r11);
IkReal x3521=(sj0*sj5*x3504);
IkReal x3522=((0.866025403784439)*cj0*r12);
IkReal x3523=((0.866025403784439)*r02*sj0);
IkReal x3524=(r00*sj0*sj5);
IkReal x3525=((1.0)*cj0*cj5*x3504);
IkReal x3526=((1.0)*cj0*sj5*x3504);
evalcond[0]=((((-1.0)*x3504*x3506))+((x3500*x3501))+(((-1.0)*r21*x3505))+((x3500*x3507))+(((-1.0)*x3502*x3503)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x3502*x3504))+((x3504*x3507))+((r21*x3503))+((x3501*x3504))+((x3500*x3506)));
evalcond[2]=(((x3504*x3508))+((r10*x3513))+((r11*x3512))+(((-1.0)*x3518*x3519))+((r00*x3511))+(((-1.0)*x3514*x3515))+((x3516*x3517))+((r01*x3510))+((x3504*x3509))+((x3520*x3521)));
evalcond[3]=(((x3500*x3522))+(((-1.0)*r10*x3526))+(((-1.0)*x3510*x3518))+((x3511*x3520))+(((-1.0)*r11*x3525))+((r01*x3519))+(((-1.0)*x3500*x3523))+((x3512*x3514))+(((-1.0)*x3513*x3516))+((x3504*x3524)));
evalcond[4]=((0.5)+((r10*x3511))+((x3517*x3520))+(((-1.0)*x3500*x3524))+(((-1.0)*x3516*x3521))+((x3504*x3522))+((r11*x3510))+(((-1.0)*r01*x3512))+(((-1.0)*x3515*x3518))+((x3514*x3519))+(((-1.0)*x3504*x3523)));
evalcond[5]=((1.0)+(((-1.0)*r00*x3526))+(((-1.0)*x3512*x3518))+(((-1.0)*x3510*x3514))+(((-1.0)*r01*x3525))+((x3500*x3508))+((x3500*x3509))+((x3511*x3516))+(((-1.0)*r11*sj0*x3505))+((x3513*x3520))+(((-1.0)*r10*sj0*sj5*x3504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3527=((0.866025403784439)*cj0);
IkReal x3528=((0.866025403784439)*sj0);
CheckValue<IkReal> x3529=IKPowWithIntegerCheck(IKsign((((cj5*r00*x3528))+(((-1.0)*cj5*r10*x3527))+((r11*sj5*x3527))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0))+(((-1.0)*r01*sj5*x3528)))),-1);
if(!x3529.valid){
continue;
}
CheckValue<IkReal> x3530 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3529.value)))+(x3530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3531=IKsin(j4);
IkReal x3532=((0.866025403784439)*r22);
IkReal x3533=((0.5)*r20);
IkReal x3534=(cj5*x3531);
IkReal x3535=IKcos(j4);
IkReal x3536=((1.0)*cj5*x3535);
IkReal x3537=(r20*sj5);
IkReal x3538=((0.5)*r21*sj5);
IkReal x3539=((0.866025403784439)*cj0*r02);
IkReal x3540=((0.866025403784439)*r12*sj0);
IkReal x3541=(cj0*cj5*x3531);
IkReal x3542=(cj0*sj5*x3531);
IkReal x3543=(cj5*sj0*x3531);
IkReal x3544=(sj0*sj5*x3531);
IkReal x3545=((0.5)*r00);
IkReal x3546=(cj0*cj5*x3535);
IkReal x3547=((0.5)*r01);
IkReal x3548=(cj0*sj5*x3535);
IkReal x3549=((0.5)*r10);
IkReal x3550=(cj5*sj0*x3535);
IkReal x3551=((0.5)*r11);
IkReal x3552=(sj0*sj5*x3535);
IkReal x3553=((0.866025403784439)*cj0*r12);
IkReal x3554=((0.866025403784439)*r02*sj0);
IkReal x3555=(r00*sj0*sj5);
IkReal x3556=((1.0)*cj0*cj5*x3535);
IkReal x3557=((1.0)*cj0*sj5*x3535);
evalcond[0]=(((x3531*x3538))+((x3531*x3532))+(((-1.0)*x3533*x3534))+(((-1.0)*x3535*x3537))+(((-1.0)*r21*x3536)));
evalcond[1]=((0.866025403784439)+((x3535*x3538))+((x3532*x3535))+((r21*x3534))+(((-1.0)*cj5*x3533*x3535))+((x3531*x3537)));
evalcond[2]=(((r00*x3542))+((r01*x3541))+((x3551*x3552))+(((-1.0)*x3549*x3550))+((x3547*x3548))+(((-1.0)*x3545*x3546))+((r10*x3544))+((x3535*x3539))+((x3535*x3540))+((r11*x3543)));
evalcond[3]=((((-1.0)*r11*x3556))+(((-1.0)*x3541*x3549))+(((-1.0)*x3544*x3547))+((r01*x3550))+((x3531*x3553))+(((-1.0)*x3531*x3554))+((x3543*x3545))+((x3542*x3551))+((x3535*x3555))+(((-1.0)*r10*x3557)));
evalcond[4]=((0.5)+((r11*x3541))+((r10*x3542))+((x3535*x3553))+(((-1.0)*x3531*x3555))+(((-1.0)*x3546*x3549))+(((-1.0)*x3547*x3552))+(((-1.0)*x3535*x3554))+((x3545*x3550))+(((-1.0)*r01*x3543))+((x3548*x3551)));
evalcond[5]=((1.0)+(((-1.0)*r01*x3556))+(((-1.0)*r10*sj0*sj5*x3535))+(((-1.0)*x3543*x3549))+((x3544*x3551))+(((-1.0)*x3541*x3545))+((x3531*x3540))+(((-1.0)*r11*sj0*x3536))+((x3542*x3547))+(((-1.0)*r00*x3557))+((x3531*x3539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3558=(r02*sj0);
IkReal x3559=(cj0*r12);
IkReal x3560=(cj0*cj5*r10);
IkReal x3561=(cj0*r11*sj5);
IkReal x3562=(cj5*r00*sj0);
IkReal x3563=(r01*sj0*sj5);
j4eval[0]=(x3558+(((1.73205080756888)*x3562))+(((-1.0)*x3559))+(((1.73205080756888)*x3561))+(((-1.73205080756888)*x3560))+(((-1.73205080756888)*x3563)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.866025403784439)*x3561))+(((0.866025403784439)*x3562))+(((-0.866025403784439)*x3560))+(((-0.866025403784439)*x3563))+(((-0.5)*x3559))+(((0.5)*x3558))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3564=r20*r20;
IkReal x3565=r21*r21;
IkReal x3566=r22*r22;
IkReal x3567=(cj5*r20*r22);
IkReal x3568=(r21*r22*sj5);
IkReal x3569=(cj5*r20*r21*sj5);
IkReal x3570=cj5*cj5;
IkReal x3571=(x3564*x3570);
IkReal x3572=(x3565*x3570);
j4eval[0]=((((-4.0)*x3564))+(((3.0)*x3571))+(((-3.0)*x3572))+(((3.46410161513775)*x3567))+(((-3.0)*x3566))+(((-1.0)*x3565))+(((-6.0)*x3569))+(((-3.46410161513775)*x3568)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-1.5)*x3566))+(((-1.5)*x3572))+(((-2.0)*x3564))+(((-1.73205080756888)*x3568))+(((-0.5)*x3565))+(((1.5)*x3571))+(((1.73205080756888)*x3567))+(((-3.0)*x3569))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3573=((1.73205080756888)*cj0);
IkReal x3574=((1.73205080756888)*sj0);
IkReal x3575=((((-1.0)*cj5*r10*x3573))+(((-1.0)*r01*sj5*x3574))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*sj5*x3573))+((cj5*r00*x3574)));
j4eval[0]=x3575;
j4eval[1]=IKsign(x3575);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3576=((1.73205080756888)*cj0*cj5);
IkReal x3577=((1.73205080756888)*cj0*sj5);
IkReal x3578=((1.73205080756888)*cj5*sj0);
IkReal x3579=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x3580 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r01))*((cj0*sj5))))+(((-0.866025403784439)*cj5*r10*sj0))+(((0.866025403784439)*r11*sj0*sj5))+(((-0.866025403784439)*cj0*cj5*r00))+(((1.5)*cj0*r02))+(((1.5)*r12*sj0)))),IkReal(((((-1.0)*r00*x3577))+(((-1.0)*r01*x3576))+(((-1.0)*r10*x3579))+(((-1.0)*r11*x3578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3580.valid){
continue;
}
CheckValue<IkReal> x3581=IKPowWithIntegerCheck(IKsign((((r00*x3578))+(((-1.0)*r10*x3576))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*x3579))+((r11*x3577)))),-1);
if(!x3581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3580.value)+(((1.5707963267949)*(x3581.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3582=IKsin(j4);
IkReal x3583=((0.866025403784439)*r22);
IkReal x3584=((0.5)*r20);
IkReal x3585=(cj5*x3582);
IkReal x3586=IKcos(j4);
IkReal x3587=((1.0)*cj5*x3586);
IkReal x3588=(r20*sj5);
IkReal x3589=((0.5)*r21*sj5);
IkReal x3590=((0.866025403784439)*cj0*r02);
IkReal x3591=((0.866025403784439)*r12*sj0);
IkReal x3592=(cj0*cj5*x3582);
IkReal x3593=(cj0*sj5*x3582);
IkReal x3594=(cj5*sj0*x3582);
IkReal x3595=(sj0*sj5*x3582);
IkReal x3596=((0.5)*r00);
IkReal x3597=(cj0*cj5*x3586);
IkReal x3598=((0.5)*r01);
IkReal x3599=(cj0*sj5*x3586);
IkReal x3600=((0.5)*r10);
IkReal x3601=(cj5*sj0*x3586);
IkReal x3602=((0.5)*r11);
IkReal x3603=(sj0*sj5*x3586);
IkReal x3604=((0.866025403784439)*cj0*r12);
IkReal x3605=((0.866025403784439)*r02*sj0);
IkReal x3606=(r00*sj0*sj5);
IkReal x3607=((1.0)*cj0*cj5*x3586);
IkReal x3608=((1.0)*cj0*sj5*x3586);
evalcond[0]=((((-1.0)*x3586*x3588))+((x3582*x3589))+(((-1.0)*r21*x3587))+(((-1.0)*x3584*x3585))+((x3582*x3583)));
evalcond[1]=((0.866025403784439)+((x3583*x3586))+((x3582*x3588))+((r21*x3585))+((x3586*x3589))+(((-1.0)*cj5*x3584*x3586)));
evalcond[2]=(((x3586*x3591))+(((-1.0)*x3596*x3597))+((r01*x3592))+(((-1.0)*x3600*x3601))+((r10*x3595))+((r00*x3593))+((x3602*x3603))+((r11*x3594))+((x3586*x3590))+((x3598*x3599)));
evalcond[3]=(((x3593*x3602))+((x3582*x3604))+(((-1.0)*x3595*x3598))+((r01*x3601))+(((-1.0)*r10*x3608))+(((-1.0)*x3582*x3605))+(((-1.0)*x3592*x3600))+((x3586*x3606))+((x3594*x3596))+(((-1.0)*r11*x3607)));
evalcond[4]=((-0.5)+(((-1.0)*x3582*x3606))+(((-1.0)*x3598*x3603))+(((-1.0)*x3586*x3605))+(((-1.0)*x3597*x3600))+((r10*x3593))+((x3586*x3604))+((r11*x3592))+(((-1.0)*r01*x3594))+((x3596*x3601))+((x3599*x3602)));
evalcond[5]=((-1.0)+((x3593*x3598))+(((-1.0)*r10*sj0*sj5*x3586))+((x3582*x3590))+((x3595*x3602))+(((-1.0)*r00*x3608))+((x3582*x3591))+(((-1.0)*r11*sj0*x3587))+(((-1.0)*r01*x3607))+(((-1.0)*x3592*x3596))+(((-1.0)*x3594*x3600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3609=((1.73205080756888)*r21);
IkReal x3610=(cj5*r20);
IkReal x3611=(r21*sj5);
IkReal x3612=r20*r20;
IkReal x3613=r21*r21;
IkReal x3614=((1.5)*(cj5*cj5));
CheckValue<IkReal> x3615 = IKatan2WithCheck(IkReal((((cj5*x3609))+(((1.73205080756888)*r20*sj5)))),IkReal(((((-0.866025403784439)*x3610))+(((0.866025403784439)*x3611))+(((1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3615.valid){
continue;
}
CheckValue<IkReal> x3616=IKPowWithIntegerCheck(IKsign((((x3612*x3614))+(((-0.5)*x3613))+(((-2.0)*x3612))+(((-3.0)*cj5*r20*x3611))+(((-1.0)*r22*sj5*x3609))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*x3613*x3614))+(((1.73205080756888)*r22*x3610)))),-1);
if(!x3616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3615.value)+(((1.5707963267949)*(x3616.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3617=IKsin(j4);
IkReal x3618=((0.866025403784439)*r22);
IkReal x3619=((0.5)*r20);
IkReal x3620=(cj5*x3617);
IkReal x3621=IKcos(j4);
IkReal x3622=((1.0)*cj5*x3621);
IkReal x3623=(r20*sj5);
IkReal x3624=((0.5)*r21*sj5);
IkReal x3625=((0.866025403784439)*cj0*r02);
IkReal x3626=((0.866025403784439)*r12*sj0);
IkReal x3627=(cj0*cj5*x3617);
IkReal x3628=(cj0*sj5*x3617);
IkReal x3629=(cj5*sj0*x3617);
IkReal x3630=(sj0*sj5*x3617);
IkReal x3631=((0.5)*r00);
IkReal x3632=(cj0*cj5*x3621);
IkReal x3633=((0.5)*r01);
IkReal x3634=(cj0*sj5*x3621);
IkReal x3635=((0.5)*r10);
IkReal x3636=(cj5*sj0*x3621);
IkReal x3637=((0.5)*r11);
IkReal x3638=(sj0*sj5*x3621);
IkReal x3639=((0.866025403784439)*cj0*r12);
IkReal x3640=((0.866025403784439)*r02*sj0);
IkReal x3641=(r00*sj0*sj5);
IkReal x3642=((1.0)*cj0*cj5*x3621);
IkReal x3643=((1.0)*cj0*sj5*x3621);
evalcond[0]=(((x3617*x3624))+(((-1.0)*x3621*x3623))+((x3617*x3618))+(((-1.0)*x3619*x3620))+(((-1.0)*r21*x3622)));
evalcond[1]=((0.866025403784439)+((x3621*x3624))+((x3618*x3621))+((r21*x3620))+(((-1.0)*cj5*x3619*x3621))+((x3617*x3623)));
evalcond[2]=(((x3621*x3626))+((r00*x3628))+(((-1.0)*x3635*x3636))+((x3621*x3625))+((r10*x3630))+((r01*x3627))+((r11*x3629))+(((-1.0)*x3631*x3632))+((x3633*x3634))+((x3637*x3638)));
evalcond[3]=(((x3621*x3641))+(((-1.0)*r10*x3643))+(((-1.0)*x3627*x3635))+(((-1.0)*x3617*x3640))+((x3629*x3631))+((x3617*x3639))+((x3628*x3637))+(((-1.0)*x3630*x3633))+(((-1.0)*r11*x3642))+((r01*x3636)));
evalcond[4]=((-0.5)+(((-1.0)*x3633*x3638))+((r10*x3628))+(((-1.0)*x3617*x3641))+((x3631*x3636))+(((-1.0)*x3632*x3635))+((x3621*x3639))+(((-1.0)*r01*x3629))+((r11*x3627))+(((-1.0)*x3621*x3640))+((x3634*x3637)));
evalcond[5]=((-1.0)+(((-1.0)*r10*sj0*sj5*x3621))+(((-1.0)*r11*sj0*x3622))+((x3630*x3637))+(((-1.0)*r00*x3643))+(((-1.0)*x3627*x3631))+(((-1.0)*r01*x3642))+(((-1.0)*x3629*x3635))+((x3617*x3625))+((x3628*x3633))+((x3617*x3626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3644=((0.866025403784439)*cj0);
IkReal x3645=((0.866025403784439)*sj0);
CheckValue<IkReal> x3646=IKPowWithIntegerCheck(IKsign((((cj5*r00*x3645))+(((-1.0)*r01*sj5*x3645))+(((-1.0)*cj5*r10*x3644))+((r11*sj5*x3644))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0)))),-1);
if(!x3646.valid){
continue;
}
CheckValue<IkReal> x3647 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3646.value)))+(x3647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3648=IKsin(j4);
IkReal x3649=((0.866025403784439)*r22);
IkReal x3650=((0.5)*r20);
IkReal x3651=(cj5*x3648);
IkReal x3652=IKcos(j4);
IkReal x3653=((1.0)*cj5*x3652);
IkReal x3654=(r20*sj5);
IkReal x3655=((0.5)*r21*sj5);
IkReal x3656=((0.866025403784439)*cj0*r02);
IkReal x3657=((0.866025403784439)*r12*sj0);
IkReal x3658=(cj0*cj5*x3648);
IkReal x3659=(cj0*sj5*x3648);
IkReal x3660=(cj5*sj0*x3648);
IkReal x3661=(sj0*sj5*x3648);
IkReal x3662=((0.5)*r00);
IkReal x3663=(cj0*cj5*x3652);
IkReal x3664=((0.5)*r01);
IkReal x3665=(cj0*sj5*x3652);
IkReal x3666=((0.5)*r10);
IkReal x3667=(cj5*sj0*x3652);
IkReal x3668=((0.5)*r11);
IkReal x3669=(sj0*sj5*x3652);
IkReal x3670=((0.866025403784439)*cj0*r12);
IkReal x3671=((0.866025403784439)*r02*sj0);
IkReal x3672=(r00*sj0*sj5);
IkReal x3673=((1.0)*cj0*cj5*x3652);
IkReal x3674=((1.0)*cj0*sj5*x3652);
evalcond[0]=((((-1.0)*x3650*x3651))+((x3648*x3649))+(((-1.0)*x3652*x3654))+((x3648*x3655))+(((-1.0)*r21*x3653)));
evalcond[1]=((0.866025403784439)+((r21*x3651))+((x3649*x3652))+(((-1.0)*cj5*x3650*x3652))+((x3652*x3655))+((x3648*x3654)));
evalcond[2]=((((-1.0)*x3662*x3663))+((x3652*x3657))+((x3652*x3656))+((r11*x3660))+(((-1.0)*x3666*x3667))+((r01*x3658))+((r10*x3661))+((x3664*x3665))+((x3668*x3669))+((r00*x3659)));
evalcond[3]=((((-1.0)*x3661*x3664))+((x3652*x3672))+((x3659*x3668))+((x3660*x3662))+(((-1.0)*x3658*x3666))+((x3648*x3670))+(((-1.0)*x3648*x3671))+(((-1.0)*r10*x3674))+(((-1.0)*r11*x3673))+((r01*x3667)));
evalcond[4]=((-0.5)+(((-1.0)*x3663*x3666))+((x3665*x3668))+(((-1.0)*x3652*x3671))+((x3662*x3667))+(((-1.0)*r01*x3660))+(((-1.0)*x3664*x3669))+(((-1.0)*x3648*x3672))+((r10*x3659))+((r11*x3658))+((x3652*x3670)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x3674))+(((-1.0)*x3660*x3666))+((x3661*x3668))+(((-1.0)*r01*x3673))+((x3648*x3656))+(((-1.0)*x3658*x3662))+(((-1.0)*r10*sj0*sj5*x3652))+(((-1.0)*r11*sj0*x3653))+((x3659*x3664))+((x3648*x3657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3675=(cj5*sj3);
IkReal x3676=(sj3*sj5);
IkReal x3677=((0.5)*r21);
IkReal x3678=((2.0)*r20);
IkReal x3679=(cj0*r00);
IkReal x3680=(cj0*r01);
IkReal x3681=((1.5)*r22);
IkReal x3682=(r10*sj0);
IkReal x3683=(r11*sj0);
IkReal x3684=((0.866025403784439)*cj5*r22);
IkReal x3685=(cj5*r20);
IkReal x3686=((0.866025403784439)*cj0*r02);
IkReal x3687=((0.866025403784439)*r22*sj5);
IkReal x3688=(r21*sj5);
IkReal x3689=((0.866025403784439)*r12*sj0);
IkReal x3690=((1.5)*cj5*r21*sj5);
IkReal x3691=((1.5)*cj5*r20*sj5);
IkReal x3692=cj5*cj5;
IkReal x3693=((1.5)*r20*x3692);
IkReal x3694=((1.5)*r21*x3692);
CheckValue<IkReal> x3695 = IKatan2WithCheck(IkReal((((r21*x3675))+((r20*x3676)))),IkReal((((sj3*(((0.866025403784439)*r22))))+((x3676*x3677))+(((-0.5)*r20*x3675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3695.valid){
continue;
}
CheckValue<IkReal> x3696=IKPowWithIntegerCheck(IKsign((((x3679*x3693))+((x3679*x3684))+(((-1.0)*cj0*r02*x3681))+(((-1.0)*x3678*x3679))+((x3685*x3689))+(((-1.0)*x3680*x3687))+(((-1.0)*x3683*x3694))+(((-1.0)*x3686*x3688))+(((-1.0)*x3683*x3691))+(((-1.0)*x3678*x3682))+(((-1.0)*x3680*x3691))+((x3682*x3684))+((x3682*x3693))+((x3685*x3686))+(((-1.0)*x3677*x3683))+(((-1.0)*x3680*x3694))+(((-1.0)*x3682*x3690))+(((-1.0)*x3677*x3680))+(((-1.0)*x3679*x3690))+(((-1.0)*x3683*x3687))+(((-1.0)*x3688*x3689))+(((-1.0)*r12*sj0*x3681)))),-1);
if(!x3696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3695.value)+(((1.5707963267949)*(x3696.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3697=IKsin(j4);
IkReal x3698=((0.866025403784439)*r22);
IkReal x3699=((0.5)*r20);
IkReal x3700=(cj5*x3697);
IkReal x3701=IKcos(j4);
IkReal x3702=((1.0)*cj5*x3701);
IkReal x3703=(r20*sj5);
IkReal x3704=((0.5)*r21*sj5);
IkReal x3705=((0.866025403784439)*cj0*r02);
IkReal x3706=((0.866025403784439)*r12*sj0);
IkReal x3707=(cj0*cj5*x3697);
IkReal x3708=(cj0*sj5*x3697);
IkReal x3709=(cj5*sj0*x3697);
IkReal x3710=(sj0*sj5*x3697);
IkReal x3711=((0.5)*r00);
IkReal x3712=(cj0*cj5*x3701);
IkReal x3713=((0.5)*r01);
IkReal x3714=(cj0*sj5*x3701);
IkReal x3715=((0.5)*r10);
IkReal x3716=(cj5*sj0*x3701);
IkReal x3717=((0.5)*r11);
IkReal x3718=(sj0*sj5*x3701);
IkReal x3719=((0.866025403784439)*cj0*r12);
IkReal x3720=((0.866025403784439)*r02*sj0);
IkReal x3721=(r00*sj0*sj5);
IkReal x3722=((1.0)*cj0*cj5*x3701);
IkReal x3723=((1.0)*cj0*sj5*x3701);
evalcond[0]=((((-1.0)*x3699*x3700))+(((-1.0)*x3701*x3703))+((x3697*x3698))+((x3697*x3704))+(((-1.0)*r21*x3702)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x3699*x3701))+((r21*x3700))+((x3698*x3701))+((x3697*x3703))+((x3701*x3704)));
evalcond[2]=(((r00*x3708))+((x3701*x3706))+((x3701*x3705))+(((0.5)*sj3))+((r10*x3710))+((x3713*x3714))+(((-1.0)*x3715*x3716))+((r11*x3709))+((x3717*x3718))+(((-1.0)*x3711*x3712))+((r01*x3707)));
evalcond[3]=(((x3714*x3717))+((x3701*x3719))+((r10*x3708))+((r11*x3707))+(((-1.0)*r01*x3709))+(((-1.0)*x3701*x3720))+((x3711*x3716))+(((0.5)*cj3))+(((-1.0)*x3712*x3715))+(((-1.0)*x3713*x3718))+(((-1.0)*x3697*x3721)));
evalcond[4]=((((-1.0)*x3697*x3720))+(((-1.0)*r11*x3722))+((x3697*x3719))+(((-1.0)*r10*x3723))+((x3701*x3721))+((x3709*x3711))+(((-1.0)*x3710*x3713))+(((-1.0)*(1.0)*sj3))+((r01*x3716))+(((-1.0)*x3707*x3715))+((x3708*x3717)));
evalcond[5]=((((-1.0)*r11*sj0*x3702))+(((-1.0)*r01*x3722))+(((-1.0)*r10*sj0*sj5*x3701))+((x3708*x3713))+cj3+((x3697*x3706))+((x3697*x3705))+(((-1.0)*x3709*x3715))+(((-1.0)*x3707*x3711))+(((-1.0)*r00*x3723))+((x3710*x3717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3724=((1.73205080756888)*r21);
IkReal x3725=(cj5*r20);
IkReal x3726=(r21*sj5);
IkReal x3727=r20*r20;
IkReal x3728=r21*r21;
IkReal x3729=((1.5)*(cj5*cj5));
CheckValue<IkReal> x3730 = IKatan2WithCheck(IkReal(((((1.73205080756888)*r20*sj5))+((cj5*x3724)))),IkReal(((((-0.866025403784439)*x3725))+(((1.5)*r22))+(((0.866025403784439)*x3726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3730.valid){
continue;
}
CheckValue<IkReal> x3731=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3727))+((x3727*x3729))+(((-0.5)*x3728))+(((-1.0)*x3728*x3729))+(((1.73205080756888)*r22*x3725))+(((-1.0)*(1.5)*(r22*r22)))+(((-3.0)*cj5*r20*x3726))+(((-1.0)*r22*sj5*x3724)))),-1);
if(!x3731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3730.value)+(((1.5707963267949)*(x3731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3732=IKsin(j4);
IkReal x3733=((0.866025403784439)*r22);
IkReal x3734=((0.5)*r20);
IkReal x3735=(cj5*x3732);
IkReal x3736=IKcos(j4);
IkReal x3737=((1.0)*cj5*x3736);
IkReal x3738=(r20*sj5);
IkReal x3739=((0.5)*r21*sj5);
IkReal x3740=((0.866025403784439)*cj0*r02);
IkReal x3741=((0.866025403784439)*r12*sj0);
IkReal x3742=(cj0*cj5*x3732);
IkReal x3743=(cj0*sj5*x3732);
IkReal x3744=(cj5*sj0*x3732);
IkReal x3745=(sj0*sj5*x3732);
IkReal x3746=((0.5)*r00);
IkReal x3747=(cj0*cj5*x3736);
IkReal x3748=((0.5)*r01);
IkReal x3749=(cj0*sj5*x3736);
IkReal x3750=((0.5)*r10);
IkReal x3751=(cj5*sj0*x3736);
IkReal x3752=((0.5)*r11);
IkReal x3753=(sj0*sj5*x3736);
IkReal x3754=((0.866025403784439)*cj0*r12);
IkReal x3755=((0.866025403784439)*r02*sj0);
IkReal x3756=(r00*sj0*sj5);
IkReal x3757=((1.0)*cj0*cj5*x3736);
IkReal x3758=((1.0)*cj0*sj5*x3736);
evalcond[0]=((((-1.0)*x3736*x3738))+((x3732*x3739))+(((-1.0)*x3734*x3735))+((x3732*x3733))+(((-1.0)*r21*x3737)));
evalcond[1]=((0.866025403784439)+((x3733*x3736))+(((-1.0)*cj5*x3734*x3736))+((x3732*x3738))+((x3736*x3739))+((r21*x3735)));
evalcond[2]=(((r00*x3743))+((x3752*x3753))+((x3736*x3740))+((x3736*x3741))+((r01*x3742))+(((-1.0)*x3750*x3751))+(((0.5)*sj3))+((x3748*x3749))+(((-1.0)*x3746*x3747))+((r10*x3745))+((r11*x3744)));
evalcond[3]=((((-1.0)*x3736*x3755))+(((-1.0)*x3747*x3750))+((x3736*x3754))+((x3746*x3751))+(((-1.0)*x3748*x3753))+((r11*x3742))+(((0.5)*cj3))+(((-1.0)*r01*x3744))+(((-1.0)*x3732*x3756))+((r10*x3743))+((x3749*x3752)));
evalcond[4]=((((-1.0)*x3745*x3748))+(((-1.0)*x3742*x3750))+((x3732*x3754))+((x3744*x3746))+((x3743*x3752))+(((-1.0)*r11*x3757))+(((-1.0)*x3732*x3755))+(((-1.0)*r10*x3758))+((x3736*x3756))+(((-1.0)*(1.0)*sj3))+((r01*x3751)));
evalcond[5]=((((-1.0)*r10*sj0*sj5*x3736))+(((-1.0)*r00*x3758))+(((-1.0)*x3742*x3746))+cj3+(((-1.0)*r01*x3757))+((x3732*x3741))+((x3732*x3740))+((x3743*x3748))+((x3745*x3752))+(((-1.0)*x3744*x3750))+(((-1.0)*r11*sj0*x3737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3759=(cj5*sj3);
IkReal x3760=(sj3*sj5);
IkReal x3761=((0.866025403784439)*cj0);
IkReal x3762=((0.866025403784439)*sj0);
CheckValue<IkReal> x3763=IKPowWithIntegerCheck(IKsign((((cj5*r00*x3761))+(((0.5)*r12*sj0))+(((-1.0)*r11*sj5*x3762))+(((-1.0)*r01*sj5*x3761))+((cj5*r10*x3762))+(((0.5)*cj0*r02)))),-1);
if(!x3763.valid){
continue;
}
CheckValue<IkReal> x3764 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3759))+(((-1.0)*r20*x3760)))),IkReal(((((-1.0)*(0.866025403784439)*r22*sj3))+(((0.5)*r20*x3759))+(((-0.5)*r21*x3760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3763.value)))+(x3764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3765=IKsin(j4);
IkReal x3766=((0.866025403784439)*r22);
IkReal x3767=((0.5)*r20);
IkReal x3768=(cj5*x3765);
IkReal x3769=IKcos(j4);
IkReal x3770=((1.0)*cj5*x3769);
IkReal x3771=(r20*sj5);
IkReal x3772=((0.5)*r21*sj5);
IkReal x3773=((0.866025403784439)*cj0*r02);
IkReal x3774=((0.866025403784439)*r12*sj0);
IkReal x3775=(cj0*cj5*x3765);
IkReal x3776=(cj0*sj5*x3765);
IkReal x3777=(cj5*sj0*x3765);
IkReal x3778=(sj0*sj5*x3765);
IkReal x3779=((0.5)*r00);
IkReal x3780=(cj0*cj5*x3769);
IkReal x3781=((0.5)*r01);
IkReal x3782=(cj0*sj5*x3769);
IkReal x3783=((0.5)*r10);
IkReal x3784=(cj5*sj0*x3769);
IkReal x3785=((0.5)*r11);
IkReal x3786=(sj0*sj5*x3769);
IkReal x3787=((0.866025403784439)*cj0*r12);
IkReal x3788=((0.866025403784439)*r02*sj0);
IkReal x3789=(r00*sj0*sj5);
IkReal x3790=((1.0)*cj0*cj5*x3769);
IkReal x3791=((1.0)*cj0*sj5*x3769);
evalcond[0]=((((-1.0)*x3767*x3768))+((x3765*x3772))+(((-1.0)*r21*x3770))+(((-1.0)*x3769*x3771))+((x3765*x3766)));
evalcond[1]=((0.866025403784439)+((x3766*x3769))+((r21*x3768))+(((-1.0)*cj5*x3767*x3769))+((x3769*x3772))+((x3765*x3771)));
evalcond[2]=(((x3769*x3774))+((x3781*x3782))+((x3785*x3786))+((r01*x3775))+((x3769*x3773))+(((0.5)*sj3))+((r00*x3776))+(((-1.0)*x3779*x3780))+((r11*x3777))+((r10*x3778))+(((-1.0)*x3783*x3784)));
evalcond[3]=(((x3769*x3787))+((x3782*x3785))+((r11*x3775))+(((-1.0)*x3765*x3789))+(((-1.0)*x3781*x3786))+(((-1.0)*x3769*x3788))+((x3779*x3784))+(((-1.0)*r01*x3777))+(((0.5)*cj3))+((r10*x3776))+(((-1.0)*x3780*x3783)));
evalcond[4]=(((x3776*x3785))+(((-1.0)*r10*x3791))+((x3765*x3787))+((x3769*x3789))+((r01*x3784))+((x3777*x3779))+(((-1.0)*x3778*x3781))+(((-1.0)*x3775*x3783))+(((-1.0)*x3765*x3788))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r11*x3790)));
evalcond[5]=((((-1.0)*x3775*x3779))+((x3776*x3781))+((x3765*x3773))+((x3778*x3785))+(((-1.0)*r10*sj0*sj5*x3769))+(((-1.0)*x3777*x3783))+cj3+(((-1.0)*r11*sj0*x3770))+(((-1.0)*r01*x3790))+(((-1.0)*r00*x3791))+((x3765*x3774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3792=((0.577350269189626)*cj0);
IkReal x3793=((0.577350269189626)*sj0);
IkReal x3794=(cj0*cj5);
IkReal x3795=(cj5*sj0);
IkReal x3796=((1.0)*cj0);
IkReal x3797=(r01*sj5);
IkReal x3798=(r11*sj5);
if( IKabs(((((-1.0)*sj0*x3798))+((r00*x3794))+((r12*x3793))+((r02*x3792))+(((-1.0)*x3796*x3797))+((r10*x3795)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x3794))+((sj0*x3797))+((r12*x3792))+(((-1.0)*r00*x3795))+(((-1.0)*x3796*x3798))+(((-1.0)*r02*x3793)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x3798))+((r00*x3794))+((r12*x3793))+((r02*x3792))+(((-1.0)*x3796*x3797))+((r10*x3795))))+IKsqr((((r10*x3794))+((sj0*x3797))+((r12*x3792))+(((-1.0)*r00*x3795))+(((-1.0)*x3796*x3798))+(((-1.0)*r02*x3793))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj0*x3798))+((r00*x3794))+((r12*x3793))+((r02*x3792))+(((-1.0)*x3796*x3797))+((r10*x3795))), (((r10*x3794))+((sj0*x3797))+((r12*x3792))+(((-1.0)*r00*x3795))+(((-1.0)*x3796*x3798))+(((-1.0)*r02*x3793))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x3799=((0.5)*cj0);
IkReal x3800=((0.5)*sj0);
IkReal x3801=((0.866025403784439)*cj0*cj5);
IkReal x3802=((0.866025403784439)*cj0*sj5);
IkReal x3803=((0.866025403784439)*cj5*sj0);
IkReal x3804=((0.866025403784439)*sj0*sj5);
evalcond[0]=((((-1.0)*r01*x3804))+((r11*x3802))+((r02*x3800))+((r00*x3803))+(((-1.0)*r12*x3799))+(((-1.0)*r10*x3801))+(((0.866025403784439)*(IKcos(j3)))));
evalcond[1]=((((-1.0)*r10*x3803))+(((-1.0)*r12*x3800))+(((-1.0)*r00*x3801))+((r11*x3804))+(((-1.0)*r02*x3799))+((r01*x3802))+(((0.866025403784439)*(IKsin(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3805=(cj0*r02);
IkReal x3806=(r12*sj0);
IkReal x3807=(cj0*cj5*r00);
IkReal x3808=(cj0*r01*sj5);
IkReal x3809=(cj5*r10*sj0);
IkReal x3810=(r11*sj0*sj5);
IkReal x3811=(cj5*sj3);
IkReal x3812=(sj3*sj5);
j4eval[0]=((((1.73205080756888)*x3809))+(((-1.73205080756888)*x3808))+x3805+x3806+(((1.73205080756888)*x3807))+(((-1.73205080756888)*x3810)));
j4eval[1]=((((0.5)*(IKabs((((r20*x3811))+(((-1.0)*r21*x3812))+(((-1.0)*(1.73205080756888)*r22*sj3)))))))+(IKabs((((r20*x3812))+((r21*x3811))))));
j4eval[2]=IKsign(((((0.866025403784439)*x3809))+(((-0.866025403784439)*x3810))+(((0.5)*x3806))+(((-0.866025403784439)*x3808))+(((0.5)*x3805))+(((0.866025403784439)*x3807))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3813=r20*r20;
IkReal x3814=r21*r21;
IkReal x3815=r22*r22;
IkReal x3816=(cj5*r20*r22);
IkReal x3817=(r21*r22*sj5);
IkReal x3818=(cj5*r20*r21*sj5);
IkReal x3819=cj5*cj5;
IkReal x3820=(x3813*x3819);
IkReal x3821=(x3814*x3819);
j4eval[0]=((((-6.0)*x3818))+(((-1.0)*x3814))+(((-3.46410161513775)*x3817))+(((3.46410161513775)*x3816))+(((3.0)*x3820))+(((-3.0)*x3815))+(((-3.0)*x3821))+(((-4.0)*x3813)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-3.0)*x3818))+(((-2.0)*x3813))+(((1.5)*x3820))+(((-1.73205080756888)*x3817))+(((-1.5)*x3815))+(((-1.5)*x3821))+(((1.73205080756888)*x3816))+(((-0.5)*x3814))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3822=(cj0*r00*r20);
IkReal x3823=(cj0*r01*r21);
IkReal x3824=(cj0*r02*r22);
IkReal x3825=(r10*r20*sj0);
IkReal x3826=(r11*r21*sj0);
IkReal x3827=(r12*r22*sj0);
IkReal x3828=((1.73205080756888)*r22);
IkReal x3829=(cj0*cj5*r00);
IkReal x3830=(cj0*cj5*r02*r20);
IkReal x3831=(cj0*r01*sj5);
IkReal x3832=(cj0*r02*r21*sj5);
IkReal x3833=(cj5*r10*sj0);
IkReal x3834=(cj5*r12*r20*sj0);
IkReal x3835=(r11*sj0*sj5);
IkReal x3836=(r12*r21*sj0*sj5);
IkReal x3837=(cj0*cj5*r00*r21*sj5);
IkReal x3838=(cj0*cj5*r01*r20*sj5);
IkReal x3839=(cj5*r10*r21*sj0*sj5);
IkReal x3840=(cj5*r11*r20*sj0*sj5);
IkReal x3841=cj5*cj5;
IkReal x3842=(cj0*r00*r20*x3841);
IkReal x3843=(cj0*r01*r21*x3841);
IkReal x3844=(r10*r20*sj0*x3841);
IkReal x3845=(r11*r21*sj0*x3841);
IkReal x3846=(r21*sj3);
IkReal x3847=(r20*sj3);
IkReal x3848=((0.866025403784439)*r22);
j4eval[0]=((((-1.0)*x3828*x3831))+(((1.73205080756888)*x3834))+(((-3.0)*x3838))+(((-3.0)*x3839))+(((1.73205080756888)*x3830))+((x3828*x3833))+(((-1.0)*x3828*x3835))+(((3.0)*x3844))+(((-3.0)*x3837))+(((-3.0)*x3824))+(((3.0)*x3842))+((x3828*x3829))+(((-3.0)*x3843))+(((-4.0)*x3822))+(((-3.0)*x3827))+(((-3.0)*x3840))+(((-3.0)*x3845))+(((-1.0)*x3826))+(((-1.0)*x3823))+(((-4.0)*x3825))+(((-1.73205080756888)*x3836))+(((-1.73205080756888)*x3832)));
j4eval[1]=((IKabs((((cj5*x3846))+((sj5*x3847)))))+(((0.5)*(IKabs((((sj3*x3828))+((sj5*x3846))+(((-1.0)*cj5*x3847))))))));
j4eval[2]=IKsign(((((-1.5)*x3839))+(((-0.5)*x3826))+(((-2.0)*x3822))+(((-1.5)*x3824))+(((0.866025403784439)*x3830))+(((-2.0)*x3825))+(((0.866025403784439)*x3834))+(((1.5)*x3842))+(((-0.5)*x3823))+(((-1.5)*x3845))+(((1.5)*x3844))+(((-0.866025403784439)*x3836))+(((-1.5)*x3827))+(((-1.5)*x3840))+(((-1.0)*x3831*x3848))+(((-1.5)*x3837))+(((-1.5)*x3843))+((x3829*x3848))+((x3833*x3848))+(((-0.866025403784439)*x3832))+(((-1.5)*x3838))+(((-1.0)*x3835*x3848))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3849=(r02*sj0);
IkReal x3850=(cj0*r12);
IkReal x3851=(cj0*cj5*r10);
IkReal x3852=(cj0*r11*sj5);
IkReal x3853=(cj5*r00*sj0);
IkReal x3854=(r01*sj0*sj5);
j4eval[0]=(x3849+(((1.73205080756888)*x3852))+(((-1.73205080756888)*x3854))+(((-1.73205080756888)*x3851))+(((1.73205080756888)*x3853))+(((-1.0)*x3850)));
j4eval[1]=IKsign(((((-0.866025403784439)*x3851))+(((0.866025403784439)*x3853))+(((-0.5)*x3850))+(((0.866025403784439)*x3852))+(((-0.866025403784439)*x3854))+(((0.5)*x3849))));
j4eval[2]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3855=r20*r20;
IkReal x3856=r21*r21;
IkReal x3857=r22*r22;
IkReal x3858=(cj5*r20*r22);
IkReal x3859=(r21*r22*sj5);
IkReal x3860=(cj5*r20*r21*sj5);
IkReal x3861=cj5*cj5;
IkReal x3862=(x3855*x3861);
IkReal x3863=(x3856*x3861);
j4eval[0]=((((-1.0)*x3856))+(((-3.46410161513775)*x3859))+(((3.0)*x3862))+(((3.46410161513775)*x3858))+(((-6.0)*x3860))+(((-4.0)*x3855))+(((-3.0)*x3863))+(((-3.0)*x3857)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((1.73205080756888)*x3858))+(((-3.0)*x3860))+(((-1.5)*x3863))+(((-0.5)*x3856))+(((1.5)*x3862))+(((-1.73205080756888)*x3859))+(((-1.5)*x3857))+(((-2.0)*x3855))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3864=((1.73205080756888)*cj0);
IkReal x3865=((1.73205080756888)*sj0);
IkReal x3866=(((r11*sj5*x3864))+((cj5*r00*x3865))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*cj5*r10*x3864))+(((-1.0)*r01*sj5*x3865)));
j4eval[0]=x3866;
j4eval[1]=IKsign(x3866);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3867=((1.73205080756888)*cj0*cj5);
IkReal x3868=((1.73205080756888)*cj0*sj5);
IkReal x3869=((1.73205080756888)*cj5*sj0);
IkReal x3870=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x3871 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r01))*((cj0*sj5))))+(((-0.866025403784439)*cj5*r10*sj0))+(((0.866025403784439)*r11*sj0*sj5))+(((-0.866025403784439)*cj0*cj5*r00))+(((1.5)*cj0*r02))+(((1.5)*r12*sj0)))),IkReal(((((-1.0)*r00*x3868))+(((-1.0)*r01*x3867))+(((-1.0)*r11*x3869))+(((-1.0)*r10*x3870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3871.valid){
continue;
}
CheckValue<IkReal> x3872=IKPowWithIntegerCheck(IKsign((((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r10*x3867))+((r00*x3869))+((r11*x3868))+(((-1.0)*r01*x3870)))),-1);
if(!x3872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3871.value)+(((1.5707963267949)*(x3872.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3873=IKsin(j4);
IkReal x3874=((0.866025403784439)*r22);
IkReal x3875=((0.5)*r20);
IkReal x3876=(cj5*x3873);
IkReal x3877=IKcos(j4);
IkReal x3878=((1.0)*cj5*x3877);
IkReal x3879=(r20*sj5);
IkReal x3880=((0.5)*r21*sj5);
IkReal x3881=((0.866025403784439)*cj0*r02);
IkReal x3882=((0.866025403784439)*r12*sj0);
IkReal x3883=(cj0*cj5*x3873);
IkReal x3884=(cj0*sj5*x3873);
IkReal x3885=(cj5*sj0*x3873);
IkReal x3886=(sj0*sj5*x3873);
IkReal x3887=((0.5)*r00);
IkReal x3888=(cj0*cj5*x3877);
IkReal x3889=((0.5)*r01);
IkReal x3890=(cj0*sj5*x3877);
IkReal x3891=((0.5)*r10);
IkReal x3892=(cj5*sj0*x3877);
IkReal x3893=((0.5)*r11);
IkReal x3894=(sj0*sj5*x3877);
IkReal x3895=((0.866025403784439)*cj0*r12);
IkReal x3896=((0.866025403784439)*r02*sj0);
IkReal x3897=(r00*sj0*sj5);
IkReal x3898=((1.0)*cj0*cj5*x3877);
IkReal x3899=((1.0)*cj0*sj5*x3877);
evalcond[0]=(((x3873*x3880))+(((-1.0)*x3875*x3876))+((x3873*x3874))+(((-1.0)*r21*x3878))+(((-1.0)*x3877*x3879)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x3875*x3877))+((x3877*x3880))+((r21*x3876))+((x3874*x3877))+((x3873*x3879)));
evalcond[2]=(((x3893*x3894))+((x3889*x3890))+((r00*x3884))+(((-1.0)*x3887*x3888))+((x3877*x3882))+(((-1.0)*x3891*x3892))+((x3877*x3881))+((r11*x3885))+((r10*x3886))+((r01*x3883)));
evalcond[3]=((((-1.0)*x3886*x3889))+((r01*x3892))+((x3877*x3897))+((x3873*x3895))+(((-1.0)*r11*x3898))+((x3884*x3893))+((x3885*x3887))+(((-1.0)*r10*x3899))+(((-1.0)*x3873*x3896))+(((-1.0)*x3883*x3891)));
evalcond[4]=((0.5)+((x3890*x3893))+(((-1.0)*x3889*x3894))+((x3877*x3895))+(((-1.0)*x3888*x3891))+((x3887*x3892))+(((-1.0)*x3873*x3897))+(((-1.0)*x3877*x3896))+(((-1.0)*r01*x3885))+((r10*x3884))+((r11*x3883)));
evalcond[5]=((1.0)+(((-1.0)*x3883*x3887))+(((-1.0)*x3885*x3891))+((x3886*x3893))+(((-1.0)*r11*sj0*x3878))+((x3873*x3881))+((x3873*x3882))+((x3884*x3889))+(((-1.0)*r00*x3899))+(((-1.0)*r10*sj0*sj5*x3877))+(((-1.0)*r01*x3898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3900=((1.73205080756888)*r21);
IkReal x3901=(cj5*r20);
IkReal x3902=(r21*sj5);
IkReal x3903=r20*r20;
IkReal x3904=r21*r21;
IkReal x3905=((1.5)*(cj5*cj5));
CheckValue<IkReal> x3906 = IKatan2WithCheck(IkReal((((cj5*x3900))+(((1.73205080756888)*r20*sj5)))),IkReal(((((0.866025403784439)*x3902))+(((-0.866025403784439)*x3901))+(((1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3906.valid){
continue;
}
CheckValue<IkReal> x3907=IKPowWithIntegerCheck(IKsign(((((-0.5)*x3904))+(((-1.0)*r22*sj5*x3900))+(((-2.0)*x3903))+(((-1.0)*x3904*x3905))+(((1.73205080756888)*r22*x3901))+((x3903*x3905))+(((-3.0)*cj5*r20*x3902))+(((-1.0)*(1.5)*(r22*r22))))),-1);
if(!x3907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3906.value)+(((1.5707963267949)*(x3907.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3908=IKsin(j4);
IkReal x3909=((0.866025403784439)*r22);
IkReal x3910=((0.5)*r20);
IkReal x3911=(cj5*x3908);
IkReal x3912=IKcos(j4);
IkReal x3913=((1.0)*cj5*x3912);
IkReal x3914=(r20*sj5);
IkReal x3915=((0.5)*r21*sj5);
IkReal x3916=((0.866025403784439)*cj0*r02);
IkReal x3917=((0.866025403784439)*r12*sj0);
IkReal x3918=(cj0*cj5*x3908);
IkReal x3919=(cj0*sj5*x3908);
IkReal x3920=(cj5*sj0*x3908);
IkReal x3921=(sj0*sj5*x3908);
IkReal x3922=((0.5)*r00);
IkReal x3923=(cj0*cj5*x3912);
IkReal x3924=((0.5)*r01);
IkReal x3925=(cj0*sj5*x3912);
IkReal x3926=((0.5)*r10);
IkReal x3927=(cj5*sj0*x3912);
IkReal x3928=((0.5)*r11);
IkReal x3929=(sj0*sj5*x3912);
IkReal x3930=((0.866025403784439)*cj0*r12);
IkReal x3931=((0.866025403784439)*r02*sj0);
IkReal x3932=(r00*sj0*sj5);
IkReal x3933=((1.0)*cj0*cj5*x3912);
IkReal x3934=((1.0)*cj0*sj5*x3912);
evalcond[0]=((((-1.0)*r21*x3913))+(((-1.0)*x3910*x3911))+((x3908*x3915))+((x3908*x3909))+(((-1.0)*x3912*x3914)));
evalcond[1]=((0.866025403784439)+((x3909*x3912))+((r21*x3911))+(((-1.0)*cj5*x3910*x3912))+((x3908*x3914))+((x3912*x3915)));
evalcond[2]=((((-1.0)*x3926*x3927))+((r10*x3921))+((x3924*x3925))+((x3928*x3929))+((r11*x3920))+(((-1.0)*x3922*x3923))+((r00*x3919))+((x3912*x3916))+((r01*x3918))+((x3912*x3917)));
evalcond[3]=((((-1.0)*x3921*x3924))+(((-1.0)*x3918*x3926))+((x3920*x3922))+((x3908*x3930))+(((-1.0)*r11*x3933))+((r01*x3927))+((x3919*x3928))+((x3912*x3932))+(((-1.0)*x3908*x3931))+(((-1.0)*r10*x3934)));
evalcond[4]=((0.5)+((x3922*x3927))+(((-1.0)*x3923*x3926))+(((-1.0)*r01*x3920))+(((-1.0)*x3924*x3929))+((x3912*x3930))+((r10*x3919))+((x3925*x3928))+(((-1.0)*x3912*x3931))+((r11*x3918))+(((-1.0)*x3908*x3932)));
evalcond[5]=((1.0)+((x3919*x3924))+(((-1.0)*r00*x3934))+((x3921*x3928))+(((-1.0)*x3920*x3926))+(((-1.0)*r01*x3933))+(((-1.0)*r10*sj0*sj5*x3912))+(((-1.0)*x3918*x3922))+((x3908*x3916))+(((-1.0)*r11*sj0*x3913))+((x3908*x3917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3935=((0.866025403784439)*cj0);
IkReal x3936=((0.866025403784439)*sj0);
CheckValue<IkReal> x3937=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x3935))+((r11*sj5*x3935))+(((-1.0)*(0.5)*cj0*r12))+((cj5*r00*x3936))+(((0.5)*r02*sj0))+(((-1.0)*r01*sj5*x3936)))),-1);
if(!x3937.valid){
continue;
}
CheckValue<IkReal> x3938 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3937.value)))+(x3938.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3939=IKsin(j4);
IkReal x3940=((0.866025403784439)*r22);
IkReal x3941=((0.5)*r20);
IkReal x3942=(cj5*x3939);
IkReal x3943=IKcos(j4);
IkReal x3944=((1.0)*cj5*x3943);
IkReal x3945=(r20*sj5);
IkReal x3946=((0.5)*r21*sj5);
IkReal x3947=((0.866025403784439)*cj0*r02);
IkReal x3948=((0.866025403784439)*r12*sj0);
IkReal x3949=(cj0*cj5*x3939);
IkReal x3950=(cj0*sj5*x3939);
IkReal x3951=(cj5*sj0*x3939);
IkReal x3952=(sj0*sj5*x3939);
IkReal x3953=((0.5)*r00);
IkReal x3954=(cj0*cj5*x3943);
IkReal x3955=((0.5)*r01);
IkReal x3956=(cj0*sj5*x3943);
IkReal x3957=((0.5)*r10);
IkReal x3958=(cj5*sj0*x3943);
IkReal x3959=((0.5)*r11);
IkReal x3960=(sj0*sj5*x3943);
IkReal x3961=((0.866025403784439)*cj0*r12);
IkReal x3962=((0.866025403784439)*r02*sj0);
IkReal x3963=(r00*sj0*sj5);
IkReal x3964=((1.0)*cj0*cj5*x3943);
IkReal x3965=((1.0)*cj0*sj5*x3943);
evalcond[0]=((((-1.0)*x3943*x3945))+((x3939*x3940))+(((-1.0)*x3941*x3942))+((x3939*x3946))+(((-1.0)*r21*x3944)));
evalcond[1]=((0.866025403784439)+((x3943*x3946))+((x3940*x3943))+(((-1.0)*cj5*x3941*x3943))+((r21*x3942))+((x3939*x3945)));
evalcond[2]=(((x3943*x3948))+((x3943*x3947))+((x3959*x3960))+((r00*x3950))+(((-1.0)*x3953*x3954))+(((-1.0)*x3957*x3958))+((x3955*x3956))+((r10*x3952))+((r01*x3949))+((r11*x3951)));
evalcond[3]=(((x3939*x3961))+((r01*x3958))+(((-1.0)*r10*x3965))+(((-1.0)*x3939*x3962))+(((-1.0)*r11*x3964))+((x3950*x3959))+((x3943*x3963))+((x3951*x3953))+(((-1.0)*x3949*x3957))+(((-1.0)*x3952*x3955)));
evalcond[4]=((0.5)+(((-1.0)*x3955*x3960))+((x3956*x3959))+((r10*x3950))+((x3943*x3961))+(((-1.0)*r01*x3951))+((r11*x3949))+(((-1.0)*x3939*x3963))+((x3953*x3958))+(((-1.0)*x3954*x3957))+(((-1.0)*x3943*x3962)));
evalcond[5]=((1.0)+(((-1.0)*x3949*x3953))+(((-1.0)*x3951*x3957))+(((-1.0)*r10*sj0*sj5*x3943))+(((-1.0)*r00*x3965))+((x3950*x3955))+(((-1.0)*r01*x3964))+(((-1.0)*r11*sj0*x3944))+((x3939*x3947))+((x3952*x3959))+((x3939*x3948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3966=(r02*sj0);
IkReal x3967=(cj0*r12);
IkReal x3968=(cj0*cj5*r10);
IkReal x3969=(cj0*r11*sj5);
IkReal x3970=(cj5*r00*sj0);
IkReal x3971=(r01*sj0*sj5);
j4eval[0]=((((-1.0)*x3967))+(((1.73205080756888)*x3970))+(((-1.73205080756888)*x3968))+(((1.73205080756888)*x3969))+(((-1.73205080756888)*x3971))+x3966);
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.866025403784439)*x3970))+(((0.5)*x3966))+(((-0.866025403784439)*x3968))+(((-0.866025403784439)*x3971))+(((0.866025403784439)*x3969))+(((-0.5)*x3967))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3972=r20*r20;
IkReal x3973=r21*r21;
IkReal x3974=r22*r22;
IkReal x3975=(cj5*r20*r22);
IkReal x3976=(r21*r22*sj5);
IkReal x3977=(cj5*r20*r21*sj5);
IkReal x3978=cj5*cj5;
IkReal x3979=(x3972*x3978);
IkReal x3980=(x3973*x3978);
j4eval[0]=((((-3.46410161513775)*x3976))+(((-3.0)*x3974))+(((-6.0)*x3977))+(((3.46410161513775)*x3975))+(((-3.0)*x3980))+(((-1.0)*x3973))+(((3.0)*x3979))+(((-4.0)*x3972)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-1.73205080756888)*x3976))+(((-2.0)*x3972))+(((1.73205080756888)*x3975))+(((1.5)*x3979))+(((-0.5)*x3973))+(((-1.5)*x3980))+(((-3.0)*x3977))+(((-1.5)*x3974))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3981=((1.73205080756888)*cj0);
IkReal x3982=((1.73205080756888)*sj0);
IkReal x3983=((((-1.0)*r01*sj5*x3982))+((r11*sj5*x3981))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((cj5*r00*x3982))+(((-1.0)*cj5*r10*x3981)));
j4eval[0]=x3983;
j4eval[1]=IKsign(x3983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3984=((1.73205080756888)*cj0*cj5);
IkReal x3985=((1.73205080756888)*cj0*sj5);
IkReal x3986=((1.73205080756888)*cj5*sj0);
IkReal x3987=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x3988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3987))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r00*x3986))+((r11*x3985))+(((-1.0)*r10*x3984)))),-1);
if(!x3988.valid){
continue;
}
CheckValue<IkReal> x3989 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r01))*((cj0*sj5))))+(((-0.866025403784439)*cj5*r10*sj0))+(((0.866025403784439)*r11*sj0*sj5))+(((-0.866025403784439)*cj0*cj5*r00))+(((1.5)*cj0*r02))+(((1.5)*r12*sj0)))),IkReal(((((-1.0)*r11*x3986))+(((-1.0)*r01*x3984))+(((-1.0)*r00*x3985))+(((-1.0)*r10*x3987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3988.value)))+(x3989.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3990=IKsin(j4);
IkReal x3991=((0.866025403784439)*r22);
IkReal x3992=((0.5)*r20);
IkReal x3993=(cj5*x3990);
IkReal x3994=IKcos(j4);
IkReal x3995=((1.0)*cj5*x3994);
IkReal x3996=(r20*sj5);
IkReal x3997=((0.5)*r21*sj5);
IkReal x3998=((0.866025403784439)*cj0*r02);
IkReal x3999=((0.866025403784439)*r12*sj0);
IkReal x4000=(cj0*cj5*x3990);
IkReal x4001=(cj0*sj5*x3990);
IkReal x4002=(cj5*sj0*x3990);
IkReal x4003=(sj0*sj5*x3990);
IkReal x4004=((0.5)*r00);
IkReal x4005=(cj0*cj5*x3994);
IkReal x4006=((0.5)*r01);
IkReal x4007=(cj0*sj5*x3994);
IkReal x4008=((0.5)*r10);
IkReal x4009=(cj5*sj0*x3994);
IkReal x4010=((0.5)*r11);
IkReal x4011=(sj0*sj5*x3994);
IkReal x4012=((0.866025403784439)*cj0*r12);
IkReal x4013=((0.866025403784439)*r02*sj0);
IkReal x4014=(r00*sj0*sj5);
IkReal x4015=((1.0)*cj0*cj5*x3994);
IkReal x4016=((1.0)*cj0*sj5*x3994);
evalcond[0]=(((x3990*x3997))+(((-1.0)*r21*x3995))+(((-1.0)*x3994*x3996))+((x3990*x3991))+(((-1.0)*x3992*x3993)));
evalcond[1]=((0.866025403784439)+((x3994*x3997))+((r21*x3993))+((x3990*x3996))+(((-1.0)*cj5*x3992*x3994))+((x3991*x3994)));
evalcond[2]=((((-1.0)*x4004*x4005))+(((-1.0)*x4008*x4009))+((x3994*x3998))+((x4006*x4007))+((x3994*x3999))+((r11*x4002))+((r00*x4001))+((r01*x4000))+((r10*x4003))+((x4010*x4011)));
evalcond[3]=((((-1.0)*r10*x4016))+((r01*x4009))+(((-1.0)*r11*x4015))+(((-1.0)*x4003*x4006))+((x3990*x4012))+((x4001*x4010))+((x3994*x4014))+((x4002*x4004))+(((-1.0)*x4000*x4008))+(((-1.0)*x3990*x4013)));
evalcond[4]=((-0.5)+(((-1.0)*x4006*x4011))+(((-1.0)*r01*x4002))+(((-1.0)*x4005*x4008))+((r11*x4000))+(((-1.0)*x3994*x4013))+((x3994*x4012))+((x4007*x4010))+((x4004*x4009))+((r10*x4001))+(((-1.0)*x3990*x4014)));
evalcond[5]=((-1.0)+(((-1.0)*r11*sj0*x3995))+(((-1.0)*x4000*x4004))+((x4001*x4006))+((x3990*x3999))+((x3990*x3998))+(((-1.0)*r00*x4016))+(((-1.0)*r01*x4015))+(((-1.0)*x4002*x4008))+((x4003*x4010))+(((-1.0)*r10*sj0*sj5*x3994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4017=((1.73205080756888)*r21);
IkReal x4018=(cj5*r20);
IkReal x4019=(r21*sj5);
IkReal x4020=r20*r20;
IkReal x4021=r21*r21;
IkReal x4022=((1.5)*(cj5*cj5));
CheckValue<IkReal> x4023 = IKatan2WithCheck(IkReal(((((1.73205080756888)*r20*sj5))+((cj5*x4017)))),IkReal(((((0.866025403784439)*x4019))+(((1.5)*r22))+(((-0.866025403784439)*x4018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4023.valid){
continue;
}
CheckValue<IkReal> x4024=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4021*x4022))+(((-2.0)*x4020))+(((1.73205080756888)*r22*x4018))+((x4020*x4022))+(((-0.5)*x4021))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*r22*sj5*x4017))+(((-3.0)*cj5*r20*x4019)))),-1);
if(!x4024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4023.value)+(((1.5707963267949)*(x4024.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4025=IKsin(j4);
IkReal x4026=((0.866025403784439)*r22);
IkReal x4027=((0.5)*r20);
IkReal x4028=(cj5*x4025);
IkReal x4029=IKcos(j4);
IkReal x4030=((1.0)*cj5*x4029);
IkReal x4031=(r20*sj5);
IkReal x4032=((0.5)*r21*sj5);
IkReal x4033=((0.866025403784439)*cj0*r02);
IkReal x4034=((0.866025403784439)*r12*sj0);
IkReal x4035=(cj0*cj5*x4025);
IkReal x4036=(cj0*sj5*x4025);
IkReal x4037=(cj5*sj0*x4025);
IkReal x4038=(sj0*sj5*x4025);
IkReal x4039=((0.5)*r00);
IkReal x4040=(cj0*cj5*x4029);
IkReal x4041=((0.5)*r01);
IkReal x4042=(cj0*sj5*x4029);
IkReal x4043=((0.5)*r10);
IkReal x4044=(cj5*sj0*x4029);
IkReal x4045=((0.5)*r11);
IkReal x4046=(sj0*sj5*x4029);
IkReal x4047=((0.866025403784439)*cj0*r12);
IkReal x4048=((0.866025403784439)*r02*sj0);
IkReal x4049=(r00*sj0*sj5);
IkReal x4050=((1.0)*cj0*cj5*x4029);
IkReal x4051=((1.0)*cj0*sj5*x4029);
evalcond[0]=((((-1.0)*r21*x4030))+((x4025*x4026))+(((-1.0)*x4029*x4031))+(((-1.0)*x4027*x4028))+((x4025*x4032)));
evalcond[1]=((0.866025403784439)+((x4026*x4029))+((r21*x4028))+(((-1.0)*cj5*x4027*x4029))+((x4025*x4031))+((x4029*x4032)));
evalcond[2]=(((x4045*x4046))+((r01*x4035))+((x4029*x4033))+((r00*x4036))+((x4041*x4042))+(((-1.0)*x4043*x4044))+((r11*x4037))+((x4029*x4034))+(((-1.0)*x4039*x4040))+((r10*x4038)));
evalcond[3]=((((-1.0)*x4025*x4048))+(((-1.0)*x4035*x4043))+(((-1.0)*r11*x4050))+((x4029*x4049))+((x4037*x4039))+(((-1.0)*r10*x4051))+((x4025*x4047))+((r01*x4044))+((x4036*x4045))+(((-1.0)*x4038*x4041)));
evalcond[4]=((-0.5)+(((-1.0)*x4025*x4049))+((x4042*x4045))+(((-1.0)*x4040*x4043))+((r11*x4035))+((r10*x4036))+(((-1.0)*x4041*x4046))+((x4039*x4044))+((x4029*x4047))+(((-1.0)*r01*x4037))+(((-1.0)*x4029*x4048)));
evalcond[5]=((-1.0)+((x4025*x4034))+(((-1.0)*r11*sj0*x4030))+((x4025*x4033))+((x4036*x4041))+(((-1.0)*r10*sj0*sj5*x4029))+(((-1.0)*x4037*x4043))+(((-1.0)*r00*x4051))+(((-1.0)*x4035*x4039))+((x4038*x4045))+(((-1.0)*r01*x4050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4052=((0.866025403784439)*cj0);
IkReal x4053=((0.866025403784439)*sj0);
CheckValue<IkReal> x4054=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x4052))+((cj5*r00*x4053))+(((-1.0)*(0.5)*cj0*r12))+(((-1.0)*r01*sj5*x4053))+((r11*sj5*x4052))+(((0.5)*r02*sj0)))),-1);
if(!x4054.valid){
continue;
}
CheckValue<IkReal> x4055 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4054.value)))+(x4055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4056=IKsin(j4);
IkReal x4057=((0.866025403784439)*r22);
IkReal x4058=((0.5)*r20);
IkReal x4059=(cj5*x4056);
IkReal x4060=IKcos(j4);
IkReal x4061=((1.0)*cj5*x4060);
IkReal x4062=(r20*sj5);
IkReal x4063=((0.5)*r21*sj5);
IkReal x4064=((0.866025403784439)*cj0*r02);
IkReal x4065=((0.866025403784439)*r12*sj0);
IkReal x4066=(cj0*cj5*x4056);
IkReal x4067=(cj0*sj5*x4056);
IkReal x4068=(cj5*sj0*x4056);
IkReal x4069=(sj0*sj5*x4056);
IkReal x4070=((0.5)*r00);
IkReal x4071=(cj0*cj5*x4060);
IkReal x4072=((0.5)*r01);
IkReal x4073=(cj0*sj5*x4060);
IkReal x4074=((0.5)*r10);
IkReal x4075=(cj5*sj0*x4060);
IkReal x4076=((0.5)*r11);
IkReal x4077=(sj0*sj5*x4060);
IkReal x4078=((0.866025403784439)*cj0*r12);
IkReal x4079=((0.866025403784439)*r02*sj0);
IkReal x4080=(r00*sj0*sj5);
IkReal x4081=((1.0)*cj0*cj5*x4060);
IkReal x4082=((1.0)*cj0*sj5*x4060);
evalcond[0]=((((-1.0)*x4058*x4059))+(((-1.0)*r21*x4061))+((x4056*x4063))+(((-1.0)*x4060*x4062))+((x4056*x4057)));
evalcond[1]=((0.866025403784439)+((x4057*x4060))+((r21*x4059))+(((-1.0)*cj5*x4058*x4060))+((x4056*x4062))+((x4060*x4063)));
evalcond[2]=(((x4072*x4073))+(((-1.0)*x4070*x4071))+(((-1.0)*x4074*x4075))+((x4060*x4064))+((r00*x4067))+((r11*x4068))+((r10*x4069))+((r01*x4066))+((x4076*x4077))+((x4060*x4065)));
evalcond[3]=(((x4067*x4076))+(((-1.0)*x4056*x4079))+(((-1.0)*x4069*x4072))+(((-1.0)*x4066*x4074))+(((-1.0)*r11*x4081))+((r01*x4075))+((x4060*x4080))+((x4068*x4070))+((x4056*x4078))+(((-1.0)*r10*x4082)));
evalcond[4]=((-0.5)+(((-1.0)*x4060*x4079))+(((-1.0)*x4071*x4074))+((r11*x4066))+((x4060*x4078))+(((-1.0)*x4072*x4077))+((x4070*x4075))+((x4073*x4076))+(((-1.0)*x4056*x4080))+((r10*x4067))+(((-1.0)*r01*x4068)));
evalcond[5]=((-1.0)+(((-1.0)*r10*sj0*sj5*x4060))+((x4056*x4065))+((x4069*x4076))+(((-1.0)*r00*x4082))+(((-1.0)*r01*x4081))+(((-1.0)*r11*sj0*x4061))+(((-1.0)*x4068*x4074))+(((-1.0)*x4066*x4070))+((x4067*x4072))+((x4056*x4064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4083=(cj5*sj3);
IkReal x4084=(sj3*sj5);
IkReal x4085=((0.5)*r21);
IkReal x4086=((2.0)*r20);
IkReal x4087=(cj0*r00);
IkReal x4088=(cj0*r01);
IkReal x4089=((1.5)*r22);
IkReal x4090=(r10*sj0);
IkReal x4091=(r11*sj0);
IkReal x4092=((0.866025403784439)*cj5*r22);
IkReal x4093=(cj5*r20);
IkReal x4094=((0.866025403784439)*cj0*r02);
IkReal x4095=((0.866025403784439)*r22*sj5);
IkReal x4096=(r21*sj5);
IkReal x4097=((0.866025403784439)*r12*sj0);
IkReal x4098=((1.5)*cj5*r21*sj5);
IkReal x4099=((1.5)*cj5*r20*sj5);
IkReal x4100=cj5*cj5;
IkReal x4101=((1.5)*r20*x4100);
IkReal x4102=((1.5)*r21*x4100);
CheckValue<IkReal> x4103 = IKatan2WithCheck(IkReal((((r20*x4084))+((r21*x4083)))),IkReal((((sj3*(((0.866025403784439)*r22))))+((x4084*x4085))+(((-0.5)*r20*x4083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4103.valid){
continue;
}
CheckValue<IkReal> x4104=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4085*x4091))+(((-1.0)*x4090*x4098))+((x4087*x4101))+(((-1.0)*x4086*x4087))+(((-1.0)*x4088*x4095))+(((-1.0)*x4094*x4096))+(((-1.0)*x4096*x4097))+((x4087*x4092))+(((-1.0)*x4091*x4102))+(((-1.0)*x4085*x4088))+(((-1.0)*x4091*x4099))+((x4090*x4101))+((x4090*x4092))+(((-1.0)*r12*sj0*x4089))+(((-1.0)*x4088*x4102))+(((-1.0)*x4088*x4099))+(((-1.0)*x4087*x4098))+((x4093*x4094))+(((-1.0)*x4091*x4095))+((x4093*x4097))+(((-1.0)*cj0*r02*x4089))+(((-1.0)*x4086*x4090)))),-1);
if(!x4104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4103.value)+(((1.5707963267949)*(x4104.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4105=IKsin(j4);
IkReal x4106=((0.866025403784439)*r22);
IkReal x4107=((0.5)*r20);
IkReal x4108=(cj5*x4105);
IkReal x4109=IKcos(j4);
IkReal x4110=((1.0)*cj5*x4109);
IkReal x4111=(r20*sj5);
IkReal x4112=((0.5)*r21*sj5);
IkReal x4113=((0.866025403784439)*cj0*r02);
IkReal x4114=((0.866025403784439)*r12*sj0);
IkReal x4115=(cj0*cj5*x4105);
IkReal x4116=(cj0*sj5*x4105);
IkReal x4117=(cj5*sj0*x4105);
IkReal x4118=(sj0*sj5*x4105);
IkReal x4119=((0.5)*r00);
IkReal x4120=(cj0*cj5*x4109);
IkReal x4121=((0.5)*r01);
IkReal x4122=(cj0*sj5*x4109);
IkReal x4123=((0.5)*r10);
IkReal x4124=(cj5*sj0*x4109);
IkReal x4125=((0.5)*r11);
IkReal x4126=(sj0*sj5*x4109);
IkReal x4127=((0.866025403784439)*cj0*r12);
IkReal x4128=((0.866025403784439)*r02*sj0);
IkReal x4129=(r00*sj0*sj5);
IkReal x4130=((1.0)*cj0*cj5*x4109);
IkReal x4131=((1.0)*cj0*sj5*x4109);
evalcond[0]=((((-1.0)*x4107*x4108))+((x4105*x4112))+((x4105*x4106))+(((-1.0)*x4109*x4111))+(((-1.0)*r21*x4110)));
evalcond[1]=((0.866025403784439)+((x4105*x4111))+(((-1.0)*cj5*x4107*x4109))+((r21*x4108))+((x4106*x4109))+((x4109*x4112)));
evalcond[2]=(((x4109*x4114))+(((0.5)*sj3))+((x4121*x4122))+(((-1.0)*x4123*x4124))+((r10*x4118))+((r11*x4117))+(((-1.0)*x4119*x4120))+((r00*x4116))+((r01*x4115))+((x4125*x4126))+((x4109*x4113)));
evalcond[3]=(((x4109*x4127))+(((-1.0)*r01*x4117))+(((-1.0)*x4105*x4129))+((r11*x4115))+((x4122*x4125))+((x4119*x4124))+(((-1.0)*x4120*x4123))+((r10*x4116))+(((-1.0)*x4121*x4126))+(((0.5)*cj3))+(((-1.0)*x4109*x4128)));
evalcond[4]=((((-1.0)*x4105*x4128))+(((-1.0)*x4115*x4123))+((x4116*x4125))+((x4117*x4119))+(((-1.0)*r11*x4130))+(((-1.0)*x4118*x4121))+(((-1.0)*(1.0)*sj3))+((r01*x4124))+((x4109*x4129))+((x4105*x4127))+(((-1.0)*r10*x4131)));
evalcond[5]=((((-1.0)*x4117*x4123))+(((-1.0)*r10*sj0*sj5*x4109))+((x4105*x4113))+(((-1.0)*x4115*x4119))+((x4118*x4125))+(((-1.0)*r01*x4130))+cj3+(((-1.0)*r00*x4131))+((x4105*x4114))+((x4116*x4121))+(((-1.0)*r11*sj0*x4110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4132=((1.73205080756888)*r21);
IkReal x4133=(cj5*r20);
IkReal x4134=(r21*sj5);
IkReal x4135=r20*r20;
IkReal x4136=r21*r21;
IkReal x4137=((1.5)*(cj5*cj5));
CheckValue<IkReal> x4138=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4135))+(((-0.5)*x4136))+(((-3.0)*cj5*r20*x4134))+((x4135*x4137))+(((-1.0)*x4136*x4137))+(((-1.0)*r22*sj5*x4132))+(((1.73205080756888)*r22*x4133))+(((-1.0)*(1.5)*(r22*r22))))),-1);
if(!x4138.valid){
continue;
}
CheckValue<IkReal> x4139 = IKatan2WithCheck(IkReal((((cj5*x4132))+(((1.73205080756888)*r20*sj5)))),IkReal(((((0.866025403784439)*x4134))+(((1.5)*r22))+(((-0.866025403784439)*x4133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4138.value)))+(x4139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4140=IKsin(j4);
IkReal x4141=((0.866025403784439)*r22);
IkReal x4142=((0.5)*r20);
IkReal x4143=(cj5*x4140);
IkReal x4144=IKcos(j4);
IkReal x4145=((1.0)*cj5*x4144);
IkReal x4146=(r20*sj5);
IkReal x4147=((0.5)*r21*sj5);
IkReal x4148=((0.866025403784439)*cj0*r02);
IkReal x4149=((0.866025403784439)*r12*sj0);
IkReal x4150=(cj0*cj5*x4140);
IkReal x4151=(cj0*sj5*x4140);
IkReal x4152=(cj5*sj0*x4140);
IkReal x4153=(sj0*sj5*x4140);
IkReal x4154=((0.5)*r00);
IkReal x4155=(cj0*cj5*x4144);
IkReal x4156=((0.5)*r01);
IkReal x4157=(cj0*sj5*x4144);
IkReal x4158=((0.5)*r10);
IkReal x4159=(cj5*sj0*x4144);
IkReal x4160=((0.5)*r11);
IkReal x4161=(sj0*sj5*x4144);
IkReal x4162=((0.866025403784439)*cj0*r12);
IkReal x4163=((0.866025403784439)*r02*sj0);
IkReal x4164=(r00*sj0*sj5);
IkReal x4165=((1.0)*cj0*cj5*x4144);
IkReal x4166=((1.0)*cj0*sj5*x4144);
evalcond[0]=((((-1.0)*r21*x4145))+((x4140*x4147))+(((-1.0)*x4142*x4143))+((x4140*x4141))+(((-1.0)*x4144*x4146)));
evalcond[1]=((0.866025403784439)+((r21*x4143))+((x4140*x4146))+((x4141*x4144))+((x4144*x4147))+(((-1.0)*cj5*x4142*x4144)));
evalcond[2]=(((x4156*x4157))+((r10*x4153))+((x4160*x4161))+((x4144*x4148))+((x4144*x4149))+(((-1.0)*x4158*x4159))+(((0.5)*sj3))+(((-1.0)*x4154*x4155))+((r01*x4150))+((r00*x4151))+((r11*x4152)));
evalcond[3]=((((-1.0)*r01*x4152))+(((-1.0)*x4140*x4164))+((x4154*x4159))+(((-1.0)*x4156*x4161))+((x4157*x4160))+(((-1.0)*x4155*x4158))+((r11*x4150))+((r10*x4151))+(((0.5)*cj3))+((x4144*x4162))+(((-1.0)*x4144*x4163)));
evalcond[4]=((((-1.0)*x4153*x4156))+((x4140*x4162))+(((-1.0)*r11*x4165))+((x4144*x4164))+(((-1.0)*x4150*x4158))+((x4151*x4160))+(((-1.0)*x4140*x4163))+(((-1.0)*(1.0)*sj3))+((r01*x4159))+((x4152*x4154))+(((-1.0)*r10*x4166)));
evalcond[5]=(((x4140*x4149))+(((-1.0)*r11*sj0*x4145))+((x4140*x4148))+(((-1.0)*x4150*x4154))+(((-1.0)*r01*x4165))+(((-1.0)*x4152*x4158))+((x4153*x4160))+cj3+(((-1.0)*r00*x4166))+((x4151*x4156))+(((-1.0)*r10*sj0*sj5*x4144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4167=(cj5*sj3);
IkReal x4168=(sj3*sj5);
IkReal x4169=((0.866025403784439)*cj0);
IkReal x4170=((0.866025403784439)*sj0);
CheckValue<IkReal> x4171 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4168))+(((-1.0)*r21*x4167)))),IkReal(((((-1.0)*(0.866025403784439)*r22*sj3))+(((-0.5)*r21*x4168))+(((0.5)*r20*x4167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4171.valid){
continue;
}
CheckValue<IkReal> x4172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x4169))+((cj5*r00*x4169))+(((0.5)*r12*sj0))+((cj5*r10*x4170))+(((-1.0)*r11*sj5*x4170))+(((0.5)*cj0*r02)))),-1);
if(!x4172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4171.value)+(((1.5707963267949)*(x4172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4173=IKsin(j4);
IkReal x4174=((0.866025403784439)*r22);
IkReal x4175=((0.5)*r20);
IkReal x4176=(cj5*x4173);
IkReal x4177=IKcos(j4);
IkReal x4178=((1.0)*cj5*x4177);
IkReal x4179=(r20*sj5);
IkReal x4180=((0.5)*r21*sj5);
IkReal x4181=((0.866025403784439)*cj0*r02);
IkReal x4182=((0.866025403784439)*r12*sj0);
IkReal x4183=(cj0*cj5*x4173);
IkReal x4184=(cj0*sj5*x4173);
IkReal x4185=(cj5*sj0*x4173);
IkReal x4186=(sj0*sj5*x4173);
IkReal x4187=((0.5)*r00);
IkReal x4188=(cj0*cj5*x4177);
IkReal x4189=((0.5)*r01);
IkReal x4190=(cj0*sj5*x4177);
IkReal x4191=((0.5)*r10);
IkReal x4192=(cj5*sj0*x4177);
IkReal x4193=((0.5)*r11);
IkReal x4194=(sj0*sj5*x4177);
IkReal x4195=((0.866025403784439)*cj0*r12);
IkReal x4196=((0.866025403784439)*r02*sj0);
IkReal x4197=(r00*sj0*sj5);
IkReal x4198=((1.0)*cj0*cj5*x4177);
IkReal x4199=((1.0)*cj0*sj5*x4177);
evalcond[0]=(((x4173*x4180))+(((-1.0)*x4177*x4179))+(((-1.0)*r21*x4178))+(((-1.0)*x4175*x4176))+((x4173*x4174)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x4175*x4177))+((x4174*x4177))+((x4177*x4180))+((r21*x4176))+((x4173*x4179)));
evalcond[2]=((((-1.0)*x4191*x4192))+((x4193*x4194))+((x4177*x4182))+(((0.5)*sj3))+((r11*x4185))+((r00*x4184))+((x4189*x4190))+(((-1.0)*x4187*x4188))+((r01*x4183))+((r10*x4186))+((x4177*x4181)));
evalcond[3]=(((r10*x4184))+((r11*x4183))+(((-1.0)*x4177*x4196))+((x4177*x4195))+((x4187*x4192))+(((-1.0)*r01*x4185))+(((0.5)*cj3))+(((-1.0)*x4189*x4194))+(((-1.0)*x4188*x4191))+(((-1.0)*x4173*x4197))+((x4190*x4193)));
evalcond[4]=((((-1.0)*r10*x4199))+((x4173*x4195))+((r01*x4192))+(((-1.0)*x4173*x4196))+((x4185*x4187))+(((-1.0)*x4186*x4189))+(((-1.0)*(1.0)*sj3))+((x4177*x4197))+((x4184*x4193))+(((-1.0)*r11*x4198))+(((-1.0)*x4183*x4191)));
evalcond[5]=((((-1.0)*r11*sj0*x4178))+(((-1.0)*x4183*x4187))+(((-1.0)*r01*x4198))+((x4184*x4189))+(((-1.0)*x4185*x4191))+cj3+((x4173*x4182))+(((-1.0)*r10*sj0*sj5*x4177))+((x4173*x4181))+(((-1.0)*r00*x4199))+((x4186*x4193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4200=((0.577350269189626)*cj0);
IkReal x4201=((0.577350269189626)*sj0);
IkReal x4202=(r01*sj5);
IkReal x4203=(r11*sj5);
IkReal x4204=((1.0)*r00);
IkReal x4205=(cj0*cj5);
IkReal x4206=(cj5*sj0);
if( IKabs((((sj0*x4203))+(((-1.0)*r02*x4200))+(((-1.0)*r12*x4201))+((cj0*x4202))+(((-1.0)*x4204*x4205))+(((-1.0)*r10*x4206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x4202))+(((-1.0)*r02*x4201))+((r12*x4200))+(((-1.0)*cj0*x4203))+(((-1.0)*x4204*x4206))+((r10*x4205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj0*x4203))+(((-1.0)*r02*x4200))+(((-1.0)*r12*x4201))+((cj0*x4202))+(((-1.0)*x4204*x4205))+(((-1.0)*r10*x4206))))+IKsqr((((sj0*x4202))+(((-1.0)*r02*x4201))+((r12*x4200))+(((-1.0)*cj0*x4203))+(((-1.0)*x4204*x4206))+((r10*x4205))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj0*x4203))+(((-1.0)*r02*x4200))+(((-1.0)*r12*x4201))+((cj0*x4202))+(((-1.0)*x4204*x4205))+(((-1.0)*r10*x4206))), (((sj0*x4202))+(((-1.0)*r02*x4201))+((r12*x4200))+(((-1.0)*cj0*x4203))+(((-1.0)*x4204*x4206))+((r10*x4205))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x4207=((0.5)*cj0);
IkReal x4208=((0.5)*sj0);
IkReal x4209=((0.866025403784439)*cj0*cj5);
IkReal x4210=((0.866025403784439)*cj0*sj5);
IkReal x4211=((0.866025403784439)*cj5*sj0);
IkReal x4212=((0.866025403784439)*sj0*sj5);
evalcond[0]=(((r02*x4208))+(((-1.0)*r01*x4212))+(((-1.0)*r10*x4209))+((r00*x4211))+((r11*x4210))+(((-1.0)*r12*x4207))+(((0.866025403784439)*(IKcos(j3)))));
evalcond[1]=((((-1.0)*r10*x4211))+((r01*x4210))+(((-1.0)*r00*x4209))+(((-1.0)*(0.866025403784439)*(IKsin(j3))))+(((-1.0)*r12*x4208))+((r11*x4212))+(((-1.0)*r02*x4207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4213=(cj0*r02);
IkReal x4214=(r12*sj0);
IkReal x4215=(cj0*cj5*r00);
IkReal x4216=(cj0*r01*sj5);
IkReal x4217=(cj5*r10*sj0);
IkReal x4218=(r11*sj0*sj5);
IkReal x4219=(cj5*sj3);
IkReal x4220=(sj3*sj5);
j4eval[0]=((((-1.73205080756888)*x4218))+(((-1.73205080756888)*x4216))+(((1.73205080756888)*x4217))+(((1.73205080756888)*x4215))+x4214+x4213);
j4eval[1]=((IKabs((((r21*x4219))+((r20*x4220)))))+(((0.5)*(IKabs(((((-1.0)*r21*x4220))+(((-1.0)*(1.73205080756888)*r22*sj3))+((r20*x4219))))))));
j4eval[2]=IKsign(((((0.866025403784439)*x4215))+(((-0.866025403784439)*x4218))+(((-0.866025403784439)*x4216))+(((0.866025403784439)*x4217))+(((0.5)*x4213))+(((0.5)*x4214))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4221=r20*r20;
IkReal x4222=r21*r21;
IkReal x4223=r22*r22;
IkReal x4224=(cj5*r20*r22);
IkReal x4225=(r21*r22*sj5);
IkReal x4226=(cj5*r20*r21*sj5);
IkReal x4227=cj5*cj5;
IkReal x4228=(x4221*x4227);
IkReal x4229=(x4222*x4227);
j4eval[0]=((((3.46410161513775)*x4224))+(((-3.46410161513775)*x4225))+(((3.0)*x4228))+(((-1.0)*x4222))+(((-4.0)*x4221))+(((-3.0)*x4223))+(((-3.0)*x4229))+(((-6.0)*x4226)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((1.5)*x4228))+(((1.73205080756888)*x4224))+(((-3.0)*x4226))+(((-2.0)*x4221))+(((-1.73205080756888)*x4225))+(((-1.5)*x4223))+(((-1.5)*x4229))+(((-0.5)*x4222))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4230=(r01*r21*sj0);
IkReal x4231=(cj0*r10*r20);
IkReal x4232=(cj0*r11*r21);
IkReal x4233=(cj0*r12*r22);
IkReal x4234=(r00*r20*sj0);
IkReal x4235=(r02*r22*sj0);
IkReal x4236=((1.73205080756888)*r22);
IkReal x4237=(cj0*cj5*r10);
IkReal x4238=(cj0*cj5*r12*r20);
IkReal x4239=(cj0*r11*sj5);
IkReal x4240=(cj0*r12*r21*sj5);
IkReal x4241=(cj5*r00*sj0);
IkReal x4242=(cj5*r02*r20*sj0);
IkReal x4243=(r01*sj0*sj5);
IkReal x4244=(r02*r21*sj0*sj5);
IkReal x4245=(cj0*cj5*r10*r21*sj5);
IkReal x4246=(cj0*cj5*r11*r20*sj5);
IkReal x4247=(cj5*r00*r21*sj0*sj5);
IkReal x4248=(cj5*r01*r20*sj0*sj5);
IkReal x4249=cj5*cj5;
IkReal x4250=(cj0*r10*r20*x4249);
IkReal x4251=(cj0*r11*r21*x4249);
IkReal x4252=(r00*r20*sj0*x4249);
IkReal x4253=(r01*r21*sj0*x4249);
IkReal x4254=((0.866025403784439)*r22);
IkReal x4255=(cj3*r21);
IkReal x4256=(cj3*r20);
j4eval[0]=((((-1.0)*x4236*x4239))+(((3.0)*x4235))+(((-1.0)*x4232))+(((-3.0)*x4233))+(((-1.73205080756888)*x4240))+(((-1.0)*x4236*x4241))+x4230+((x4236*x4243))+(((3.0)*x4247))+(((1.73205080756888)*x4244))+(((3.0)*x4248))+(((-3.0)*x4252))+(((1.73205080756888)*x4238))+(((-3.0)*x4246))+(((4.0)*x4234))+(((3.0)*x4253))+((x4236*x4237))+(((-1.73205080756888)*x4242))+(((-3.0)*x4251))+(((3.0)*x4250))+(((-3.0)*x4245))+(((-4.0)*x4231)));
j4eval[1]=IKsign(((((-1.5)*x4233))+(((-2.0)*x4231))+((x4243*x4254))+(((1.5)*x4235))+(((-1.5)*x4245))+(((-1.5)*x4251))+(((0.866025403784439)*x4238))+(((0.866025403784439)*x4244))+(((1.5)*x4247))+(((-1.0)*x4239*x4254))+(((-0.866025403784439)*x4242))+(((1.5)*x4248))+(((-1.5)*x4252))+((x4237*x4254))+(((-1.0)*x4241*x4254))+(((-0.5)*x4232))+(((1.5)*x4250))+(((0.5)*x4230))+(((1.5)*x4253))+(((-1.5)*x4246))+(((-0.866025403784439)*x4240))+(((2.0)*x4234))));
j4eval[2]=((IKabs((((sj5*x4256))+((cj5*x4255)))))+(((0.5)*(IKabs(((((-1.0)*cj5*x4256))+((sj5*x4255))+((cj3*x4236))))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4257=(cj0*r02);
IkReal x4258=(r12*sj0);
IkReal x4259=(cj0*cj5*r00);
IkReal x4260=(cj0*r01*sj5);
IkReal x4261=(cj5*r10*sj0);
IkReal x4262=(r11*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x4259))+x4257+x4258+(((1.73205080756888)*x4261))+(((-1.73205080756888)*x4260))+(((-1.73205080756888)*x4262)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.866025403784439)*x4259))+(((-0.866025403784439)*x4260))+(((0.5)*x4257))+(((0.5)*x4258))+(((0.866025403784439)*x4261))+(((-0.866025403784439)*x4262))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4263=r20*r20;
IkReal x4264=r21*r21;
IkReal x4265=r22*r22;
IkReal x4266=(cj5*r20*r22);
IkReal x4267=(r21*r22*sj5);
IkReal x4268=(cj5*r20*r21*sj5);
IkReal x4269=cj5*cj5;
IkReal x4270=(x4263*x4269);
IkReal x4271=(x4264*x4269);
j4eval[0]=((((-3.46410161513775)*x4267))+(((-1.0)*x4264))+(((3.46410161513775)*x4266))+(((-3.0)*x4265))+(((-3.0)*x4271))+(((-6.0)*x4268))+(((-4.0)*x4263))+(((3.0)*x4270)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-0.5)*x4264))+(((-2.0)*x4263))+(((-1.73205080756888)*x4267))+(((1.73205080756888)*x4266))+(((-3.0)*x4268))+(((-1.5)*x4271))+(((-1.5)*x4265))+(((1.5)*x4270))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4272=((1.73205080756888)*cj0);
IkReal x4273=((1.73205080756888)*sj0);
IkReal x4274=(((r11*sj5*x4272))+((cj5*r00*x4273))+(((-1.0)*cj5*r10*x4272))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*sj5*x4273)));
j4eval[0]=x4274;
j4eval[1]=IKsign(x4274);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4275=((1.73205080756888)*cj0*cj5);
IkReal x4276=((1.73205080756888)*cj0*sj5);
IkReal x4277=((1.73205080756888)*cj5*sj0);
IkReal x4278=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x4279 = IKatan2WithCheck(IkReal(((((-1.0)*(0.5)*cj5*r20))+(((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((0.866025403784439)*r22))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5))+(((0.5)*r21*sj5)))),IkReal(((((-1.0)*(1.0)*r20*sj5))+((r00*x4276))+((r10*x4278))+((r11*x4277))+(((-1.0)*(1.0)*cj5*r21))+((r01*x4275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4279.valid){
continue;
}
CheckValue<IkReal> x4280=IKPowWithIntegerCheck(IKsign((((r00*x4277))+((r11*x4276))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r10*x4275))+(((-1.0)*r01*x4278)))),-1);
if(!x4280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4279.value)+(((1.5707963267949)*(x4280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4281=IKsin(j4);
IkReal x4282=((0.866025403784439)*r22);
IkReal x4283=((0.5)*r20);
IkReal x4284=(cj5*x4281);
IkReal x4285=IKcos(j4);
IkReal x4286=((1.0)*cj5*x4285);
IkReal x4287=(r20*sj5);
IkReal x4288=((0.5)*r21*sj5);
IkReal x4289=((0.866025403784439)*cj0*r02);
IkReal x4290=((0.866025403784439)*r12*sj0);
IkReal x4291=(cj0*cj5*x4281);
IkReal x4292=(cj0*sj5*x4281);
IkReal x4293=(cj5*sj0*x4281);
IkReal x4294=(sj0*sj5*x4281);
IkReal x4295=((0.5)*r00);
IkReal x4296=(cj0*cj5*x4285);
IkReal x4297=((0.5)*r01);
IkReal x4298=(cj0*sj5*x4285);
IkReal x4299=((0.5)*r10);
IkReal x4300=(cj5*sj0*x4285);
IkReal x4301=((0.5)*r11);
IkReal x4302=(sj0*sj5*x4285);
IkReal x4303=((0.866025403784439)*cj0*r12);
IkReal x4304=((0.866025403784439)*r02*sj0);
IkReal x4305=(r00*sj0*sj5);
IkReal x4306=((1.0)*cj0*cj5*x4285);
IkReal x4307=((1.0)*cj0*sj5*x4285);
evalcond[0]=(((x4281*x4288))+(((-1.0)*x4285*x4287))+(((-1.0)*x4283*x4284))+((x4281*x4282))+(((-1.0)*r21*x4286)));
evalcond[1]=((-0.866025403784439)+((r21*x4284))+((x4281*x4287))+((x4285*x4288))+(((-1.0)*cj5*x4283*x4285))+((x4282*x4285)));
evalcond[2]=((-0.5)+((r01*x4291))+(((-1.0)*x4299*x4300))+((r11*x4293))+((r00*x4292))+(((-1.0)*x4295*x4296))+((x4285*x4290))+((x4297*x4298))+((x4301*x4302))+((r10*x4294))+((x4285*x4289)));
evalcond[3]=((((-1.0)*r01*x4293))+(((-1.0)*x4281*x4305))+(((-1.0)*x4297*x4302))+(((-1.0)*x4285*x4304))+((x4285*x4303))+((x4295*x4300))+((r11*x4291))+(((-1.0)*x4296*x4299))+((r10*x4292))+((x4298*x4301)));
evalcond[4]=((-1.0)+(((-1.0)*x4281*x4304))+(((-1.0)*r10*x4307))+((x4293*x4295))+(((-1.0)*x4291*x4299))+((x4281*x4303))+((x4292*x4301))+(((-1.0)*x4294*x4297))+(((-1.0)*r11*x4306))+((r01*x4300))+((x4285*x4305)));
evalcond[5]=((((-1.0)*r00*x4307))+(((-1.0)*r01*x4306))+(((-1.0)*x4293*x4299))+(((-1.0)*r11*sj0*x4286))+((x4281*x4290))+((x4281*x4289))+(((-1.0)*x4291*x4295))+((x4292*x4297))+((x4294*x4301))+(((-1.0)*r10*sj0*sj5*x4285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4308=((1.73205080756888)*r21);
IkReal x4309=(cj5*r20);
IkReal x4310=(r21*sj5);
IkReal x4311=r20*r20;
IkReal x4312=r21*r21;
IkReal x4313=((1.5)*(cj5*cj5));
CheckValue<IkReal> x4314 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x4308)))),IkReal(((((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x4310))+(((0.866025403784439)*x4309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4314.valid){
continue;
}
CheckValue<IkReal> x4315=IKPowWithIntegerCheck(IKsign(((((-0.5)*x4312))+(((-3.0)*cj5*r20*x4310))+(((1.73205080756888)*r22*x4309))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*x4312*x4313))+((x4311*x4313))+(((-1.0)*r22*sj5*x4308))+(((-2.0)*x4311)))),-1);
if(!x4315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4314.value)+(((1.5707963267949)*(x4315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4316=IKsin(j4);
IkReal x4317=((0.866025403784439)*r22);
IkReal x4318=((0.5)*r20);
IkReal x4319=(cj5*x4316);
IkReal x4320=IKcos(j4);
IkReal x4321=((1.0)*cj5*x4320);
IkReal x4322=(r20*sj5);
IkReal x4323=((0.5)*r21*sj5);
IkReal x4324=((0.866025403784439)*cj0*r02);
IkReal x4325=((0.866025403784439)*r12*sj0);
IkReal x4326=(cj0*cj5*x4316);
IkReal x4327=(cj0*sj5*x4316);
IkReal x4328=(cj5*sj0*x4316);
IkReal x4329=(sj0*sj5*x4316);
IkReal x4330=((0.5)*r00);
IkReal x4331=(cj0*cj5*x4320);
IkReal x4332=((0.5)*r01);
IkReal x4333=(cj0*sj5*x4320);
IkReal x4334=((0.5)*r10);
IkReal x4335=(cj5*sj0*x4320);
IkReal x4336=((0.5)*r11);
IkReal x4337=(sj0*sj5*x4320);
IkReal x4338=((0.866025403784439)*cj0*r12);
IkReal x4339=((0.866025403784439)*r02*sj0);
IkReal x4340=(r00*sj0*sj5);
IkReal x4341=((1.0)*cj0*cj5*x4320);
IkReal x4342=((1.0)*cj0*sj5*x4320);
evalcond[0]=((((-1.0)*x4320*x4322))+((x4316*x4317))+(((-1.0)*x4318*x4319))+(((-1.0)*r21*x4321))+((x4316*x4323)));
evalcond[1]=((-0.866025403784439)+((x4320*x4323))+(((-1.0)*cj5*x4318*x4320))+((x4317*x4320))+((r21*x4319))+((x4316*x4322)));
evalcond[2]=((-0.5)+((x4320*x4325))+((x4336*x4337))+(((-1.0)*x4334*x4335))+(((-1.0)*x4330*x4331))+((x4332*x4333))+((r10*x4329))+((r00*x4327))+((r01*x4326))+((x4320*x4324))+((r11*x4328)));
evalcond[3]=((((-1.0)*x4316*x4340))+(((-1.0)*x4332*x4337))+(((-1.0)*x4320*x4339))+((x4330*x4335))+((r10*x4327))+((x4320*x4338))+(((-1.0)*x4331*x4334))+(((-1.0)*r01*x4328))+((x4333*x4336))+((r11*x4326)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x4341))+(((-1.0)*x4329*x4332))+((x4320*x4340))+((x4316*x4338))+(((-1.0)*x4326*x4334))+((r01*x4335))+((x4327*x4336))+(((-1.0)*r10*x4342))+(((-1.0)*x4316*x4339))+((x4328*x4330)));
evalcond[5]=((((-1.0)*r11*sj0*x4321))+((x4329*x4336))+(((-1.0)*r01*x4341))+(((-1.0)*r10*sj0*sj5*x4320))+((x4316*x4324))+((x4327*x4332))+(((-1.0)*x4328*x4334))+(((-1.0)*x4326*x4330))+(((-1.0)*r00*x4342))+((x4316*x4325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4343=((0.866025403784439)*cj0);
IkReal x4344=((0.866025403784439)*sj0);
CheckValue<IkReal> x4345 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4345.valid){
continue;
}
CheckValue<IkReal> x4346=IKPowWithIntegerCheck(IKsign((((cj5*r10*x4344))+((cj5*r00*x4343))+(((0.5)*r12*sj0))+(((-1.0)*r01*sj5*x4343))+(((-1.0)*r11*sj5*x4344))+(((0.5)*cj0*r02)))),-1);
if(!x4346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4345.value)+(((1.5707963267949)*(x4346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4347=IKsin(j4);
IkReal x4348=((0.866025403784439)*r22);
IkReal x4349=((0.5)*r20);
IkReal x4350=(cj5*x4347);
IkReal x4351=IKcos(j4);
IkReal x4352=((1.0)*cj5*x4351);
IkReal x4353=(r20*sj5);
IkReal x4354=((0.5)*r21*sj5);
IkReal x4355=((0.866025403784439)*cj0*r02);
IkReal x4356=((0.866025403784439)*r12*sj0);
IkReal x4357=(cj0*cj5*x4347);
IkReal x4358=(cj0*sj5*x4347);
IkReal x4359=(cj5*sj0*x4347);
IkReal x4360=(sj0*sj5*x4347);
IkReal x4361=((0.5)*r00);
IkReal x4362=(cj0*cj5*x4351);
IkReal x4363=((0.5)*r01);
IkReal x4364=(cj0*sj5*x4351);
IkReal x4365=((0.5)*r10);
IkReal x4366=(cj5*sj0*x4351);
IkReal x4367=((0.5)*r11);
IkReal x4368=(sj0*sj5*x4351);
IkReal x4369=((0.866025403784439)*cj0*r12);
IkReal x4370=((0.866025403784439)*r02*sj0);
IkReal x4371=(r00*sj0*sj5);
IkReal x4372=((1.0)*cj0*cj5*x4351);
IkReal x4373=((1.0)*cj0*sj5*x4351);
evalcond[0]=(((x4347*x4348))+((x4347*x4354))+(((-1.0)*x4351*x4353))+(((-1.0)*r21*x4352))+(((-1.0)*x4349*x4350)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x4349*x4351))+((x4348*x4351))+((r21*x4350))+((x4351*x4354))+((x4347*x4353)));
evalcond[2]=((-0.5)+((r11*x4359))+((x4367*x4368))+((x4351*x4356))+((r01*x4357))+(((-1.0)*x4361*x4362))+(((-1.0)*x4365*x4366))+((x4351*x4355))+((r00*x4358))+((x4363*x4364))+((r10*x4360)));
evalcond[3]=(((x4351*x4369))+(((-1.0)*x4351*x4370))+((r11*x4357))+(((-1.0)*x4347*x4371))+((r10*x4358))+(((-1.0)*x4363*x4368))+((x4361*x4366))+(((-1.0)*r01*x4359))+(((-1.0)*x4362*x4365))+((x4364*x4367)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x4372))+((x4359*x4361))+((x4358*x4367))+((r01*x4366))+(((-1.0)*x4357*x4365))+(((-1.0)*x4347*x4370))+(((-1.0)*r10*x4373))+((x4347*x4369))+((x4351*x4371))+(((-1.0)*x4360*x4363)));
evalcond[5]=((((-1.0)*r10*sj0*sj5*x4351))+(((-1.0)*r01*x4372))+(((-1.0)*x4357*x4361))+((x4358*x4363))+(((-1.0)*r11*sj0*x4352))+((x4360*x4367))+((x4347*x4355))+(((-1.0)*x4359*x4365))+((x4347*x4356))+(((-1.0)*r00*x4373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4374=(cj0*r02);
IkReal x4375=(r12*sj0);
IkReal x4376=(cj0*cj5*r00);
IkReal x4377=(cj0*r01*sj5);
IkReal x4378=(cj5*r10*sj0);
IkReal x4379=(r11*sj0*sj5);
j4eval[0]=((((-1.73205080756888)*x4379))+x4374+x4375+(((1.73205080756888)*x4378))+(((1.73205080756888)*x4376))+(((-1.73205080756888)*x4377)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.866025403784439)*x4376))+(((0.5)*x4374))+(((0.5)*x4375))+(((-0.866025403784439)*x4379))+(((-0.866025403784439)*x4377))+(((0.866025403784439)*x4378))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4380=r20*r20;
IkReal x4381=r21*r21;
IkReal x4382=r22*r22;
IkReal x4383=(cj5*r20*r22);
IkReal x4384=(r21*r22*sj5);
IkReal x4385=(cj5*r20*r21*sj5);
IkReal x4386=cj5*cj5;
IkReal x4387=(x4380*x4386);
IkReal x4388=(x4381*x4386);
j4eval[0]=((((-3.46410161513775)*x4384))+(((3.46410161513775)*x4383))+(((-3.0)*x4382))+(((-4.0)*x4380))+(((-3.0)*x4388))+(((3.0)*x4387))+(((-1.0)*x4381))+(((-6.0)*x4385)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.73205080756888)*x4384))+(((-0.5)*x4381))+(((-2.0)*x4380))+(((-1.5)*x4382))+(((1.73205080756888)*x4383))+(((-3.0)*x4385))+(((-1.5)*x4388))+(((1.5)*x4387))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4389=((1.73205080756888)*cj0);
IkReal x4390=((1.73205080756888)*sj0);
IkReal x4391=((((-1.0)*r01*sj5*x4390))+(((-1.0)*cj5*r10*x4389))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*sj5*x4389))+((cj5*r00*x4390)));
j4eval[0]=x4391;
j4eval[1]=IKsign(x4391);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4392=((1.73205080756888)*cj0*cj5);
IkReal x4393=((1.73205080756888)*cj0*sj5);
IkReal x4394=((1.73205080756888)*cj5*sj0);
IkReal x4395=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x4396 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r20*sj5))+((cj5*r21))+((r00*x4393))+((r11*x4394))+((r10*x4395))+((r01*x4392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4396.valid){
continue;
}
CheckValue<IkReal> x4397=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4395))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r10*x4392))+((r00*x4394))+((r11*x4393)))),-1);
if(!x4397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4396.value)+(((1.5707963267949)*(x4397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4398=IKsin(j4);
IkReal x4399=((0.866025403784439)*r22);
IkReal x4400=((0.5)*r20);
IkReal x4401=(cj5*x4398);
IkReal x4402=IKcos(j4);
IkReal x4403=((1.0)*cj5*x4402);
IkReal x4404=(r20*sj5);
IkReal x4405=((0.5)*r21*sj5);
IkReal x4406=((0.866025403784439)*cj0*r02);
IkReal x4407=((0.866025403784439)*r12*sj0);
IkReal x4408=(cj0*cj5*x4398);
IkReal x4409=(cj0*sj5*x4398);
IkReal x4410=(cj5*sj0*x4398);
IkReal x4411=(sj0*sj5*x4398);
IkReal x4412=((0.5)*r00);
IkReal x4413=(cj0*cj5*x4402);
IkReal x4414=((0.5)*r01);
IkReal x4415=(cj0*sj5*x4402);
IkReal x4416=((0.5)*r10);
IkReal x4417=(cj5*sj0*x4402);
IkReal x4418=((0.5)*r11);
IkReal x4419=(sj0*sj5*x4402);
IkReal x4420=((0.866025403784439)*cj0*r12);
IkReal x4421=((0.866025403784439)*r02*sj0);
IkReal x4422=(r00*sj0*sj5);
IkReal x4423=((1.0)*cj0*cj5*x4402);
IkReal x4424=((1.0)*cj0*sj5*x4402);
evalcond[0]=((((-1.0)*x4402*x4404))+((x4398*x4399))+(((-1.0)*x4400*x4401))+(((-1.0)*r21*x4403))+((x4398*x4405)));
evalcond[1]=((-0.866025403784439)+((r21*x4401))+(((-1.0)*cj5*x4400*x4402))+((x4402*x4405))+((x4399*x4402))+((x4398*x4404)));
evalcond[2]=((0.5)+((r10*x4411))+((x4418*x4419))+((r11*x4410))+(((-1.0)*x4412*x4413))+((r00*x4409))+((x4402*x4407))+((x4414*x4415))+((r01*x4408))+(((-1.0)*x4416*x4417))+((x4402*x4406)));
evalcond[3]=(((x4402*x4420))+(((-1.0)*x4402*x4421))+(((-1.0)*x4414*x4419))+(((-1.0)*x4398*x4422))+((x4412*x4417))+(((-1.0)*x4413*x4416))+((r11*x4408))+((r10*x4409))+(((-1.0)*r01*x4410))+((x4415*x4418)));
evalcond[4]=((1.0)+((x4410*x4412))+(((-1.0)*x4398*x4421))+(((-1.0)*r11*x4423))+(((-1.0)*x4408*x4416))+((x4398*x4420))+(((-1.0)*x4411*x4414))+((x4402*x4422))+((x4409*x4418))+(((-1.0)*r10*x4424))+((r01*x4417)));
evalcond[5]=(((x4398*x4406))+(((-1.0)*x4408*x4412))+((x4411*x4418))+((x4398*x4407))+(((-1.0)*r10*sj0*sj5*x4402))+(((-1.0)*x4410*x4416))+(((-1.0)*r11*sj0*x4403))+((x4409*x4414))+(((-1.0)*r01*x4423))+(((-1.0)*r00*x4424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4425=((1.73205080756888)*r21);
IkReal x4426=(cj5*r20);
IkReal x4427=(r21*sj5);
IkReal x4428=r20*r20;
IkReal x4429=r21*r21;
IkReal x4430=((1.5)*(cj5*cj5));
CheckValue<IkReal> x4431 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x4425)))),IkReal(((((-0.866025403784439)*x4427))+(((-1.0)*(1.5)*r22))+(((0.866025403784439)*x4426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4431.valid){
continue;
}
CheckValue<IkReal> x4432=IKPowWithIntegerCheck(IKsign(((((-3.0)*cj5*r20*x4427))+(((-2.0)*x4428))+((x4428*x4430))+(((-1.0)*r22*sj5*x4425))+(((-0.5)*x4429))+(((-1.0)*x4429*x4430))+(((-1.0)*(1.5)*(r22*r22)))+(((1.73205080756888)*r22*x4426)))),-1);
if(!x4432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4431.value)+(((1.5707963267949)*(x4432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4433=IKsin(j4);
IkReal x4434=((0.866025403784439)*r22);
IkReal x4435=((0.5)*r20);
IkReal x4436=(cj5*x4433);
IkReal x4437=IKcos(j4);
IkReal x4438=((1.0)*cj5*x4437);
IkReal x4439=(r20*sj5);
IkReal x4440=((0.5)*r21*sj5);
IkReal x4441=((0.866025403784439)*cj0*r02);
IkReal x4442=((0.866025403784439)*r12*sj0);
IkReal x4443=(cj0*cj5*x4433);
IkReal x4444=(cj0*sj5*x4433);
IkReal x4445=(cj5*sj0*x4433);
IkReal x4446=(sj0*sj5*x4433);
IkReal x4447=((0.5)*r00);
IkReal x4448=(cj0*cj5*x4437);
IkReal x4449=((0.5)*r01);
IkReal x4450=(cj0*sj5*x4437);
IkReal x4451=((0.5)*r10);
IkReal x4452=(cj5*sj0*x4437);
IkReal x4453=((0.5)*r11);
IkReal x4454=(sj0*sj5*x4437);
IkReal x4455=((0.866025403784439)*cj0*r12);
IkReal x4456=((0.866025403784439)*r02*sj0);
IkReal x4457=(r00*sj0*sj5);
IkReal x4458=((1.0)*cj0*cj5*x4437);
IkReal x4459=((1.0)*cj0*sj5*x4437);
evalcond[0]=(((x4433*x4440))+(((-1.0)*r21*x4438))+((x4433*x4434))+(((-1.0)*x4435*x4436))+(((-1.0)*x4437*x4439)));
evalcond[1]=((-0.866025403784439)+((x4434*x4437))+((x4433*x4439))+(((-1.0)*cj5*x4435*x4437))+((r21*x4436))+((x4437*x4440)));
evalcond[2]=((0.5)+((r10*x4446))+((x4437*x4442))+((r00*x4444))+((x4449*x4450))+((x4437*x4441))+(((-1.0)*x4451*x4452))+((r11*x4445))+((x4453*x4454))+((r01*x4443))+(((-1.0)*x4447*x4448)));
evalcond[3]=((((-1.0)*x4433*x4457))+(((-1.0)*x4448*x4451))+((r10*x4444))+(((-1.0)*x4437*x4456))+(((-1.0)*x4449*x4454))+((r11*x4443))+(((-1.0)*r01*x4445))+((x4450*x4453))+((x4447*x4452))+((x4437*x4455)));
evalcond[4]=((1.0)+((r01*x4452))+((x4444*x4453))+((x4433*x4455))+(((-1.0)*x4433*x4456))+((x4437*x4457))+(((-1.0)*r11*x4458))+((x4445*x4447))+(((-1.0)*x4443*x4451))+(((-1.0)*x4446*x4449))+(((-1.0)*r10*x4459)));
evalcond[5]=(((x4433*x4442))+(((-1.0)*x4443*x4447))+(((-1.0)*x4445*x4451))+((x4433*x4441))+(((-1.0)*r11*sj0*x4438))+(((-1.0)*r10*sj0*sj5*x4437))+((x4446*x4453))+(((-1.0)*r01*x4458))+(((-1.0)*r00*x4459))+((x4444*x4449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4460=((0.866025403784439)*cj0);
IkReal x4461=((0.866025403784439)*sj0);
CheckValue<IkReal> x4462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x4460))+(((0.5)*r12*sj0))+((cj5*r10*x4461))+((cj5*r00*x4460))+(((-1.0)*r11*sj5*x4461))+(((0.5)*cj0*r02)))),-1);
if(!x4462.valid){
continue;
}
CheckValue<IkReal> x4463 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4462.value)))+(x4463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4464=IKsin(j4);
IkReal x4465=((0.866025403784439)*r22);
IkReal x4466=((0.5)*r20);
IkReal x4467=(cj5*x4464);
IkReal x4468=IKcos(j4);
IkReal x4469=((1.0)*cj5*x4468);
IkReal x4470=(r20*sj5);
IkReal x4471=((0.5)*r21*sj5);
IkReal x4472=((0.866025403784439)*cj0*r02);
IkReal x4473=((0.866025403784439)*r12*sj0);
IkReal x4474=(cj0*cj5*x4464);
IkReal x4475=(cj0*sj5*x4464);
IkReal x4476=(cj5*sj0*x4464);
IkReal x4477=(sj0*sj5*x4464);
IkReal x4478=((0.5)*r00);
IkReal x4479=(cj0*cj5*x4468);
IkReal x4480=((0.5)*r01);
IkReal x4481=(cj0*sj5*x4468);
IkReal x4482=((0.5)*r10);
IkReal x4483=(cj5*sj0*x4468);
IkReal x4484=((0.5)*r11);
IkReal x4485=(sj0*sj5*x4468);
IkReal x4486=((0.866025403784439)*cj0*r12);
IkReal x4487=((0.866025403784439)*r02*sj0);
IkReal x4488=(r00*sj0*sj5);
IkReal x4489=((1.0)*cj0*cj5*x4468);
IkReal x4490=((1.0)*cj0*sj5*x4468);
evalcond[0]=(((x4464*x4471))+(((-1.0)*r21*x4469))+((x4464*x4465))+(((-1.0)*x4466*x4467))+(((-1.0)*x4468*x4470)));
evalcond[1]=((-0.866025403784439)+((x4468*x4471))+((r21*x4467))+((x4465*x4468))+((x4464*x4470))+(((-1.0)*cj5*x4466*x4468)));
evalcond[2]=((0.5)+((r00*x4475))+((r11*x4476))+((x4484*x4485))+((r01*x4474))+((x4468*x4472))+(((-1.0)*x4482*x4483))+((x4480*x4481))+(((-1.0)*x4478*x4479))+((x4468*x4473))+((r10*x4477)));
evalcond[3]=(((x4468*x4486))+(((-1.0)*r01*x4476))+(((-1.0)*x4468*x4487))+(((-1.0)*x4480*x4485))+(((-1.0)*x4479*x4482))+((x4481*x4484))+((x4478*x4483))+((r10*x4475))+(((-1.0)*x4464*x4488))+((r11*x4474)));
evalcond[4]=((1.0)+((x4475*x4484))+(((-1.0)*r10*x4490))+((x4464*x4486))+((r01*x4483))+((x4468*x4488))+(((-1.0)*r11*x4489))+(((-1.0)*x4474*x4482))+((x4476*x4478))+(((-1.0)*x4464*x4487))+(((-1.0)*x4477*x4480)));
evalcond[5]=((((-1.0)*x4474*x4478))+((x4475*x4480))+((x4477*x4484))+(((-1.0)*r00*x4490))+(((-1.0)*x4476*x4482))+((x4464*x4473))+(((-1.0)*r01*x4489))+(((-1.0)*r11*sj0*x4469))+(((-1.0)*r10*sj0*sj5*x4468))+((x4464*x4472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x4491=(r02*sj0);
IkReal x4492=(cj0*r12);
IkReal x4493=(cj0*cj5*r10);
IkReal x4494=(cj0*r11*sj5);
IkReal x4495=(cj5*r00*sj0);
IkReal x4496=(r01*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x4494))+x4491+(((-1.0)*x4492))+(((-1.73205080756888)*x4496))+(((1.73205080756888)*x4495))+(((-1.73205080756888)*x4493)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((-0.866025403784439)*x4496))+(((0.866025403784439)*x4494))+(((-0.5)*x4492))+(((0.5)*x4491))+(((0.866025403784439)*x4495))+(((-0.866025403784439)*x4493))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x4497=r20*r20;
IkReal x4498=r21*r21;
IkReal x4499=r22*r22;
IkReal x4500=(cj5*r20*r22);
IkReal x4501=(r21*r22*sj5);
IkReal x4502=(cj5*r20*r21*sj5);
IkReal x4503=cj5*cj5;
IkReal x4504=(x4497*x4503);
IkReal x4505=(x4498*x4503);
j4eval[0]=((((-6.0)*x4502))+(((-3.46410161513775)*x4501))+(((3.0)*x4504))+(((-4.0)*x4497))+(((3.46410161513775)*x4500))+(((-3.0)*x4505))+(((-3.0)*x4499))+(((-1.0)*x4498)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.73205080756888)*x4501))+(((1.73205080756888)*x4500))+(((-1.5)*x4505))+(((-1.5)*x4499))+(((1.5)*x4504))+(((-0.5)*x4498))+(((-2.0)*x4497))+(((-3.0)*x4502))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x4506=((1.73205080756888)*cj0);
IkReal x4507=((1.73205080756888)*sj0);
IkReal x4508=(((r11*sj5*x4506))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*cj5*r10*x4506))+((cj5*r00*x4507))+(((-1.0)*r01*sj5*x4507)));
j4eval[0]=x4508;
j4eval[1]=IKsign(x4508);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4509=((1.73205080756888)*cj0*cj5);
IkReal x4510=((1.73205080756888)*cj0*sj5);
IkReal x4511=((1.73205080756888)*cj5*sj0);
IkReal x4512=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x4513=IKPowWithIntegerCheck(IKsign((((r00*x4511))+(((-1.0)*r10*x4509))+(((-1.0)*r01*x4512))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*x4510)))),-1);
if(!x4513.valid){
continue;
}
CheckValue<IkReal> x4514 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r10*x4512))+((r01*x4509))+((r11*x4511))+((r00*x4510)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4513.value)))+(x4514.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4515=IKsin(j4);
IkReal x4516=((0.866025403784439)*r22);
IkReal x4517=((0.5)*r20);
IkReal x4518=(cj5*x4515);
IkReal x4519=IKcos(j4);
IkReal x4520=((1.0)*cj5*x4519);
IkReal x4521=(r20*sj5);
IkReal x4522=((0.5)*r21*sj5);
IkReal x4523=((0.866025403784439)*cj0*r02);
IkReal x4524=((0.866025403784439)*r12*sj0);
IkReal x4525=(cj0*cj5*x4515);
IkReal x4526=(cj0*sj5*x4515);
IkReal x4527=(cj5*sj0*x4515);
IkReal x4528=(sj0*sj5*x4515);
IkReal x4529=((0.5)*r00);
IkReal x4530=(cj0*cj5*x4519);
IkReal x4531=((0.5)*r01);
IkReal x4532=(cj0*sj5*x4519);
IkReal x4533=((0.5)*r10);
IkReal x4534=(cj5*sj0*x4519);
IkReal x4535=((0.5)*r11);
IkReal x4536=(sj0*sj5*x4519);
IkReal x4537=((0.866025403784439)*cj0*r12);
IkReal x4538=((0.866025403784439)*r02*sj0);
IkReal x4539=(r00*sj0*sj5);
IkReal x4540=((1.0)*cj0*cj5*x4519);
IkReal x4541=((1.0)*cj0*sj5*x4519);
evalcond[0]=((((-1.0)*r21*x4520))+(((-1.0)*x4519*x4521))+(((-1.0)*x4517*x4518))+((x4515*x4522))+((x4515*x4516)));
evalcond[1]=((-0.866025403784439)+((x4519*x4522))+((r21*x4518))+((x4515*x4521))+(((-1.0)*cj5*x4517*x4519))+((x4516*x4519)));
evalcond[2]=(((r00*x4526))+(((-1.0)*x4529*x4530))+((r01*x4525))+((r10*x4528))+((r11*x4527))+((x4531*x4532))+((x4535*x4536))+((x4519*x4524))+(((-1.0)*x4533*x4534))+((x4519*x4523)));
evalcond[3]=(((x4527*x4529))+((x4515*x4537))+((x4526*x4535))+(((-1.0)*x4528*x4531))+((x4519*x4539))+(((-1.0)*x4525*x4533))+(((-1.0)*r10*x4541))+(((-1.0)*r11*x4540))+(((-1.0)*x4515*x4538))+((r01*x4534)));
evalcond[4]=((0.5)+(((-1.0)*x4531*x4536))+(((-1.0)*r01*x4527))+((x4532*x4535))+((r11*x4525))+((x4519*x4537))+(((-1.0)*x4530*x4533))+((x4529*x4534))+((r10*x4526))+(((-1.0)*x4519*x4538))+(((-1.0)*x4515*x4539)));
evalcond[5]=((-1.0)+((x4528*x4535))+(((-1.0)*x4525*x4529))+(((-1.0)*x4527*x4533))+(((-1.0)*r10*sj0*sj5*x4519))+((x4526*x4531))+(((-1.0)*r01*x4540))+(((-1.0)*r00*x4541))+(((-1.0)*r11*sj0*x4520))+((x4515*x4523))+((x4515*x4524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4542=((1.73205080756888)*r21);
IkReal x4543=(cj5*r20);
IkReal x4544=(r21*sj5);
IkReal x4545=r20*r20;
IkReal x4546=r21*r21;
IkReal x4547=((1.5)*(cj5*cj5));
CheckValue<IkReal> x4548 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x4542))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*x4543))+(((-0.866025403784439)*x4544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4548.valid){
continue;
}
CheckValue<IkReal> x4549=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*sj5*x4542))+(((-3.0)*cj5*r20*x4544))+(((-2.0)*x4545))+((x4545*x4547))+(((1.73205080756888)*r22*x4543))+(((-0.5)*x4546))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*x4546*x4547)))),-1);
if(!x4549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4548.value)+(((1.5707963267949)*(x4549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4550=IKsin(j4);
IkReal x4551=((0.866025403784439)*r22);
IkReal x4552=((0.5)*r20);
IkReal x4553=(cj5*x4550);
IkReal x4554=IKcos(j4);
IkReal x4555=((1.0)*cj5*x4554);
IkReal x4556=(r20*sj5);
IkReal x4557=((0.5)*r21*sj5);
IkReal x4558=((0.866025403784439)*cj0*r02);
IkReal x4559=((0.866025403784439)*r12*sj0);
IkReal x4560=(cj0*cj5*x4550);
IkReal x4561=(cj0*sj5*x4550);
IkReal x4562=(cj5*sj0*x4550);
IkReal x4563=(sj0*sj5*x4550);
IkReal x4564=((0.5)*r00);
IkReal x4565=(cj0*cj5*x4554);
IkReal x4566=((0.5)*r01);
IkReal x4567=(cj0*sj5*x4554);
IkReal x4568=((0.5)*r10);
IkReal x4569=(cj5*sj0*x4554);
IkReal x4570=((0.5)*r11);
IkReal x4571=(sj0*sj5*x4554);
IkReal x4572=((0.866025403784439)*cj0*r12);
IkReal x4573=((0.866025403784439)*r02*sj0);
IkReal x4574=(r00*sj0*sj5);
IkReal x4575=((1.0)*cj0*cj5*x4554);
IkReal x4576=((1.0)*cj0*sj5*x4554);
evalcond[0]=((((-1.0)*r21*x4555))+((x4550*x4551))+((x4550*x4557))+(((-1.0)*x4554*x4556))+(((-1.0)*x4552*x4553)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x4552*x4554))+((x4554*x4557))+((x4551*x4554))+((x4550*x4556))+((r21*x4553)));
evalcond[2]=(((x4554*x4559))+((r01*x4560))+((x4554*x4558))+((r11*x4562))+((r10*x4563))+((r00*x4561))+((x4566*x4567))+((x4570*x4571))+(((-1.0)*x4564*x4565))+(((-1.0)*x4568*x4569)));
evalcond[3]=(((x4562*x4564))+((r01*x4569))+((x4561*x4570))+(((-1.0)*r10*x4576))+(((-1.0)*r11*x4575))+(((-1.0)*x4550*x4573))+(((-1.0)*x4563*x4566))+((x4554*x4574))+((x4550*x4572))+(((-1.0)*x4560*x4568)));
evalcond[4]=((0.5)+(((-1.0)*r01*x4562))+(((-1.0)*x4566*x4571))+(((-1.0)*x4565*x4568))+((x4567*x4570))+((x4554*x4572))+((r10*x4561))+(((-1.0)*x4554*x4573))+((x4564*x4569))+((r11*x4560))+(((-1.0)*x4550*x4574)));
evalcond[5]=((-1.0)+(((-1.0)*r11*sj0*x4555))+(((-1.0)*x4562*x4568))+(((-1.0)*x4560*x4564))+((x4561*x4566))+(((-1.0)*r00*x4576))+((x4550*x4558))+((x4550*x4559))+((x4563*x4570))+(((-1.0)*r01*x4575))+(((-1.0)*r10*sj0*sj5*x4554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4577=((0.866025403784439)*cj0);
IkReal x4578=((0.866025403784439)*sj0);
CheckValue<IkReal> x4579=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x4578))+(((-1.0)*(0.5)*cj0*r12))+(((-1.0)*cj5*r10*x4577))+(((0.5)*r02*sj0))+((cj5*r00*x4578))+((r11*sj5*x4577)))),-1);
if(!x4579.valid){
continue;
}
CheckValue<IkReal> x4580 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4579.value)))+(x4580.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4581=IKsin(j4);
IkReal x4582=((0.866025403784439)*r22);
IkReal x4583=((0.5)*r20);
IkReal x4584=(cj5*x4581);
IkReal x4585=IKcos(j4);
IkReal x4586=((1.0)*cj5*x4585);
IkReal x4587=(r20*sj5);
IkReal x4588=((0.5)*r21*sj5);
IkReal x4589=((0.866025403784439)*cj0*r02);
IkReal x4590=((0.866025403784439)*r12*sj0);
IkReal x4591=(cj0*cj5*x4581);
IkReal x4592=(cj0*sj5*x4581);
IkReal x4593=(cj5*sj0*x4581);
IkReal x4594=(sj0*sj5*x4581);
IkReal x4595=((0.5)*r00);
IkReal x4596=(cj0*cj5*x4585);
IkReal x4597=((0.5)*r01);
IkReal x4598=(cj0*sj5*x4585);
IkReal x4599=((0.5)*r10);
IkReal x4600=(cj5*sj0*x4585);
IkReal x4601=((0.5)*r11);
IkReal x4602=(sj0*sj5*x4585);
IkReal x4603=((0.866025403784439)*cj0*r12);
IkReal x4604=((0.866025403784439)*r02*sj0);
IkReal x4605=(r00*sj0*sj5);
IkReal x4606=((1.0)*cj0*cj5*x4585);
IkReal x4607=((1.0)*cj0*sj5*x4585);
evalcond[0]=((((-1.0)*x4583*x4584))+(((-1.0)*r21*x4586))+((x4581*x4582))+((x4581*x4588))+(((-1.0)*x4585*x4587)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x4583*x4585))+((x4581*x4587))+((x4582*x4585))+((x4585*x4588))+((r21*x4584)));
evalcond[2]=(((x4597*x4598))+(((-1.0)*x4599*x4600))+((r11*x4593))+((r00*x4592))+((r01*x4591))+(((-1.0)*x4595*x4596))+((x4585*x4589))+((r10*x4594))+((x4585*x4590))+((x4601*x4602)));
evalcond[3]=((((-1.0)*r10*x4607))+(((-1.0)*x4594*x4597))+((x4581*x4603))+(((-1.0)*x4591*x4599))+((x4593*x4595))+(((-1.0)*x4581*x4604))+((x4592*x4601))+(((-1.0)*r11*x4606))+((r01*x4600))+((x4585*x4605)));
evalcond[4]=((0.5)+(((-1.0)*x4585*x4604))+((x4585*x4603))+(((-1.0)*x4581*x4605))+((r10*x4592))+((x4598*x4601))+(((-1.0)*r01*x4593))+((r11*x4591))+(((-1.0)*x4596*x4599))+(((-1.0)*x4597*x4602))+((x4595*x4600)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x4606))+(((-1.0)*r10*sj0*sj5*x4585))+(((-1.0)*r00*x4607))+(((-1.0)*r11*sj0*x4586))+((x4592*x4597))+(((-1.0)*x4593*x4599))+(((-1.0)*x4591*x4595))+((x4581*x4589))+((x4594*x4601))+((x4581*x4590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4608=(r02*sj0);
IkReal x4609=(cj0*r12);
IkReal x4610=(cj0*cj5*r10);
IkReal x4611=(cj0*r11*sj5);
IkReal x4612=(cj5*r00*sj0);
IkReal x4613=(r01*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x4612))+(((-1.73205080756888)*x4610))+(((-1.73205080756888)*x4613))+(((-1.0)*x4609))+(((1.73205080756888)*x4611))+x4608);
j4eval[1]=IKsign(((((0.866025403784439)*x4612))+(((0.5)*x4608))+(((-0.866025403784439)*x4613))+(((0.866025403784439)*x4611))+(((-0.866025403784439)*x4610))+(((-0.5)*x4609))));
j4eval[2]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4614=r20*r20;
IkReal x4615=r21*r21;
IkReal x4616=r22*r22;
IkReal x4617=(cj5*r20*r22);
IkReal x4618=(r21*r22*sj5);
IkReal x4619=(cj5*r20*r21*sj5);
IkReal x4620=cj5*cj5;
IkReal x4621=(x4614*x4620);
IkReal x4622=(x4615*x4620);
j4eval[0]=((((3.0)*x4621))+(((-3.46410161513775)*x4618))+(((-3.0)*x4622))+(((-6.0)*x4619))+(((-1.0)*x4615))+(((3.46410161513775)*x4617))+(((-4.0)*x4614))+(((-3.0)*x4616)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-2.0)*x4614))+(((1.73205080756888)*x4617))+(((-1.5)*x4622))+(((-3.0)*x4619))+(((-1.5)*x4616))+(((1.5)*x4621))+(((-1.73205080756888)*x4618))+(((-0.5)*x4615))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4623=((1.73205080756888)*cj0);
IkReal x4624=((1.73205080756888)*sj0);
IkReal x4625=(((cj5*r00*x4624))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*sj5*x4624))+((r11*sj5*x4623))+(((-1.0)*cj5*r10*x4623)));
j4eval[0]=x4625;
j4eval[1]=IKsign(x4625);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4626=((1.73205080756888)*cj0*cj5);
IkReal x4627=((1.73205080756888)*cj0*sj5);
IkReal x4628=((1.73205080756888)*cj5*sj0);
IkReal x4629=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x4630 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r10*x4629))+((r00*x4627))+((r01*x4626))+((r11*x4628)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4630.valid){
continue;
}
CheckValue<IkReal> x4631=IKPowWithIntegerCheck(IKsign((((r11*x4627))+(((-1.0)*r10*x4626))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r00*x4628))+(((-1.0)*r01*x4629)))),-1);
if(!x4631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4630.value)+(((1.5707963267949)*(x4631.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4632=IKsin(j4);
IkReal x4633=((0.866025403784439)*r22);
IkReal x4634=((0.5)*r20);
IkReal x4635=(cj5*x4632);
IkReal x4636=IKcos(j4);
IkReal x4637=((1.0)*cj5*x4636);
IkReal x4638=(r20*sj5);
IkReal x4639=((0.5)*r21*sj5);
IkReal x4640=((0.866025403784439)*cj0*r02);
IkReal x4641=((0.866025403784439)*r12*sj0);
IkReal x4642=(cj0*cj5*x4632);
IkReal x4643=(cj0*sj5*x4632);
IkReal x4644=(cj5*sj0*x4632);
IkReal x4645=(sj0*sj5*x4632);
IkReal x4646=((0.5)*r00);
IkReal x4647=(cj0*cj5*x4636);
IkReal x4648=((0.5)*r01);
IkReal x4649=(cj0*sj5*x4636);
IkReal x4650=((0.5)*r10);
IkReal x4651=(cj5*sj0*x4636);
IkReal x4652=((0.5)*r11);
IkReal x4653=(sj0*sj5*x4636);
IkReal x4654=((0.866025403784439)*cj0*r12);
IkReal x4655=((0.866025403784439)*r02*sj0);
IkReal x4656=(r00*sj0*sj5);
IkReal x4657=((1.0)*cj0*cj5*x4636);
IkReal x4658=((1.0)*cj0*sj5*x4636);
evalcond[0]=((((-1.0)*x4636*x4638))+((x4632*x4639))+(((-1.0)*x4634*x4635))+(((-1.0)*r21*x4637))+((x4632*x4633)));
evalcond[1]=((-0.866025403784439)+((x4632*x4638))+(((-1.0)*cj5*x4634*x4636))+((x4633*x4636))+((x4636*x4639))+((r21*x4635)));
evalcond[2]=(((x4636*x4640))+((x4652*x4653))+((r01*x4642))+(((-1.0)*x4650*x4651))+((r10*x4645))+((r00*x4643))+((x4648*x4649))+(((-1.0)*x4646*x4647))+((r11*x4644))+((x4636*x4641)));
evalcond[3]=((((-1.0)*r10*x4658))+(((-1.0)*x4632*x4655))+((x4632*x4654))+((x4636*x4656))+(((-1.0)*x4642*x4650))+(((-1.0)*r11*x4657))+(((-1.0)*x4645*x4648))+((x4644*x4646))+((x4643*x4652))+((r01*x4651)));
evalcond[4]=((-0.5)+(((-1.0)*r01*x4644))+((r10*x4643))+(((-1.0)*x4648*x4653))+((r11*x4642))+((x4649*x4652))+((x4646*x4651))+(((-1.0)*x4636*x4655))+(((-1.0)*x4647*x4650))+(((-1.0)*x4632*x4656))+((x4636*x4654)));
evalcond[5]=((1.0)+(((-1.0)*x4644*x4650))+(((-1.0)*r11*sj0*x4637))+((x4632*x4641))+((x4645*x4652))+(((-1.0)*r01*x4657))+((x4643*x4648))+(((-1.0)*r00*x4658))+(((-1.0)*r10*sj0*sj5*x4636))+((x4632*x4640))+(((-1.0)*x4642*x4646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4659=((1.73205080756888)*r21);
IkReal x4660=(cj5*r20);
IkReal x4661=(r21*sj5);
IkReal x4662=r20*r20;
IkReal x4663=r21*r21;
IkReal x4664=((1.5)*(cj5*cj5));
CheckValue<IkReal> x4665 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x4659))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*x4660))+(((-0.866025403784439)*x4661)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4665.valid){
continue;
}
CheckValue<IkReal> x4666=IKPowWithIntegerCheck(IKsign(((((1.73205080756888)*r22*x4660))+(((-2.0)*x4662))+(((-1.0)*r22*sj5*x4659))+(((-3.0)*cj5*r20*x4661))+(((-1.0)*x4663*x4664))+(((-0.5)*x4663))+(((-1.0)*(1.5)*(r22*r22)))+((x4662*x4664)))),-1);
if(!x4666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4665.value)+(((1.5707963267949)*(x4666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4667=IKsin(j4);
IkReal x4668=((0.866025403784439)*r22);
IkReal x4669=((0.5)*r20);
IkReal x4670=(cj5*x4667);
IkReal x4671=IKcos(j4);
IkReal x4672=((1.0)*cj5*x4671);
IkReal x4673=(r20*sj5);
IkReal x4674=((0.5)*r21*sj5);
IkReal x4675=((0.866025403784439)*cj0*r02);
IkReal x4676=((0.866025403784439)*r12*sj0);
IkReal x4677=(cj0*cj5*x4667);
IkReal x4678=(cj0*sj5*x4667);
IkReal x4679=(cj5*sj0*x4667);
IkReal x4680=(sj0*sj5*x4667);
IkReal x4681=((0.5)*r00);
IkReal x4682=(cj0*cj5*x4671);
IkReal x4683=((0.5)*r01);
IkReal x4684=(cj0*sj5*x4671);
IkReal x4685=((0.5)*r10);
IkReal x4686=(cj5*sj0*x4671);
IkReal x4687=((0.5)*r11);
IkReal x4688=(sj0*sj5*x4671);
IkReal x4689=((0.866025403784439)*cj0*r12);
IkReal x4690=((0.866025403784439)*r02*sj0);
IkReal x4691=(r00*sj0*sj5);
IkReal x4692=((1.0)*cj0*cj5*x4671);
IkReal x4693=((1.0)*cj0*sj5*x4671);
evalcond[0]=(((x4667*x4668))+(((-1.0)*r21*x4672))+(((-1.0)*x4669*x4670))+(((-1.0)*x4671*x4673))+((x4667*x4674)));
evalcond[1]=((-0.866025403784439)+((x4668*x4671))+(((-1.0)*cj5*x4669*x4671))+((x4671*x4674))+((r21*x4670))+((x4667*x4673)));
evalcond[2]=(((r10*x4680))+((x4687*x4688))+((r11*x4679))+(((-1.0)*x4685*x4686))+(((-1.0)*x4681*x4682))+((x4683*x4684))+((x4671*x4675))+((x4671*x4676))+((r01*x4677))+((r00*x4678)));
evalcond[3]=((((-1.0)*r11*x4692))+((r01*x4686))+(((-1.0)*r10*x4693))+(((-1.0)*x4677*x4685))+((x4671*x4691))+((x4667*x4689))+((x4678*x4687))+(((-1.0)*x4680*x4683))+(((-1.0)*x4667*x4690))+((x4679*x4681)));
evalcond[4]=((-0.5)+(((-1.0)*x4682*x4685))+(((-1.0)*x4667*x4691))+((r11*x4677))+((x4671*x4689))+(((-1.0)*x4671*x4690))+((r10*x4678))+((x4681*x4686))+(((-1.0)*r01*x4679))+(((-1.0)*x4683*x4688))+((x4684*x4687)));
evalcond[5]=((1.0)+(((-1.0)*x4679*x4685))+((x4667*x4675))+((x4667*x4676))+(((-1.0)*x4677*x4681))+(((-1.0)*r11*sj0*x4672))+((x4680*x4687))+(((-1.0)*r01*x4692))+(((-1.0)*r10*sj0*sj5*x4671))+(((-1.0)*r00*x4693))+((x4678*x4683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4694=((0.866025403784439)*cj0);
IkReal x4695=((0.866025403784439)*sj0);
CheckValue<IkReal> x4696=IKPowWithIntegerCheck(IKsign(((((-1.0)*(0.5)*cj0*r12))+((cj5*r00*x4695))+(((-1.0)*r01*sj5*x4695))+(((0.5)*r02*sj0))+((r11*sj5*x4694))+(((-1.0)*cj5*r10*x4694)))),-1);
if(!x4696.valid){
continue;
}
CheckValue<IkReal> x4697 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4696.value)))+(x4697.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4698=IKsin(j4);
IkReal x4699=((0.866025403784439)*r22);
IkReal x4700=((0.5)*r20);
IkReal x4701=(cj5*x4698);
IkReal x4702=IKcos(j4);
IkReal x4703=((1.0)*cj5*x4702);
IkReal x4704=(r20*sj5);
IkReal x4705=((0.5)*r21*sj5);
IkReal x4706=((0.866025403784439)*cj0*r02);
IkReal x4707=((0.866025403784439)*r12*sj0);
IkReal x4708=(cj0*cj5*x4698);
IkReal x4709=(cj0*sj5*x4698);
IkReal x4710=(cj5*sj0*x4698);
IkReal x4711=(sj0*sj5*x4698);
IkReal x4712=((0.5)*r00);
IkReal x4713=(cj0*cj5*x4702);
IkReal x4714=((0.5)*r01);
IkReal x4715=(cj0*sj5*x4702);
IkReal x4716=((0.5)*r10);
IkReal x4717=(cj5*sj0*x4702);
IkReal x4718=((0.5)*r11);
IkReal x4719=(sj0*sj5*x4702);
IkReal x4720=((0.866025403784439)*cj0*r12);
IkReal x4721=((0.866025403784439)*r02*sj0);
IkReal x4722=(r00*sj0*sj5);
IkReal x4723=((1.0)*cj0*cj5*x4702);
IkReal x4724=((1.0)*cj0*sj5*x4702);
evalcond[0]=(((x4698*x4699))+(((-1.0)*r21*x4703))+((x4698*x4705))+(((-1.0)*x4702*x4704))+(((-1.0)*x4700*x4701)));
evalcond[1]=((-0.866025403784439)+((x4699*x4702))+((x4698*x4704))+(((-1.0)*cj5*x4700*x4702))+((x4702*x4705))+((r21*x4701)));
evalcond[2]=(((r11*x4710))+(((-1.0)*x4716*x4717))+((x4714*x4715))+(((-1.0)*x4712*x4713))+((r00*x4709))+((x4718*x4719))+((x4702*x4707))+((r01*x4708))+((x4702*x4706))+((r10*x4711)));
evalcond[3]=((((-1.0)*x4711*x4714))+((x4709*x4718))+(((-1.0)*x4708*x4716))+((x4698*x4720))+((x4702*x4722))+(((-1.0)*x4698*x4721))+(((-1.0)*r11*x4723))+((r01*x4717))+(((-1.0)*r10*x4724))+((x4710*x4712)));
evalcond[4]=((-0.5)+((r11*x4708))+(((-1.0)*x4702*x4721))+(((-1.0)*r01*x4710))+(((-1.0)*x4714*x4719))+((r10*x4709))+(((-1.0)*x4698*x4722))+((x4712*x4717))+((x4702*x4720))+(((-1.0)*x4713*x4716))+((x4715*x4718)));
evalcond[5]=((1.0)+(((-1.0)*x4708*x4712))+(((-1.0)*r10*sj0*sj5*x4702))+((x4711*x4718))+(((-1.0)*x4710*x4716))+(((-1.0)*r01*x4723))+(((-1.0)*r11*sj0*x4703))+((x4709*x4714))+((x4698*x4707))+((x4698*x4706))+(((-1.0)*r00*x4724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4725=(cj3*cj5);
IkReal x4726=(cj3*sj5);
IkReal x4727=((0.5)*r21);
IkReal x4728=((2.0)*r20);
IkReal x4729=(cj0*r10);
IkReal x4730=(cj0*r11);
IkReal x4731=((1.5)*r22);
IkReal x4732=(r00*sj0);
IkReal x4733=(r01*sj0);
IkReal x4734=((0.866025403784439)*cj5*r22);
IkReal x4735=(cj5*r20);
IkReal x4736=((0.866025403784439)*cj0*r12);
IkReal x4737=((0.866025403784439)*r22*sj5);
IkReal x4738=(r21*sj5);
IkReal x4739=((0.866025403784439)*r02*sj0);
IkReal x4740=((1.5)*cj5*r21*sj5);
IkReal x4741=((1.5)*cj5*r20*sj5);
IkReal x4742=cj5*cj5;
IkReal x4743=((1.5)*r20*x4742);
IkReal x4744=((1.5)*r21*x4742);
CheckValue<IkReal> x4745=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4729*x4740))+((x4735*x4736))+((x4732*x4740))+((x4733*x4741))+((x4729*x4734))+(((-1.0)*cj0*r12*x4731))+(((-1.0)*x4730*x4737))+(((-1.0)*x4728*x4729))+((x4728*x4732))+((x4729*x4743))+(((-1.0)*x4732*x4734))+((x4733*x4737))+(((-1.0)*x4732*x4743))+(((-1.0)*x4727*x4730))+((r02*sj0*x4731))+(((-1.0)*x4730*x4744))+(((-1.0)*x4736*x4738))+(((-1.0)*x4735*x4739))+(((-1.0)*x4730*x4741))+((x4727*x4733))+((x4738*x4739))+((x4733*x4744)))),-1);
if(!x4745.valid){
continue;
}
CheckValue<IkReal> x4746 = IKatan2WithCheck(IkReal((((r20*x4726))+((r21*x4725)))),IkReal((((x4726*x4727))+((cj3*(((0.866025403784439)*r22))))+(((-0.5)*r20*x4725)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4745.value)))+(x4746.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4747=IKsin(j4);
IkReal x4748=((0.866025403784439)*r22);
IkReal x4749=((0.5)*r20);
IkReal x4750=(cj5*x4747);
IkReal x4751=IKcos(j4);
IkReal x4752=((1.0)*cj5*x4751);
IkReal x4753=(r20*sj5);
IkReal x4754=((0.5)*r21*sj5);
IkReal x4755=((0.866025403784439)*cj0*r02);
IkReal x4756=((0.866025403784439)*r12*sj0);
IkReal x4757=(cj0*cj5*x4747);
IkReal x4758=(cj0*sj5*x4747);
IkReal x4759=(cj5*sj0*x4747);
IkReal x4760=(sj0*sj5*x4747);
IkReal x4761=((0.5)*r00);
IkReal x4762=(cj0*cj5*x4751);
IkReal x4763=((0.5)*r01);
IkReal x4764=(cj0*sj5*x4751);
IkReal x4765=((0.5)*r10);
IkReal x4766=(cj5*sj0*x4751);
IkReal x4767=((0.5)*r11);
IkReal x4768=(sj0*sj5*x4751);
IkReal x4769=((0.866025403784439)*cj0*r12);
IkReal x4770=((0.866025403784439)*r02*sj0);
IkReal x4771=(r00*sj0*sj5);
IkReal x4772=((1.0)*cj0*cj5*x4751);
IkReal x4773=((1.0)*cj0*sj5*x4751);
evalcond[0]=((((-1.0)*r21*x4752))+((x4747*x4754))+(((-1.0)*x4751*x4753))+((x4747*x4748))+(((-1.0)*x4749*x4750)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x4749*x4751))+((x4748*x4751))+((r21*x4750))+((x4751*x4754))+((x4747*x4753)));
evalcond[2]=(((r10*x4760))+(((-1.0)*x4765*x4766))+((x4751*x4755))+((r00*x4758))+((r01*x4757))+(((-1.0)*(0.5)*sj3))+(((-1.0)*x4761*x4762))+((x4767*x4768))+((x4763*x4764))+((r11*x4759))+((x4751*x4756)));
evalcond[3]=((((-1.0)*r01*x4759))+((x4761*x4766))+((x4764*x4767))+(((-1.0)*x4751*x4770))+(((-1.0)*x4762*x4765))+((r11*x4757))+((x4751*x4769))+(((0.5)*cj3))+(((-1.0)*x4747*x4771))+((r10*x4758))+(((-1.0)*x4763*x4768)));
evalcond[4]=(((x4758*x4767))+((x4751*x4771))+((r01*x4766))+((x4759*x4761))+(((-1.0)*r10*x4773))+(((-1.0)*x4760*x4763))+(((-1.0)*x4747*x4770))+((x4747*x4769))+(((-1.0)*r11*x4772))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x4757*x4765)));
evalcond[5]=((((-1.0)*r11*sj0*x4752))+((x4747*x4756))+(((-1.0)*(1.0)*cj3))+((x4758*x4763))+((x4747*x4755))+(((-1.0)*r01*x4772))+(((-1.0)*x4759*x4765))+(((-1.0)*x4757*x4761))+((x4760*x4767))+(((-1.0)*r00*x4773))+(((-1.0)*r10*sj0*sj5*x4751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4774=((1.73205080756888)*r21);
IkReal x4775=(cj5*r20);
IkReal x4776=(r21*sj5);
IkReal x4777=r20*r20;
IkReal x4778=r21*r21;
IkReal x4779=((1.5)*(cj5*cj5));
CheckValue<IkReal> x4780=IKPowWithIntegerCheck(IKsign(((((1.73205080756888)*r22*x4775))+(((-2.0)*x4777))+(((-1.0)*x4778*x4779))+(((-3.0)*cj5*r20*x4776))+(((-1.0)*(1.5)*(r22*r22)))+(((-1.0)*r22*sj5*x4774))+(((-0.5)*x4778))+((x4777*x4779)))),-1);
if(!x4780.valid){
continue;
}
CheckValue<IkReal> x4781 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x4774)))),IkReal(((((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x4776))+(((0.866025403784439)*x4775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4780.value)))+(x4781.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4782=IKsin(j4);
IkReal x4783=((0.866025403784439)*r22);
IkReal x4784=((0.5)*r20);
IkReal x4785=(cj5*x4782);
IkReal x4786=IKcos(j4);
IkReal x4787=((1.0)*cj5*x4786);
IkReal x4788=(r20*sj5);
IkReal x4789=((0.5)*r21*sj5);
IkReal x4790=((0.866025403784439)*cj0*r02);
IkReal x4791=((0.866025403784439)*r12*sj0);
IkReal x4792=(cj0*cj5*x4782);
IkReal x4793=(cj0*sj5*x4782);
IkReal x4794=(cj5*sj0*x4782);
IkReal x4795=(sj0*sj5*x4782);
IkReal x4796=((0.5)*r00);
IkReal x4797=(cj0*cj5*x4786);
IkReal x4798=((0.5)*r01);
IkReal x4799=(cj0*sj5*x4786);
IkReal x4800=((0.5)*r10);
IkReal x4801=(cj5*sj0*x4786);
IkReal x4802=((0.5)*r11);
IkReal x4803=(sj0*sj5*x4786);
IkReal x4804=((0.866025403784439)*cj0*r12);
IkReal x4805=((0.866025403784439)*r02*sj0);
IkReal x4806=(r00*sj0*sj5);
IkReal x4807=((1.0)*cj0*cj5*x4786);
IkReal x4808=((1.0)*cj0*sj5*x4786);
evalcond[0]=(((x4782*x4789))+(((-1.0)*r21*x4787))+(((-1.0)*x4786*x4788))+(((-1.0)*x4784*x4785))+((x4782*x4783)));
evalcond[1]=((-0.866025403784439)+((x4782*x4788))+((x4786*x4789))+((x4783*x4786))+((r21*x4785))+(((-1.0)*cj5*x4784*x4786)));
evalcond[2]=(((x4798*x4799))+((x4786*x4790))+((x4802*x4803))+((r00*x4793))+((x4786*x4791))+(((-1.0)*(0.5)*sj3))+(((-1.0)*x4800*x4801))+(((-1.0)*x4796*x4797))+((r10*x4795))+((r11*x4794))+((r01*x4792)));
evalcond[3]=(((x4799*x4802))+((r10*x4793))+((r11*x4792))+(((-1.0)*x4786*x4805))+(((-1.0)*x4782*x4806))+(((-1.0)*x4797*x4800))+(((-1.0)*r01*x4794))+((x4796*x4801))+(((-1.0)*x4798*x4803))+((x4786*x4804))+(((0.5)*cj3)));
evalcond[4]=(((r01*x4801))+(((-1.0)*r10*x4808))+((x4793*x4802))+(((-1.0)*x4792*x4800))+(((-1.0)*x4795*x4798))+((x4786*x4806))+((x4794*x4796))+(((-1.0)*r11*x4807))+(((-1.0)*(1.0)*sj3))+((x4782*x4804))+(((-1.0)*x4782*x4805)));
evalcond[5]=((((-1.0)*r01*x4807))+(((-1.0)*r11*sj0*x4787))+(((-1.0)*(1.0)*cj3))+(((-1.0)*r10*sj0*sj5*x4786))+(((-1.0)*r00*x4808))+(((-1.0)*x4792*x4796))+(((-1.0)*x4794*x4800))+((x4782*x4790))+((x4782*x4791))+((x4793*x4798))+((x4795*x4802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4809=(cj5*sj3);
IkReal x4810=(sj3*sj5);
IkReal x4811=((0.866025403784439)*cj0);
IkReal x4812=((0.866025403784439)*sj0);
CheckValue<IkReal> x4813=IKPowWithIntegerCheck(IKsign((((cj5*r10*x4812))+((cj5*r00*x4811))+(((-1.0)*r01*sj5*x4811))+(((0.5)*r12*sj0))+(((0.5)*cj0*r02))+(((-1.0)*r11*sj5*x4812)))),-1);
if(!x4813.valid){
continue;
}
CheckValue<IkReal> x4814 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4810))+(((-1.0)*r21*x4809)))),IkReal(((((-1.0)*(0.866025403784439)*r22*sj3))+(((-0.5)*r21*x4810))+(((0.5)*r20*x4809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4813.value)))+(x4814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4815=IKsin(j4);
IkReal x4816=((0.866025403784439)*r22);
IkReal x4817=((0.5)*r20);
IkReal x4818=(cj5*x4815);
IkReal x4819=IKcos(j4);
IkReal x4820=((1.0)*cj5*x4819);
IkReal x4821=(r20*sj5);
IkReal x4822=((0.5)*r21*sj5);
IkReal x4823=((0.866025403784439)*cj0*r02);
IkReal x4824=((0.866025403784439)*r12*sj0);
IkReal x4825=(cj0*cj5*x4815);
IkReal x4826=(cj0*sj5*x4815);
IkReal x4827=(cj5*sj0*x4815);
IkReal x4828=(sj0*sj5*x4815);
IkReal x4829=((0.5)*r00);
IkReal x4830=(cj0*cj5*x4819);
IkReal x4831=((0.5)*r01);
IkReal x4832=(cj0*sj5*x4819);
IkReal x4833=((0.5)*r10);
IkReal x4834=(cj5*sj0*x4819);
IkReal x4835=((0.5)*r11);
IkReal x4836=(sj0*sj5*x4819);
IkReal x4837=((0.866025403784439)*cj0*r12);
IkReal x4838=((0.866025403784439)*r02*sj0);
IkReal x4839=(r00*sj0*sj5);
IkReal x4840=((1.0)*cj0*cj5*x4819);
IkReal x4841=((1.0)*cj0*sj5*x4819);
evalcond[0]=(((x4815*x4822))+(((-1.0)*x4819*x4821))+(((-1.0)*r21*x4820))+(((-1.0)*x4817*x4818))+((x4815*x4816)));
evalcond[1]=((-0.866025403784439)+((x4816*x4819))+((r21*x4818))+(((-1.0)*cj5*x4817*x4819))+((x4819*x4822))+((x4815*x4821)));
evalcond[2]=(((r11*x4827))+((r00*x4826))+((r10*x4828))+((x4819*x4824))+(((-1.0)*x4829*x4830))+(((-1.0)*(0.5)*sj3))+((x4831*x4832))+(((-1.0)*x4833*x4834))+((r01*x4825))+((x4819*x4823))+((x4835*x4836)));
evalcond[3]=((((-1.0)*x4831*x4836))+((x4819*x4837))+(((-1.0)*x4815*x4839))+(((-1.0)*r01*x4827))+((r11*x4825))+((x4829*x4834))+(((-1.0)*x4819*x4838))+(((-1.0)*x4830*x4833))+((r10*x4826))+((x4832*x4835))+(((0.5)*cj3)));
evalcond[4]=((((-1.0)*r10*x4841))+((r01*x4834))+(((-1.0)*x4815*x4838))+(((-1.0)*x4825*x4833))+((x4819*x4839))+((x4827*x4829))+(((-1.0)*r11*x4840))+((x4815*x4837))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x4828*x4831))+((x4826*x4835)));
evalcond[5]=((((-1.0)*r10*sj0*sj5*x4819))+((x4828*x4835))+((x4826*x4831))+(((-1.0)*(1.0)*cj3))+(((-1.0)*r01*x4840))+(((-1.0)*r11*sj0*x4820))+(((-1.0)*r00*x4841))+((x4815*x4824))+((x4815*x4823))+(((-1.0)*x4827*x4833))+(((-1.0)*x4825*x4829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4842=((0.577350269189626)*cj0);
IkReal x4843=((0.577350269189626)*sj0);
IkReal x4844=(cj0*cj5);
IkReal x4845=(cj5*sj0);
IkReal x4846=((1.0)*cj0);
IkReal x4847=(r01*sj5);
IkReal x4848=(r11*sj5);
if( IKabs((((r10*x4845))+(((-1.0)*sj0*x4848))+((r00*x4844))+(((-1.0)*x4846*x4847))+((r12*x4843))+((r02*x4842)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x4847))+((r10*x4844))+(((-1.0)*r00*x4845))+(((-1.0)*r02*x4843))+(((-1.0)*x4846*x4848))+((r12*x4842)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x4845))+(((-1.0)*sj0*x4848))+((r00*x4844))+(((-1.0)*x4846*x4847))+((r12*x4843))+((r02*x4842))))+IKsqr((((sj0*x4847))+((r10*x4844))+(((-1.0)*r00*x4845))+(((-1.0)*r02*x4843))+(((-1.0)*x4846*x4848))+((r12*x4842))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r10*x4845))+(((-1.0)*sj0*x4848))+((r00*x4844))+(((-1.0)*x4846*x4847))+((r12*x4843))+((r02*x4842))), (((sj0*x4847))+((r10*x4844))+(((-1.0)*r00*x4845))+(((-1.0)*r02*x4843))+(((-1.0)*x4846*x4848))+((r12*x4842))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x4849=((0.5)*cj0);
IkReal x4850=((0.5)*sj0);
IkReal x4851=((0.866025403784439)*cj0*cj5);
IkReal x4852=((0.866025403784439)*cj0*sj5);
IkReal x4853=((0.866025403784439)*cj5*sj0);
IkReal x4854=((0.866025403784439)*sj0*sj5);
evalcond[0]=(((r11*x4852))+((r00*x4853))+(((-1.0)*r12*x4849))+((r02*x4850))+(((-1.0)*r10*x4851))+(((-1.0)*r01*x4854))+(((0.866025403784439)*(IKcos(j3)))));
evalcond[1]=((((-1.0)*r02*x4849))+(((-1.0)*r00*x4851))+(((-1.0)*r12*x4850))+(((-1.0)*r10*x4853))+((r01*x4852))+(((0.866025403784439)*(IKsin(j3))))+((r11*x4854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4855=(cj0*r02);
IkReal x4856=(r12*sj0);
IkReal x4857=(cj0*cj5*r00);
IkReal x4858=(cj0*r01*sj5);
IkReal x4859=(cj5*r10*sj0);
IkReal x4860=(r11*sj0*sj5);
IkReal x4861=(cj5*sj3);
IkReal x4862=(sj3*sj5);
j4eval[0]=(x4856+x4855+(((1.73205080756888)*x4859))+(((-1.73205080756888)*x4860))+(((-1.73205080756888)*x4858))+(((1.73205080756888)*x4857)));
j4eval[1]=((IKabs((((r21*x4861))+((r20*x4862)))))+(((0.5)*(IKabs(((((-1.0)*r21*x4862))+((r20*x4861))+(((-1.0)*(1.73205080756888)*r22*sj3))))))));
j4eval[2]=IKsign(((((-0.866025403784439)*x4858))+(((0.866025403784439)*x4857))+(((-0.866025403784439)*x4860))+(((0.866025403784439)*x4859))+(((0.5)*x4855))+(((0.5)*x4856))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4863=r20*r20;
IkReal x4864=r21*r21;
IkReal x4865=r22*r22;
IkReal x4866=(cj5*r20*r22);
IkReal x4867=(r21*r22*sj5);
IkReal x4868=(cj5*r20*r21*sj5);
IkReal x4869=cj5*cj5;
IkReal x4870=(x4863*x4869);
IkReal x4871=(x4864*x4869);
j4eval[0]=((((-3.0)*x4871))+(((-3.0)*x4865))+(((3.46410161513775)*x4866))+(((-4.0)*x4863))+(((3.0)*x4870))+(((-1.0)*x4864))+(((-3.46410161513775)*x4867))+(((-6.0)*x4868)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-1.5)*x4865))+(((-1.73205080756888)*x4867))+(((-1.5)*x4871))+(((-2.0)*x4863))+(((-3.0)*x4868))+(((-0.5)*x4864))+(((1.5)*x4870))+(((1.73205080756888)*x4866))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4872=(cj0*r00*r20);
IkReal x4873=(cj0*r01*r21);
IkReal x4874=(cj0*r02*r22);
IkReal x4875=(r10*r20*sj0);
IkReal x4876=(r11*r21*sj0);
IkReal x4877=(r12*r22*sj0);
IkReal x4878=((1.73205080756888)*r22);
IkReal x4879=(cj0*cj5*r00);
IkReal x4880=(cj0*cj5*r02*r20);
IkReal x4881=(cj0*r01*sj5);
IkReal x4882=(cj0*r02*r21*sj5);
IkReal x4883=(cj5*r10*sj0);
IkReal x4884=(cj5*r12*r20*sj0);
IkReal x4885=(r11*sj0*sj5);
IkReal x4886=(r12*r21*sj0*sj5);
IkReal x4887=(cj0*cj5*r00*r21*sj5);
IkReal x4888=(cj0*cj5*r01*r20*sj5);
IkReal x4889=(cj5*r10*r21*sj0*sj5);
IkReal x4890=(cj5*r11*r20*sj0*sj5);
IkReal x4891=cj5*cj5;
IkReal x4892=(cj0*r00*r20*x4891);
IkReal x4893=(cj0*r01*r21*x4891);
IkReal x4894=(r10*r20*sj0*x4891);
IkReal x4895=(r11*r21*sj0*x4891);
IkReal x4896=(r21*sj3);
IkReal x4897=(r20*sj3);
IkReal x4898=((0.866025403784439)*r22);
j4eval[0]=(((x4878*x4879))+(((-3.0)*x4888))+(((-3.0)*x4874))+(((1.73205080756888)*x4880))+(((-1.73205080756888)*x4886))+(((-3.0)*x4877))+(((3.0)*x4892))+(((-3.0)*x4889))+(((-4.0)*x4875))+(((-1.0)*x4873))+(((3.0)*x4894))+(((1.73205080756888)*x4884))+(((-1.0)*x4878*x4885))+(((-4.0)*x4872))+(((-1.0)*x4878*x4881))+(((-3.0)*x4895))+(((-1.73205080756888)*x4882))+(((-3.0)*x4893))+(((-3.0)*x4890))+(((-3.0)*x4887))+((x4878*x4883))+(((-1.0)*x4876)));
j4eval[1]=((IKabs((((sj5*x4897))+((cj5*x4896)))))+(((0.5)*(IKabs((((sj5*x4896))+((sj3*x4878))+(((-1.0)*cj5*x4897))))))));
j4eval[2]=IKsign(((((1.5)*x4894))+(((-0.5)*x4873))+(((-1.0)*x4885*x4898))+(((-2.0)*x4875))+((x4883*x4898))+(((0.866025403784439)*x4880))+(((-1.5)*x4889))+(((1.5)*x4892))+(((-1.5)*x4887))+(((-1.5)*x4893))+(((-0.5)*x4876))+(((-1.5)*x4890))+(((-0.866025403784439)*x4882))+(((-2.0)*x4872))+(((-1.5)*x4874))+(((-1.0)*x4881*x4898))+(((-0.866025403784439)*x4886))+(((-1.5)*x4877))+(((-1.5)*x4888))+(((-1.5)*x4895))+((x4879*x4898))+(((0.866025403784439)*x4884))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x4899=(r02*sj0);
IkReal x4900=(cj0*r12);
IkReal x4901=(cj0*cj5*r10);
IkReal x4902=(cj0*r11*sj5);
IkReal x4903=(cj5*r00*sj0);
IkReal x4904=(r01*sj0*sj5);
j4eval[0]=(x4899+(((-1.73205080756888)*x4904))+(((1.73205080756888)*x4903))+(((-1.73205080756888)*x4901))+(((-1.0)*x4900))+(((1.73205080756888)*x4902)));
j4eval[1]=IKsign(((((0.866025403784439)*x4903))+(((-0.5)*x4900))+(((0.5)*x4899))+(((0.866025403784439)*x4902))+(((-0.866025403784439)*x4901))+(((-0.866025403784439)*x4904))));
j4eval[2]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x4905=r20*r20;
IkReal x4906=r21*r21;
IkReal x4907=r22*r22;
IkReal x4908=(cj5*r20*r22);
IkReal x4909=(r21*r22*sj5);
IkReal x4910=(cj5*r20*r21*sj5);
IkReal x4911=cj5*cj5;
IkReal x4912=(x4905*x4911);
IkReal x4913=(x4906*x4911);
j4eval[0]=((((-3.0)*x4913))+(((-6.0)*x4910))+(((-4.0)*x4905))+(((-3.0)*x4907))+(((-1.0)*x4906))+(((3.0)*x4912))+(((3.46410161513775)*x4908))+(((-3.46410161513775)*x4909)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((1.73205080756888)*x4908))+(((-3.0)*x4910))+(((-0.5)*x4906))+(((-1.73205080756888)*x4909))+(((-1.5)*x4913))+(((-2.0)*x4905))+(((1.5)*x4912))+(((-1.5)*x4907))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x4914=((1.73205080756888)*cj0);
IkReal x4915=((1.73205080756888)*sj0);
IkReal x4916=((((-1.0)*cj5*r10*x4914))+(((-1.0)*r01*sj5*x4915))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((cj5*r00*x4915))+((r11*sj5*x4914)));
j4eval[0]=x4916;
j4eval[1]=IKsign(x4916);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4917=((1.73205080756888)*cj0*cj5);
IkReal x4918=((1.73205080756888)*cj0*sj5);
IkReal x4919=((1.73205080756888)*cj5*sj0);
IkReal x4920=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x4921=IKPowWithIntegerCheck(IKsign((((r11*x4918))+(((-1.0)*r10*x4917))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*x4920))+((r00*x4919)))),-1);
if(!x4921.valid){
continue;
}
CheckValue<IkReal> x4922 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r01))*((cj0*sj5))))+(((-0.866025403784439)*cj5*r10*sj0))+(((0.866025403784439)*r11*sj0*sj5))+(((-0.866025403784439)*cj0*cj5*r00))+(((1.5)*cj0*r02))+(((1.5)*r12*sj0)))),IkReal(((((-1.0)*r00*x4918))+(((-1.0)*r01*x4917))+(((-1.0)*r10*x4920))+(((-1.0)*r11*x4919)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4921.value)))+(x4922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4923=IKsin(j4);
IkReal x4924=((0.866025403784439)*r22);
IkReal x4925=((0.5)*r20);
IkReal x4926=(cj5*x4923);
IkReal x4927=IKcos(j4);
IkReal x4928=((1.0)*cj5*x4927);
IkReal x4929=(r20*sj5);
IkReal x4930=((0.5)*r21*sj5);
IkReal x4931=((0.866025403784439)*cj0*r02);
IkReal x4932=((0.866025403784439)*r12*sj0);
IkReal x4933=(cj0*cj5*x4923);
IkReal x4934=(cj0*sj5*x4923);
IkReal x4935=(cj5*sj0*x4923);
IkReal x4936=(sj0*sj5*x4923);
IkReal x4937=((0.5)*r00);
IkReal x4938=(cj0*cj5*x4927);
IkReal x4939=((0.5)*r01);
IkReal x4940=(cj0*sj5*x4927);
IkReal x4941=((0.5)*r10);
IkReal x4942=(cj5*sj0*x4927);
IkReal x4943=((0.5)*r11);
IkReal x4944=(sj0*sj5*x4927);
IkReal x4945=((0.866025403784439)*cj0*r12);
IkReal x4946=((0.866025403784439)*r02*sj0);
IkReal x4947=(r00*sj0*sj5);
IkReal x4948=((1.0)*cj0*cj5*x4927);
IkReal x4949=((1.0)*cj0*sj5*x4927);
evalcond[0]=(((x4923*x4924))+(((-1.0)*x4927*x4929))+(((-1.0)*x4925*x4926))+((x4923*x4930))+(((-1.0)*r21*x4928)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x4925*x4927))+((x4924*x4927))+((r21*x4926))+((x4927*x4930))+((x4923*x4929)));
evalcond[2]=(((r10*x4936))+((x4943*x4944))+((r01*x4933))+((r11*x4935))+(((-1.0)*x4941*x4942))+(((-1.0)*x4937*x4938))+((x4927*x4931))+((r00*x4934))+((x4927*x4932))+((x4939*x4940)));
evalcond[3]=(((r01*x4942))+((x4927*x4947))+((x4935*x4937))+(((-1.0)*r10*x4949))+(((-1.0)*x4933*x4941))+((x4923*x4945))+(((-1.0)*x4936*x4939))+((x4934*x4943))+(((-1.0)*r11*x4948))+(((-1.0)*x4923*x4946)));
evalcond[4]=((0.5)+((r11*x4933))+(((-1.0)*x4923*x4947))+((r10*x4934))+(((-1.0)*r01*x4935))+((x4940*x4943))+(((-1.0)*x4939*x4944))+(((-1.0)*x4938*x4941))+((x4927*x4945))+(((-1.0)*x4927*x4946))+((x4937*x4942)));
evalcond[5]=((1.0)+((x4936*x4943))+(((-1.0)*r00*x4949))+(((-1.0)*r11*sj0*x4928))+(((-1.0)*r01*x4948))+(((-1.0)*r10*sj0*sj5*x4927))+((x4923*x4931))+(((-1.0)*x4933*x4937))+((x4923*x4932))+((x4934*x4939))+(((-1.0)*x4935*x4941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4950=((1.73205080756888)*r21);
IkReal x4951=(cj5*r20);
IkReal x4952=(r21*sj5);
IkReal x4953=r20*r20;
IkReal x4954=r21*r21;
IkReal x4955=((1.5)*(cj5*cj5));
CheckValue<IkReal> x4956=IKPowWithIntegerCheck(IKsign((((x4953*x4955))+(((1.73205080756888)*r22*x4951))+(((-0.5)*x4954))+(((-1.0)*x4954*x4955))+(((-1.0)*r22*sj5*x4950))+(((-3.0)*cj5*r20*x4952))+(((-2.0)*x4953))+(((-1.0)*(1.5)*(r22*r22))))),-1);
if(!x4956.valid){
continue;
}
CheckValue<IkReal> x4957 = IKatan2WithCheck(IkReal((((cj5*x4950))+(((1.73205080756888)*r20*sj5)))),IkReal(((((0.866025403784439)*x4952))+(((1.5)*r22))+(((-0.866025403784439)*x4951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4956.value)))+(x4957.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4958=IKsin(j4);
IkReal x4959=((0.866025403784439)*r22);
IkReal x4960=((0.5)*r20);
IkReal x4961=(cj5*x4958);
IkReal x4962=IKcos(j4);
IkReal x4963=((1.0)*cj5*x4962);
IkReal x4964=(r20*sj5);
IkReal x4965=((0.5)*r21*sj5);
IkReal x4966=((0.866025403784439)*cj0*r02);
IkReal x4967=((0.866025403784439)*r12*sj0);
IkReal x4968=(cj0*cj5*x4958);
IkReal x4969=(cj0*sj5*x4958);
IkReal x4970=(cj5*sj0*x4958);
IkReal x4971=(sj0*sj5*x4958);
IkReal x4972=((0.5)*r00);
IkReal x4973=(cj0*cj5*x4962);
IkReal x4974=((0.5)*r01);
IkReal x4975=(cj0*sj5*x4962);
IkReal x4976=((0.5)*r10);
IkReal x4977=(cj5*sj0*x4962);
IkReal x4978=((0.5)*r11);
IkReal x4979=(sj0*sj5*x4962);
IkReal x4980=((0.866025403784439)*cj0*r12);
IkReal x4981=((0.866025403784439)*r02*sj0);
IkReal x4982=(r00*sj0*sj5);
IkReal x4983=((1.0)*cj0*cj5*x4962);
IkReal x4984=((1.0)*cj0*sj5*x4962);
evalcond[0]=((((-1.0)*r21*x4963))+((x4958*x4965))+((x4958*x4959))+(((-1.0)*x4962*x4964))+(((-1.0)*x4960*x4961)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x4960*x4962))+((x4958*x4964))+((x4959*x4962))+((x4962*x4965))+((r21*x4961)));
evalcond[2]=(((x4962*x4967))+(((-1.0)*x4972*x4973))+((r01*x4968))+((x4978*x4979))+((x4974*x4975))+((r11*x4970))+((r00*x4969))+(((-1.0)*x4976*x4977))+((r10*x4971))+((x4962*x4966)));
evalcond[3]=((((-1.0)*x4971*x4974))+(((-1.0)*x4968*x4976))+(((-1.0)*x4958*x4981))+((x4958*x4980))+((r01*x4977))+((x4969*x4978))+((x4962*x4982))+(((-1.0)*r11*x4983))+((x4970*x4972))+(((-1.0)*r10*x4984)));
evalcond[4]=((0.5)+((r11*x4968))+((x4975*x4978))+(((-1.0)*x4962*x4981))+(((-1.0)*x4974*x4979))+((r10*x4969))+(((-1.0)*r01*x4970))+(((-1.0)*x4958*x4982))+((x4972*x4977))+(((-1.0)*x4973*x4976))+((x4962*x4980)));
evalcond[5]=((1.0)+((x4958*x4967))+((x4969*x4974))+((x4971*x4978))+(((-1.0)*r11*sj0*x4963))+(((-1.0)*r01*x4983))+(((-1.0)*r10*sj0*sj5*x4962))+(((-1.0)*r00*x4984))+(((-1.0)*x4968*x4972))+(((-1.0)*x4970*x4976))+((x4958*x4966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4985=((0.866025403784439)*cj0);
IkReal x4986=((0.866025403784439)*sj0);
CheckValue<IkReal> x4987=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x4985))+(((-1.0)*(0.5)*cj0*r12))+((cj5*r00*x4986))+(((0.5)*r02*sj0))+((r11*sj5*x4985))+(((-1.0)*r01*sj5*x4986)))),-1);
if(!x4987.valid){
continue;
}
CheckValue<IkReal> x4988 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4987.value)))+(x4988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4989=IKsin(j4);
IkReal x4990=((0.866025403784439)*r22);
IkReal x4991=((0.5)*r20);
IkReal x4992=(cj5*x4989);
IkReal x4993=IKcos(j4);
IkReal x4994=((1.0)*cj5*x4993);
IkReal x4995=(r20*sj5);
IkReal x4996=((0.5)*r21*sj5);
IkReal x4997=((0.866025403784439)*cj0*r02);
IkReal x4998=((0.866025403784439)*r12*sj0);
IkReal x4999=(cj0*cj5*x4989);
IkReal x5000=(cj0*sj5*x4989);
IkReal x5001=(cj5*sj0*x4989);
IkReal x5002=(sj0*sj5*x4989);
IkReal x5003=((0.5)*r00);
IkReal x5004=(cj0*cj5*x4993);
IkReal x5005=((0.5)*r01);
IkReal x5006=(cj0*sj5*x4993);
IkReal x5007=((0.5)*r10);
IkReal x5008=(cj5*sj0*x4993);
IkReal x5009=((0.5)*r11);
IkReal x5010=(sj0*sj5*x4993);
IkReal x5011=((0.866025403784439)*cj0*r12);
IkReal x5012=((0.866025403784439)*r02*sj0);
IkReal x5013=(r00*sj0*sj5);
IkReal x5014=((1.0)*cj0*cj5*x4993);
IkReal x5015=((1.0)*cj0*sj5*x4993);
evalcond[0]=(((x4989*x4990))+(((-1.0)*x4991*x4992))+((x4989*x4996))+(((-1.0)*r21*x4994))+(((-1.0)*x4993*x4995)));
evalcond[1]=((0.866025403784439)+((x4990*x4993))+((x4993*x4996))+(((-1.0)*cj5*x4991*x4993))+((r21*x4992))+((x4989*x4995)));
evalcond[2]=(((r11*x5001))+((x4993*x4997))+((x5009*x5010))+((r10*x5002))+(((-1.0)*x5003*x5004))+((r00*x5000))+((r01*x4999))+((x5005*x5006))+((x4993*x4998))+(((-1.0)*x5007*x5008)));
evalcond[3]=(((x4989*x5011))+((r01*x5008))+(((-1.0)*r11*x5014))+((x5000*x5009))+(((-1.0)*x4999*x5007))+(((-1.0)*x5002*x5005))+((x5001*x5003))+((x4993*x5013))+(((-1.0)*r10*x5015))+(((-1.0)*x4989*x5012)));
evalcond[4]=((0.5)+((x4993*x5011))+((r10*x5000))+(((-1.0)*x5005*x5010))+((x5006*x5009))+(((-1.0)*r01*x5001))+(((-1.0)*x4989*x5013))+(((-1.0)*x5004*x5007))+(((-1.0)*x4993*x5012))+((r11*x4999))+((x5003*x5008)));
evalcond[5]=((1.0)+(((-1.0)*x4999*x5003))+(((-1.0)*x5001*x5007))+(((-1.0)*r01*x5014))+(((-1.0)*r11*sj0*x4994))+((x5002*x5009))+(((-1.0)*r10*sj0*sj5*x4993))+((x4989*x4997))+((x4989*x4998))+((x5000*x5005))+(((-1.0)*r00*x5015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5016=(r02*sj0);
IkReal x5017=(cj0*r12);
IkReal x5018=(cj0*cj5*r10);
IkReal x5019=(cj0*r11*sj5);
IkReal x5020=(cj5*r00*sj0);
IkReal x5021=(r01*sj0*sj5);
j4eval[0]=((((-1.73205080756888)*x5018))+(((1.73205080756888)*x5019))+(((-1.0)*x5017))+x5016+(((-1.73205080756888)*x5021))+(((1.73205080756888)*x5020)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((-0.5)*x5017))+(((0.5)*x5016))+(((-0.866025403784439)*x5021))+(((0.866025403784439)*x5020))+(((-0.866025403784439)*x5018))+(((0.866025403784439)*x5019))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5022=r20*r20;
IkReal x5023=r21*r21;
IkReal x5024=r22*r22;
IkReal x5025=(cj5*r20*r22);
IkReal x5026=(r21*r22*sj5);
IkReal x5027=(cj5*r20*r21*sj5);
IkReal x5028=cj5*cj5;
IkReal x5029=(x5022*x5028);
IkReal x5030=(x5023*x5028);
j4eval[0]=((((-3.46410161513775)*x5026))+(((-6.0)*x5027))+(((-3.0)*x5024))+(((-4.0)*x5022))+(((3.0)*x5029))+(((-3.0)*x5030))+(((3.46410161513775)*x5025))+(((-1.0)*x5023)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-0.866025403784439)*cj5*r20))+(((0.866025403784439)*r21*sj5))+(((1.5)*r22))))))));
j4eval[2]=IKsign(((((-1.5)*x5030))+(((1.5)*x5029))+(((-2.0)*x5022))+(((-1.73205080756888)*x5026))+(((-1.5)*x5024))+(((1.73205080756888)*x5025))+(((-0.5)*x5023))+(((-3.0)*x5027))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5031=((1.73205080756888)*cj0);
IkReal x5032=((1.73205080756888)*sj0);
IkReal x5033=(((r11*sj5*x5031))+(((-1.0)*r01*sj5*x5032))+((cj5*r00*x5032))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*cj5*r10*x5031)));
j4eval[0]=x5033;
j4eval[1]=IKsign(x5033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5034=((1.73205080756888)*cj0*cj5);
IkReal x5035=((1.73205080756888)*cj0*sj5);
IkReal x5036=((1.73205080756888)*cj5*sj0);
IkReal x5037=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x5038=IKPowWithIntegerCheck(IKsign((((r00*x5036))+(((-1.0)*r01*x5037))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r10*x5034))+((r11*x5035)))),-1);
if(!x5038.valid){
continue;
}
CheckValue<IkReal> x5039 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r01))*((cj0*sj5))))+(((-0.866025403784439)*cj5*r10*sj0))+(((0.866025403784439)*r11*sj0*sj5))+(((-0.866025403784439)*cj0*cj5*r00))+(((1.5)*cj0*r02))+(((1.5)*r12*sj0)))),IkReal(((((-1.0)*r01*x5034))+(((-1.0)*r00*x5035))+(((-1.0)*r10*x5037))+(((-1.0)*r11*x5036)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5038.value)))+(x5039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5040=IKsin(j4);
IkReal x5041=((0.866025403784439)*r22);
IkReal x5042=((0.5)*r20);
IkReal x5043=(cj5*x5040);
IkReal x5044=IKcos(j4);
IkReal x5045=((1.0)*cj5*x5044);
IkReal x5046=(r20*sj5);
IkReal x5047=((0.5)*r21*sj5);
IkReal x5048=((0.866025403784439)*cj0*r02);
IkReal x5049=((0.866025403784439)*r12*sj0);
IkReal x5050=(cj0*cj5*x5040);
IkReal x5051=(cj0*sj5*x5040);
IkReal x5052=(cj5*sj0*x5040);
IkReal x5053=(sj0*sj5*x5040);
IkReal x5054=((0.5)*r00);
IkReal x5055=(cj0*cj5*x5044);
IkReal x5056=((0.5)*r01);
IkReal x5057=(cj0*sj5*x5044);
IkReal x5058=((0.5)*r10);
IkReal x5059=(cj5*sj0*x5044);
IkReal x5060=((0.5)*r11);
IkReal x5061=(sj0*sj5*x5044);
IkReal x5062=((0.866025403784439)*cj0*r12);
IkReal x5063=((0.866025403784439)*r02*sj0);
IkReal x5064=(r00*sj0*sj5);
IkReal x5065=((1.0)*cj0*cj5*x5044);
IkReal x5066=((1.0)*cj0*sj5*x5044);
evalcond[0]=(((x5040*x5041))+(((-1.0)*x5044*x5046))+(((-1.0)*x5042*x5043))+((x5040*x5047))+(((-1.0)*r21*x5045)));
evalcond[1]=((0.866025403784439)+((x5040*x5046))+((x5044*x5047))+((x5041*x5044))+(((-1.0)*cj5*x5042*x5044))+((r21*x5043)));
evalcond[2]=(((x5044*x5048))+((r01*x5050))+((x5044*x5049))+((r11*x5052))+((x5056*x5057))+((r10*x5053))+((x5060*x5061))+(((-1.0)*x5054*x5055))+(((-1.0)*x5058*x5059))+((r00*x5051)));
evalcond[3]=(((x5040*x5062))+(((-1.0)*x5050*x5058))+(((-1.0)*r11*x5065))+((x5052*x5054))+((x5044*x5064))+((r01*x5059))+(((-1.0)*x5040*x5063))+(((-1.0)*x5053*x5056))+((x5051*x5060))+(((-1.0)*r10*x5066)));
evalcond[4]=((-0.5)+((r10*x5051))+(((-1.0)*r01*x5052))+((x5044*x5062))+(((-1.0)*x5056*x5061))+((r11*x5050))+(((-1.0)*x5040*x5064))+(((-1.0)*x5044*x5063))+((x5057*x5060))+((x5054*x5059))+(((-1.0)*x5055*x5058)));
evalcond[5]=((-1.0)+(((-1.0)*r10*sj0*sj5*x5044))+(((-1.0)*r00*x5066))+(((-1.0)*x5052*x5058))+(((-1.0)*r01*x5065))+(((-1.0)*x5050*x5054))+((x5040*x5048))+((x5053*x5060))+((x5051*x5056))+(((-1.0)*r11*sj0*x5045))+((x5040*x5049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5067=((1.73205080756888)*r21);
IkReal x5068=(cj5*r20);
IkReal x5069=(r21*sj5);
IkReal x5070=r20*r20;
IkReal x5071=r21*r21;
IkReal x5072=((1.5)*(cj5*cj5));
CheckValue<IkReal> x5073=IKPowWithIntegerCheck(IKsign(((((-0.5)*x5071))+(((-1.0)*r22*sj5*x5067))+(((-2.0)*x5070))+(((-1.0)*x5071*x5072))+((x5070*x5072))+(((-3.0)*cj5*r20*x5069))+(((-1.0)*(1.5)*(r22*r22)))+(((1.73205080756888)*r22*x5068)))),-1);
if(!x5073.valid){
continue;
}
CheckValue<IkReal> x5074 = IKatan2WithCheck(IkReal((((cj5*x5067))+(((1.73205080756888)*r20*sj5)))),IkReal(((((0.866025403784439)*x5069))+(((-0.866025403784439)*x5068))+(((1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5073.value)))+(x5074.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5075=IKsin(j4);
IkReal x5076=((0.866025403784439)*r22);
IkReal x5077=((0.5)*r20);
IkReal x5078=(cj5*x5075);
IkReal x5079=IKcos(j4);
IkReal x5080=((1.0)*cj5*x5079);
IkReal x5081=(r20*sj5);
IkReal x5082=((0.5)*r21*sj5);
IkReal x5083=((0.866025403784439)*cj0*r02);
IkReal x5084=((0.866025403784439)*r12*sj0);
IkReal x5085=(cj0*cj5*x5075);
IkReal x5086=(cj0*sj5*x5075);
IkReal x5087=(cj5*sj0*x5075);
IkReal x5088=(sj0*sj5*x5075);
IkReal x5089=((0.5)*r00);
IkReal x5090=(cj0*cj5*x5079);
IkReal x5091=((0.5)*r01);
IkReal x5092=(cj0*sj5*x5079);
IkReal x5093=((0.5)*r10);
IkReal x5094=(cj5*sj0*x5079);
IkReal x5095=((0.5)*r11);
IkReal x5096=(sj0*sj5*x5079);
IkReal x5097=((0.866025403784439)*cj0*r12);
IkReal x5098=((0.866025403784439)*r02*sj0);
IkReal x5099=(r00*sj0*sj5);
IkReal x5100=((1.0)*cj0*cj5*x5079);
IkReal x5101=((1.0)*cj0*sj5*x5079);
evalcond[0]=(((x5075*x5076))+(((-1.0)*r21*x5080))+(((-1.0)*x5079*x5081))+((x5075*x5082))+(((-1.0)*x5077*x5078)));
evalcond[1]=((0.866025403784439)+(((-1.0)*cj5*x5077*x5079))+((x5076*x5079))+((r21*x5078))+((x5075*x5081))+((x5079*x5082)));
evalcond[2]=(((x5079*x5083))+((r11*x5087))+((r10*x5088))+((x5095*x5096))+(((-1.0)*x5089*x5090))+((x5079*x5084))+((r01*x5085))+((x5091*x5092))+((r00*x5086))+(((-1.0)*x5093*x5094)));
evalcond[3]=((((-1.0)*r11*x5100))+((x5087*x5089))+(((-1.0)*r10*x5101))+((x5075*x5097))+((x5086*x5095))+(((-1.0)*x5075*x5098))+(((-1.0)*x5085*x5093))+((r01*x5094))+((x5079*x5099))+(((-1.0)*x5088*x5091)));
evalcond[4]=((-0.5)+(((-1.0)*x5091*x5096))+(((-1.0)*x5075*x5099))+((x5092*x5095))+((x5079*x5097))+(((-1.0)*x5079*x5098))+(((-1.0)*r01*x5087))+((r10*x5086))+(((-1.0)*x5090*x5093))+((r11*x5085))+((x5089*x5094)));
evalcond[5]=((-1.0)+((x5075*x5084))+((x5075*x5083))+((x5088*x5095))+(((-1.0)*x5085*x5089))+(((-1.0)*r01*x5100))+((x5086*x5091))+(((-1.0)*r10*sj0*sj5*x5079))+(((-1.0)*x5087*x5093))+(((-1.0)*r11*sj0*x5080))+(((-1.0)*r00*x5101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5102=((0.866025403784439)*cj0);
IkReal x5103=((0.866025403784439)*sj0);
CheckValue<IkReal> x5104=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5102))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0))+(((-1.0)*cj5*r10*x5102))+(((-1.0)*r01*sj5*x5103))+((cj5*r00*x5103)))),-1);
if(!x5104.valid){
continue;
}
CheckValue<IkReal> x5105 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5104.value)))+(x5105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5106=IKsin(j4);
IkReal x5107=((0.866025403784439)*r22);
IkReal x5108=((0.5)*r20);
IkReal x5109=(cj5*x5106);
IkReal x5110=IKcos(j4);
IkReal x5111=((1.0)*cj5*x5110);
IkReal x5112=(r20*sj5);
IkReal x5113=((0.5)*r21*sj5);
IkReal x5114=((0.866025403784439)*cj0*r02);
IkReal x5115=((0.866025403784439)*r12*sj0);
IkReal x5116=(cj0*cj5*x5106);
IkReal x5117=(cj0*sj5*x5106);
IkReal x5118=(cj5*sj0*x5106);
IkReal x5119=(sj0*sj5*x5106);
IkReal x5120=((0.5)*r00);
IkReal x5121=(cj0*cj5*x5110);
IkReal x5122=((0.5)*r01);
IkReal x5123=(cj0*sj5*x5110);
IkReal x5124=((0.5)*r10);
IkReal x5125=(cj5*sj0*x5110);
IkReal x5126=((0.5)*r11);
IkReal x5127=(sj0*sj5*x5110);
IkReal x5128=((0.866025403784439)*cj0*r12);
IkReal x5129=((0.866025403784439)*r02*sj0);
IkReal x5130=(r00*sj0*sj5);
IkReal x5131=((1.0)*cj0*cj5*x5110);
IkReal x5132=((1.0)*cj0*sj5*x5110);
evalcond[0]=((((-1.0)*r21*x5111))+((x5106*x5107))+((x5106*x5113))+(((-1.0)*x5108*x5109))+(((-1.0)*x5110*x5112)));
evalcond[1]=((0.866025403784439)+((x5107*x5110))+((x5110*x5113))+((r21*x5109))+((x5106*x5112))+(((-1.0)*cj5*x5108*x5110)));
evalcond[2]=(((x5110*x5114))+((r01*x5116))+(((-1.0)*x5124*x5125))+((r10*x5119))+((r11*x5118))+((x5126*x5127))+(((-1.0)*x5120*x5121))+((x5122*x5123))+((x5110*x5115))+((r00*x5117)));
evalcond[3]=((((-1.0)*r10*x5132))+((x5110*x5130))+(((-1.0)*x5119*x5122))+(((-1.0)*x5106*x5129))+(((-1.0)*x5116*x5124))+((x5117*x5126))+((x5118*x5120))+((r01*x5125))+(((-1.0)*r11*x5131))+((x5106*x5128)));
evalcond[4]=((-0.5)+((r10*x5117))+((x5123*x5126))+(((-1.0)*x5121*x5124))+(((-1.0)*x5106*x5130))+((x5120*x5125))+(((-1.0)*r01*x5118))+((r11*x5116))+((x5110*x5128))+(((-1.0)*x5110*x5129))+(((-1.0)*x5122*x5127)));
evalcond[5]=((-1.0)+(((-1.0)*x5116*x5120))+((x5106*x5115))+((x5106*x5114))+(((-1.0)*r01*x5131))+((x5119*x5126))+(((-1.0)*x5118*x5124))+(((-1.0)*r10*sj0*sj5*x5110))+(((-1.0)*r00*x5132))+(((-1.0)*r11*sj0*x5111))+((x5117*x5122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5133=(cj5*sj3);
IkReal x5134=(sj3*sj5);
IkReal x5135=((0.5)*r21);
IkReal x5136=((2.0)*r20);
IkReal x5137=(cj0*r00);
IkReal x5138=(cj0*r01);
IkReal x5139=((1.5)*r22);
IkReal x5140=(r10*sj0);
IkReal x5141=(r11*sj0);
IkReal x5142=((0.866025403784439)*cj5*r22);
IkReal x5143=(cj5*r20);
IkReal x5144=((0.866025403784439)*cj0*r02);
IkReal x5145=((0.866025403784439)*r22*sj5);
IkReal x5146=(r21*sj5);
IkReal x5147=((0.866025403784439)*r12*sj0);
IkReal x5148=((1.5)*cj5*r21*sj5);
IkReal x5149=((1.5)*cj5*r20*sj5);
IkReal x5150=cj5*cj5;
IkReal x5151=((1.5)*r20*x5150);
IkReal x5152=((1.5)*r21*x5150);
CheckValue<IkReal> x5153 = IKatan2WithCheck(IkReal((((r20*x5134))+((r21*x5133)))),IkReal((((sj3*(((0.866025403784439)*r22))))+(((-0.5)*r20*x5133))+((x5134*x5135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5153.valid){
continue;
}
CheckValue<IkReal> x5154=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*sj0*x5139))+((x5137*x5151))+(((-1.0)*x5144*x5146))+(((-1.0)*x5141*x5149))+(((-1.0)*x5136*x5140))+((x5143*x5144))+(((-1.0)*x5141*x5145))+(((-1.0)*x5138*x5149))+(((-1.0)*x5137*x5148))+((x5137*x5142))+(((-1.0)*x5136*x5137))+(((-1.0)*x5140*x5148))+((x5143*x5147))+(((-1.0)*x5135*x5141))+(((-1.0)*cj0*r02*x5139))+(((-1.0)*x5138*x5145))+((x5140*x5142))+(((-1.0)*x5135*x5138))+(((-1.0)*x5146*x5147))+(((-1.0)*x5141*x5152))+((x5140*x5151))+(((-1.0)*x5138*x5152)))),-1);
if(!x5154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5153.value)+(((1.5707963267949)*(x5154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5155=IKsin(j4);
IkReal x5156=((0.866025403784439)*r22);
IkReal x5157=((0.5)*r20);
IkReal x5158=(cj5*x5155);
IkReal x5159=IKcos(j4);
IkReal x5160=((1.0)*cj5*x5159);
IkReal x5161=(r20*sj5);
IkReal x5162=((0.5)*r21*sj5);
IkReal x5163=((0.866025403784439)*cj0*r02);
IkReal x5164=((0.866025403784439)*r12*sj0);
IkReal x5165=(cj0*cj5*x5155);
IkReal x5166=(cj0*sj5*x5155);
IkReal x5167=(cj5*sj0*x5155);
IkReal x5168=(sj0*sj5*x5155);
IkReal x5169=((0.5)*r00);
IkReal x5170=(cj0*cj5*x5159);
IkReal x5171=((0.5)*r01);
IkReal x5172=(cj0*sj5*x5159);
IkReal x5173=((0.5)*r10);
IkReal x5174=(cj5*sj0*x5159);
IkReal x5175=((0.5)*r11);
IkReal x5176=(sj0*sj5*x5159);
IkReal x5177=((0.866025403784439)*cj0*r12);
IkReal x5178=((0.866025403784439)*r02*sj0);
IkReal x5179=(r00*sj0*sj5);
IkReal x5180=((1.0)*cj0*cj5*x5159);
IkReal x5181=((1.0)*cj0*sj5*x5159);
evalcond[0]=(((x5155*x5162))+((x5155*x5156))+(((-1.0)*x5159*x5161))+(((-1.0)*r21*x5160))+(((-1.0)*x5157*x5158)));
evalcond[1]=((0.866025403784439)+((x5155*x5161))+((r21*x5158))+((x5159*x5162))+((x5156*x5159))+(((-1.0)*cj5*x5157*x5159)));
evalcond[2]=((((-1.0)*x5169*x5170))+((x5171*x5172))+((x5159*x5163))+(((0.5)*sj3))+((r00*x5166))+((r01*x5165))+((r10*x5168))+((x5175*x5176))+((r11*x5167))+((x5159*x5164))+(((-1.0)*x5173*x5174)));
evalcond[3]=((((-1.0)*x5170*x5173))+((r10*x5166))+((x5172*x5175))+(((-1.0)*x5171*x5176))+(((-1.0)*x5155*x5179))+((x5169*x5174))+((r11*x5165))+((x5159*x5177))+(((-1.0)*r01*x5167))+(((0.5)*cj3))+(((-1.0)*x5159*x5178)));
evalcond[4]=((((-1.0)*r10*x5181))+((r01*x5174))+((x5166*x5175))+(((-1.0)*x5165*x5173))+(((-1.0)*x5155*x5178))+((x5155*x5177))+((x5167*x5169))+((x5159*x5179))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x5168*x5171))+(((-1.0)*r11*x5180)));
evalcond[5]=((((-1.0)*r01*x5180))+((x5155*x5163))+(((-1.0)*r11*sj0*x5160))+(((-1.0)*r10*sj0*sj5*x5159))+cj3+((x5168*x5175))+((x5166*x5171))+(((-1.0)*x5167*x5173))+(((-1.0)*x5165*x5169))+((x5155*x5164))+(((-1.0)*r00*x5181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5182=((1.73205080756888)*r21);
IkReal x5183=(cj5*r20);
IkReal x5184=(r21*sj5);
IkReal x5185=r20*r20;
IkReal x5186=r21*r21;
IkReal x5187=((1.5)*(cj5*cj5));
CheckValue<IkReal> x5188 = IKatan2WithCheck(IkReal((((cj5*x5182))+(((1.73205080756888)*r20*sj5)))),IkReal(((((0.866025403784439)*x5184))+(((-0.866025403784439)*x5183))+(((1.5)*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5188.valid){
continue;
}
CheckValue<IkReal> x5189=IKPowWithIntegerCheck(IKsign((((x5185*x5187))+(((-1.0)*x5186*x5187))+(((-1.0)*r22*sj5*x5182))+(((1.73205080756888)*r22*x5183))+(((-0.5)*x5186))+(((-2.0)*x5185))+(((-1.0)*(1.5)*(r22*r22)))+(((-3.0)*cj5*r20*x5184)))),-1);
if(!x5189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5188.value)+(((1.5707963267949)*(x5189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5190=IKsin(j4);
IkReal x5191=((0.866025403784439)*r22);
IkReal x5192=((0.5)*r20);
IkReal x5193=(cj5*x5190);
IkReal x5194=IKcos(j4);
IkReal x5195=((1.0)*cj5*x5194);
IkReal x5196=(r20*sj5);
IkReal x5197=((0.5)*r21*sj5);
IkReal x5198=((0.866025403784439)*cj0*r02);
IkReal x5199=((0.866025403784439)*r12*sj0);
IkReal x5200=(cj0*cj5*x5190);
IkReal x5201=(cj0*sj5*x5190);
IkReal x5202=(cj5*sj0*x5190);
IkReal x5203=(sj0*sj5*x5190);
IkReal x5204=((0.5)*r00);
IkReal x5205=(cj0*cj5*x5194);
IkReal x5206=((0.5)*r01);
IkReal x5207=(cj0*sj5*x5194);
IkReal x5208=((0.5)*r10);
IkReal x5209=(cj5*sj0*x5194);
IkReal x5210=((0.5)*r11);
IkReal x5211=(sj0*sj5*x5194);
IkReal x5212=((0.866025403784439)*cj0*r12);
IkReal x5213=((0.866025403784439)*r02*sj0);
IkReal x5214=(r00*sj0*sj5);
IkReal x5215=((1.0)*cj0*cj5*x5194);
IkReal x5216=((1.0)*cj0*sj5*x5194);
evalcond[0]=(((x5190*x5191))+((x5190*x5197))+(((-1.0)*r21*x5195))+(((-1.0)*x5192*x5193))+(((-1.0)*x5194*x5196)));
evalcond[1]=((0.866025403784439)+((x5191*x5194))+((r21*x5193))+(((-1.0)*cj5*x5192*x5194))+((x5190*x5196))+((x5194*x5197)));
evalcond[2]=(((r00*x5201))+((x5194*x5198))+((x5194*x5199))+(((0.5)*sj3))+((r10*x5203))+((r01*x5200))+(((-1.0)*x5204*x5205))+((x5210*x5211))+((r11*x5202))+((x5206*x5207))+(((-1.0)*x5208*x5209)));
evalcond[3]=((((-1.0)*x5205*x5208))+((x5204*x5209))+((x5194*x5212))+(((-1.0)*r01*x5202))+(((-1.0)*x5206*x5211))+(((-1.0)*x5194*x5213))+((r11*x5200))+(((-1.0)*x5190*x5214))+((x5207*x5210))+(((0.5)*cj3))+((r10*x5201)));
evalcond[4]=(((r01*x5209))+(((-1.0)*x5190*x5213))+(((-1.0)*r11*x5215))+((x5190*x5212))+(((-1.0)*x5203*x5206))+((x5202*x5204))+((x5194*x5214))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x5200*x5208))+(((-1.0)*r10*x5216))+((x5201*x5210)));
evalcond[5]=(((x5190*x5199))+(((-1.0)*r10*sj0*sj5*x5194))+(((-1.0)*x5200*x5204))+cj3+(((-1.0)*x5202*x5208))+(((-1.0)*r11*sj0*x5195))+((x5190*x5198))+((x5203*x5210))+(((-1.0)*r00*x5216))+((x5201*x5206))+(((-1.0)*r01*x5215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5217=(cj5*sj3);
IkReal x5218=(sj3*sj5);
IkReal x5219=((0.866025403784439)*cj0);
IkReal x5220=((0.866025403784439)*sj0);
CheckValue<IkReal> x5221 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5217))+(((-1.0)*r20*x5218)))),IkReal(((((0.5)*r20*x5217))+(((-1.0)*(0.866025403784439)*r22*sj3))+(((-0.5)*r21*x5218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5221.valid){
continue;
}
CheckValue<IkReal> x5222=IKPowWithIntegerCheck(IKsign((((cj5*r00*x5219))+(((-1.0)*r11*sj5*x5220))+(((-1.0)*r01*sj5*x5219))+(((0.5)*r12*sj0))+((cj5*r10*x5220))+(((0.5)*cj0*r02)))),-1);
if(!x5222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5221.value)+(((1.5707963267949)*(x5222.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5223=IKsin(j4);
IkReal x5224=((0.866025403784439)*r22);
IkReal x5225=((0.5)*r20);
IkReal x5226=(cj5*x5223);
IkReal x5227=IKcos(j4);
IkReal x5228=((1.0)*cj5*x5227);
IkReal x5229=(r20*sj5);
IkReal x5230=((0.5)*r21*sj5);
IkReal x5231=((0.866025403784439)*cj0*r02);
IkReal x5232=((0.866025403784439)*r12*sj0);
IkReal x5233=(cj0*cj5*x5223);
IkReal x5234=(cj0*sj5*x5223);
IkReal x5235=(cj5*sj0*x5223);
IkReal x5236=(sj0*sj5*x5223);
IkReal x5237=((0.5)*r00);
IkReal x5238=(cj0*cj5*x5227);
IkReal x5239=((0.5)*r01);
IkReal x5240=(cj0*sj5*x5227);
IkReal x5241=((0.5)*r10);
IkReal x5242=(cj5*sj0*x5227);
IkReal x5243=((0.5)*r11);
IkReal x5244=(sj0*sj5*x5227);
IkReal x5245=((0.866025403784439)*cj0*r12);
IkReal x5246=((0.866025403784439)*r02*sj0);
IkReal x5247=(r00*sj0*sj5);
IkReal x5248=((1.0)*cj0*cj5*x5227);
IkReal x5249=((1.0)*cj0*sj5*x5227);
evalcond[0]=(((x5223*x5230))+(((-1.0)*r21*x5228))+(((-1.0)*x5225*x5226))+(((-1.0)*x5227*x5229))+((x5223*x5224)));
evalcond[1]=((0.866025403784439)+((x5223*x5229))+((x5224*x5227))+((x5227*x5230))+((r21*x5226))+(((-1.0)*cj5*x5225*x5227)));
evalcond[2]=((((-1.0)*x5237*x5238))+(((0.5)*sj3))+((x5243*x5244))+((r01*x5233))+((r10*x5236))+((r00*x5234))+((x5227*x5232))+((x5227*x5231))+((x5239*x5240))+((r11*x5235))+(((-1.0)*x5241*x5242)));
evalcond[3]=((((-1.0)*x5238*x5241))+((x5237*x5242))+((r10*x5234))+(((-1.0)*x5239*x5244))+((r11*x5233))+(((-1.0)*r01*x5235))+((x5227*x5245))+(((0.5)*cj3))+((x5240*x5243))+(((-1.0)*x5223*x5247))+(((-1.0)*x5227*x5246)));
evalcond[4]=((((-1.0)*r11*x5248))+((x5227*x5247))+(((-1.0)*x5236*x5239))+((x5235*x5237))+(((-1.0)*x5233*x5241))+((x5234*x5243))+((r01*x5242))+(((-1.0)*x5223*x5246))+(((-1.0)*(1.0)*sj3))+((x5223*x5245))+(((-1.0)*r10*x5249)));
evalcond[5]=((((-1.0)*r01*x5248))+((x5234*x5239))+(((-1.0)*r10*sj0*sj5*x5227))+((x5223*x5232))+(((-1.0)*x5233*x5237))+(((-1.0)*r11*sj0*x5228))+(((-1.0)*x5235*x5241))+(((-1.0)*r00*x5249))+cj3+((x5236*x5243))+((x5223*x5231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5250=((0.577350269189626)*cj0);
IkReal x5251=((0.577350269189626)*sj0);
IkReal x5252=(r01*sj5);
IkReal x5253=(r11*sj5);
IkReal x5254=((1.0)*r00);
IkReal x5255=(cj0*cj5);
IkReal x5256=(cj5*sj0);
if( IKabs((((sj0*x5253))+(((-1.0)*r10*x5256))+((cj0*x5252))+(((-1.0)*x5254*x5255))+(((-1.0)*r02*x5250))+(((-1.0)*r12*x5251)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x5253))+((r10*x5255))+((sj0*x5252))+(((-1.0)*x5254*x5256))+(((-1.0)*r02*x5251))+((r12*x5250)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj0*x5253))+(((-1.0)*r10*x5256))+((cj0*x5252))+(((-1.0)*x5254*x5255))+(((-1.0)*r02*x5250))+(((-1.0)*r12*x5251))))+IKsqr(((((-1.0)*cj0*x5253))+((r10*x5255))+((sj0*x5252))+(((-1.0)*x5254*x5256))+(((-1.0)*r02*x5251))+((r12*x5250))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj0*x5253))+(((-1.0)*r10*x5256))+((cj0*x5252))+(((-1.0)*x5254*x5255))+(((-1.0)*r02*x5250))+(((-1.0)*r12*x5251))), ((((-1.0)*cj0*x5253))+((r10*x5255))+((sj0*x5252))+(((-1.0)*x5254*x5256))+(((-1.0)*r02*x5251))+((r12*x5250))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x5257=((0.5)*cj0);
IkReal x5258=((0.5)*sj0);
IkReal x5259=((0.866025403784439)*cj0*cj5);
IkReal x5260=((0.866025403784439)*cj0*sj5);
IkReal x5261=((0.866025403784439)*cj5*sj0);
IkReal x5262=((0.866025403784439)*sj0*sj5);
evalcond[0]=(((r11*x5260))+((r02*x5258))+(((-1.0)*r01*x5262))+((r00*x5261))+(((-1.0)*r10*x5259))+(((-1.0)*r12*x5257))+(((0.866025403784439)*(IKcos(j3)))));
evalcond[1]=(((r11*x5262))+(((-1.0)*r12*x5258))+(((-1.0)*r10*x5261))+((r01*x5260))+(((-1.0)*(0.866025403784439)*(IKsin(j3))))+(((-1.0)*r00*x5259))+(((-1.0)*r02*x5257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5263=(cj0*r02);
IkReal x5264=(r12*sj0);
IkReal x5265=(cj0*cj5*r00);
IkReal x5266=(cj0*r01*sj5);
IkReal x5267=(cj5*r10*sj0);
IkReal x5268=(r11*sj0*sj5);
IkReal x5269=(cj5*sj3);
IkReal x5270=(sj3*sj5);
j4eval[0]=((((1.73205080756888)*x5265))+(((-1.73205080756888)*x5268))+x5263+x5264+(((1.73205080756888)*x5267))+(((-1.73205080756888)*x5266)));
j4eval[1]=((IKabs((((r21*x5269))+((r20*x5270)))))+(((0.5)*(IKabs(((((-1.0)*r21*x5270))+((r20*x5269))+(((-1.0)*(1.73205080756888)*r22*sj3))))))));
j4eval[2]=IKsign(((((0.5)*x5263))+(((0.866025403784439)*x5267))+(((-0.866025403784439)*x5266))+(((-0.866025403784439)*x5268))+(((0.5)*x5264))+(((0.866025403784439)*x5265))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5271=r20*r20;
IkReal x5272=r21*r21;
IkReal x5273=r22*r22;
IkReal x5274=(cj5*r20*r22);
IkReal x5275=(r21*r22*sj5);
IkReal x5276=(cj5*r20*r21*sj5);
IkReal x5277=cj5*cj5;
IkReal x5278=(x5271*x5277);
IkReal x5279=(x5272*x5277);
j4eval[0]=((((3.0)*x5278))+(((-1.0)*x5272))+(((-3.0)*x5273))+(((3.46410161513775)*x5274))+(((-3.46410161513775)*x5275))+(((-3.0)*x5279))+(((-4.0)*x5271))+(((-6.0)*x5276)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-0.5)*x5272))+(((-1.73205080756888)*x5275))+(((-2.0)*x5271))+(((1.5)*x5278))+(((-1.5)*x5273))+(((1.73205080756888)*x5274))+(((-1.5)*x5279))+(((-3.0)*x5276))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5280=(r01*r21*sj0);
IkReal x5281=(cj0*r10*r20);
IkReal x5282=(cj0*r11*r21);
IkReal x5283=(cj0*r12*r22);
IkReal x5284=(r00*r20*sj0);
IkReal x5285=(r02*r22*sj0);
IkReal x5286=((1.73205080756888)*r22);
IkReal x5287=(cj0*cj5*r10);
IkReal x5288=(cj0*cj5*r12*r20);
IkReal x5289=(cj0*r11*sj5);
IkReal x5290=(cj0*r12*r21*sj5);
IkReal x5291=(cj5*r00*sj0);
IkReal x5292=(cj5*r02*r20*sj0);
IkReal x5293=(r01*sj0*sj5);
IkReal x5294=(r02*r21*sj0*sj5);
IkReal x5295=(cj0*cj5*r10*r21*sj5);
IkReal x5296=(cj0*cj5*r11*r20*sj5);
IkReal x5297=(cj5*r00*r21*sj0*sj5);
IkReal x5298=(cj5*r01*r20*sj0*sj5);
IkReal x5299=cj5*cj5;
IkReal x5300=(cj0*r10*r20*x5299);
IkReal x5301=(cj0*r11*r21*x5299);
IkReal x5302=(r00*r20*sj0*x5299);
IkReal x5303=(r01*r21*sj0*x5299);
IkReal x5304=((0.866025403784439)*r22);
IkReal x5305=(cj3*r21);
IkReal x5306=(cj3*r20);
j4eval[0]=((((-3.0)*x5301))+(((-1.73205080756888)*x5290))+(((-1.73205080756888)*x5292))+(((-1.0)*x5282))+(((3.0)*x5303))+(((3.0)*x5300))+(((-3.0)*x5302))+(((1.73205080756888)*x5294))+(((3.0)*x5297))+(((3.0)*x5298))+(((-3.0)*x5283))+(((-1.0)*x5286*x5291))+(((-3.0)*x5295))+((x5286*x5293))+(((1.73205080756888)*x5288))+((x5286*x5287))+x5280+(((-3.0)*x5296))+(((3.0)*x5285))+(((4.0)*x5284))+(((-1.0)*x5286*x5289))+(((-4.0)*x5281)));
j4eval[1]=IKsign(((((-1.0)*x5289*x5304))+(((0.5)*x5280))+(((0.866025403784439)*x5288))+(((0.866025403784439)*x5294))+(((2.0)*x5284))+(((-1.0)*x5291*x5304))+((x5293*x5304))+((x5287*x5304))+(((-2.0)*x5281))+(((1.5)*x5303))+(((1.5)*x5300))+(((-0.866025403784439)*x5290))+(((1.5)*x5297))+(((-1.5)*x5296))+(((-0.866025403784439)*x5292))+(((-1.5)*x5302))+(((-0.5)*x5282))+(((-1.5)*x5283))+(((1.5)*x5298))+(((-1.5)*x5301))+(((1.5)*x5285))+(((-1.5)*x5295))));
j4eval[2]=((IKabs((((cj5*x5305))+((sj5*x5306)))))+(((0.5)*(IKabs((((cj3*x5286))+((sj5*x5305))+(((-1.0)*cj5*x5306))))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5307=(cj0*r02);
IkReal x5308=(r12*sj0);
IkReal x5309=(cj0*cj5*r00);
IkReal x5310=(cj0*r01*sj5);
IkReal x5311=(cj5*r10*sj0);
IkReal x5312=(r11*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x5311))+x5307+x5308+(((-1.73205080756888)*x5312))+(((-1.73205080756888)*x5310))+(((1.73205080756888)*x5309)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.5)*x5307))+(((0.866025403784439)*x5309))+(((0.866025403784439)*x5311))+(((-0.866025403784439)*x5312))+(((-0.866025403784439)*x5310))+(((0.5)*x5308))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5313=r20*r20;
IkReal x5314=r21*r21;
IkReal x5315=r22*r22;
IkReal x5316=(cj5*r20*r22);
IkReal x5317=(r21*r22*sj5);
IkReal x5318=(cj5*r20*r21*sj5);
IkReal x5319=cj5*cj5;
IkReal x5320=(x5313*x5319);
IkReal x5321=(x5314*x5319);
j4eval[0]=((((3.46410161513775)*x5316))+(((-3.0)*x5315))+(((-4.0)*x5313))+(((-3.0)*x5321))+(((-3.46410161513775)*x5317))+(((3.0)*x5320))+(((-1.0)*x5314))+(((-6.0)*x5318)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-3.0)*x5318))+(((-1.5)*x5321))+(((-2.0)*x5313))+(((-0.5)*x5314))+(((-1.73205080756888)*x5317))+(((1.73205080756888)*x5316))+(((1.5)*x5320))+(((-1.5)*x5315))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5322=((1.73205080756888)*cj0);
IkReal x5323=((1.73205080756888)*sj0);
IkReal x5324=((((-1.0)*cj5*r10*x5322))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*sj5*x5322))+(((-1.0)*r01*sj5*x5323))+((cj5*r00*x5323)));
j4eval[0]=x5324;
j4eval[1]=IKsign(x5324);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5325=((1.73205080756888)*cj0*cj5);
IkReal x5326=((1.73205080756888)*cj0*sj5);
IkReal x5327=((1.73205080756888)*cj5*sj0);
IkReal x5328=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x5329 = IKatan2WithCheck(IkReal(((((-1.0)*(0.5)*cj5*r20))+(((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((0.866025403784439)*r22))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5))+(((0.5)*r21*sj5)))),IkReal((((r01*x5325))+((r10*x5328))+(((-1.0)*(1.0)*r20*sj5))+((r11*x5327))+(((-1.0)*(1.0)*cj5*r21))+((r00*x5326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5329.valid){
continue;
}
CheckValue<IkReal> x5330=IKPowWithIntegerCheck(IKsign((((r11*x5326))+(((-1.0)*r01*x5328))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r00*x5327))+(((-1.0)*r10*x5325)))),-1);
if(!x5330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5329.value)+(((1.5707963267949)*(x5330.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5331=IKsin(j4);
IkReal x5332=((0.866025403784439)*r22);
IkReal x5333=((0.5)*r20);
IkReal x5334=(cj5*x5331);
IkReal x5335=IKcos(j4);
IkReal x5336=((1.0)*cj5*x5335);
IkReal x5337=(r20*sj5);
IkReal x5338=((0.5)*r21*sj5);
IkReal x5339=((0.866025403784439)*cj0*r02);
IkReal x5340=((0.866025403784439)*r12*sj0);
IkReal x5341=(cj0*cj5*x5331);
IkReal x5342=(cj0*sj5*x5331);
IkReal x5343=(cj5*sj0*x5331);
IkReal x5344=(sj0*sj5*x5331);
IkReal x5345=((0.5)*r00);
IkReal x5346=(cj0*cj5*x5335);
IkReal x5347=((0.5)*r01);
IkReal x5348=(cj0*sj5*x5335);
IkReal x5349=((0.5)*r10);
IkReal x5350=(cj5*sj0*x5335);
IkReal x5351=((0.5)*r11);
IkReal x5352=(sj0*sj5*x5335);
IkReal x5353=((0.866025403784439)*cj0*r12);
IkReal x5354=((0.866025403784439)*r02*sj0);
IkReal x5355=(r00*sj0*sj5);
IkReal x5356=((1.0)*cj0*cj5*x5335);
IkReal x5357=((1.0)*cj0*sj5*x5335);
evalcond[0]=((((-1.0)*r21*x5336))+((x5331*x5338))+((x5331*x5332))+(((-1.0)*x5333*x5334))+(((-1.0)*x5335*x5337)));
evalcond[1]=((-0.866025403784439)+((x5331*x5337))+((r21*x5334))+((x5332*x5335))+(((-1.0)*cj5*x5333*x5335))+((x5335*x5338)));
evalcond[2]=((-0.5)+((r01*x5341))+((r11*x5343))+(((-1.0)*x5349*x5350))+((r10*x5344))+((x5351*x5352))+((x5335*x5340))+(((-1.0)*x5345*x5346))+((r00*x5342))+((x5347*x5348))+((x5335*x5339)));
evalcond[3]=((((-1.0)*x5335*x5354))+((r10*x5342))+(((-1.0)*x5331*x5355))+((x5348*x5351))+(((-1.0)*r01*x5343))+(((-1.0)*x5347*x5352))+((x5345*x5350))+((x5335*x5353))+(((-1.0)*x5346*x5349))+((r11*x5341)));
evalcond[4]=((-1.0)+((x5343*x5345))+((x5335*x5355))+(((-1.0)*r11*x5356))+(((-1.0)*x5331*x5354))+(((-1.0)*r10*x5357))+((x5342*x5351))+(((-1.0)*x5344*x5347))+((x5331*x5353))+((r01*x5350))+(((-1.0)*x5341*x5349)));
evalcond[5]=((((-1.0)*x5341*x5345))+((x5344*x5351))+((x5331*x5340))+(((-1.0)*r11*sj0*x5336))+((x5331*x5339))+(((-1.0)*x5343*x5349))+(((-1.0)*r00*x5357))+((x5342*x5347))+(((-1.0)*r01*x5356))+(((-1.0)*r10*sj0*sj5*x5335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5358=((1.73205080756888)*r21);
IkReal x5359=(cj5*r20);
IkReal x5360=(r21*sj5);
IkReal x5361=r20*r20;
IkReal x5362=r21*r21;
IkReal x5363=((1.5)*(cj5*cj5));
CheckValue<IkReal> x5364=IKPowWithIntegerCheck(IKsign((((x5361*x5363))+(((-1.0)*r22*sj5*x5358))+(((-3.0)*cj5*r20*x5360))+(((-2.0)*x5361))+(((-1.0)*x5362*x5363))+(((-0.5)*x5362))+(((1.73205080756888)*r22*x5359))+(((-1.0)*(1.5)*(r22*r22))))),-1);
if(!x5364.valid){
continue;
}
CheckValue<IkReal> x5365 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x5358))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*x5359))+(((-0.866025403784439)*x5360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5364.value)))+(x5365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5366=IKsin(j4);
IkReal x5367=((0.866025403784439)*r22);
IkReal x5368=((0.5)*r20);
IkReal x5369=(cj5*x5366);
IkReal x5370=IKcos(j4);
IkReal x5371=((1.0)*cj5*x5370);
IkReal x5372=(r20*sj5);
IkReal x5373=((0.5)*r21*sj5);
IkReal x5374=((0.866025403784439)*cj0*r02);
IkReal x5375=((0.866025403784439)*r12*sj0);
IkReal x5376=(cj0*cj5*x5366);
IkReal x5377=(cj0*sj5*x5366);
IkReal x5378=(cj5*sj0*x5366);
IkReal x5379=(sj0*sj5*x5366);
IkReal x5380=((0.5)*r00);
IkReal x5381=(cj0*cj5*x5370);
IkReal x5382=((0.5)*r01);
IkReal x5383=(cj0*sj5*x5370);
IkReal x5384=((0.5)*r10);
IkReal x5385=(cj5*sj0*x5370);
IkReal x5386=((0.5)*r11);
IkReal x5387=(sj0*sj5*x5370);
IkReal x5388=((0.866025403784439)*cj0*r12);
IkReal x5389=((0.866025403784439)*r02*sj0);
IkReal x5390=(r00*sj0*sj5);
IkReal x5391=((1.0)*cj0*cj5*x5370);
IkReal x5392=((1.0)*cj0*sj5*x5370);
evalcond[0]=((((-1.0)*x5370*x5372))+(((-1.0)*x5368*x5369))+((x5366*x5373))+((x5366*x5367))+(((-1.0)*r21*x5371)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x5368*x5370))+((x5366*x5372))+((r21*x5369))+((x5367*x5370))+((x5370*x5373)));
evalcond[2]=((-0.5)+((x5382*x5383))+((x5370*x5375))+((r10*x5379))+(((-1.0)*x5380*x5381))+((x5370*x5374))+(((-1.0)*x5384*x5385))+((r00*x5377))+((r11*x5378))+((x5386*x5387))+((r01*x5376)));
evalcond[3]=((((-1.0)*x5381*x5384))+((x5370*x5388))+((r11*x5376))+(((-1.0)*x5370*x5389))+(((-1.0)*x5366*x5390))+((x5380*x5385))+((x5383*x5386))+(((-1.0)*r01*x5378))+(((-1.0)*x5382*x5387))+((r10*x5377)));
evalcond[4]=((-1.0)+((x5370*x5390))+(((-1.0)*x5379*x5382))+((x5378*x5380))+((x5377*x5386))+(((-1.0)*r10*x5392))+(((-1.0)*x5376*x5384))+(((-1.0)*x5366*x5389))+((r01*x5385))+(((-1.0)*r11*x5391))+((x5366*x5388)));
evalcond[5]=((((-1.0)*x5378*x5384))+(((-1.0)*r10*sj0*sj5*x5370))+((x5377*x5382))+((x5379*x5386))+((x5366*x5374))+(((-1.0)*r00*x5392))+((x5366*x5375))+(((-1.0)*x5376*x5380))+(((-1.0)*r01*x5391))+(((-1.0)*r11*sj0*x5371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5393=((0.866025403784439)*cj0);
IkReal x5394=((0.866025403784439)*sj0);
CheckValue<IkReal> x5395=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x5394))+((cj5*r00*x5393))+((cj5*r10*x5394))+(((0.5)*r12*sj0))+(((-1.0)*r01*sj5*x5393))+(((0.5)*cj0*r02)))),-1);
if(!x5395.valid){
continue;
}
CheckValue<IkReal> x5396 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5395.value)))+(x5396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5397=IKsin(j4);
IkReal x5398=((0.866025403784439)*r22);
IkReal x5399=((0.5)*r20);
IkReal x5400=(cj5*x5397);
IkReal x5401=IKcos(j4);
IkReal x5402=((1.0)*cj5*x5401);
IkReal x5403=(r20*sj5);
IkReal x5404=((0.5)*r21*sj5);
IkReal x5405=((0.866025403784439)*cj0*r02);
IkReal x5406=((0.866025403784439)*r12*sj0);
IkReal x5407=(cj0*cj5*x5397);
IkReal x5408=(cj0*sj5*x5397);
IkReal x5409=(cj5*sj0*x5397);
IkReal x5410=(sj0*sj5*x5397);
IkReal x5411=((0.5)*r00);
IkReal x5412=(cj0*cj5*x5401);
IkReal x5413=((0.5)*r01);
IkReal x5414=(cj0*sj5*x5401);
IkReal x5415=((0.5)*r10);
IkReal x5416=(cj5*sj0*x5401);
IkReal x5417=((0.5)*r11);
IkReal x5418=(sj0*sj5*x5401);
IkReal x5419=((0.866025403784439)*cj0*r12);
IkReal x5420=((0.866025403784439)*r02*sj0);
IkReal x5421=(r00*sj0*sj5);
IkReal x5422=((1.0)*cj0*cj5*x5401);
IkReal x5423=((1.0)*cj0*sj5*x5401);
evalcond[0]=(((x5397*x5404))+(((-1.0)*x5399*x5400))+((x5397*x5398))+(((-1.0)*r21*x5402))+(((-1.0)*x5401*x5403)));
evalcond[1]=((-0.866025403784439)+((x5398*x5401))+((r21*x5400))+(((-1.0)*cj5*x5399*x5401))+((x5401*x5404))+((x5397*x5403)));
evalcond[2]=((-0.5)+((r10*x5410))+((r00*x5408))+((r01*x5407))+((x5413*x5414))+((x5417*x5418))+((x5401*x5406))+((x5401*x5405))+(((-1.0)*x5415*x5416))+(((-1.0)*x5411*x5412))+((r11*x5409)));
evalcond[3]=(((x5414*x5417))+((x5401*x5419))+((r10*x5408))+(((-1.0)*x5401*x5420))+(((-1.0)*x5413*x5418))+(((-1.0)*x5397*x5421))+(((-1.0)*x5412*x5415))+((x5411*x5416))+(((-1.0)*r01*x5409))+((r11*x5407)));
evalcond[4]=((-1.0)+((x5408*x5417))+(((-1.0)*r10*x5423))+(((-1.0)*x5410*x5413))+((x5409*x5411))+((r01*x5416))+(((-1.0)*x5397*x5420))+((x5397*x5419))+((x5401*x5421))+(((-1.0)*x5407*x5415))+(((-1.0)*r11*x5422)));
evalcond[5]=((((-1.0)*r11*sj0*x5402))+(((-1.0)*r00*x5423))+((x5408*x5413))+((x5397*x5405))+(((-1.0)*x5407*x5411))+((x5410*x5417))+((x5397*x5406))+(((-1.0)*r01*x5422))+(((-1.0)*r10*sj0*sj5*x5401))+(((-1.0)*x5409*x5415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x5424=(cj0*r02);
IkReal x5425=(r12*sj0);
IkReal x5426=(cj0*cj5*r00);
IkReal x5427=(cj0*r01*sj5);
IkReal x5428=(cj5*r10*sj0);
IkReal x5429=(r11*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x5428))+(((1.73205080756888)*x5426))+(((-1.73205080756888)*x5427))+(((-1.73205080756888)*x5429))+x5425+x5424);
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((0.866025403784439)*x5426))+(((0.866025403784439)*x5428))+(((-0.866025403784439)*x5429))+(((0.5)*x5424))+(((-0.866025403784439)*x5427))+(((0.5)*x5425))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x5430=r20*r20;
IkReal x5431=r21*r21;
IkReal x5432=r22*r22;
IkReal x5433=(cj5*r20*r22);
IkReal x5434=(r21*r22*sj5);
IkReal x5435=(cj5*r20*r21*sj5);
IkReal x5436=cj5*cj5;
IkReal x5437=(x5430*x5436);
IkReal x5438=(x5431*x5436);
j4eval[0]=((((3.46410161513775)*x5433))+(((-3.46410161513775)*x5434))+(((3.0)*x5437))+(((-6.0)*x5435))+(((-3.0)*x5432))+(((-4.0)*x5430))+(((-1.0)*x5431))+(((-3.0)*x5438)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((1.73205080756888)*x5433))+(((-0.5)*x5431))+(((1.5)*x5437))+(((-2.0)*x5430))+(((-1.5)*x5438))+(((-1.5)*x5432))+(((-1.73205080756888)*x5434))+(((-3.0)*x5435))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x5439=((1.73205080756888)*cj0);
IkReal x5440=((1.73205080756888)*sj0);
IkReal x5441=((((-1.0)*r01*sj5*x5440))+(((-1.0)*cj5*r10*x5439))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((cj5*r00*x5440))+((r11*sj5*x5439)));
j4eval[0]=x5441;
j4eval[1]=IKsign(x5441);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5442=((1.73205080756888)*cj0*cj5);
IkReal x5443=((1.73205080756888)*cj0*sj5);
IkReal x5444=((1.73205080756888)*cj5*sj0);
IkReal x5445=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x5446 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r20*sj5))+((cj5*r21))+((r00*x5443))+((r01*x5442))+((r11*x5444))+((r10*x5445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5446.valid){
continue;
}
CheckValue<IkReal> x5447=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5445))+(((-1.0)*r10*x5442))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+((r11*x5443))+((r00*x5444)))),-1);
if(!x5447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5446.value)+(((1.5707963267949)*(x5447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5448=IKsin(j4);
IkReal x5449=((0.866025403784439)*r22);
IkReal x5450=((0.5)*r20);
IkReal x5451=(cj5*x5448);
IkReal x5452=IKcos(j4);
IkReal x5453=((1.0)*cj5*x5452);
IkReal x5454=(r20*sj5);
IkReal x5455=((0.5)*r21*sj5);
IkReal x5456=((0.866025403784439)*cj0*r02);
IkReal x5457=((0.866025403784439)*r12*sj0);
IkReal x5458=(cj0*cj5*x5448);
IkReal x5459=(cj0*sj5*x5448);
IkReal x5460=(cj5*sj0*x5448);
IkReal x5461=(sj0*sj5*x5448);
IkReal x5462=((0.5)*r00);
IkReal x5463=(cj0*cj5*x5452);
IkReal x5464=((0.5)*r01);
IkReal x5465=(cj0*sj5*x5452);
IkReal x5466=((0.5)*r10);
IkReal x5467=(cj5*sj0*x5452);
IkReal x5468=((0.5)*r11);
IkReal x5469=(sj0*sj5*x5452);
IkReal x5470=((0.866025403784439)*cj0*r12);
IkReal x5471=((0.866025403784439)*r02*sj0);
IkReal x5472=(r00*sj0*sj5);
IkReal x5473=((1.0)*cj0*cj5*x5452);
IkReal x5474=((1.0)*cj0*sj5*x5452);
evalcond[0]=((((-1.0)*x5452*x5454))+(((-1.0)*x5450*x5451))+((x5448*x5449))+(((-1.0)*r21*x5453))+((x5448*x5455)));
evalcond[1]=((-0.866025403784439)+((x5449*x5452))+((r21*x5451))+((x5452*x5455))+(((-1.0)*cj5*x5450*x5452))+((x5448*x5454)));
evalcond[2]=((0.5)+((x5452*x5457))+((r10*x5461))+((r00*x5459))+((x5468*x5469))+((x5464*x5465))+(((-1.0)*x5466*x5467))+((r11*x5460))+((r01*x5458))+(((-1.0)*x5462*x5463))+((x5452*x5456)));
evalcond[3]=((((-1.0)*x5464*x5469))+((x5465*x5468))+((x5452*x5470))+((r11*x5458))+(((-1.0)*x5452*x5471))+(((-1.0)*x5463*x5466))+(((-1.0)*x5448*x5472))+(((-1.0)*r01*x5460))+((r10*x5459))+((x5462*x5467)));
evalcond[4]=((1.0)+(((-1.0)*x5448*x5471))+(((-1.0)*r10*x5474))+(((-1.0)*x5461*x5464))+((r01*x5467))+(((-1.0)*x5458*x5466))+((x5460*x5462))+((x5459*x5468))+(((-1.0)*r11*x5473))+((x5452*x5472))+((x5448*x5470)));
evalcond[5]=(((x5459*x5464))+(((-1.0)*x5458*x5462))+((x5448*x5456))+((x5448*x5457))+(((-1.0)*r11*sj0*x5453))+(((-1.0)*x5460*x5466))+(((-1.0)*r10*sj0*sj5*x5452))+((x5461*x5468))+(((-1.0)*r01*x5473))+(((-1.0)*r00*x5474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5475=((1.73205080756888)*r21);
IkReal x5476=(cj5*r20);
IkReal x5477=(r21*sj5);
IkReal x5478=r20*r20;
IkReal x5479=r21*r21;
IkReal x5480=((1.5)*(cj5*cj5));
CheckValue<IkReal> x5481 = IKatan2WithCheck(IkReal(((((-1.0)*(1.73205080756888)*r20*sj5))+(((-1.0)*cj5*x5475)))),IkReal(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*x5476))+(((-0.866025403784439)*x5477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5481.valid){
continue;
}
CheckValue<IkReal> x5482=IKPowWithIntegerCheck(IKsign(((((1.73205080756888)*r22*x5476))+(((-2.0)*x5478))+(((-1.0)*x5479*x5480))+(((-1.0)*r22*sj5*x5475))+((x5478*x5480))+(((-3.0)*cj5*r20*x5477))+(((-1.0)*(1.5)*(r22*r22)))+(((-0.5)*x5479)))),-1);
if(!x5482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5481.value)+(((1.5707963267949)*(x5482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5483=IKsin(j4);
IkReal x5484=((0.866025403784439)*r22);
IkReal x5485=((0.5)*r20);
IkReal x5486=(cj5*x5483);
IkReal x5487=IKcos(j4);
IkReal x5488=((1.0)*cj5*x5487);
IkReal x5489=(r20*sj5);
IkReal x5490=((0.5)*r21*sj5);
IkReal x5491=((0.866025403784439)*cj0*r02);
IkReal x5492=((0.866025403784439)*r12*sj0);
IkReal x5493=(cj0*cj5*x5483);
IkReal x5494=(cj0*sj5*x5483);
IkReal x5495=(cj5*sj0*x5483);
IkReal x5496=(sj0*sj5*x5483);
IkReal x5497=((0.5)*r00);
IkReal x5498=(cj0*cj5*x5487);
IkReal x5499=((0.5)*r01);
IkReal x5500=(cj0*sj5*x5487);
IkReal x5501=((0.5)*r10);
IkReal x5502=(cj5*sj0*x5487);
IkReal x5503=((0.5)*r11);
IkReal x5504=(sj0*sj5*x5487);
IkReal x5505=((0.866025403784439)*cj0*r12);
IkReal x5506=((0.866025403784439)*r02*sj0);
IkReal x5507=(r00*sj0*sj5);
IkReal x5508=((1.0)*cj0*cj5*x5487);
IkReal x5509=((1.0)*cj0*sj5*x5487);
evalcond[0]=((((-1.0)*x5487*x5489))+((x5483*x5484))+(((-1.0)*x5485*x5486))+((x5483*x5490))+(((-1.0)*r21*x5488)));
evalcond[1]=((-0.866025403784439)+((x5484*x5487))+(((-1.0)*cj5*x5485*x5487))+((x5483*x5489))+((x5487*x5490))+((r21*x5486)));
evalcond[2]=((0.5)+(((-1.0)*x5497*x5498))+((x5487*x5492))+((r01*x5493))+((x5487*x5491))+((r11*x5495))+((x5499*x5500))+((x5503*x5504))+((r10*x5496))+(((-1.0)*x5501*x5502))+((r00*x5494)));
evalcond[3]=((((-1.0)*x5498*x5501))+(((-1.0)*x5499*x5504))+((r10*x5494))+((r11*x5493))+((x5500*x5503))+((x5497*x5502))+((x5487*x5505))+(((-1.0)*r01*x5495))+(((-1.0)*x5483*x5507))+(((-1.0)*x5487*x5506)));
evalcond[4]=((1.0)+(((-1.0)*x5493*x5501))+((r01*x5502))+((x5495*x5497))+(((-1.0)*r10*x5509))+(((-1.0)*x5496*x5499))+((x5483*x5505))+(((-1.0)*x5483*x5506))+((x5487*x5507))+(((-1.0)*r11*x5508))+((x5494*x5503)));
evalcond[5]=((((-1.0)*r00*x5509))+(((-1.0)*r10*sj0*sj5*x5487))+((x5483*x5492))+((x5496*x5503))+(((-1.0)*r11*sj0*x5488))+((x5494*x5499))+((x5483*x5491))+(((-1.0)*x5493*x5497))+(((-1.0)*x5495*x5501))+(((-1.0)*r01*x5508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5510=((0.866025403784439)*cj0);
IkReal x5511=((0.866025403784439)*sj0);
CheckValue<IkReal> x5512=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5511))+(((-1.0)*r11*sj5*x5511))+(((0.5)*r12*sj0))+((cj5*r00*x5510))+(((0.5)*cj0*r02))+(((-1.0)*r01*sj5*x5510)))),-1);
if(!x5512.valid){
continue;
}
CheckValue<IkReal> x5513 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5512.value)))+(x5513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5514=IKsin(j4);
IkReal x5515=((0.866025403784439)*r22);
IkReal x5516=((0.5)*r20);
IkReal x5517=(cj5*x5514);
IkReal x5518=IKcos(j4);
IkReal x5519=((1.0)*cj5*x5518);
IkReal x5520=(r20*sj5);
IkReal x5521=((0.5)*r21*sj5);
IkReal x5522=((0.866025403784439)*cj0*r02);
IkReal x5523=((0.866025403784439)*r12*sj0);
IkReal x5524=(cj0*cj5*x5514);
IkReal x5525=(cj0*sj5*x5514);
IkReal x5526=(cj5*sj0*x5514);
IkReal x5527=(sj0*sj5*x5514);
IkReal x5528=((0.5)*r00);
IkReal x5529=(cj0*cj5*x5518);
IkReal x5530=((0.5)*r01);
IkReal x5531=(cj0*sj5*x5518);
IkReal x5532=((0.5)*r10);
IkReal x5533=(cj5*sj0*x5518);
IkReal x5534=((0.5)*r11);
IkReal x5535=(sj0*sj5*x5518);
IkReal x5536=((0.866025403784439)*cj0*r12);
IkReal x5537=((0.866025403784439)*r02*sj0);
IkReal x5538=(r00*sj0*sj5);
IkReal x5539=((1.0)*cj0*cj5*x5518);
IkReal x5540=((1.0)*cj0*sj5*x5518);
evalcond[0]=(((x5514*x5515))+(((-1.0)*r21*x5519))+(((-1.0)*x5518*x5520))+(((-1.0)*x5516*x5517))+((x5514*x5521)));
evalcond[1]=((-0.866025403784439)+((x5515*x5518))+((x5518*x5521))+(((-1.0)*cj5*x5516*x5518))+((r21*x5517))+((x5514*x5520)));
evalcond[2]=((0.5)+((x5518*x5522))+((r01*x5524))+((r11*x5526))+((x5534*x5535))+(((-1.0)*x5528*x5529))+((x5530*x5531))+((r00*x5525))+((r10*x5527))+(((-1.0)*x5532*x5533))+((x5518*x5523)));
evalcond[3]=((((-1.0)*r01*x5526))+((x5518*x5536))+((x5528*x5533))+(((-1.0)*x5518*x5537))+((x5531*x5534))+((r10*x5525))+(((-1.0)*x5514*x5538))+((r11*x5524))+(((-1.0)*x5529*x5532))+(((-1.0)*x5530*x5535)));
evalcond[4]=((1.0)+((r01*x5533))+((x5525*x5534))+(((-1.0)*x5524*x5532))+(((-1.0)*r10*x5540))+((x5518*x5538))+((x5514*x5536))+(((-1.0)*x5527*x5530))+((x5526*x5528))+(((-1.0)*x5514*x5537))+(((-1.0)*r11*x5539)));
evalcond[5]=((((-1.0)*r00*x5540))+((x5527*x5534))+(((-1.0)*r10*sj0*sj5*x5518))+(((-1.0)*x5524*x5528))+((x5525*x5530))+(((-1.0)*x5526*x5532))+((x5514*x5523))+(((-1.0)*r11*sj0*x5519))+(((-1.0)*r01*x5539))+((x5514*x5522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x5541=(r02*sj0);
IkReal x5542=(cj0*r12);
IkReal x5543=(cj0*cj5*r10);
IkReal x5544=(cj0*r11*sj5);
IkReal x5545=(cj5*r00*sj0);
IkReal x5546=(r01*sj0*sj5);
j4eval[0]=((((-1.0)*x5542))+(((-1.73205080756888)*x5543))+x5541+(((-1.73205080756888)*x5546))+(((1.73205080756888)*x5544))+(((1.73205080756888)*x5545)));
j4eval[1]=((IKabs(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))))+(IKabs(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5))))));
j4eval[2]=IKsign(((((-0.866025403784439)*x5543))+(((0.866025403784439)*x5545))+(((-0.866025403784439)*x5546))+(((0.5)*x5541))+(((0.866025403784439)*x5544))+(((-0.5)*x5542))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x5547=r20*r20;
IkReal x5548=r21*r21;
IkReal x5549=r22*r22;
IkReal x5550=(cj5*r20*r22);
IkReal x5551=(r21*r22*sj5);
IkReal x5552=(cj5*r20*r21*sj5);
IkReal x5553=cj5*cj5;
IkReal x5554=(x5547*x5553);
IkReal x5555=(x5548*x5553);
j4eval[0]=((((-3.0)*x5549))+(((3.46410161513775)*x5550))+(((-6.0)*x5552))+(((-3.0)*x5555))+(((-1.0)*x5548))+(((-4.0)*x5547))+(((-3.46410161513775)*x5551))+(((3.0)*x5554)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-2.0)*x5547))+(((-1.5)*x5549))+(((-1.5)*x5555))+(((1.73205080756888)*x5550))+(((-3.0)*x5552))+(((-1.73205080756888)*x5551))+(((-0.5)*x5548))+(((1.5)*x5554))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x5556=((1.73205080756888)*cj0);
IkReal x5557=((1.73205080756888)*sj0);
IkReal x5558=(((cj5*r00*x5557))+(((-1.0)*r01*sj5*x5557))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*cj5*r10*x5556))+((r11*sj5*x5556)));
j4eval[0]=x5558;
j4eval[1]=IKsign(x5558);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5559=((1.73205080756888)*cj0*cj5);
IkReal x5560=((1.73205080756888)*cj0*sj5);
IkReal x5561=((1.73205080756888)*cj5*sj0);
IkReal x5562=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x5563 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r11*x5561))+((r01*x5559))+((r10*x5562))+((r00*x5560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5563.valid){
continue;
}
CheckValue<IkReal> x5564=IKPowWithIntegerCheck(IKsign((((r11*x5560))+(((-1.0)*r01*x5562))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r10*x5559))+((r00*x5561)))),-1);
if(!x5564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5563.value)+(((1.5707963267949)*(x5564.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5565=IKsin(j4);
IkReal x5566=((0.866025403784439)*r22);
IkReal x5567=((0.5)*r20);
IkReal x5568=(cj5*x5565);
IkReal x5569=IKcos(j4);
IkReal x5570=((1.0)*cj5*x5569);
IkReal x5571=(r20*sj5);
IkReal x5572=((0.5)*r21*sj5);
IkReal x5573=((0.866025403784439)*cj0*r02);
IkReal x5574=((0.866025403784439)*r12*sj0);
IkReal x5575=(cj0*cj5*x5565);
IkReal x5576=(cj0*sj5*x5565);
IkReal x5577=(cj5*sj0*x5565);
IkReal x5578=(sj0*sj5*x5565);
IkReal x5579=((0.5)*r00);
IkReal x5580=(cj0*cj5*x5569);
IkReal x5581=((0.5)*r01);
IkReal x5582=(cj0*sj5*x5569);
IkReal x5583=((0.5)*r10);
IkReal x5584=(cj5*sj0*x5569);
IkReal x5585=((0.5)*r11);
IkReal x5586=(sj0*sj5*x5569);
IkReal x5587=((0.866025403784439)*cj0*r12);
IkReal x5588=((0.866025403784439)*r02*sj0);
IkReal x5589=(r00*sj0*sj5);
IkReal x5590=((1.0)*cj0*cj5*x5569);
IkReal x5591=((1.0)*cj0*sj5*x5569);
evalcond[0]=((((-1.0)*r21*x5570))+(((-1.0)*x5569*x5571))+(((-1.0)*x5567*x5568))+((x5565*x5566))+((x5565*x5572)));
evalcond[1]=((-0.866025403784439)+((x5569*x5572))+(((-1.0)*cj5*x5567*x5569))+((r21*x5568))+((x5565*x5571))+((x5566*x5569)));
evalcond[2]=(((x5581*x5582))+((x5585*x5586))+((x5569*x5574))+(((-1.0)*x5579*x5580))+((x5569*x5573))+((r01*x5575))+((r11*x5577))+((r10*x5578))+(((-1.0)*x5583*x5584))+((r00*x5576)));
evalcond[3]=(((x5569*x5589))+(((-1.0)*r10*x5591))+(((-1.0)*r11*x5590))+(((-1.0)*x5575*x5583))+((r01*x5584))+((x5565*x5587))+((x5577*x5579))+((x5576*x5585))+(((-1.0)*x5578*x5581))+(((-1.0)*x5565*x5588)));
evalcond[4]=((0.5)+((x5579*x5584))+((x5569*x5587))+(((-1.0)*x5569*x5588))+(((-1.0)*x5581*x5586))+((r11*x5575))+(((-1.0)*x5565*x5589))+((x5582*x5585))+((r10*x5576))+(((-1.0)*r01*x5577))+(((-1.0)*x5580*x5583)));
evalcond[5]=((-1.0)+((x5565*x5574))+((x5576*x5581))+(((-1.0)*r01*x5590))+(((-1.0)*r10*sj0*sj5*x5569))+(((-1.0)*x5577*x5583))+((x5578*x5585))+(((-1.0)*x5575*x5579))+(((-1.0)*r00*x5591))+((x5565*x5573))+(((-1.0)*r11*sj0*x5570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5592=((1.73205080756888)*r21);
IkReal x5593=(cj5*r20);
IkReal x5594=(r21*sj5);
IkReal x5595=r20*r20;
IkReal x5596=r21*r21;
IkReal x5597=((1.5)*(cj5*cj5));
CheckValue<IkReal> x5598 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x5592))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((-0.866025403784439)*x5594))+(((-1.0)*(1.5)*r22))+(((0.866025403784439)*x5593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5598.valid){
continue;
}
CheckValue<IkReal> x5599=IKPowWithIntegerCheck(IKsign((((x5595*x5597))+(((1.73205080756888)*r22*x5593))+(((-1.0)*r22*sj5*x5592))+(((-0.5)*x5596))+(((-2.0)*x5595))+(((-1.0)*(1.5)*(r22*r22)))+(((-3.0)*cj5*r20*x5594))+(((-1.0)*x5596*x5597)))),-1);
if(!x5599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5598.value)+(((1.5707963267949)*(x5599.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5600=IKsin(j4);
IkReal x5601=((0.866025403784439)*r22);
IkReal x5602=((0.5)*r20);
IkReal x5603=(cj5*x5600);
IkReal x5604=IKcos(j4);
IkReal x5605=((1.0)*cj5*x5604);
IkReal x5606=(r20*sj5);
IkReal x5607=((0.5)*r21*sj5);
IkReal x5608=((0.866025403784439)*cj0*r02);
IkReal x5609=((0.866025403784439)*r12*sj0);
IkReal x5610=(cj0*cj5*x5600);
IkReal x5611=(cj0*sj5*x5600);
IkReal x5612=(cj5*sj0*x5600);
IkReal x5613=(sj0*sj5*x5600);
IkReal x5614=((0.5)*r00);
IkReal x5615=(cj0*cj5*x5604);
IkReal x5616=((0.5)*r01);
IkReal x5617=(cj0*sj5*x5604);
IkReal x5618=((0.5)*r10);
IkReal x5619=(cj5*sj0*x5604);
IkReal x5620=((0.5)*r11);
IkReal x5621=(sj0*sj5*x5604);
IkReal x5622=((0.866025403784439)*cj0*r12);
IkReal x5623=((0.866025403784439)*r02*sj0);
IkReal x5624=(r00*sj0*sj5);
IkReal x5625=((1.0)*cj0*cj5*x5604);
IkReal x5626=((1.0)*cj0*sj5*x5604);
evalcond[0]=(((x5600*x5607))+(((-1.0)*r21*x5605))+(((-1.0)*x5604*x5606))+((x5600*x5601))+(((-1.0)*x5602*x5603)));
evalcond[1]=((-0.866025403784439)+((x5604*x5607))+((x5600*x5606))+((r21*x5603))+((x5601*x5604))+(((-1.0)*cj5*x5602*x5604)));
evalcond[2]=(((r00*x5611))+((r01*x5610))+((r10*x5613))+((x5604*x5608))+((x5604*x5609))+((x5616*x5617))+((r11*x5612))+(((-1.0)*x5618*x5619))+((x5620*x5621))+(((-1.0)*x5614*x5615)));
evalcond[3]=((((-1.0)*x5613*x5616))+((x5604*x5624))+((x5611*x5620))+(((-1.0)*r11*x5625))+(((-1.0)*x5600*x5623))+(((-1.0)*r10*x5626))+((x5600*x5622))+((r01*x5619))+((x5612*x5614))+(((-1.0)*x5610*x5618)));
evalcond[4]=((0.5)+(((-1.0)*x5604*x5623))+(((-1.0)*x5616*x5621))+(((-1.0)*r01*x5612))+((x5604*x5622))+(((-1.0)*x5600*x5624))+((r10*x5611))+((r11*x5610))+(((-1.0)*x5615*x5618))+((x5617*x5620))+((x5614*x5619)));
evalcond[5]=((-1.0)+((x5600*x5608))+(((-1.0)*x5610*x5614))+((x5611*x5616))+(((-1.0)*r11*sj0*x5605))+(((-1.0)*r01*x5625))+(((-1.0)*r00*x5626))+((x5600*x5609))+((x5613*x5620))+(((-1.0)*x5612*x5618))+(((-1.0)*r10*sj0*sj5*x5604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5627=((0.866025403784439)*cj0);
IkReal x5628=((0.866025403784439)*sj0);
CheckValue<IkReal> x5629 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),IkReal(((((0.5)*cj5*r20))+(((-1.0)*(0.866025403784439)*r22))+(((-1.0)*(0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5629.valid){
continue;
}
CheckValue<IkReal> x5630=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x5627))+(((-1.0)*(0.5)*cj0*r12))+(((0.5)*r02*sj0))+(((-1.0)*r01*sj5*x5628))+((cj5*r00*x5628))+((r11*sj5*x5627)))),-1);
if(!x5630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5629.value)+(((1.5707963267949)*(x5630.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5631=IKsin(j4);
IkReal x5632=((0.866025403784439)*r22);
IkReal x5633=((0.5)*r20);
IkReal x5634=(cj5*x5631);
IkReal x5635=IKcos(j4);
IkReal x5636=((1.0)*cj5*x5635);
IkReal x5637=(r20*sj5);
IkReal x5638=((0.5)*r21*sj5);
IkReal x5639=((0.866025403784439)*cj0*r02);
IkReal x5640=((0.866025403784439)*r12*sj0);
IkReal x5641=(cj0*cj5*x5631);
IkReal x5642=(cj0*sj5*x5631);
IkReal x5643=(cj5*sj0*x5631);
IkReal x5644=(sj0*sj5*x5631);
IkReal x5645=((0.5)*r00);
IkReal x5646=(cj0*cj5*x5635);
IkReal x5647=((0.5)*r01);
IkReal x5648=(cj0*sj5*x5635);
IkReal x5649=((0.5)*r10);
IkReal x5650=(cj5*sj0*x5635);
IkReal x5651=((0.5)*r11);
IkReal x5652=(sj0*sj5*x5635);
IkReal x5653=((0.866025403784439)*cj0*r12);
IkReal x5654=((0.866025403784439)*r02*sj0);
IkReal x5655=(r00*sj0*sj5);
IkReal x5656=((1.0)*cj0*cj5*x5635);
IkReal x5657=((1.0)*cj0*sj5*x5635);
evalcond[0]=(((x5631*x5638))+(((-1.0)*r21*x5636))+((x5631*x5632))+(((-1.0)*x5635*x5637))+(((-1.0)*x5633*x5634)));
evalcond[1]=((-0.866025403784439)+((x5635*x5638))+((r21*x5634))+(((-1.0)*cj5*x5633*x5635))+((x5631*x5637))+((x5632*x5635)));
evalcond[2]=(((r00*x5642))+((x5635*x5640))+((r11*x5643))+(((-1.0)*x5645*x5646))+((r01*x5641))+((x5651*x5652))+((x5647*x5648))+((r10*x5644))+((x5635*x5639))+(((-1.0)*x5649*x5650)));
evalcond[3]=(((r01*x5650))+(((-1.0)*r10*x5657))+((x5642*x5651))+(((-1.0)*r11*x5656))+((x5635*x5655))+((x5631*x5653))+(((-1.0)*x5631*x5654))+(((-1.0)*x5641*x5649))+((x5643*x5645))+(((-1.0)*x5644*x5647)));
evalcond[4]=((0.5)+(((-1.0)*x5647*x5652))+((r10*x5642))+((x5645*x5650))+((x5635*x5653))+(((-1.0)*x5646*x5649))+(((-1.0)*x5635*x5654))+((x5648*x5651))+(((-1.0)*x5631*x5655))+((r11*x5641))+(((-1.0)*r01*x5643)));
evalcond[5]=((-1.0)+(((-1.0)*r10*sj0*sj5*x5635))+(((-1.0)*x5641*x5645))+((x5644*x5651))+(((-1.0)*r11*sj0*x5636))+(((-1.0)*x5643*x5649))+(((-1.0)*r00*x5657))+((x5631*x5640))+((x5642*x5647))+((x5631*x5639))+(((-1.0)*r01*x5656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5658=(r02*sj0);
IkReal x5659=(cj0*r12);
IkReal x5660=(cj0*cj5*r10);
IkReal x5661=(cj0*r11*sj5);
IkReal x5662=(cj5*r00*sj0);
IkReal x5663=(r01*sj0*sj5);
j4eval[0]=((((-1.0)*x5659))+(((-1.73205080756888)*x5660))+(((1.73205080756888)*x5662))+(((-1.73205080756888)*x5663))+(((1.73205080756888)*x5661))+x5658);
j4eval[1]=IKsign(((((0.5)*x5658))+(((0.866025403784439)*x5661))+(((-0.866025403784439)*x5663))+(((0.866025403784439)*x5662))+(((-0.866025403784439)*x5660))+(((-0.5)*x5659))));
j4eval[2]=((IKabs((((r20*sj5))+((cj5*r21)))))+(IKabs(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5664=r20*r20;
IkReal x5665=r21*r21;
IkReal x5666=r22*r22;
IkReal x5667=(cj5*r20*r22);
IkReal x5668=(r21*r22*sj5);
IkReal x5669=(cj5*r20*r21*sj5);
IkReal x5670=cj5*cj5;
IkReal x5671=(x5664*x5670);
IkReal x5672=(x5665*x5670);
j4eval[0]=((((3.46410161513775)*x5667))+(((-1.0)*x5665))+(((3.0)*x5671))+(((-6.0)*x5669))+(((-3.46410161513775)*x5668))+(((-3.0)*x5666))+(((-3.0)*x5672))+(((-4.0)*x5664)));
j4eval[1]=((IKabs((((r20*sj5))+((cj5*r21)))))+(((0.577350269189626)*(IKabs(((((-1.0)*(1.5)*r22))+(((0.866025403784439)*cj5*r20))+(((-0.866025403784439)*r21*sj5))))))));
j4eval[2]=IKsign(((((-1.5)*x5672))+(((-1.5)*x5666))+(((-0.5)*x5665))+(((1.5)*x5671))+(((-2.0)*x5664))+(((1.73205080756888)*x5667))+(((-3.0)*x5669))+(((-1.73205080756888)*x5668))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5673=((1.73205080756888)*cj0);
IkReal x5674=((1.73205080756888)*sj0);
IkReal x5675=((((-1.0)*cj5*r10*x5673))+((cj5*r00*x5674))+((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*sj5*x5674))+((r11*sj5*x5673)));
j4eval[0]=x5675;
j4eval[1]=IKsign(x5675);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5676=((1.73205080756888)*cj0*cj5);
IkReal x5677=((1.73205080756888)*cj0*sj5);
IkReal x5678=((1.73205080756888)*cj5*sj0);
IkReal x5679=((1.73205080756888)*sj0*sj5);
CheckValue<IkReal> x5680 = IKatan2WithCheck(IkReal(((((((0.866025403784439)*r00))*((cj0*cj5))))+(((-1.0)*(1.5)*cj0*r02))+(((-1.0)*(1.5)*r12*sj0))+(((-1.0)*(0.866025403784439)*r11*sj0*sj5))+(((((0.866025403784439)*r10))*((cj5*sj0))))+(((-0.866025403784439)*cj0*r01*sj5)))),IkReal((((r10*x5679))+((r00*x5677))+((r11*x5678))+((r01*x5676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5680.valid){
continue;
}
CheckValue<IkReal> x5681=IKPowWithIntegerCheck(IKsign((((r02*sj0))+(((-1.0)*(1.0)*cj0*r12))+(((-1.0)*r01*x5679))+((r00*x5678))+((r11*x5677))+(((-1.0)*r10*x5676)))),-1);
if(!x5681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5680.value)+(((1.5707963267949)*(x5681.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5682=IKsin(j4);
IkReal x5683=((0.866025403784439)*r22);
IkReal x5684=((0.5)*r20);
IkReal x5685=(cj5*x5682);
IkReal x5686=IKcos(j4);
IkReal x5687=((1.0)*cj5*x5686);
IkReal x5688=(r20*sj5);
IkReal x5689=((0.5)*r21*sj5);
IkReal x5690=((0.866025403784439)*cj0*r02);
IkReal x5691=((0.866025403784439)*r12*sj0);
IkReal x5692=(cj0*cj5*x5682);
IkReal x5693=(cj0*sj5*x5682);
IkReal x5694=(cj5*sj0*x5682);
IkReal x5695=(sj0*sj5*x5682);
IkReal x5696=((0.5)*r00);
IkReal x5697=(cj0*cj5*x5686);
IkReal x5698=((0.5)*r01);
IkReal x5699=(cj0*sj5*x5686);
IkReal x5700=((0.5)*r10);
IkReal x5701=(cj5*sj0*x5686);
IkReal x5702=((0.5)*r11);
IkReal x5703=(sj0*sj5*x5686);
IkReal x5704=((0.866025403784439)*cj0*r12);
IkReal x5705=((0.866025403784439)*r02*sj0);
IkReal x5706=(r00*sj0*sj5);
IkReal x5707=((1.0)*cj0*cj5*x5686);
IkReal x5708=((1.0)*cj0*sj5*x5686);
evalcond[0]=(((x5682*x5683))+((x5682*x5689))+(((-1.0)*r21*x5687))+(((-1.0)*x5686*x5688))+(((-1.0)*x5684*x5685)));
evalcond[1]=((-0.866025403784439)+((x5683*x5686))+(((-1.0)*cj5*x5684*x5686))+((r21*x5685))+((x5682*x5688))+((x5686*x5689)));
evalcond[2]=(((x5698*x5699))+((r01*x5692))+((x5686*x5691))+(((-1.0)*x5696*x5697))+((x5686*x5690))+((x5702*x5703))+((r00*x5693))+((r10*x5695))+(((-1.0)*x5700*x5701))+((r11*x5694)));
evalcond[3]=((((-1.0)*x5695*x5698))+((x5682*x5704))+(((-1.0)*r11*x5707))+((x5694*x5696))+((r01*x5701))+((x5686*x5706))+(((-1.0)*x5682*x5705))+(((-1.0)*x5692*x5700))+((x5693*x5702))+(((-1.0)*r10*x5708)));
evalcond[4]=((-0.5)+((r11*x5692))+((x5699*x5702))+(((-1.0)*x5698*x5703))+(((-1.0)*x5682*x5706))+((r10*x5693))+(((-1.0)*x5697*x5700))+((x5686*x5704))+(((-1.0)*r01*x5694))+(((-1.0)*x5686*x5705))+((x5696*x5701)));
evalcond[5]=((1.0)+(((-1.0)*r01*x5707))+(((-1.0)*r00*x5708))+((x5682*x5690))+(((-1.0)*r10*sj0*sj5*x5686))+((x5682*x5691))+(((-1.0)*r11*sj0*x5687))+(((-1.0)*x5694*x5700))+(((-1.0)*x5692*x5696))+((x5693*x5698))+((x5695*x5702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5709=((1.73205080756888)*r21);
IkReal x5710=(cj5*r20);
IkReal x5711=(r21*sj5);
IkReal x5712=r20*r20;
IkReal x5713=r21*r21;
IkReal x5714=((1.5)*(cj5*cj5));
CheckValue<IkReal> x5715=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5712))+(((-3.0)*cj5*r20*x5711))+((x5712*x5714))+(((-1.0)*r22*sj5*x5709))+(((-1.0)*x5713*x5714))+(((-0.5)*x5713))+(((1.73205080756888)*r22*x5710))+(((-1.0)*(1.5)*(r22*r22))))),-1);
if(!x5715.valid){
continue;
}
CheckValue<IkReal> x5716 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x5709))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((0.866025403784439)*x5710))+(((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x5711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5715.value)))+(x5716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5717=IKsin(j4);
IkReal x5718=((0.866025403784439)*r22);
IkReal x5719=((0.5)*r20);
IkReal x5720=(cj5*x5717);
IkReal x5721=IKcos(j4);
IkReal x5722=((1.0)*cj5*x5721);
IkReal x5723=(r20*sj5);
IkReal x5724=((0.5)*r21*sj5);
IkReal x5725=((0.866025403784439)*cj0*r02);
IkReal x5726=((0.866025403784439)*r12*sj0);
IkReal x5727=(cj0*cj5*x5717);
IkReal x5728=(cj0*sj5*x5717);
IkReal x5729=(cj5*sj0*x5717);
IkReal x5730=(sj0*sj5*x5717);
IkReal x5731=((0.5)*r00);
IkReal x5732=(cj0*cj5*x5721);
IkReal x5733=((0.5)*r01);
IkReal x5734=(cj0*sj5*x5721);
IkReal x5735=((0.5)*r10);
IkReal x5736=(cj5*sj0*x5721);
IkReal x5737=((0.5)*r11);
IkReal x5738=(sj0*sj5*x5721);
IkReal x5739=((0.866025403784439)*cj0*r12);
IkReal x5740=((0.866025403784439)*r02*sj0);
IkReal x5741=(r00*sj0*sj5);
IkReal x5742=((1.0)*cj0*cj5*x5721);
IkReal x5743=((1.0)*cj0*sj5*x5721);
evalcond[0]=((((-1.0)*x5719*x5720))+((x5717*x5718))+((x5717*x5724))+(((-1.0)*x5721*x5723))+(((-1.0)*r21*x5722)));
evalcond[1]=((-0.866025403784439)+((x5718*x5721))+((x5721*x5724))+(((-1.0)*cj5*x5719*x5721))+((x5717*x5723))+((r21*x5720)));
evalcond[2]=(((r00*x5728))+((x5721*x5725))+((r01*x5727))+((r10*x5730))+((x5721*x5726))+((x5733*x5734))+((r11*x5729))+((x5737*x5738))+(((-1.0)*x5731*x5732))+(((-1.0)*x5735*x5736)));
evalcond[3]=((((-1.0)*x5730*x5733))+((x5729*x5731))+((r01*x5736))+((x5717*x5739))+(((-1.0)*x5727*x5735))+(((-1.0)*r11*x5742))+((x5721*x5741))+(((-1.0)*x5717*x5740))+((x5728*x5737))+(((-1.0)*r10*x5743)));
evalcond[4]=((-0.5)+(((-1.0)*r01*x5729))+(((-1.0)*x5733*x5738))+((x5734*x5737))+((r11*x5727))+(((-1.0)*x5732*x5735))+((x5721*x5739))+(((-1.0)*x5721*x5740))+((r10*x5728))+((x5731*x5736))+(((-1.0)*x5717*x5741)));
evalcond[5]=((1.0)+(((-1.0)*x5727*x5731))+((x5728*x5733))+((x5717*x5725))+(((-1.0)*r11*sj0*x5722))+((x5717*x5726))+((x5730*x5737))+(((-1.0)*r10*sj0*sj5*x5721))+(((-1.0)*r00*x5743))+(((-1.0)*r01*x5742))+(((-1.0)*x5729*x5735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5744=((0.866025403784439)*cj0);
IkReal x5745=((0.866025403784439)*sj0);
CheckValue<IkReal> x5746=IKPowWithIntegerCheck(IKsign(((((-1.0)*(0.5)*cj0*r12))+((cj5*r00*x5745))+(((0.5)*r02*sj0))+((r11*sj5*x5744))+(((-1.0)*cj5*r10*x5744))+(((-1.0)*r01*sj5*x5745)))),-1);
if(!x5746.valid){
continue;
}
CheckValue<IkReal> x5747 = IKatan2WithCheck(IkReal((((r20*sj5))+((cj5*r21)))),IkReal(((((-1.0)*(0.5)*cj5*r20))+(((0.866025403784439)*r22))+(((0.5)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5746.value)))+(x5747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5748=IKsin(j4);
IkReal x5749=((0.866025403784439)*r22);
IkReal x5750=((0.5)*r20);
IkReal x5751=(cj5*x5748);
IkReal x5752=IKcos(j4);
IkReal x5753=((1.0)*cj5*x5752);
IkReal x5754=(r20*sj5);
IkReal x5755=((0.5)*r21*sj5);
IkReal x5756=((0.866025403784439)*cj0*r02);
IkReal x5757=((0.866025403784439)*r12*sj0);
IkReal x5758=(cj0*cj5*x5748);
IkReal x5759=(cj0*sj5*x5748);
IkReal x5760=(cj5*sj0*x5748);
IkReal x5761=(sj0*sj5*x5748);
IkReal x5762=((0.5)*r00);
IkReal x5763=(cj0*cj5*x5752);
IkReal x5764=((0.5)*r01);
IkReal x5765=(cj0*sj5*x5752);
IkReal x5766=((0.5)*r10);
IkReal x5767=(cj5*sj0*x5752);
IkReal x5768=((0.5)*r11);
IkReal x5769=(sj0*sj5*x5752);
IkReal x5770=((0.866025403784439)*cj0*r12);
IkReal x5771=((0.866025403784439)*r02*sj0);
IkReal x5772=(r00*sj0*sj5);
IkReal x5773=((1.0)*cj0*cj5*x5752);
IkReal x5774=((1.0)*cj0*sj5*x5752);
evalcond[0]=(((x5748*x5755))+((x5748*x5749))+(((-1.0)*r21*x5753))+(((-1.0)*x5750*x5751))+(((-1.0)*x5752*x5754)));
evalcond[1]=((-0.866025403784439)+((r21*x5751))+(((-1.0)*cj5*x5750*x5752))+((x5749*x5752))+((x5748*x5754))+((x5752*x5755)));
evalcond[2]=(((x5764*x5765))+((r00*x5759))+((r01*x5758))+((x5752*x5757))+((r10*x5761))+((x5752*x5756))+(((-1.0)*x5766*x5767))+((r11*x5760))+(((-1.0)*x5762*x5763))+((x5768*x5769)));
evalcond[3]=((((-1.0)*x5761*x5764))+(((-1.0)*x5748*x5771))+(((-1.0)*r10*x5774))+(((-1.0)*x5758*x5766))+((x5752*x5772))+((x5748*x5770))+((r01*x5767))+((x5759*x5768))+(((-1.0)*r11*x5773))+((x5760*x5762)));
evalcond[4]=((-0.5)+((r11*x5758))+((x5765*x5768))+(((-1.0)*r01*x5760))+((x5762*x5767))+((r10*x5759))+((x5752*x5770))+(((-1.0)*x5764*x5769))+(((-1.0)*x5763*x5766))+(((-1.0)*x5748*x5772))+(((-1.0)*x5752*x5771)));
evalcond[5]=((1.0)+(((-1.0)*x5758*x5762))+((x5748*x5757))+((x5748*x5756))+(((-1.0)*x5760*x5766))+(((-1.0)*r00*x5774))+(((-1.0)*r01*x5773))+((x5761*x5768))+(((-1.0)*r10*sj0*sj5*x5752))+(((-1.0)*r11*sj0*x5753))+((x5759*x5764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5775=(cj3*cj5);
IkReal x5776=(cj3*sj5);
IkReal x5777=((0.5)*r21);
IkReal x5778=((2.0)*r20);
IkReal x5779=(cj0*r10);
IkReal x5780=(cj0*r11);
IkReal x5781=((1.5)*r22);
IkReal x5782=(r00*sj0);
IkReal x5783=(r01*sj0);
IkReal x5784=((0.866025403784439)*cj5*r22);
IkReal x5785=(cj5*r20);
IkReal x5786=((0.866025403784439)*cj0*r12);
IkReal x5787=((0.866025403784439)*r22*sj5);
IkReal x5788=(r21*sj5);
IkReal x5789=((0.866025403784439)*r02*sj0);
IkReal x5790=((1.5)*cj5*r21*sj5);
IkReal x5791=((1.5)*cj5*r20*sj5);
IkReal x5792=cj5*cj5;
IkReal x5793=((1.5)*r20*x5792);
IkReal x5794=((1.5)*r21*x5792);
CheckValue<IkReal> x5795 = IKatan2WithCheck(IkReal((((r20*x5776))+((r21*x5775)))),IkReal((((cj3*(((0.866025403784439)*r22))))+((x5776*x5777))+(((-0.5)*r20*x5775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5795.valid){
continue;
}
CheckValue<IkReal> x5796=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5782*x5784))+((x5783*x5791))+(((-1.0)*x5785*x5789))+(((-1.0)*x5777*x5780))+((x5783*x5794))+(((-1.0)*x5779*x5790))+(((-1.0)*x5782*x5793))+(((-1.0)*x5780*x5791))+(((-1.0)*cj0*r12*x5781))+((x5777*x5783))+((x5788*x5789))+(((-1.0)*x5780*x5794))+(((-1.0)*x5780*x5787))+((x5778*x5782))+(((-1.0)*x5786*x5788))+((x5785*x5786))+((r02*sj0*x5781))+((x5782*x5790))+(((-1.0)*x5778*x5779))+((x5783*x5787))+((x5779*x5784))+((x5779*x5793)))),-1);
if(!x5796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5795.value)+(((1.5707963267949)*(x5796.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5797=IKsin(j4);
IkReal x5798=((0.866025403784439)*r22);
IkReal x5799=((0.5)*r20);
IkReal x5800=(cj5*x5797);
IkReal x5801=IKcos(j4);
IkReal x5802=((1.0)*cj5*x5801);
IkReal x5803=(r20*sj5);
IkReal x5804=((0.5)*r21*sj5);
IkReal x5805=((0.866025403784439)*cj0*r02);
IkReal x5806=((0.866025403784439)*r12*sj0);
IkReal x5807=(cj0*cj5*x5797);
IkReal x5808=(cj0*sj5*x5797);
IkReal x5809=(cj5*sj0*x5797);
IkReal x5810=(sj0*sj5*x5797);
IkReal x5811=((0.5)*r00);
IkReal x5812=(cj0*cj5*x5801);
IkReal x5813=((0.5)*r01);
IkReal x5814=(cj0*sj5*x5801);
IkReal x5815=((0.5)*r10);
IkReal x5816=(cj5*sj0*x5801);
IkReal x5817=((0.5)*r11);
IkReal x5818=(sj0*sj5*x5801);
IkReal x5819=((0.866025403784439)*cj0*r12);
IkReal x5820=((0.866025403784439)*r02*sj0);
IkReal x5821=(r00*sj0*sj5);
IkReal x5822=((1.0)*cj0*cj5*x5801);
IkReal x5823=((1.0)*cj0*sj5*x5801);
evalcond[0]=((((-1.0)*r21*x5802))+(((-1.0)*x5801*x5803))+(((-1.0)*x5799*x5800))+((x5797*x5798))+((x5797*x5804)));
evalcond[1]=((-0.866025403784439)+((x5801*x5804))+((x5798*x5801))+((r21*x5800))+(((-1.0)*cj5*x5799*x5801))+((x5797*x5803)));
evalcond[2]=(((r00*x5808))+((x5801*x5806))+((x5801*x5805))+((x5817*x5818))+(((-1.0)*(0.5)*sj3))+((x5813*x5814))+(((-1.0)*x5811*x5812))+(((-1.0)*x5815*x5816))+((r01*x5807))+((r11*x5809))+((r10*x5810)));
evalcond[3]=(((r10*x5808))+(((-1.0)*x5797*x5821))+(((-1.0)*x5813*x5818))+((x5811*x5816))+((x5814*x5817))+(((-1.0)*r01*x5809))+(((-1.0)*x5812*x5815))+((x5801*x5819))+(((-1.0)*x5801*x5820))+((r11*x5807))+(((0.5)*cj3)));
evalcond[4]=(((x5808*x5817))+((r01*x5816))+((x5797*x5819))+(((-1.0)*r11*x5822))+(((-1.0)*x5807*x5815))+(((-1.0)*x5797*x5820))+((x5801*x5821))+(((-1.0)*r10*x5823))+(((-1.0)*(1.0)*sj3))+(((-1.0)*x5810*x5813))+((x5809*x5811)));
evalcond[5]=((((-1.0)*r00*x5823))+(((-1.0)*(1.0)*cj3))+((x5797*x5806))+((x5797*x5805))+(((-1.0)*x5809*x5815))+(((-1.0)*r01*x5822))+(((-1.0)*r10*sj0*sj5*x5801))+((x5810*x5817))+(((-1.0)*x5807*x5811))+((x5808*x5813))+(((-1.0)*r11*sj0*x5802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5824=((1.73205080756888)*r21);
IkReal x5825=(cj5*r20);
IkReal x5826=(r21*sj5);
IkReal x5827=r20*r20;
IkReal x5828=r21*r21;
IkReal x5829=((1.5)*(cj5*cj5));
CheckValue<IkReal> x5830 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x5824))+(((-1.0)*(1.73205080756888)*r20*sj5)))),IkReal(((((0.866025403784439)*x5825))+(((-1.0)*(1.5)*r22))+(((-0.866025403784439)*x5826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5830.valid){
continue;
}
CheckValue<IkReal> x5831=IKPowWithIntegerCheck(IKsign(((((-3.0)*cj5*r20*x5826))+((x5827*x5829))+(((-1.0)*r22*sj5*x5824))+(((-1.0)*x5828*x5829))+(((-2.0)*x5827))+(((1.73205080756888)*r22*x5825))+(((-1.0)*(1.5)*(r22*r22)))+(((-0.5)*x5828)))),-1);
if(!x5831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5830.value)+(((1.5707963267949)*(x5831.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5832=IKsin(j4);
IkReal x5833=((0.866025403784439)*r22);
IkReal x5834=((0.5)*r20);
IkReal x5835=(cj5*x5832);
IkReal x5836=IKcos(j4);
IkReal x5837=((1.0)*cj5*x5836);
IkReal x5838=(r20*sj5);
IkReal x5839=((0.5)*r21*sj5);
IkReal x5840=((0.866025403784439)*cj0*r02);
IkReal x5841=((0.866025403784439)*r12*sj0);
IkReal x5842=(cj0*cj5*x5832);
IkReal x5843=(cj0*sj5*x5832);
IkReal x5844=(cj5*sj0*x5832);
IkReal x5845=(sj0*sj5*x5832);
IkReal x5846=((0.5)*r00);
IkReal x5847=(cj0*cj5*x5836);
IkReal x5848=((0.5)*r01);
IkReal x5849=(cj0*sj5*x5836);
IkReal x5850=((0.5)*r10);
IkReal x5851=(cj5*sj0*x5836);
IkReal x5852=((0.5)*r11);
IkReal x5853=(sj0*sj5*x5836);
IkReal x5854=((0.866025403784439)*cj0*r12);
IkReal x5855=((0.866025403784439)*r02*sj0);
IkReal x5856=(r00*sj0*sj5);
IkReal x5857=((1.0)*cj0*cj5*x5836);
IkReal x5858=((1.0)*cj0*sj5*x5836);
evalcond[0]=((((-1.0)*r21*x5837))+(((-1.0)*x5836*x5838))+((x5832*x5833))+((x5832*x5839))+(((-1.0)*x5834*x5835)));
evalcond[1]=((-0.866025403784439)+(((-1.0)*cj5*x5834*x5836))+((x5833*x5836))+((x5832*x5838))+((r21*x5835))+((x5836*x5839)));
evalcond[2]=((((-1.0)*x5850*x5851))+((x5852*x5853))+((x5848*x5849))+(((-1.0)*x5846*x5847))+((x5836*x5841))+((r10*x5845))+(((-1.0)*(0.5)*sj3))+((r11*x5844))+((r00*x5843))+((r01*x5842))+((x5836*x5840)));
evalcond[3]=((((-1.0)*x5836*x5855))+(((-1.0)*x5832*x5856))+(((-1.0)*x5848*x5853))+(((-1.0)*x5847*x5850))+((x5849*x5852))+(((-1.0)*r01*x5844))+((x5836*x5854))+((r10*x5843))+(((0.5)*cj3))+((r11*x5842))+((x5846*x5851)));
evalcond[4]=((((-1.0)*x5842*x5850))+(((-1.0)*r11*x5857))+((x5843*x5852))+(((-1.0)*r10*x5858))+((x5836*x5856))+((r01*x5851))+(((-1.0)*(1.0)*sj3))+((x5844*x5846))+(((-1.0)*x5845*x5848))+(((-1.0)*x5832*x5855))+((x5832*x5854)));
evalcond[5]=(((x5843*x5848))+(((-1.0)*r01*x5857))+(((-1.0)*r11*sj0*x5837))+(((-1.0)*r10*sj0*sj5*x5836))+(((-1.0)*(1.0)*cj3))+(((-1.0)*r00*x5858))+((x5832*x5841))+(((-1.0)*x5844*x5850))+((x5832*x5840))+((x5845*x5852))+(((-1.0)*x5842*x5846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5859=(cj5*sj3);
IkReal x5860=(sj3*sj5);
IkReal x5861=((0.866025403784439)*cj0);
IkReal x5862=((0.866025403784439)*sj0);
CheckValue<IkReal> x5863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x5861))+((cj5*r10*x5862))+(((-1.0)*r11*sj5*x5862))+(((0.5)*r12*sj0))+((cj5*r00*x5861))+(((0.5)*cj0*r02)))),-1);
if(!x5863.valid){
continue;
}
CheckValue<IkReal> x5864 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x5860))+(((-1.0)*r21*x5859)))),IkReal(((((-1.0)*(0.866025403784439)*r22*sj3))+(((-0.5)*r21*x5860))+(((0.5)*r20*x5859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5863.value)))+(x5864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5865=IKsin(j4);
IkReal x5866=((0.866025403784439)*r22);
IkReal x5867=((0.5)*r20);
IkReal x5868=(cj5*x5865);
IkReal x5869=IKcos(j4);
IkReal x5870=((1.0)*cj5*x5869);
IkReal x5871=(r20*sj5);
IkReal x5872=((0.5)*r21*sj5);
IkReal x5873=((0.866025403784439)*cj0*r02);
IkReal x5874=((0.866025403784439)*r12*sj0);
IkReal x5875=(cj0*cj5*x5865);
IkReal x5876=(cj0*sj5*x5865);
IkReal x5877=(cj5*sj0*x5865);
IkReal x5878=(sj0*sj5*x5865);
IkReal x5879=((0.5)*r00);
IkReal x5880=(cj0*cj5*x5869);
IkReal x5881=((0.5)*r01);
IkReal x5882=(cj0*sj5*x5869);
IkReal x5883=((0.5)*r10);
IkReal x5884=(cj5*sj0*x5869);
IkReal x5885=((0.5)*r11);
IkReal x5886=(sj0*sj5*x5869);
IkReal x5887=((0.866025403784439)*cj0*r12);
IkReal x5888=((0.866025403784439)*r02*sj0);
IkReal x5889=(r00*sj0*sj5);
IkReal x5890=((1.0)*cj0*cj5*x5869);
IkReal x5891=((1.0)*cj0*sj5*x5869);
evalcond[0]=((((-1.0)*r21*x5870))+(((-1.0)*x5869*x5871))+(((-1.0)*x5867*x5868))+((x5865*x5872))+((x5865*x5866)));
evalcond[1]=((-0.866025403784439)+((x5866*x5869))+((x5865*x5871))+((r21*x5868))+((x5869*x5872))+(((-1.0)*cj5*x5867*x5869)));
evalcond[2]=((((-1.0)*x5883*x5884))+((x5885*x5886))+((r10*x5878))+((r00*x5876))+((r11*x5877))+((x5869*x5873))+(((-1.0)*(0.5)*sj3))+((r01*x5875))+((x5881*x5882))+(((-1.0)*x5879*x5880))+((x5869*x5874)));
evalcond[3]=((((-1.0)*x5865*x5889))+(((-1.0)*x5880*x5883))+((x5879*x5884))+(((-1.0)*r01*x5877))+((x5869*x5887))+((x5882*x5885))+((r11*x5875))+(((-1.0)*x5881*x5886))+(((-1.0)*x5869*x5888))+(((0.5)*cj3))+((r10*x5876)));
evalcond[4]=((((-1.0)*x5875*x5883))+(((-1.0)*x5865*x5888))+(((-1.0)*r11*x5890))+((x5876*x5885))+((x5865*x5887))+((r01*x5884))+((x5877*x5879))+(((-1.0)*r10*x5891))+(((-1.0)*x5878*x5881))+(((-1.0)*(1.0)*sj3))+((x5869*x5889)));
evalcond[5]=((((-1.0)*x5875*x5879))+(((-1.0)*r01*x5890))+(((-1.0)*r11*sj0*x5870))+(((-1.0)*(1.0)*cj3))+(((-1.0)*r10*sj0*sj5*x5869))+((x5876*x5881))+((x5865*x5874))+((x5878*x5885))+((x5865*x5873))+(((-1.0)*r00*x5891))+(((-1.0)*x5877*x5883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5892=(cj0*cj5);
IkReal x5893=(r01*sj5);
IkReal x5894=(cj5*sj0);
IkReal x5895=(r11*sj5);
CheckValue<IkReal> x5896=IKPowWithIntegerCheck(((((-1.0)*(0.866025403784439)*cj1*cj2))+(((-1.0)*(0.866025403784439)*sj1*sj2))),-1);
if(!x5896.valid){
continue;
}
if( IKabs(((x5896.value)*(((((-0.866025403784439)*sj0*x5895))+(((-0.866025403784439)*cj0*x5893))+(((0.866025403784439)*r00*x5892))+(((0.5)*cj1*sj2))+(((0.5)*r12*sj0))+(((0.866025403784439)*r10*x5894))+(((-1.0)*(0.5)*cj2*sj1))+(((0.5)*cj0*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x5895))+((sj0*x5893))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((-1.0)*r00*x5894))+(((0.577350269189626)*cj0*r12))+((r10*x5892)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5896.value)*(((((-0.866025403784439)*sj0*x5895))+(((-0.866025403784439)*cj0*x5893))+(((0.866025403784439)*r00*x5892))+(((0.5)*cj1*sj2))+(((0.5)*r12*sj0))+(((0.866025403784439)*r10*x5894))+(((-1.0)*(0.5)*cj2*sj1))+(((0.5)*cj0*r02))))))+IKsqr(((((-1.0)*cj0*x5895))+((sj0*x5893))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((-1.0)*r00*x5894))+(((0.577350269189626)*cj0*r12))+((r10*x5892))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x5896.value)*(((((-0.866025403784439)*sj0*x5895))+(((-0.866025403784439)*cj0*x5893))+(((0.866025403784439)*r00*x5892))+(((0.5)*cj1*sj2))+(((0.5)*r12*sj0))+(((0.866025403784439)*r10*x5894))+(((-1.0)*(0.5)*cj2*sj1))+(((0.5)*cj0*r02))))), ((((-1.0)*cj0*x5895))+((sj0*x5893))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((-1.0)*r00*x5894))+(((0.577350269189626)*cj0*r12))+((r10*x5892))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x5897=((0.5)*cj1);
IkReal x5898=((0.5)*sj1);
IkReal x5899=IKsin(j3);
IkReal x5900=((0.866025403784439)*cj1*x5899);
IkReal x5901=((0.866025403784439)*sj1*x5899);
IkReal x5902=((0.5)*cj0);
IkReal x5903=((0.5)*sj0);
IkReal x5904=((0.866025403784439)*cj0*cj5);
IkReal x5905=((0.866025403784439)*cj0*sj5);
IkReal x5906=((0.866025403784439)*cj5*sj0);
IkReal x5907=((0.866025403784439)*sj0*sj5);
evalcond[0]=(((cj2*x5901))+((cj2*x5897))+(((-1.0)*(0.5)*r22))+(((-0.866025403784439)*cj5*r20))+((r21*(((0.866025403784439)*sj5))))+(((-1.0)*sj2*x5900))+((sj2*x5898)));
evalcond[1]=((((-1.0)*r01*x5907))+((r02*x5903))+(((-1.0)*r10*x5904))+((r11*x5905))+(((0.866025403784439)*(IKcos(j3))))+((r00*x5906))+(((-1.0)*r12*x5902)));
evalcond[2]=((((-1.0)*r10*x5906))+(((-1.0)*r12*x5903))+(((-1.0)*sj2*x5897))+((cj2*x5898))+((r11*x5907))+((r01*x5905))+(((-1.0)*r02*x5902))+(((-1.0)*sj2*x5901))+(((-1.0)*cj2*x5900))+(((-1.0)*r00*x5904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x5908=(cj0*r02);
IkReal x5909=(r12*sj0);
IkReal x5910=(cj0*cj5*r00);
IkReal x5911=(cj0*r01*sj5);
IkReal x5912=(cj5*r10*sj0);
IkReal x5913=(r11*sj0*sj5);
j4eval[0]=((((1.73205080756888)*x5910))+x5908+x5909+(((-1.73205080756888)*x5911))+(((-1.73205080756888)*x5913))+(((1.73205080756888)*x5912)));
j4eval[1]=IKsign(((((-0.866025403784439)*x5911))+(((0.5)*x5908))+(((-0.866025403784439)*x5913))+(((0.866025403784439)*x5910))+(((0.5)*x5909))+(((0.866025403784439)*x5912))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5914=(r02*sj0);
IkReal x5915=(cj0*r12);
IkReal x5916=(cj0*cj5*r10);
IkReal x5917=(cj0*r11*sj5);
IkReal x5918=(cj5*r00*sj0);
IkReal x5919=(r01*sj0*sj5);
j4eval[0]=(x5914+(((-1.73205080756888)*x5916))+(((1.73205080756888)*x5917))+(((1.73205080756888)*x5918))+(((-1.73205080756888)*x5919))+(((-1.0)*x5915)));
j4eval[1]=IKsign(((((0.866025403784439)*x5917))+(((-0.866025403784439)*x5919))+(((0.5)*x5914))+(((-0.866025403784439)*x5916))+(((0.866025403784439)*x5918))+(((-0.5)*x5915))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5920=r20*r20;
IkReal x5921=r21*r21;
IkReal x5922=r22*r22;
IkReal x5923=(cj5*r20*r22);
IkReal x5924=(r21*r22*sj5);
IkReal x5925=(cj5*r20*r21*sj5);
IkReal x5926=cj5*cj5;
IkReal x5927=(x5920*x5926);
IkReal x5928=(x5921*x5926);
j4eval[0]=((((-1.0)*x5921))+(((-6.0)*x5925))+(((-4.0)*x5920))+(((-3.0)*x5922))+(((3.46410161513775)*x5923))+(((3.0)*x5927))+(((-3.46410161513775)*x5924))+(((-3.0)*x5928)));
j4eval[1]=IKsign(((((-0.866025403784439)*x5924))+(((0.866025403784439)*x5923))+(((-1.5)*x5925))+(((-0.75)*x5922))+(((-0.25)*x5921))+(((-0.75)*x5928))+(((0.75)*x5927))+(((-1.0)*x5920))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5929=r20*r20;
IkReal x5930=r21*r21;
IkReal x5931=((0.866025403784439)*r22);
IkReal x5932=(cj5*r20);
IkReal x5933=(r21*sj5);
IkReal x5934=((0.75)*(cj5*cj5));
IkReal x5935=(cj5*r21);
IkReal x5936=((0.866025403784439)*cj1*cj2);
IkReal x5937=(r20*sj5);
IkReal x5938=(cj1*sj2);
IkReal x5939=((0.866025403784439)*cj3*r22);
IkReal x5940=(cj2*sj1);
IkReal x5941=((0.866025403784439)*sj1*sj2);
IkReal x5942=((0.5)*cj1*cj3*sj2);
IkReal x5943=((0.5)*cj1*sj2*sj3);
IkReal x5944=((0.5)*cj2*cj3*sj1);
IkReal x5945=((0.5)*cj2*sj1*sj3);
IkReal x5946=((0.75)*r22);
IkReal x5947=((0.433012701892219)*cj1*cj2);
IkReal x5948=((0.433012701892219)*r22*sj3);
IkReal x5949=((0.433012701892219)*sj1*sj2);
IkReal x5950=(cj1*cj3*sj2);
IkReal x5951=((0.25)*cj1*sj2*sj3);
IkReal x5952=((1.0)*cj2*cj3*sj1);
IkReal x5953=((0.25)*cj2*sj1*sj3);
CheckValue<IkReal> x5954 = IKatan2WithCheck(IkReal((((x5933*x5944))+(((-1.0)*x5933*x5942))+(((-1.0)*x5932*x5944))+(((-1.0)*x5936*x5937))+((x5939*x5940))+((x5937*x5945))+(((-1.0)*x5937*x5941))+((x5932*x5942))+((x5935*x5945))+(((-1.0)*x5935*x5941))+(((-1.0)*x5937*x5943))+(((-1.0)*x5938*x5939))+(((-1.0)*x5935*x5943))+(((-1.0)*x5935*x5936)))),IkReal(((((-1.0)*x5933*x5949))+(((-1.0)*x5933*x5947))+((x5935*x5950))+((x5933*x5953))+(((-1.0)*x5938*x5948))+((x5937*x5950))+(((-1.0)*sj1*sj2*x5946))+(((-1.0)*x5935*x5952))+((x5932*x5949))+(((-1.0)*x5932*x5953))+(((-1.0)*x5933*x5951))+(((-1.0)*cj1*cj2*x5946))+((x5932*x5951))+((x5940*x5948))+(((-1.0)*x5937*x5952))+((x5932*x5947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5954.valid){
continue;
}
CheckValue<IkReal> x5955=IKPowWithIntegerCheck(IKsign((((x5931*x5932))+(((-1.0)*x5930*x5934))+(((-1.0)*x5929))+(((-0.25)*x5930))+((x5929*x5934))+(((-1.0)*x5931*x5933))+(((-1.0)*(0.75)*(r22*r22)))+(((-1.5)*cj5*r20*x5933)))),-1);
if(!x5955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5954.value)+(((1.5707963267949)*(x5955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5956=(cj2*cj3);
IkReal x5957=IKsin(j4);
IkReal x5958=((0.866025403784439)*r22);
IkReal x5959=((1.0)*cj1);
IkReal x5960=(cj3*sj2);
IkReal x5961=((0.5)*r20);
IkReal x5962=(cj5*x5957);
IkReal x5963=IKcos(j4);
IkReal x5964=((1.0)*cj5*x5963);
IkReal x5965=(r20*sj5);
IkReal x5966=((0.5)*r21*sj5);
IkReal x5967=((0.866025403784439)*cj1);
IkReal x5968=((0.866025403784439)*sj1);
IkReal x5969=((0.5)*cj1*sj3);
IkReal x5970=((0.5)*sj1*sj3);
IkReal x5971=((0.866025403784439)*cj0*r12);
IkReal x5972=((0.866025403784439)*r02*sj0);
IkReal x5973=(cj0*cj5*x5957);
IkReal x5974=(cj0*sj5*x5957);
IkReal x5975=((0.5)*r10);
IkReal x5976=(cj0*cj5*x5963);
IkReal x5977=((0.5)*r11);
IkReal x5978=(cj0*sj5*x5963);
IkReal x5979=((0.5)*r00);
IkReal x5980=(cj5*sj0*x5963);
IkReal x5981=(cj5*sj0*x5957);
IkReal x5982=(r00*sj0*sj5);
IkReal x5983=((0.5)*r01);
IkReal x5984=(sj0*sj5*x5963);
IkReal x5985=((1.0)*cj0*cj5*x5963);
IkReal x5986=((1.0)*cj0*sj5*x5963);
IkReal x5987=(sj0*sj5*x5957);
IkReal x5988=((0.866025403784439)*cj0*r02);
IkReal x5989=((0.866025403784439)*r12*sj0);
evalcond[0]=((((-1.0)*r21*x5964))+(((-1.0)*x5961*x5962))+((sj1*x5956))+((x5957*x5966))+(((-1.0)*x5963*x5965))+((x5957*x5958))+(((-1.0)*x5959*x5960)));
evalcond[1]=(((r21*x5962))+(((-1.0)*cj5*x5961*x5963))+(((-1.0)*cj2*x5967))+((x5957*x5965))+(((-1.0)*sj2*x5968))+(((-1.0)*sj2*x5969))+((cj2*x5970))+((x5963*x5966))+((x5958*x5963)));
evalcond[2]=((((-1.0)*x5983*x5984))+(((-1.0)*x5957*x5982))+(((-1.0)*x5963*x5972))+((x5963*x5971))+((x5979*x5980))+((r11*x5973))+((x5977*x5978))+(((0.5)*cj3))+(((-1.0)*x5975*x5976))+(((-1.0)*r01*x5981))+((r10*x5974)));
evalcond[3]=(((r01*x5980))+((x5957*x5971))+(((-1.0)*x5983*x5987))+(((-1.0)*x5973*x5975))+((x5974*x5977))+(((-1.0)*r11*x5985))+(((-1.0)*x5957*x5972))+((x5963*x5982))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r10*x5986))+((x5979*x5981)));
evalcond[4]=((((-1.0)*x5956*x5959))+(((-1.0)*r11*sj0*x5964))+(((-1.0)*r01*x5985))+((x5957*x5989))+((x5957*x5988))+(((-1.0)*x5973*x5979))+(((-1.0)*r10*sj0*sj5*x5963))+(((-1.0)*r00*x5986))+(((-1.0)*sj1*x5960))+((x5977*x5987))+(((-1.0)*x5975*x5981))+((x5974*x5983)));
evalcond[5]=((((-1.0)*x5976*x5979))+((r11*x5981))+(((-1.0)*x5975*x5980))+(((-1.0)*cj2*x5968))+((r10*x5987))+((x5963*x5988))+((r00*x5974))+((x5963*x5989))+((sj2*x5967))+((r01*x5973))+(((-1.0)*cj2*x5969))+(((-1.0)*sj2*x5970))+((x5977*x5984))+((x5978*x5983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5990=((0.866025403784439)*cj0);
IkReal x5991=(cj5*r10);
IkReal x5992=(r11*sj5);
IkReal x5993=((0.866025403784439)*sj0);
IkReal x5994=(cj5*r00);
IkReal x5995=(r01*sj5);
IkReal x5996=((1.0)*r21);
IkReal x5997=(cj1*cj2*cj3*cj5);
IkReal x5998=((1.0)*r20);
IkReal x5999=(cj1*cj2*cj3*sj5);
IkReal x6000=(cj3*cj5*sj1*sj2);
IkReal x6001=(cj3*sj1*sj2*sj5);
IkReal x6002=(cj5*r01);
IkReal x6003=(cj0*cj1*cj3*sj2);
IkReal x6004=(r00*sj5);
IkReal x6005=(cj5*r11);
IkReal x6006=(cj1*cj3*sj0*sj2);
IkReal x6007=(r10*sj5);
IkReal x6008=((1.0)*cj0*cj2*cj3*sj1);
IkReal x6009=((1.0)*cj2*cj3*sj0*sj1);
IkReal x6010=((0.866025403784439)*cj3*r22);
IkReal x6011=(cj1*sj2);
IkReal x6012=((0.866025403784439)*cj0*cj3*r02);
IkReal x6013=(cj2*sj1);
IkReal x6014=((0.5)*r20);
IkReal x6015=((0.5)*r21);
IkReal x6016=((0.866025403784439)*cj3*r12*sj0);
IkReal x6017=((0.5)*cj0*cj1*cj3*sj2);
IkReal x6018=((0.5)*cj0*cj2*cj3*sj1);
IkReal x6019=((0.5)*cj1*cj3*sj0*sj2);
IkReal x6020=((0.5)*cj2*cj3*sj0*sj1);
CheckValue<IkReal> x6021 = IKatan2WithCheck(IkReal((((x6003*x6004))+(((-1.0)*x5998*x6001))+(((-1.0)*x6004*x6008))+((x6006*x6007))+((x6005*x6006))+(((-1.0)*x6002*x6008))+(((-1.0)*x5996*x5997))+(((-1.0)*x6005*x6009))+((x6002*x6003))+(((-1.0)*x5996*x6000))+(((-1.0)*x5998*x5999))+(((-1.0)*x6007*x6009)))),IkReal(((((-1.0)*x6012*x6013))+(((-1.0)*x5991*x6019))+((x6011*x6016))+(((-1.0)*x6001*x6015))+(((-1.0)*cj1*cj2*x6010))+((x6011*x6012))+((x5997*x6014))+(((-1.0)*x5999*x6015))+((x5994*x6018))+(((-1.0)*x5994*x6017))+(((-1.0)*x5995*x6018))+(((-1.0)*x6013*x6016))+((x6000*x6014))+((x5995*x6017))+((x5991*x6020))+((x5992*x6019))+(((-1.0)*x5992*x6020))+(((-1.0)*sj1*sj2*x6010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6021.valid){
continue;
}
CheckValue<IkReal> x6022=IKPowWithIntegerCheck(IKsign((((x5990*x5992))+(((-0.5)*cj0*r12))+(((-1.0)*x5990*x5991))+(((-1.0)*x5993*x5995))+((r02*(((0.5)*sj0))))+((x5993*x5994)))),-1);
if(!x6022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6021.value)+(((1.5707963267949)*(x6022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6023=(cj2*cj3);
IkReal x6024=IKsin(j4);
IkReal x6025=((0.866025403784439)*r22);
IkReal x6026=((1.0)*cj1);
IkReal x6027=(cj3*sj2);
IkReal x6028=((0.5)*r20);
IkReal x6029=(cj5*x6024);
IkReal x6030=IKcos(j4);
IkReal x6031=((1.0)*cj5*x6030);
IkReal x6032=(r20*sj5);
IkReal x6033=((0.5)*r21*sj5);
IkReal x6034=((0.866025403784439)*cj1);
IkReal x6035=((0.866025403784439)*sj1);
IkReal x6036=((0.5)*cj1*sj3);
IkReal x6037=((0.5)*sj1*sj3);
IkReal x6038=((0.866025403784439)*cj0*r12);
IkReal x6039=((0.866025403784439)*r02*sj0);
IkReal x6040=(cj0*cj5*x6024);
IkReal x6041=(cj0*sj5*x6024);
IkReal x6042=((0.5)*r10);
IkReal x6043=(cj0*cj5*x6030);
IkReal x6044=((0.5)*r11);
IkReal x6045=(cj0*sj5*x6030);
IkReal x6046=((0.5)*r00);
IkReal x6047=(cj5*sj0*x6030);
IkReal x6048=(cj5*sj0*x6024);
IkReal x6049=(r00*sj0*sj5);
IkReal x6050=((0.5)*r01);
IkReal x6051=(sj0*sj5*x6030);
IkReal x6052=((1.0)*cj0*cj5*x6030);
IkReal x6053=((1.0)*cj0*sj5*x6030);
IkReal x6054=(sj0*sj5*x6024);
IkReal x6055=((0.866025403784439)*cj0*r02);
IkReal x6056=((0.866025403784439)*r12*sj0);
evalcond[0]=(((x6024*x6025))+((x6024*x6033))+(((-1.0)*x6030*x6032))+((sj1*x6023))+(((-1.0)*x6026*x6027))+(((-1.0)*x6028*x6029))+(((-1.0)*r21*x6031)));
evalcond[1]=((((-1.0)*cj2*x6034))+(((-1.0)*sj2*x6035))+((cj2*x6037))+(((-1.0)*sj2*x6036))+((x6030*x6033))+((r21*x6029))+((x6025*x6030))+(((-1.0)*cj5*x6028*x6030))+((x6024*x6032)));
evalcond[2]=((((-1.0)*x6050*x6051))+(((-1.0)*x6024*x6049))+((x6046*x6047))+((r11*x6040))+((r10*x6041))+(((-1.0)*x6030*x6039))+(((0.5)*cj3))+((x6030*x6038))+(((-1.0)*x6042*x6043))+((x6044*x6045))+(((-1.0)*r01*x6048)));
evalcond[3]=(((x6046*x6048))+(((-1.0)*x6040*x6042))+((x6041*x6044))+((x6030*x6049))+((r01*x6047))+(((-1.0)*x6024*x6039))+(((-1.0)*x6050*x6054))+(((-1.0)*(1.0)*sj3))+((x6024*x6038))+(((-1.0)*r10*x6053))+(((-1.0)*r11*x6052)));
evalcond[4]=(((x6044*x6054))+((x6024*x6055))+(((-1.0)*x6040*x6046))+((x6024*x6056))+(((-1.0)*r10*sj0*sj5*x6030))+(((-1.0)*x6042*x6048))+(((-1.0)*sj1*x6027))+(((-1.0)*x6023*x6026))+(((-1.0)*r01*x6052))+((x6041*x6050))+(((-1.0)*r11*sj0*x6031))+(((-1.0)*r00*x6053)));
evalcond[5]=((((-1.0)*sj2*x6037))+((r11*x6048))+(((-1.0)*x6043*x6046))+(((-1.0)*x6042*x6047))+((x6030*x6055))+((r00*x6041))+((x6030*x6056))+(((-1.0)*cj2*x6035))+((r10*x6054))+((r01*x6040))+((x6045*x6050))+((x6044*x6051))+(((-1.0)*cj2*x6036))+((sj2*x6034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6057=((0.866025403784439)*cj0);
IkReal x6058=(cj5*r00);
IkReal x6059=(r01*sj5);
IkReal x6060=((0.866025403784439)*sj0);
IkReal x6061=(cj5*r10);
IkReal x6062=(r11*sj5);
IkReal x6063=(cj5*sj3);
IkReal x6064=(sj3*sj5);
IkReal x6065=(cj5*r11);
IkReal x6066=(cj0*cj1*cj3*sj2);
IkReal x6067=(r10*sj5);
IkReal x6068=(cj5*r01);
IkReal x6069=(cj2*cj3*sj0*sj1);
IkReal x6070=(r00*sj5);
IkReal x6071=((1.0)*cj0*cj2*cj3*sj1);
IkReal x6072=((1.0)*cj1*cj3*sj0*sj2);
IkReal x6073=(cj1*sj2);
IkReal x6074=((0.866025403784439)*cj0*cj3*r12);
IkReal x6075=(cj2*sj1);
IkReal x6076=((0.866025403784439)*cj3*r02*sj0);
IkReal x6077=((0.5)*cj0*cj1*cj3*sj2);
IkReal x6078=((0.5)*cj0*cj2*cj3*sj1);
IkReal x6079=((0.5)*cj1*cj3*sj0*sj2);
IkReal x6080=((0.5)*cj2*cj3*sj0*sj1);
CheckValue<IkReal> x6081=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6060*x6062))+(((-1.0)*x6057*x6059))+((r02*(((0.5)*cj0))))+((x6060*x6061))+((x6057*x6058))+((r12*(((0.5)*sj0)))))),-1);
if(!x6081.valid){
continue;
}
CheckValue<IkReal> x6082 = IKatan2WithCheck(IkReal(((((-1.0)*x6065*x6071))+(((-1.0)*x6067*x6071))+((x6066*x6067))+(((-1.0)*r20*x6064))+((x6069*x6070))+((x6065*x6066))+((x6068*x6069))+(((-1.0)*r21*x6063))+(((-1.0)*x6068*x6072))+(((-1.0)*x6070*x6072)))),IkReal(((((-1.0)*(0.866025403784439)*r22*sj3))+((x6073*x6074))+(((0.5)*r20*x6063))+(((-1.0)*x6073*x6076))+(((-1.0)*x6062*x6078))+((x6075*x6076))+(((-0.5)*r21*x6064))+(((-1.0)*x6061*x6077))+((x6061*x6078))+(((-1.0)*x6074*x6075))+((x6059*x6080))+((x6062*x6077))+(((-1.0)*x6059*x6079))+(((-1.0)*x6058*x6080))+((x6058*x6079)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6081.value)))+(x6082.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6083=(cj2*cj3);
IkReal x6084=IKsin(j4);
IkReal x6085=((0.866025403784439)*r22);
IkReal x6086=((1.0)*cj1);
IkReal x6087=(cj3*sj2);
IkReal x6088=((0.5)*r20);
IkReal x6089=(cj5*x6084);
IkReal x6090=IKcos(j4);
IkReal x6091=((1.0)*cj5*x6090);
IkReal x6092=(r20*sj5);
IkReal x6093=((0.5)*r21*sj5);
IkReal x6094=((0.866025403784439)*cj1);
IkReal x6095=((0.866025403784439)*sj1);
IkReal x6096=((0.5)*cj1*sj3);
IkReal x6097=((0.5)*sj1*sj3);
IkReal x6098=((0.866025403784439)*cj0*r12);
IkReal x6099=((0.866025403784439)*r02*sj0);
IkReal x6100=(cj0*cj5*x6084);
IkReal x6101=(cj0*sj5*x6084);
IkReal x6102=((0.5)*r10);
IkReal x6103=(cj0*cj5*x6090);
IkReal x6104=((0.5)*r11);
IkReal x6105=(cj0*sj5*x6090);
IkReal x6106=((0.5)*r00);
IkReal x6107=(cj5*sj0*x6090);
IkReal x6108=(cj5*sj0*x6084);
IkReal x6109=(r00*sj0*sj5);
IkReal x6110=((0.5)*r01);
IkReal x6111=(sj0*sj5*x6090);
IkReal x6112=((1.0)*cj0*cj5*x6090);
IkReal x6113=((1.0)*cj0*sj5*x6090);
IkReal x6114=(sj0*sj5*x6084);
IkReal x6115=((0.866025403784439)*cj0*r02);
IkReal x6116=((0.866025403784439)*r12*sj0);
evalcond[0]=(((sj1*x6083))+(((-1.0)*x6090*x6092))+(((-1.0)*x6088*x6089))+(((-1.0)*r21*x6091))+((x6084*x6085))+((x6084*x6093))+(((-1.0)*x6086*x6087)));
evalcond[1]=((((-1.0)*sj2*x6096))+(((-1.0)*cj5*x6088*x6090))+((x6085*x6090))+((r21*x6089))+((x6090*x6093))+(((-1.0)*sj2*x6095))+((x6084*x6092))+(((-1.0)*cj2*x6094))+((cj2*x6097)));
evalcond[2]=((((-1.0)*x6084*x6109))+(((-1.0)*x6102*x6103))+((x6090*x6098))+((r11*x6100))+(((-1.0)*x6110*x6111))+((x6106*x6107))+(((-1.0)*r01*x6108))+(((-1.0)*x6090*x6099))+(((0.5)*cj3))+((x6104*x6105))+((r10*x6101)));
evalcond[3]=((((-1.0)*r11*x6112))+((r01*x6107))+(((-1.0)*x6110*x6114))+(((-1.0)*x6100*x6102))+((x6101*x6104))+(((-1.0)*x6084*x6099))+((x6090*x6109))+((x6084*x6098))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r10*x6113))+((x6106*x6108)));
evalcond[4]=((((-1.0)*r01*x6112))+((x6104*x6114))+((x6084*x6115))+(((-1.0)*x6102*x6108))+((x6084*x6116))+(((-1.0)*x6083*x6086))+(((-1.0)*r00*x6113))+(((-1.0)*r10*sj0*sj5*x6090))+(((-1.0)*x6100*x6106))+(((-1.0)*r11*sj0*x6091))+(((-1.0)*sj1*x6087))+((x6101*x6110)));
evalcond[5]=((((-1.0)*x6102*x6107))+((r10*x6114))+(((-1.0)*sj2*x6097))+((x6090*x6115))+((x6105*x6110))+((x6090*x6116))+(((-1.0)*cj2*x6095))+((x6104*x6111))+((sj2*x6094))+(((-1.0)*x6103*x6106))+((r01*x6100))+((r11*x6108))+((r00*x6101))+(((-1.0)*cj2*x6096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x6117=IKPowWithIntegerCheck(((((0.866025403784439)*cj2*sj1))+(((-1.0)*(0.866025403784439)*cj1*sj2))),-1);
if(!x6117.valid){
continue;
}
if( IKabs(((x6117.value)*(((((-1.0)*(0.5)*cj1*cj2))+(((-1.0)*(0.5)*sj1*sj2))+(((0.866025403784439)*cj5*r20))+(((0.5)*r22))+(((-1.0)*(0.866025403784439)*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6117.value)*(((((-1.0)*(0.5)*cj1*cj2))+(((-1.0)*(0.5)*sj1*sj2))+(((0.866025403784439)*cj5*r20))+(((0.5)*r22))+(((-1.0)*(0.866025403784439)*r21*sj5))))))+IKsqr(((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x6117.value)*(((((-1.0)*(0.5)*cj1*cj2))+(((-1.0)*(0.5)*sj1*sj2))+(((0.866025403784439)*cj5*r20))+(((0.5)*r22))+(((-1.0)*(0.866025403784439)*r21*sj5))))), ((((-1.0)*(1.0)*cj0*r11*sj5))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(0.577350269189626)*r02*sj0))+(((0.577350269189626)*cj0*r12))+(((-1.0)*(1.0)*cj5*r00*sj0))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x6118=((0.5)*cj1);
IkReal x6119=((0.5)*sj1);
IkReal x6120=IKsin(j3);
IkReal x6121=((0.866025403784439)*cj1*x6120);
IkReal x6122=((0.866025403784439)*sj1*x6120);
IkReal x6123=((0.5)*cj0);
IkReal x6124=((0.5)*sj0);
IkReal x6125=((0.866025403784439)*cj0*cj5);
IkReal x6126=((0.866025403784439)*cj0*sj5);
IkReal x6127=((0.866025403784439)*cj5*sj0);
IkReal x6128=((0.866025403784439)*sj0*sj5);
evalcond[0]=(((sj2*x6119))+(((-1.0)*(0.5)*r22))+((cj2*x6122))+(((-1.0)*sj2*x6121))+((cj2*x6118))+(((-0.866025403784439)*cj5*r20))+((r21*(((0.866025403784439)*sj5)))));
evalcond[1]=(((r00*x6127))+(((-1.0)*r01*x6128))+(((-1.0)*r12*x6123))+(((-1.0)*r10*x6125))+((r11*x6126))+(((0.866025403784439)*(IKcos(j3))))+((r02*x6124)));
evalcond[2]=((((-1.0)*sj2*x6118))+(((-1.0)*cj2*x6121))+((r01*x6126))+(((-1.0)*r02*x6123))+(((-1.0)*r12*x6124))+(((-1.0)*sj2*x6122))+(((-1.0)*r10*x6127))+(((-1.0)*r00*x6125))+((r11*x6128))+((cj2*x6119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x6129=(cj0*r02);
IkReal x6130=(r12*sj0);
IkReal x6131=(cj0*cj5*r00);
IkReal x6132=(cj0*r01*sj5);
IkReal x6133=(cj5*r10*sj0);
IkReal x6134=(r11*sj0*sj5);
j4eval[0]=(x6130+x6129+(((-1.73205080756888)*x6132))+(((1.73205080756888)*x6131))+(((1.73205080756888)*x6133))+(((-1.73205080756888)*x6134)));
j4eval[1]=IKsign(((((0.866025403784439)*x6133))+(((-0.866025403784439)*x6134))+(((0.866025403784439)*x6131))+(((0.5)*x6129))+(((-0.866025403784439)*x6132))+(((0.5)*x6130))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6135=(r02*sj0);
IkReal x6136=(cj0*r12);
IkReal x6137=(cj0*cj5*r10);
IkReal x6138=(cj0*r11*sj5);
IkReal x6139=(cj5*r00*sj0);
IkReal x6140=(r01*sj0*sj5);
j4eval[0]=(x6135+(((-1.0)*x6136))+(((1.73205080756888)*x6138))+(((-1.73205080756888)*x6137))+(((1.73205080756888)*x6139))+(((-1.73205080756888)*x6140)));
j4eval[1]=IKsign(((((-0.866025403784439)*x6137))+(((-0.866025403784439)*x6140))+(((0.866025403784439)*x6139))+(((0.866025403784439)*x6138))+(((-0.5)*x6136))+(((0.5)*x6135))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6141=r20*r20;
IkReal x6142=r21*r21;
IkReal x6143=r22*r22;
IkReal x6144=(cj5*r20*r22);
IkReal x6145=(r21*r22*sj5);
IkReal x6146=(cj5*r20*r21*sj5);
IkReal x6147=cj5*cj5;
IkReal x6148=(x6141*x6147);
IkReal x6149=(x6142*x6147);
j4eval[0]=((((3.46410161513775)*x6144))+(((-6.0)*x6146))+(((3.0)*x6148))+(((-4.0)*x6141))+(((-1.0)*x6142))+(((-3.0)*x6149))+(((-3.46410161513775)*x6145))+(((-3.0)*x6143)));
j4eval[1]=IKsign(((((-1.5)*x6146))+(((-0.75)*x6143))+(((-1.0)*x6141))+(((-0.866025403784439)*x6145))+(((0.866025403784439)*x6144))+(((-0.75)*x6149))+(((-0.25)*x6142))+(((0.75)*x6148))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6150=r20*r20;
IkReal x6151=r21*r21;
IkReal x6152=((0.866025403784439)*r22);
IkReal x6153=(cj5*r20);
IkReal x6154=(r21*sj5);
IkReal x6155=((0.75)*(cj5*cj5));
IkReal x6156=(cj5*r21);
IkReal x6157=((0.866025403784439)*cj1*cj2);
IkReal x6158=(r20*sj5);
IkReal x6159=(cj1*sj2);
IkReal x6160=((0.866025403784439)*cj3*r22);
IkReal x6161=(cj2*sj1);
IkReal x6162=((0.866025403784439)*sj1*sj2);
IkReal x6163=((0.5)*cj1*cj3*sj2);
IkReal x6164=((0.5)*cj1*sj2*sj3);
IkReal x6165=((0.5)*cj2*cj3*sj1);
IkReal x6166=((0.5)*cj2*sj1*sj3);
IkReal x6167=((0.75)*r22);
IkReal x6168=((0.433012701892219)*cj1*cj2);
IkReal x6169=((0.433012701892219)*r22*sj3);
IkReal x6170=((0.433012701892219)*sj1*sj2);
IkReal x6171=(cj1*cj3*sj2);
IkReal x6172=((0.25)*cj1*sj2*sj3);
IkReal x6173=((1.0)*cj2*cj3*sj1);
IkReal x6174=((0.25)*cj2*sj1*sj3);
CheckValue<IkReal> x6175=IKPowWithIntegerCheck(IKsign(((((-0.25)*x6151))+(((-1.0)*x6152*x6154))+((x6152*x6153))+(((-1.0)*x6150))+(((-1.5)*cj5*r20*x6154))+(((-1.0)*(0.75)*(r22*r22)))+(((-1.0)*x6151*x6155))+((x6150*x6155)))),-1);
if(!x6175.valid){
continue;
}
CheckValue<IkReal> x6176 = IKatan2WithCheck(IkReal(((((-1.0)*x6156*x6157))+((x6156*x6166))+(((-1.0)*x6158*x6164))+(((-1.0)*x6157*x6158))+((x6154*x6165))+(((-1.0)*x6158*x6162))+((x6160*x6161))+(((-1.0)*x6153*x6165))+(((-1.0)*x6154*x6163))+((x6153*x6163))+(((-1.0)*x6159*x6160))+(((-1.0)*x6156*x6164))+((x6158*x6166))+(((-1.0)*x6156*x6162)))),IkReal(((((-1.0)*x6158*x6173))+((x6156*x6171))+((x6161*x6169))+(((-1.0)*x6159*x6169))+(((-1.0)*x6154*x6170))+((x6154*x6174))+(((-1.0)*x6154*x6168))+((x6153*x6170))+((x6153*x6172))+((x6153*x6168))+(((-1.0)*cj1*cj2*x6167))+(((-1.0)*x6153*x6174))+(((-1.0)*x6156*x6173))+((x6158*x6171))+(((-1.0)*sj1*sj2*x6167))+(((-1.0)*x6154*x6172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6175.value)))+(x6176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6177=(cj2*cj3);
IkReal x6178=IKsin(j4);
IkReal x6179=((0.866025403784439)*r22);
IkReal x6180=((1.0)*cj1);
IkReal x6181=(cj3*sj2);
IkReal x6182=((0.5)*r20);
IkReal x6183=(cj5*x6178);
IkReal x6184=IKcos(j4);
IkReal x6185=((1.0)*cj5*x6184);
IkReal x6186=(r20*sj5);
IkReal x6187=((0.5)*r21*sj5);
IkReal x6188=((0.866025403784439)*cj1);
IkReal x6189=((0.866025403784439)*sj1);
IkReal x6190=((0.5)*cj1*sj3);
IkReal x6191=((0.5)*sj1*sj3);
IkReal x6192=((0.866025403784439)*cj0*r12);
IkReal x6193=((0.866025403784439)*r02*sj0);
IkReal x6194=(cj0*cj5*x6178);
IkReal x6195=(cj0*sj5*x6178);
IkReal x6196=((0.5)*r10);
IkReal x6197=(cj0*cj5*x6184);
IkReal x6198=((0.5)*r11);
IkReal x6199=(cj0*sj5*x6184);
IkReal x6200=((0.5)*r00);
IkReal x6201=(cj5*sj0*x6184);
IkReal x6202=(cj5*sj0*x6178);
IkReal x6203=(r00*sj0*sj5);
IkReal x6204=((0.5)*r01);
IkReal x6205=(sj0*sj5*x6184);
IkReal x6206=((1.0)*cj0*cj5*x6184);
IkReal x6207=((1.0)*cj0*sj5*x6184);
IkReal x6208=(sj0*sj5*x6178);
IkReal x6209=((0.866025403784439)*cj0*r02);
IkReal x6210=((0.866025403784439)*r12*sj0);
evalcond[0]=((((-1.0)*x6180*x6181))+((sj1*x6177))+((x6178*x6179))+(((-1.0)*x6182*x6183))+(((-1.0)*x6184*x6186))+(((-1.0)*r21*x6185))+((x6178*x6187)));
evalcond[1]=(((x6178*x6186))+((x6184*x6187))+(((-1.0)*sj2*x6189))+((r21*x6183))+((cj2*x6191))+(((-1.0)*sj2*x6190))+(((-1.0)*cj2*x6188))+((x6179*x6184))+(((-1.0)*cj5*x6182*x6184)));
evalcond[2]=(((x6198*x6199))+((r11*x6194))+(((-1.0)*x6196*x6197))+((r10*x6195))+(((-1.0)*x6204*x6205))+(((-1.0)*x6184*x6193))+(((-1.0)*r01*x6202))+(((0.5)*cj3))+(((-1.0)*x6178*x6203))+((x6184*x6192))+((x6200*x6201)));
evalcond[3]=(((r01*x6201))+(((-1.0)*r11*x6206))+((x6184*x6203))+((x6195*x6198))+(((-1.0)*x6204*x6208))+((x6178*x6192))+(((-1.0)*x6194*x6196))+(((-1.0)*x6178*x6193))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r10*x6207))+((x6200*x6202)));
evalcond[4]=((((-1.0)*r01*x6206))+(((-1.0)*r11*sj0*x6185))+((x6195*x6204))+(((-1.0)*x6194*x6200))+(((-1.0)*x6196*x6202))+(((-1.0)*r10*sj0*sj5*x6184))+((x6178*x6209))+((x6178*x6210))+((x6198*x6208))+(((-1.0)*x6177*x6180))+(((-1.0)*sj1*x6181))+(((-1.0)*r00*x6207)));
evalcond[5]=(((x6199*x6204))+((r00*x6195))+((r10*x6208))+((x6184*x6209))+((sj2*x6188))+(((-1.0)*x6196*x6201))+((r11*x6202))+((x6198*x6205))+(((-1.0)*cj2*x6190))+((r01*x6194))+(((-1.0)*x6197*x6200))+(((-1.0)*cj2*x6189))+(((-1.0)*sj2*x6191))+((x6184*x6210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6211=((0.866025403784439)*cj0);
IkReal x6212=(cj5*r10);
IkReal x6213=(r11*sj5);
IkReal x6214=((0.866025403784439)*sj0);
IkReal x6215=(cj5*r00);
IkReal x6216=(r01*sj5);
IkReal x6217=((1.0)*r21);
IkReal x6218=(cj1*cj2*cj3*cj5);
IkReal x6219=((1.0)*r20);
IkReal x6220=(cj1*cj2*cj3*sj5);
IkReal x6221=(cj3*cj5*sj1*sj2);
IkReal x6222=(cj3*sj1*sj2*sj5);
IkReal x6223=(cj5*r01);
IkReal x6224=(cj0*cj1*cj3*sj2);
IkReal x6225=(r00*sj5);
IkReal x6226=(cj5*r11);
IkReal x6227=(cj1*cj3*sj0*sj2);
IkReal x6228=(r10*sj5);
IkReal x6229=((1.0)*cj0*cj2*cj3*sj1);
IkReal x6230=((1.0)*cj2*cj3*sj0*sj1);
IkReal x6231=((0.866025403784439)*cj3*r22);
IkReal x6232=(cj1*sj2);
IkReal x6233=((0.866025403784439)*cj0*cj3*r02);
IkReal x6234=(cj2*sj1);
IkReal x6235=((0.5)*r20);
IkReal x6236=((0.5)*r21);
IkReal x6237=((0.866025403784439)*cj3*r12*sj0);
IkReal x6238=((0.5)*cj0*cj1*cj3*sj2);
IkReal x6239=((0.5)*cj0*cj2*cj3*sj1);
IkReal x6240=((0.5)*cj1*cj3*sj0*sj2);
IkReal x6241=((0.5)*cj2*cj3*sj0*sj1);
CheckValue<IkReal> x6242=IKPowWithIntegerCheck(IKsign((((x6211*x6213))+((x6214*x6215))+(((-0.5)*cj0*r12))+(((-1.0)*x6214*x6216))+(((-1.0)*x6211*x6212))+((r02*(((0.5)*sj0)))))),-1);
if(!x6242.valid){
continue;
}
CheckValue<IkReal> x6243 = IKatan2WithCheck(IkReal(((((-1.0)*x6225*x6229))+(((-1.0)*x6217*x6221))+(((-1.0)*x6217*x6218))+(((-1.0)*x6228*x6230))+(((-1.0)*x6223*x6229))+((x6224*x6225))+(((-1.0)*x6219*x6220))+(((-1.0)*x6219*x6222))+((x6227*x6228))+((x6226*x6227))+((x6223*x6224))+(((-1.0)*x6226*x6230)))),IkReal((((x6213*x6240))+(((-1.0)*x6213*x6241))+((x6215*x6239))+((x6232*x6237))+(((-1.0)*x6212*x6240))+(((-1.0)*cj1*cj2*x6231))+((x6212*x6241))+((x6221*x6235))+(((-1.0)*x6220*x6236))+((x6216*x6238))+(((-1.0)*x6222*x6236))+((x6232*x6233))+(((-1.0)*x6234*x6237))+(((-1.0)*x6216*x6239))+((x6218*x6235))+(((-1.0)*x6233*x6234))+(((-1.0)*x6215*x6238))+(((-1.0)*sj1*sj2*x6231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6242.value)))+(x6243.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6244=(cj2*cj3);
IkReal x6245=IKsin(j4);
IkReal x6246=((0.866025403784439)*r22);
IkReal x6247=((1.0)*cj1);
IkReal x6248=(cj3*sj2);
IkReal x6249=((0.5)*r20);
IkReal x6250=(cj5*x6245);
IkReal x6251=IKcos(j4);
IkReal x6252=((1.0)*cj5*x6251);
IkReal x6253=(r20*sj5);
IkReal x6254=((0.5)*r21*sj5);
IkReal x6255=((0.866025403784439)*cj1);
IkReal x6256=((0.866025403784439)*sj1);
IkReal x6257=((0.5)*cj1*sj3);
IkReal x6258=((0.5)*sj1*sj3);
IkReal x6259=((0.866025403784439)*cj0*r12);
IkReal x6260=((0.866025403784439)*r02*sj0);
IkReal x6261=(cj0*cj5*x6245);
IkReal x6262=(cj0*sj5*x6245);
IkReal x6263=((0.5)*r10);
IkReal x6264=(cj0*cj5*x6251);
IkReal x6265=((0.5)*r11);
IkReal x6266=(cj0*sj5*x6251);
IkReal x6267=((0.5)*r00);
IkReal x6268=(cj5*sj0*x6251);
IkReal x6269=(cj5*sj0*x6245);
IkReal x6270=(r00*sj0*sj5);
IkReal x6271=((0.5)*r01);
IkReal x6272=(sj0*sj5*x6251);
IkReal x6273=((1.0)*cj0*cj5*x6251);
IkReal x6274=((1.0)*cj0*sj5*x6251);
IkReal x6275=(sj0*sj5*x6245);
IkReal x6276=((0.866025403784439)*cj0*r02);
IkReal x6277=((0.866025403784439)*r12*sj0);
evalcond[0]=(((x6245*x6246))+(((-1.0)*x6247*x6248))+(((-1.0)*r21*x6252))+((x6245*x6254))+(((-1.0)*x6249*x6250))+((sj1*x6244))+(((-1.0)*x6251*x6253)));
evalcond[1]=(((cj2*x6258))+((x6245*x6253))+(((-1.0)*cj5*x6249*x6251))+(((-1.0)*sj2*x6257))+((r21*x6250))+(((-1.0)*cj2*x6255))+((x6246*x6251))+(((-1.0)*sj2*x6256))+((x6251*x6254)));
evalcond[2]=((((-1.0)*x6263*x6264))+((r11*x6261))+((r10*x6262))+(((-1.0)*x6245*x6270))+(((-1.0)*x6251*x6260))+((x6267*x6268))+(((-1.0)*r01*x6269))+(((0.5)*cj3))+(((-1.0)*x6271*x6272))+((x6251*x6259))+((x6265*x6266)));
evalcond[3]=((((-1.0)*r10*x6274))+(((-1.0)*x6245*x6260))+((x6262*x6265))+((x6251*x6270))+((x6245*x6259))+((x6267*x6269))+((r01*x6268))+(((-1.0)*x6271*x6275))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r11*x6273))+(((-1.0)*x6261*x6263)));
evalcond[4]=(((x6265*x6275))+(((-1.0)*x6261*x6267))+((x6262*x6271))+(((-1.0)*x6263*x6269))+(((-1.0)*r11*sj0*x6252))+(((-1.0)*x6244*x6247))+((x6245*x6277))+(((-1.0)*r00*x6274))+(((-1.0)*r10*sj0*sj5*x6251))+(((-1.0)*sj1*x6248))+((x6245*x6276))+(((-1.0)*r01*x6273)));
evalcond[5]=(((r01*x6261))+((x6265*x6272))+(((-1.0)*sj2*x6258))+(((-1.0)*cj2*x6257))+((r10*x6275))+((x6266*x6271))+(((-1.0)*cj2*x6256))+(((-1.0)*x6263*x6268))+((x6251*x6276))+((r11*x6269))+((r00*x6262))+((sj2*x6255))+((x6251*x6277))+(((-1.0)*x6264*x6267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6278=((0.866025403784439)*cj0);
IkReal x6279=(cj5*r00);
IkReal x6280=(r01*sj5);
IkReal x6281=((0.866025403784439)*sj0);
IkReal x6282=(cj5*r10);
IkReal x6283=(r11*sj5);
IkReal x6284=(cj5*sj3);
IkReal x6285=(sj3*sj5);
IkReal x6286=(cj5*r11);
IkReal x6287=(cj0*cj1*cj3*sj2);
IkReal x6288=(r10*sj5);
IkReal x6289=(cj5*r01);
IkReal x6290=(cj2*cj3*sj0*sj1);
IkReal x6291=(r00*sj5);
IkReal x6292=((1.0)*cj0*cj2*cj3*sj1);
IkReal x6293=((1.0)*cj1*cj3*sj0*sj2);
IkReal x6294=(cj1*sj2);
IkReal x6295=((0.866025403784439)*cj0*cj3*r12);
IkReal x6296=(cj2*sj1);
IkReal x6297=((0.866025403784439)*cj3*r02*sj0);
IkReal x6298=((0.5)*cj0*cj1*cj3*sj2);
IkReal x6299=((0.5)*cj0*cj2*cj3*sj1);
IkReal x6300=((0.5)*cj1*cj3*sj0*sj2);
IkReal x6301=((0.5)*cj2*cj3*sj0*sj1);
CheckValue<IkReal> x6302=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6278*x6280))+((x6281*x6282))+((r02*(((0.5)*cj0))))+((x6278*x6279))+(((-1.0)*x6281*x6283))+((r12*(((0.5)*sj0)))))),-1);
if(!x6302.valid){
continue;
}
CheckValue<IkReal> x6303 = IKatan2WithCheck(IkReal((((x6289*x6290))+((x6286*x6287))+(((-1.0)*x6286*x6292))+(((-1.0)*x6291*x6293))+(((-1.0)*r20*x6285))+((x6290*x6291))+(((-1.0)*r21*x6284))+(((-1.0)*x6288*x6292))+((x6287*x6288))+(((-1.0)*x6289*x6293)))),IkReal((((x6280*x6301))+(((-0.5)*r21*x6285))+((x6283*x6298))+(((-1.0)*x6280*x6300))+(((-1.0)*(0.866025403784439)*r22*sj3))+(((-1.0)*x6295*x6296))+(((-1.0)*x6279*x6301))+(((-1.0)*x6294*x6297))+((x6279*x6300))+((x6294*x6295))+((x6282*x6299))+(((-1.0)*x6282*x6298))+((x6296*x6297))+(((-1.0)*x6283*x6299))+(((0.5)*r20*x6284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6302.value)))+(x6303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6304=(cj2*cj3);
IkReal x6305=IKsin(j4);
IkReal x6306=((0.866025403784439)*r22);
IkReal x6307=((1.0)*cj1);
IkReal x6308=(cj3*sj2);
IkReal x6309=((0.5)*r20);
IkReal x6310=(cj5*x6305);
IkReal x6311=IKcos(j4);
IkReal x6312=((1.0)*cj5*x6311);
IkReal x6313=(r20*sj5);
IkReal x6314=((0.5)*r21*sj5);
IkReal x6315=((0.866025403784439)*cj1);
IkReal x6316=((0.866025403784439)*sj1);
IkReal x6317=((0.5)*cj1*sj3);
IkReal x6318=((0.5)*sj1*sj3);
IkReal x6319=((0.866025403784439)*cj0*r12);
IkReal x6320=((0.866025403784439)*r02*sj0);
IkReal x6321=(cj0*cj5*x6305);
IkReal x6322=(cj0*sj5*x6305);
IkReal x6323=((0.5)*r10);
IkReal x6324=(cj0*cj5*x6311);
IkReal x6325=((0.5)*r11);
IkReal x6326=(cj0*sj5*x6311);
IkReal x6327=((0.5)*r00);
IkReal x6328=(cj5*sj0*x6311);
IkReal x6329=(cj5*sj0*x6305);
IkReal x6330=(r00*sj0*sj5);
IkReal x6331=((0.5)*r01);
IkReal x6332=(sj0*sj5*x6311);
IkReal x6333=((1.0)*cj0*cj5*x6311);
IkReal x6334=((1.0)*cj0*sj5*x6311);
IkReal x6335=(sj0*sj5*x6305);
IkReal x6336=((0.866025403784439)*cj0*r02);
IkReal x6337=((0.866025403784439)*r12*sj0);
evalcond[0]=(((sj1*x6304))+((x6305*x6314))+(((-1.0)*x6309*x6310))+(((-1.0)*x6311*x6313))+((x6305*x6306))+(((-1.0)*r21*x6312))+(((-1.0)*x6307*x6308)));
evalcond[1]=((((-1.0)*cj5*x6309*x6311))+((x6306*x6311))+(((-1.0)*cj2*x6315))+((cj2*x6318))+((x6305*x6313))+(((-1.0)*sj2*x6317))+(((-1.0)*sj2*x6316))+((x6311*x6314))+((r21*x6310)));
evalcond[2]=((((-1.0)*x6311*x6320))+(((-1.0)*x6331*x6332))+(((-1.0)*r01*x6329))+((x6327*x6328))+((r10*x6322))+((r11*x6321))+(((-1.0)*x6323*x6324))+(((-1.0)*x6305*x6330))+(((0.5)*cj3))+((x6325*x6326))+((x6311*x6319)));
evalcond[3]=((((-1.0)*x6305*x6320))+((x6327*x6329))+(((-1.0)*x6321*x6323))+(((-1.0)*r11*x6333))+((r01*x6328))+(((-1.0)*r10*x6334))+(((-1.0)*x6331*x6335))+((x6305*x6319))+((x6322*x6325))+(((-1.0)*(1.0)*sj3))+((x6311*x6330)));
evalcond[4]=((((-1.0)*x6321*x6327))+(((-1.0)*sj1*x6308))+(((-1.0)*x6304*x6307))+((x6322*x6331))+(((-1.0)*x6323*x6329))+(((-1.0)*r10*sj0*sj5*x6311))+((x6305*x6337))+(((-1.0)*r11*sj0*x6312))+((x6325*x6335))+(((-1.0)*r01*x6333))+((x6305*x6336))+(((-1.0)*r00*x6334)));
evalcond[5]=(((x6325*x6332))+((sj2*x6315))+(((-1.0)*x6324*x6327))+(((-1.0)*sj2*x6318))+((r01*x6321))+(((-1.0)*x6323*x6328))+((r11*x6329))+((x6326*x6331))+(((-1.0)*cj2*x6317))+(((-1.0)*cj2*x6316))+((r10*x6335))+((x6311*x6337))+((x6311*x6336))+((r00*x6322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - jaco (c72e999112c1d3c08273e1b72d4e2b50)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
