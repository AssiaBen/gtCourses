/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2016-10-25 15:47:58.615478
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73;
x0=IKsin(j[5]);
x1=IKcos(j[4]);
x2=IKsin(j[3]);
x3=IKcos(j[0]);
x4=(x2*x3);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[1]);
x8=IKsin(j[2]);
x9=(x6*x7*x8);
x10=IKcos(j[1]);
x11=IKcos(j[2]);
x12=(x10*x11*x6);
x13=(x5*(((((1.0)*x9))+(((-1.0)*(1.0)*x12)))));
x14=(x13+(((-1.0)*(1.0)*x4)));
x15=IKsin(j[4]);
x16=(x3*x5);
x17=((0.500000349687582)*x16);
x18=(x11*x7);
x19=((0.866025201892125)*x18);
x20=(x19*x6);
x21=(x10*x8);
x22=((0.866025201892125)*x21);
x23=(x22*x6);
x24=(x2*(((((0.500000349687582)*x9))+(((-1.0)*(0.500000349687582)*x12)))));
x25=(((x1*x14))+((x15*((x23+x20+(((-1.0)*(1.0)*x24))+(((-1.0)*(1.0)*x17)))))));
x26=IKcos(j[5]);
x27=((0.749999825156128)*x16);
x28=(x11*x6*x7);
x29=((0.433013004730548)*x28);
x30=(x10*x6*x8);
x31=((0.433013004730548)*x30);
x32=((0.866025403784439)*x2);
x33=(x7*x8);
x34=((0.866025201892125)*x33);
x35=(x10*x11);
x36=((0.866025201892125)*x35);
x37=(x32*x6*((x34+(((-1.0)*(1.0)*x36)))));
x38=(x15*(((((-1.0)*(0.5)*x4))+(((0.5)*x13)))));
x39=((0.433012600946063)*x18);
x40=((0.433012600946063)*x21);
x41=(x1*(((((0.250000174843791)*x16))+(((0.5)*x24))+((x6*(((((-1.0)*(1.0)*x39))+(((-1.0)*(1.0)*x40)))))))));
x42=((0.433012600946063)*x33);
x43=((0.433012600946063)*x35);
x44=((0.866025403784439)*x15);
x45=((0.866025403784439)*x1);
x46=((0.41)*x7);
x47=(x2*x6);
x48=(x3*x7*x8);
x49=(x10*x11*x3);
x50=(x5*(((((-1.0)*(1.0)*x48))+(((1.0)*x49)))));
x51=((((-1.0)*(1.0)*x47))+x50);
x52=(x5*x6);
x53=((0.500000349687582)*x52);
x54=(x19*x3);
x55=(x22*x3);
x56=(x2*(((((-1.0)*(0.500000349687582)*x48))+(((0.500000349687582)*x49)))));
x57=(((x1*x51))+((x15*(((((-1.0)*(1.0)*x55))+(((-1.0)*(1.0)*x53))+(((-1.0)*(1.0)*x54))+(((-1.0)*(1.0)*x56)))))));
x58=((0.749999825156128)*x52);
x59=(x11*x3*x7);
x60=((0.433013004730548)*x59);
x61=(x10*x3*x8);
x62=((0.433013004730548)*x61);
x63=(x3*x32*((x36+(((-1.0)*(1.0)*x34)))));
x64=(x15*(((((-1.0)*(0.5)*x47))+(((0.5)*x50)))));
x65=(x1*(((((0.5)*x56))+(((0.250000174843791)*x52))+((x3*((x39+x40)))))));
x66=(x5*(((((1.0)*x18))+(((1.0)*x21)))));
x67=(x2*(((((0.500000349687582)*x18))+(((0.500000349687582)*x21)))));
x68=(((x15*((x36+(((-1.0)*(1.0)*x67))+(((-1.0)*(1.0)*x34))))))+((x1*x66)));
x69=((0.433013004730548)*x33);
x70=((0.433013004730548)*x35);
x71=(x32*((x19+x22)));
x72=(x15*x5*(((((0.5)*x21))+(((0.5)*x18)))));
x73=(x1*(((((0.5)*x67))+x42+(((-1.0)*(1.0)*x43)))));
eerot[0]=(((x0*x25))+((x26*((x37+x31+x38+x27+x29+x41)))));
eerot[1]=(((x0*(((((-1.0)*(1.0)*x38))+(((-1.0)*(1.0)*x27))+(((-1.0)*(1.0)*x29))+(((-1.0)*(1.0)*x31))+(((-1.0)*(1.0)*x41))+(((-1.0)*(1.0)*x37))))))+((x25*x26)));
eerot[2]=((((-1.0)*(1.0)*x14*x44))+((x2*(((((-1.0)*(1.0)*x43*x6))+((x42*x6))))))+(((0.250000174843791)*x28))+(((-1.0)*x45*((x17+(((-1.0)*(1.0)*x23))+x24+(((-1.0)*(1.0)*x20))))))+(((0.250000174843791)*x30))+(((0.433012600946063)*x16)));
eetrans[0]=((((0.292764109903212)*x28))+((x46*x6))+(((0.292764109903212)*x30))+(((0.0740573483966193)*x16))+((x2*(((((-1.0)*(0.0740573483966193)*x12))+(((0.0740573483966193)*x9))))))+(((0.00975)*x3)));
eerot[3]=(((x26*((x64+x65+x63+(((-1.0)*(1.0)*x60))+(((-1.0)*(1.0)*x62))+x58))))+((x0*x57)));
eerot[4]=(((x0*(((((-1.0)*(1.0)*x58))+x60+x62+(((-1.0)*(1.0)*x65))+(((-1.0)*(1.0)*x64))+(((-1.0)*(1.0)*x63))))))+((x26*x57)));
eerot[5]=((((-1.0)*(1.0)*x45*((x55+x54+x56+x53))))+((x2*(((((-1.0)*(1.0)*x3*x42))+((x3*x43))))))+(((-1.0)*(1.0)*x44*x51))+(((-1.0)*(0.250000174843791)*x59))+(((-1.0)*(0.250000174843791)*x61))+(((0.433012600946063)*x52)));
eetrans[1]=(((x2*(((((-1.0)*(0.0740573483966193)*x48))+(((0.0740573483966193)*x49))))))+(((0.0740573483966193)*x52))+(((0.00975)*x6))+(((-1.0)*(1.0)*x3*x46))+(((-1.0)*(0.292764109903212)*x61))+(((-1.0)*(0.292764109903212)*x59)));
eerot[6]=(((x0*x68))+((x26*(((((-1.0)*(1.0)*x69))+x71+x70+x73+x72)))));
eerot[7]=(((x0*(((((-1.0)*(1.0)*x70))+(((-1.0)*(1.0)*x71))+x69+(((-1.0)*(1.0)*x73))+(((-1.0)*(1.0)*x72))))))+((x26*x68)));
eerot[8]=(((x2*((x39+x40))))+(((-1.0)*(1.0)*x44*x66))+(((-1.0)*(0.250000174843791)*x33))+(((-1.0)*x45*((x34+x67+(((-1.0)*(1.0)*x36))))))+(((0.250000174843791)*x35)));
eetrans[2]=((0.2755)+(((0.292764109903212)*x35))+(((0.41)*x10))+((x2*(((((0.0740573483966193)*x18))+(((0.0740573483966193)*x21))))))+(((-1.0)*(0.292764109903212)*x33)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-1.0)*(0.04275704)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-1.0)*(0.04275704)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.2755)+(((-1.0)*(0.04275704)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x74=((1.0)*py);
IkReal x75=((1.0)*pz);
IkReal x76=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=((((-1.0)*r20*x74))+((pz*r10)));
rxp0_1=((((-1.0)*r00*x75))+((px*r20)));
rxp0_2=(((py*r00))+(((-1.0)*r10*x76)));
rxp1_0=((((-1.0)*r21*x74))+((pz*r11)));
rxp1_1=((((-1.0)*r01*x75))+((px*r21)));
rxp1_2=((((-1.0)*r11*x76))+((py*r01)));
rxp2_0=((((-1.0)*r22*x74))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x75))+((px*r22)));
rxp2_2=((((-1.0)*r12*x76))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x77=((0.0607271226203795)*npx);
IkReal x78=((-1.0)*(((0.41)*pp)));
IkReal x79=((0.0410848839767872)+(((0.205005772799983)*npz))+x78);
IkReal x80=(x77+x79);
IkReal x81=((-1.0)*(((0.121454245240759)*npy)));
IkReal x82=((((-1.0)*x77))+x79);
IkReal x83=((0.0740573656612488)*r21);
IkReal x84=((4.03784485736303e-7)*rxp0_2);
IkReal x85=((-1.0)*x84);
IkReal x86=((3.93689873583181e-9)*r10);
IkReal x87=((-1.0)*x86);
IkReal x88=((0.0097499999999992)*r12);
IkReal x89=((-1.0)*x88);
IkReal x90=((-1.0)*(((0.999999999999918)*rxp2_2)));
IkReal x91=((3.93689873583181e-9)*r00);
IkReal x92=((0.0097499999999992)*r02);
IkReal x93=(x91+x92);
IkReal x94=((7.87379747166361e-9)*r11);
IkReal x95=((((8.07568971472605e-7)*rxp1_2))+(((0.148114731322498)*r20)));
IkReal x96=((-1.0)*(((7.87379747166361e-9)*r01)));
IkReal x97=(x90+x86);
IkReal x98=((-1.0)*x83);
IkReal x99=(x92+(((-1.0)*x91)));
IkReal x100=((0.355080331556342)*npy);
IkReal x101=((0.710160663112685)*npx);
IkReal x102=((-1.0)*x100);
IkReal x103=((1.73205040378425)*rxp1_2);
IkReal x104=((-1.0)*x103);
IkReal x105=((0.0168874914368964)*r11);
IkReal x106=((-1.0)*(((0.128271090096774)*r22)));
IkReal x107=(x106+(((-1.0)*x105)));
IkReal x108=((0.0168874914368964)*r01);
IkReal x109=((0.0337749828737929)*r10);
IkReal x110=((-1.0)*(((3.4641008075685)*rxp0_2)));
IkReal x111=((0.0337749828737929)*r00);
IkReal x112=(x105+x106);
IkReal x113=((-1.0)*x108);
IkReal x114=((0.238267288398551)*npx);
IkReal x115=((0.0279367270001934)+(((-1.0)*(0.10250281471201)*npz))+x78);
IkReal x116=(x115+x114);
IkReal x117=((-1.0)*(((0.476534576797101)*npy)));
IkReal x118=((((-1.0)*x114))+x115);
IkReal x119=((0.0370286569336803)*r21);
IkReal x120=((-1.0)*x119);
IkReal x121=((0.866025605676611)*rxp0_2);
IkReal x122=((-1.0)*x121);
IkReal x123=((0.00844374965534696)*r10);
IkReal x124=((-1.0)*x123);
IkReal x125=((0.00487499659054528)*r12);
IkReal x126=((0.499999650312337)*rxp2_2);
IkReal x127=((0.00844374965534696)*r00);
IkReal x128=((-1.0)*(((0.00487499659054528)*r02)));
IkReal x129=(x128+x127);
IkReal x130=((0.0168874993106939)*r11);
IkReal x131=((((1.73205121135322)*rxp1_2))+(((-1.0)*(0.0740573138673605)*r20)));
IkReal x132=((-1.0)*(((0.0168874993106939)*r01)));
IkReal x133=(x126+x123);
IkReal x134=(x128+(((-1.0)*x127)));
IkReal x135=((-1.0)*x125);
op[0]=x80;
op[1]=x80;
op[2]=x81;
op[3]=x81;
op[4]=x82;
op[5]=x82;
op[6]=(x90+x83+x85+x87+x89);
op[7]=x93;
op[8]=(x95+x94);
op[9]=x96;
op[10]=(x98+x97+x84+x89);
op[11]=x99;
op[12]=x93;
op[13]=(x97+x83+x85+x88);
op[14]=x96;
op[15]=((((-1.0)*x94))+x95);
op[16]=x99;
op[17]=(x98+x90+x87+x84+x88);
op[18]=0;
op[19]=x80;
op[20]=0;
op[21]=x81;
op[22]=0;
op[23]=x82;
op[24]=x100;
op[25]=x100;
op[26]=x101;
op[27]=x101;
op[28]=x102;
op[29]=x102;
op[30]=(x104+x107);
op[31]=x108;
op[32]=((((-1.0)*x109))+x110);
op[33]=x111;
op[34]=(x103+x112);
op[35]=x113;
op[36]=x108;
op[37]=(x104+x112);
op[38]=x111;
op[39]=(x109+x110);
op[40]=x113;
op[41]=(x103+x107);
op[42]=0;
op[43]=x100;
op[44]=0;
op[45]=x101;
op[46]=0;
op[47]=x102;
op[48]=x116;
op[49]=x116;
op[50]=x117;
op[51]=x117;
op[52]=x118;
op[53]=x118;
op[54]=(x124+x125+x126+x120+x122);
op[55]=x129;
op[56]=(x130+x131);
op[57]=x132;
op[58]=(x133+x125+x121+x119);
op[59]=x134;
op[60]=x129;
op[61]=(x133+x135+x120+x122);
op[62]=x132;
op[63]=(x131+(((-1.0)*x130)));
op[64]=x134;
op[65]=(x135+x124+x126+x121+x119);
op[66]=0;
op[67]=x116;
op[68]=0;
op[69]=x117;
op[70]=0;
op[71]=x118;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x136=htj4*htj4;
CheckValue<IkReal> x137=IKPowWithIntegerCheck(((1.0)+x136),-1);
if(!x137.valid){
continue;
}
cj4array[numsolutions]=((x137.value)*(((1.0)+(((-1.0)*x136)))));
CheckValue<IkReal> x138=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x138.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x138.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x139=htj5*htj5;
CheckValue<IkReal> x140=IKPowWithIntegerCheck(((1.0)+x139),-1);
if(!x140.valid){
continue;
}
cj5array[numsolutions]=((x140.value)*(((1.0)+(((-1.0)*x139)))));
CheckValue<IkReal> x141=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x141.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x141.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x142=htj0*htj0;
CheckValue<IkReal> x143=IKPowWithIntegerCheck(((1.0)+x142),-1);
if(!x143.valid){
continue;
}
cj0array[numsolutions]=((x143.value)*(((1.0)+(((-1.0)*x142)))));
CheckValue<IkReal> x144=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x144.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x144.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[2];
IkReal x145=(cj4*r12);
IkReal x146=(cj5*r10);
IkReal x147=(r11*sj5);
IkReal x148=(cj4*cj5*r10);
IkReal x149=(cj4*r11*sj5);
IkReal x150=(cj5*r11*sj4);
IkReal x151=(r10*sj4*sj5);
j3eval[0]=((((-1.0)*(1.0)*r12))+(((-1.73204919243206)*x149))+(((-3.46409838486413)*x151))+(((-2.99999720250098)*x145))+(((1.73205080756888)*x147))+(((-1.73205080756888)*x146))+(((-3.46409838486413)*x150))+(((1.73204919243206)*x148)));
j3eval[1]=IKsign(((((-0.749999825156128)*x145))+(((0.433013004730548)*x147))+(((-0.433013004730548)*x146))+(((-1.0)*(0.250000174843791)*r12))+(((-0.433012600946063)*x149))+(((0.433012600946063)*x148))+(((-0.866025201892125)*x150))+(((-0.866025201892125)*x151))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x152=(cj4*r02);
IkReal x153=(cj5*r00);
IkReal x154=(r01*sj5);
IkReal x155=(cj4*cj5*r00);
IkReal x156=(cj4*r01*sj5);
IkReal x157=(cj5*r01*sj4);
IkReal x158=(r00*sj4*sj5);
j3eval[0]=((((2.99999720250098)*x152))+(((-1.73205080756888)*x154))+r02+(((1.73205080756888)*x153))+(((1.73204919243206)*x156))+(((3.46409838486413)*x157))+(((3.46409838486413)*x158))+(((-1.73204919243206)*x155)));
j3eval[1]=IKsign(((((0.433013004730548)*x153))+(((-0.433012600946063)*x155))+(((0.866025201892125)*x157))+(((0.866025201892125)*x158))+(((0.433012600946063)*x156))+(((0.250000174843791)*r02))+(((0.749999825156128)*x152))+(((-0.433013004730548)*x154))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x159=(cj4*r22);
IkReal x160=(cj5*r20);
IkReal x161=(r21*sj5);
IkReal x162=(cj4*cj5*r20);
IkReal x163=(cj4*r21*sj5);
IkReal x164=(cj5*r21*sj4);
IkReal x165=(r20*sj4*sj5);
j3eval[0]=((((-2.99999720250098)*x159))+(((1.73204919243206)*x162))+(((1.73205080756888)*x161))+(((-1.73205080756888)*x160))+(((-3.46409838486413)*x164))+(((-1.0)*(1.0)*r22))+(((-1.73204919243206)*x163))+(((-3.46409838486413)*x165)));
j3eval[1]=IKsign(((((0.433013004730548)*x161))+(((-0.866025201892125)*x165))+(((-0.433013004730548)*x160))+(((-0.866025201892125)*x164))+(((-1.0)*(0.250000174843791)*r22))+(((-0.749999825156128)*x159))+(((-0.433012600946063)*x163))+(((0.433012600946063)*x162))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x166=((0.433012600946063)*cj4);
IkReal x167=((0.866025201892125)*sj4);
IkReal x168=(cj0*r12);
IkReal x169=(r02*sj0);
IkReal x170=((0.433013004730548)*cj4);
IkReal x171=((0.749999825156128)*cj0);
IkReal x172=(cj5*r10);
IkReal x173=(r11*sj5);
IkReal x174=((0.749999825156128)*sj0);
IkReal x175=(cj5*r00);
IkReal x176=(r01*sj5);
IkReal x177=((0.250000174843791)*cj0*cj4);
IkReal x178=(cj5*r11);
IkReal x179=((0.500000349687582)*cj0*sj4);
IkReal x180=(r10*sj5);
IkReal x181=((0.250000174843791)*cj4*sj0);
IkReal x182=(cj5*r01);
IkReal x183=((0.500000349687582)*sj0*sj4);
IkReal x184=(r00*sj5);
IkReal x185=((0.866025403784439)*sj4);
IkReal x186=(cj4*sj0);
IkReal x187=((1.0)*cj0*cj4);
IkReal x188=((0.5)*cj0*sj4);
IkReal x189=((0.5)*sj0*sj4);
CheckValue<IkReal> x190 = IKatan2WithCheck(IkReal(((((-1.0)*x174*x176))+(((-1.0)*x176*x181))+(((-1.0)*x183*x184))+((x178*x179))+((x173*x177))+((x171*x173))+(((-1.0)*x169*x170))+(((0.433012600946063)*x169))+(((-1.0)*x172*x177))+((x174*x175))+(((-1.0)*x182*x183))+(((-0.433012600946063)*x168))+(((-1.0)*x171*x172))+((x175*x181))+((x179*x180))+((x168*x170)))),IkReal((((x182*x186))+((x168*x185))+(((-1.0)*x180*x187))+((x175*x189))+(((-1.0)*x176*x189))+(((-1.0)*x178*x187))+(((-1.0)*x172*x188))+((x184*x186))+((x173*x188))+(((-1.0)*x169*x185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x190.valid){
continue;
}
CheckValue<IkReal> x191=IKPowWithIntegerCheck(IKsign((((r22*(((-0.250000174843791)+(((-1.0)*(0.749999825156128)*cj4))))))+((r21*(((((0.433013004730548)*sj5))+(((-1.0)*sj5*x166))+(((-1.0)*cj5*x167))))))+((r20*(((((-1.0)*sj5*x167))+(((-1.0)*(0.433013004730548)*cj5))+((cj5*x166)))))))),-1);
if(!x191.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x190.value)+(((1.5707963267949)*(x191.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x192=IKcos(j3);
IkReal x193=((0.433012600946063)*x192);
IkReal x194=((0.433013004730548)*cj4*x192);
IkReal x195=((0.749999825156128)*cj5*x192);
IkReal x196=((0.749999825156128)*sj5*x192);
IkReal x197=IKsin(j3);
IkReal x198=((0.866025403784439)*sj4*x197);
IkReal x199=((0.250000174843791)*cj4*cj5*x192);
IkReal x200=((1.0)*cj4*cj5*x197);
IkReal x201=((1.0)*cj4*sj5*x197);
IkReal x202=((0.250000174843791)*cj4*sj5*x192);
IkReal x203=((0.5)*cj5*sj4*x197);
IkReal x204=((0.500000349687582)*cj5*sj4*x192);
IkReal x205=((0.500000349687582)*sj4*sj5*x192);
IkReal x206=((0.5)*sj4*sj5*x197);
evalcond[0]=((((-1.0)*r20*x203))+(((-1.0)*r21*x204))+((r20*x195))+(((-1.0)*r20*x201))+(((-1.0)*r21*x196))+((r21*x206))+(((-1.0)*r20*x205))+((r22*x198))+((r22*x193))+(((-1.0)*r21*x200))+(((-1.0)*r22*x194))+(((-1.0)*r21*x202))+((r20*x199)));
evalcond[1]=((((-1.0)*r00*x203))+(((-1.0)*r01*x204))+((r02*x193))+(((-1.0)*r00*x201))+((r00*x199))+(((-1.0)*r01*x202))+(((-1.0)*r02*x194))+(((-1.0)*r01*x200))+((r02*x198))+((r00*x195))+((r01*x206))+(((-1.0)*r01*x196))+(((-1.0)*(1.0)*cj0))+(((-1.0)*r00*x205)));
evalcond[2]=((((-1.0)*(1.0)*sj0))+(((-1.0)*r11*x202))+(((-1.0)*r10*x201))+((r12*x198))+(((-1.0)*r11*x200))+((r11*x206))+(((-1.0)*r12*x194))+(((-1.0)*r10*x205))+((r10*x199))+(((-1.0)*r11*x196))+(((-1.0)*r11*x204))+((r10*x195))+(((-1.0)*r10*x203))+((r12*x193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x207=((0.457329844604393)*cj4);
IkReal x208=((0.444667476232793)*cj5);
IkReal x209=((0.444667476232793)*sj5);
IkReal x210=((0.264039508890796)*cj4*cj5);
IkReal x211=((0.264039508890796)*cj4*sj5);
IkReal x212=((0.528079017781592)*cj5*sj4);
IkReal x213=((0.528079017781592)*sj4*sj5);
if( IKabs((((r11*x211))+((r12*x207))+((r10*x208))+(((-1.0)*(2.4390243902439)*py))+((r10*x213))+(((0.15244342368824)*r12))+(((-1.0)*r11*x209))+(((-1.0)*r10*x210))+((r11*x212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x212))+(((-1.0)*r21*x211))+(((-1.0)*r20*x213))+((r20*x210))+(((2.4390243902439)*pz))+(((-1.0)*r20*x208))+((r21*x209))+(((-1.0)*r22*x207))+(((-1.0)*(0.15244342368824)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x211))+((r12*x207))+((r10*x208))+(((-1.0)*(2.4390243902439)*py))+((r10*x213))+(((0.15244342368824)*r12))+(((-1.0)*r11*x209))+(((-1.0)*r10*x210))+((r11*x212))))+IKsqr(((((-1.0)*r21*x212))+(((-1.0)*r21*x211))+(((-1.0)*r20*x213))+((r20*x210))+(((2.4390243902439)*pz))+(((-1.0)*r20*x208))+((r21*x209))+(((-1.0)*r22*x207))+(((-1.0)*(0.15244342368824)*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x211))+((r12*x207))+((r10*x208))+(((-1.0)*(2.4390243902439)*py))+((r10*x213))+(((0.15244342368824)*r12))+(((-1.0)*r11*x209))+(((-1.0)*r10*x210))+((r11*x212))), ((((-1.0)*r21*x212))+(((-1.0)*r21*x211))+(((-1.0)*r20*x213))+((r20*x210))+(((2.4390243902439)*pz))+(((-1.0)*r20*x208))+((r21*x209))+(((-1.0)*r22*x207))+(((-1.0)*(0.15244342368824)*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x214=((((0.41)*(IKsin(j1))))+py);
IkReal x215=((0.187505236287801)*cj4);
IkReal x216=(cj5*r10);
IkReal x217=(r11*sj5);
IkReal x218=((0.108256198645226)*cj4);
IkReal x219=((0.216512397290453)*cj5*sj4);
IkReal x220=((0.216512397290453)*sj4*sj5);
IkReal x221=(cj5*r20);
IkReal x222=(r21*sj5);
IkReal x223=((0.41)*(IKcos(j1)));
IkReal x224=((0.108256198645226)*sj3);
IkReal x225=((0.216512447764952)*cj3*sj4);
IkReal x226=((0.10825629959419)*cj4*sj3);
IkReal x227=((0.187505236287801)*sj3);
IkReal x228=((0.25000704)*cj3*cj4*cj5);
IkReal x229=((0.25000704)*cj3*cj4*sj5);
IkReal x230=((0.12500352)*cj3*sj4);
IkReal x231=((0.0625018037121786)*cj4*sj3);
IkReal x232=((0.125003607424357)*cj5*sj3*sj4);
IkReal x233=((0.125003607424357)*sj3*sj4*sj5);
evalcond[0]=((((0.182313665255445)*x217))+((x216*x218))+(((-1.0)*r10*x220))+(((-0.182313665255445)*x216))+(((-1.0)*r12*x215))+x214+(((-1.0)*x217*x218))+(((-1.0)*(0.0625018037121786)*r12))+(((-1.0)*r11*x219)));
evalcond[1]=((((-0.182313665255445)*x221))+(((-1.0)*(0.0625018037121786)*r22))+(((-1.0)*r22*x215))+((x218*x221))+(((-1.0)*x223))+pz+(((-1.0)*r20*x220))+(((-1.0)*x218*x222))+(((-1.0)*r21*x219))+(((0.182313665255445)*x222)));
evalcond[2]=((((-1.0)*r22*x225))+(((-0.0740573656612548)*x216))+((r20*x229))+((x221*x231))+(((0.0740573656612548)*x217))+(((-1.0)*x222*x227))+(((-1.0)*r22*x226))+((x221*x230))+(((-1.0)*x222*x230))+((r21*x228))+((r22*x224))+(((-1.0)*x222*x231))+x214+(((-1.0)*r21*x232))+(((-1.0)*r20*x233))+((x221*x227)));
evalcond[3]=((((0.0740573656612548)*x221))+((x216*x231))+((x216*x230))+((r12*x224))+((r11*x228))+(((-1.0)*x217*x227))+(((-1.0)*(1.0)*pz))+(((-1.0)*x217*x231))+(((-1.0)*r12*x226))+(((-1.0)*x217*x230))+((x216*x227))+(((-1.0)*r12*x225))+((r10*x229))+x223+(((-1.0)*r11*x232))+(((-1.0)*r10*x233))+(((-0.0740573656612548)*x222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x234=((3.99988736317185)*cj1);
IkReal x235=((3.99988736317185)*sj1);
IkReal x236=((0.29622112105825)*cj1*cj5);
IkReal x237=((0.29622112105825)*cj1*sj5);
IkReal x238=((0.29622112105825)*cj5*sj1);
IkReal x239=((0.29622112105825)*sj1*sj5);
if( IKabs((((r10*x236))+(((-1.0)*r11*x237))+(((-1.0)*pz*x235))+((r20*x238))+(((-1.0)*r21*x239))+(((-1.0)*py*x234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((r21*x237))+((pz*x234))+(((-1.0)*r20*x236))+(((-1.0)*r11*x239))+(((-1.0)*py*x235))+((r10*x238)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x236))+(((-1.0)*r11*x237))+(((-1.0)*pz*x235))+((r20*x238))+(((-1.0)*r21*x239))+(((-1.0)*py*x234))))+IKsqr(((-1.63995381890046)+((r21*x237))+((pz*x234))+(((-1.0)*r20*x236))+(((-1.0)*r11*x239))+(((-1.0)*py*x235))+((r10*x238))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*x236))+(((-1.0)*r11*x237))+(((-1.0)*pz*x235))+((r20*x238))+(((-1.0)*r21*x239))+(((-1.0)*py*x234))), ((-1.63995381890046)+((r21*x237))+((pz*x234))+(((-1.0)*r20*x236))+(((-1.0)*r11*x239))+(((-1.0)*py*x235))+((r10*x238))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x240=(cj5*r20);
IkReal x241=(r21*sj5);
IkReal x242=IKcos(j2);
IkReal x243=(cj1*x242);
IkReal x244=IKsin(j2);
IkReal x245=(sj1*x244);
IkReal x246=(cj5*r10);
IkReal x247=(r11*sj5);
IkReal x248=(cj1*x244);
IkReal x249=(sj1*x242);
IkReal x250=((0.749999825156128)*cj4);
IkReal x251=((0.433012600946063)*cj4);
IkReal x252=((0.866025201892125)*cj5*sj4);
IkReal x253=((0.866025201892125)*sj4*sj5);
IkReal x254=((((-1.0)*x248))+(((-1.0)*x249)));
IkReal x255=((0.433012600946063)*sj3);
IkReal x256=((0.866025403784439)*cj3*sj4);
IkReal x257=((0.433013004730548)*cj4*sj3);
IkReal x258=((0.749999825156128)*sj3);
IkReal x259=(cj3*cj4*cj5);
IkReal x260=(cj3*cj4*sj5);
IkReal x261=((0.5)*cj3*sj4);
IkReal x262=((0.250000174843791)*cj4*sj3);
IkReal x263=((0.500000349687582)*cj5*sj3*sj4);
IkReal x264=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.0740573656612548)*x240))+(((-0.25000704)*x245))+(((-0.0740573656612548)*x241))+(((0.25000704)*x243)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((0.0740573656612548)*x246))+(((-0.0740573656612548)*x247))+(((-0.25000704)*x249))+(((-1.0)*(0.41)*sj1))+(((-0.25000704)*x248)));
evalcond[2]=((((0.433013004730548)*x241))+(((-0.433013004730548)*x240))+x243+(((-1.0)*x245))+((x240*x251))+(((-1.0)*r22*x250))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r20*x253))+(((-1.0)*r21*x252))+(((-1.0)*x241*x251)));
evalcond[3]=((((-1.0)*x247*x251))+(((-1.0)*r10*x253))+(((0.433013004730548)*x247))+(((-1.0)*r11*x252))+(((-1.0)*(0.250000174843791)*r12))+((x246*x251))+x254+(((-1.0)*r12*x250))+(((-0.433013004730548)*x246)));
evalcond[4]=(((x246*x258))+(((-1.0)*x247*x261))+(((-1.0)*x243))+x245+(((-1.0)*x247*x262))+((r12*x255))+((r11*x259))+((x246*x261))+(((-1.0)*r12*x257))+(((-1.0)*r10*x264))+(((-1.0)*r11*x263))+(((-1.0)*x247*x258))+(((-1.0)*r12*x256))+((x246*x262))+((r10*x260)));
evalcond[5]=(((x240*x258))+((r21*x259))+((r22*x255))+(((-1.0)*r20*x264))+((x240*x261))+(((-1.0)*x241*x258))+(((-1.0)*r22*x257))+(((-1.0)*x241*x262))+(((-1.0)*x241*x261))+x254+(((-1.0)*r22*x256))+(((-1.0)*r21*x263))+((r20*x260))+((x240*x262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x265=((0.457329844604393)*cj4);
IkReal x266=((0.444667476232793)*cj5);
IkReal x267=((0.444667476232793)*sj5);
IkReal x268=((0.264039508890796)*cj4*cj5);
IkReal x269=((0.264039508890796)*cj4*sj5);
IkReal x270=((0.528079017781592)*cj5*sj4);
IkReal x271=((0.528079017781592)*sj4*sj5);
if( IKabs(((((-1.0)*r10*x266))+(((-1.0)*r12*x265))+((r11*x267))+(((-1.0)*r11*x269))+(((-1.0)*r11*x270))+(((-1.0)*(0.15244342368824)*r12))+(((-1.0)*r10*x271))+(((2.4390243902439)*py))+((r10*x268)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x270))+(((-1.0)*r22*x265))+(((-1.0)*r20*x266))+((r20*x268))+(((2.4390243902439)*pz))+(((-1.0)*r21*x269))+((r21*x267))+(((-1.0)*r20*x271))+(((-1.0)*(0.15244342368824)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x266))+(((-1.0)*r12*x265))+((r11*x267))+(((-1.0)*r11*x269))+(((-1.0)*r11*x270))+(((-1.0)*(0.15244342368824)*r12))+(((-1.0)*r10*x271))+(((2.4390243902439)*py))+((r10*x268))))+IKsqr(((((-1.0)*r21*x270))+(((-1.0)*r22*x265))+(((-1.0)*r20*x266))+((r20*x268))+(((2.4390243902439)*pz))+(((-1.0)*r21*x269))+((r21*x267))+(((-1.0)*r20*x271))+(((-1.0)*(0.15244342368824)*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x266))+(((-1.0)*r12*x265))+((r11*x267))+(((-1.0)*r11*x269))+(((-1.0)*r11*x270))+(((-1.0)*(0.15244342368824)*r12))+(((-1.0)*r10*x271))+(((2.4390243902439)*py))+((r10*x268))), ((((-1.0)*r21*x270))+(((-1.0)*r22*x265))+(((-1.0)*r20*x266))+((r20*x268))+(((2.4390243902439)*pz))+(((-1.0)*r21*x269))+((r21*x267))+(((-1.0)*r20*x271))+(((-1.0)*(0.15244342368824)*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x272=((((-1.0)*(0.41)*(IKcos(j1))))+pz);
IkReal x273=((0.187505236287801)*cj4);
IkReal x274=(cj5*r20);
IkReal x275=(r21*sj5);
IkReal x276=((0.108256198645226)*cj4);
IkReal x277=((0.216512397290453)*cj5*sj4);
IkReal x278=((0.216512397290453)*sj4*sj5);
IkReal x279=(cj5*r10);
IkReal x280=(r11*sj5);
IkReal x281=((0.41)*(IKsin(j1)));
IkReal x282=((0.108256198645226)*sj3);
IkReal x283=((0.216512447764952)*cj3*sj4);
IkReal x284=((0.10825629959419)*cj4*sj3);
IkReal x285=((0.187505236287801)*sj3);
IkReal x286=((0.25000704)*cj3*cj4*cj5);
IkReal x287=((0.25000704)*cj3*cj4*sj5);
IkReal x288=((0.12500352)*cj3*sj4);
IkReal x289=((0.0625018037121786)*cj4*sj3);
IkReal x290=((0.125003607424357)*cj5*sj3*sj4);
IkReal x291=((0.125003607424357)*sj3*sj4*sj5);
evalcond[0]=((((-1.0)*x275*x276))+(((-0.182313665255445)*x274))+(((-1.0)*(0.0625018037121786)*r22))+((x274*x276))+x272+(((-1.0)*r22*x273))+(((-1.0)*r21*x277))+(((0.182313665255445)*x275))+(((-1.0)*r20*x278)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-0.182313665255445)*x280))+((x276*x280))+(((-1.0)*x276*x279))+(((0.182313665255445)*x279))+((r11*x277))+((r10*x278))+((r12*x273))+(((0.0625018037121786)*r12))+x281);
evalcond[2]=(((r22*x284))+((x275*x288))+(((-1.0)*r21*x286))+(((-0.0740573656612548)*x279))+((r22*x283))+py+(((0.0740573656612548)*x280))+((r21*x290))+(((-1.0)*x274*x288))+((x275*x289))+(((-1.0)*x281))+((x275*x285))+(((-1.0)*r20*x287))+(((-1.0)*r22*x282))+(((-1.0)*x274*x289))+(((-1.0)*x274*x285))+((r20*x291)));
evalcond[3]=(((x279*x289))+((x279*x288))+(((0.0740573656612548)*x275))+(((-1.0)*r12*x283))+((r11*x286))+(((-1.0)*r10*x291))+x272+(((-1.0)*x280*x288))+(((-1.0)*x280*x289))+(((-1.0)*r12*x284))+((r10*x287))+(((-0.0740573656612548)*x274))+(((-1.0)*r11*x290))+(((-1.0)*x280*x285))+((r12*x282))+((x279*x285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x292=((3.99988736317185)*cj1);
IkReal x293=((3.99988736317185)*sj1);
IkReal x294=((0.29622112105825)*cj1*cj5);
IkReal x295=((0.29622112105825)*cj1*sj5);
IkReal x296=((0.29622112105825)*cj5*sj1);
IkReal x297=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*r10*x294))+(((-1.0)*pz*x293))+(((-1.0)*r21*x297))+((py*x292))+((r20*x296))+((r11*x295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r10*x296))+((py*x293))+(((-1.0)*r20*x294))+((r21*x295))+((pz*x292))+((r11*x297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x294))+(((-1.0)*pz*x293))+(((-1.0)*r21*x297))+((py*x292))+((r20*x296))+((r11*x295))))+IKsqr(((-1.63995381890046)+(((-1.0)*r10*x296))+((py*x293))+(((-1.0)*r20*x294))+((r21*x295))+((pz*x292))+((r11*x297))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x294))+(((-1.0)*pz*x293))+(((-1.0)*r21*x297))+((py*x292))+((r20*x296))+((r11*x295))), ((-1.63995381890046)+(((-1.0)*r10*x296))+((py*x293))+(((-1.0)*r20*x294))+((r21*x295))+((pz*x292))+((r11*x297))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x298=(cj5*r20);
IkReal x299=(r21*sj5);
IkReal x300=IKcos(j2);
IkReal x301=(cj1*x300);
IkReal x302=IKsin(j2);
IkReal x303=(sj1*x302);
IkReal x304=(cj5*r10);
IkReal x305=(r11*sj5);
IkReal x306=(cj1*x302);
IkReal x307=(sj1*x300);
IkReal x308=((0.749999825156128)*cj4);
IkReal x309=((0.433012600946063)*cj4);
IkReal x310=((0.866025201892125)*cj5*sj4);
IkReal x311=((0.866025201892125)*sj4*sj5);
IkReal x312=(x301+(((-1.0)*x303)));
IkReal x313=((0.433012600946063)*sj3);
IkReal x314=((0.866025403784439)*cj3*sj4);
IkReal x315=((0.433013004730548)*cj4*sj3);
IkReal x316=((0.749999825156128)*sj3);
IkReal x317=(cj3*cj4*cj5);
IkReal x318=(cj3*cj4*sj5);
IkReal x319=((0.5)*cj3*sj4);
IkReal x320=((0.250000174843791)*cj4*sj3);
IkReal x321=((0.500000349687582)*cj5*sj3*sj4);
IkReal x322=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.25000704)*x301))+(((0.41)*cj1))+(((-0.0740573656612548)*x299))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x303))+(((0.0740573656612548)*x298)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((0.41)*sj1))+(((0.0740573656612548)*x304))+(((0.25000704)*x307))+(((-0.0740573656612548)*x305))+(((0.25000704)*x306)));
evalcond[2]=((((-1.0)*x305*x309))+x306+x307+(((-1.0)*r11*x310))+(((0.433013004730548)*x305))+(((-1.0)*r10*x311))+(((-1.0)*(0.250000174843791)*r12))+(((-0.433013004730548)*x304))+(((-1.0)*r12*x308))+((x304*x309)));
evalcond[3]=((((-0.433013004730548)*x298))+(((-1.0)*r20*x311))+x312+(((-1.0)*x299*x309))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r21*x310))+(((-1.0)*r22*x308))+(((0.433013004730548)*x299))+((x298*x309)));
evalcond[4]=((((-1.0)*x305*x316))+((x304*x320))+(((-1.0)*r12*x315))+((r11*x317))+(((-1.0)*r11*x321))+(((-1.0)*x305*x320))+x312+(((-1.0)*r12*x314))+(((-1.0)*r10*x322))+((r10*x318))+((r12*x313))+((x304*x316))+((x304*x319))+(((-1.0)*x305*x319)));
evalcond[5]=((((-1.0)*x299*x316))+(((-1.0)*r21*x321))+(((-1.0)*x306))+(((-1.0)*x307))+((r21*x317))+((r22*x313))+((x298*x319))+(((-1.0)*r20*x322))+(((-1.0)*r22*x314))+((r20*x318))+((x298*x320))+(((-1.0)*x299*x320))+(((-1.0)*r22*x315))+((x298*x316))+(((-1.0)*x299*x319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x323=((0.457329844604393)*cj4);
IkReal x324=((0.444667476232793)*cj5);
IkReal x325=((0.444667476232793)*sj5);
IkReal x326=((0.264039508890796)*cj4*cj5);
IkReal x327=((0.264039508890796)*cj4*sj5);
IkReal x328=((0.528079017781592)*cj5*sj4);
IkReal x329=((0.528079017781592)*sj4*sj5);
if( IKabs((((r01*x325))+(((-1.0)*r02*x323))+(((-1.0)*r00*x329))+(((-1.0)*r01*x328))+(((-1.0)*(0.15244342368824)*r02))+(((-1.0)*r01*x327))+(((2.4390243902439)*px))+((r00*x326))+(((-1.0)*r00*x324)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x329))+((r21*x325))+(((-1.0)*r21*x327))+(((-1.0)*r21*x328))+((r20*x326))+(((2.4390243902439)*pz))+(((-1.0)*r20*x324))+(((-1.0)*r22*x323))+(((-1.0)*(0.15244342368824)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x325))+(((-1.0)*r02*x323))+(((-1.0)*r00*x329))+(((-1.0)*r01*x328))+(((-1.0)*(0.15244342368824)*r02))+(((-1.0)*r01*x327))+(((2.4390243902439)*px))+((r00*x326))+(((-1.0)*r00*x324))))+IKsqr(((((-1.0)*r20*x329))+((r21*x325))+(((-1.0)*r21*x327))+(((-1.0)*r21*x328))+((r20*x326))+(((2.4390243902439)*pz))+(((-1.0)*r20*x324))+(((-1.0)*r22*x323))+(((-1.0)*(0.15244342368824)*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x325))+(((-1.0)*r02*x323))+(((-1.0)*r00*x329))+(((-1.0)*r01*x328))+(((-1.0)*(0.15244342368824)*r02))+(((-1.0)*r01*x327))+(((2.4390243902439)*px))+((r00*x326))+(((-1.0)*r00*x324))), ((((-1.0)*r20*x329))+((r21*x325))+(((-1.0)*r21*x327))+(((-1.0)*r21*x328))+((r20*x326))+(((2.4390243902439)*pz))+(((-1.0)*r20*x324))+(((-1.0)*r22*x323))+(((-1.0)*(0.15244342368824)*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x330=((((-1.0)*(0.41)*(IKcos(j1))))+pz);
IkReal x331=((0.187505236287801)*cj4);
IkReal x332=(cj5*r20);
IkReal x333=(r21*sj5);
IkReal x334=((0.108256198645226)*cj4);
IkReal x335=((0.216512397290453)*cj5*sj4);
IkReal x336=((0.216512397290453)*sj4*sj5);
IkReal x337=(cj5*r00);
IkReal x338=(r01*sj5);
IkReal x339=((0.41)*(IKsin(j1)));
IkReal x340=((0.108256198645226)*sj3);
IkReal x341=((0.216512447764952)*cj3*sj4);
IkReal x342=((0.10825629959419)*cj4*sj3);
IkReal x343=((0.187505236287801)*sj3);
IkReal x344=((0.25000704)*cj3*cj4*cj5);
IkReal x345=((0.25000704)*cj3*cj4*sj5);
IkReal x346=((0.12500352)*cj3*sj4);
IkReal x347=((0.0625018037121786)*cj4*sj3);
IkReal x348=((0.125003607424357)*cj5*sj3*sj4);
IkReal x349=((0.125003607424357)*sj3*sj4*sj5);
evalcond[0]=((((-1.0)*r22*x331))+(((-1.0)*r21*x335))+(((0.182313665255445)*x333))+(((-1.0)*(0.0625018037121786)*r22))+x330+(((-1.0)*r20*x336))+((x332*x334))+(((-0.182313665255445)*x332))+(((-1.0)*x333*x334)));
evalcond[1]=((((0.0625018037121786)*r02))+(((-1.0)*(1.0)*px))+((r01*x335))+((x334*x338))+((r00*x336))+(((-1.0)*x334*x337))+(((-0.182313665255445)*x338))+x339+(((0.182313665255445)*x337))+((r02*x331)));
evalcond[2]=(((r22*x341))+((x333*x346))+(((0.0740573656612548)*x338))+(((-0.0740573656612548)*x337))+(((-1.0)*r21*x344))+((x333*x347))+((r22*x342))+px+((x333*x343))+(((-1.0)*r22*x340))+(((-1.0)*x332*x347))+(((-1.0)*x332*x346))+(((-1.0)*r20*x345))+((r21*x348))+((r20*x349))+(((-1.0)*x339))+(((-1.0)*x332*x343)));
evalcond[3]=((((-0.0740573656612548)*x332))+((r02*x340))+((r01*x344))+((r00*x345))+(((-1.0)*r00*x349))+(((-1.0)*x338*x343))+x330+(((-1.0)*r01*x348))+((x337*x343))+(((-1.0)*x338*x347))+(((0.0740573656612548)*x333))+(((-1.0)*r02*x341))+(((-1.0)*x338*x346))+((x337*x346))+((x337*x347))+(((-1.0)*r02*x342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x350=((3.99988736317185)*cj1);
IkReal x351=((3.99988736317185)*sj1);
IkReal x352=((0.29622112105825)*cj1*cj5);
IkReal x353=((0.29622112105825)*cj1*sj5);
IkReal x354=((0.29622112105825)*cj5*sj1);
IkReal x355=((0.29622112105825)*sj1*sj5);
if( IKabs((((r01*x353))+((r20*x354))+(((-1.0)*r00*x352))+(((-1.0)*pz*x351))+(((-1.0)*r21*x355))+((px*x350)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((pz*x350))+((r01*x355))+(((-1.0)*r20*x352))+((px*x351))+((r21*x353))+(((-1.0)*r00*x354)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x353))+((r20*x354))+(((-1.0)*r00*x352))+(((-1.0)*pz*x351))+(((-1.0)*r21*x355))+((px*x350))))+IKsqr(((-1.63995381890046)+((pz*x350))+((r01*x355))+(((-1.0)*r20*x352))+((px*x351))+((r21*x353))+(((-1.0)*r00*x354))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*x353))+((r20*x354))+(((-1.0)*r00*x352))+(((-1.0)*pz*x351))+(((-1.0)*r21*x355))+((px*x350))), ((-1.63995381890046)+((pz*x350))+((r01*x355))+(((-1.0)*r20*x352))+((px*x351))+((r21*x353))+(((-1.0)*r00*x354))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x356=(cj5*r20);
IkReal x357=(r21*sj5);
IkReal x358=IKcos(j2);
IkReal x359=(cj1*x358);
IkReal x360=IKsin(j2);
IkReal x361=(sj1*x360);
IkReal x362=(cj5*r00);
IkReal x363=(r01*sj5);
IkReal x364=(cj1*x360);
IkReal x365=(sj1*x358);
IkReal x366=((0.749999825156128)*cj4);
IkReal x367=((0.433012600946063)*cj4);
IkReal x368=((0.866025201892125)*cj5*sj4);
IkReal x369=((0.866025201892125)*sj4*sj5);
IkReal x370=((((-1.0)*x361))+x359);
IkReal x371=((0.433012600946063)*sj3);
IkReal x372=((0.866025403784439)*cj3*sj4);
IkReal x373=((0.433013004730548)*cj4*sj3);
IkReal x374=((0.749999825156128)*sj3);
IkReal x375=(cj3*cj4*cj5);
IkReal x376=(cj3*cj4*sj5);
IkReal x377=((0.5)*cj3*sj4);
IkReal x378=((0.250000174843791)*cj4*sj3);
IkReal x379=((0.500000349687582)*cj5*sj3*sj4);
IkReal x380=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.0740573656612548)*x356))+(((-0.25000704)*x361))+(((-0.0740573656612548)*x357))+(((0.25000704)*x359)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((0.25000704)*x365))+(((-0.0740573656612548)*x363))+(((0.41)*sj1))+(((0.0740573656612548)*x362))+(((0.25000704)*x364)));
evalcond[2]=((((-1.0)*r00*x369))+(((-0.433013004730548)*x362))+((x362*x367))+(((-1.0)*(0.250000174843791)*r02))+(((0.433013004730548)*x363))+x364+x365+(((-1.0)*r02*x366))+(((-1.0)*r01*x368))+(((-1.0)*x363*x367)));
evalcond[3]=((((-0.433013004730548)*x356))+(((-1.0)*r21*x368))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r20*x369))+(((-1.0)*x357*x367))+((x356*x367))+x370+(((-1.0)*r22*x366))+(((0.433013004730548)*x357)));
evalcond[4]=((((-1.0)*r02*x373))+(((-1.0)*r01*x379))+((r02*x371))+((x362*x374))+((r01*x375))+(((-1.0)*x363*x374))+((r00*x376))+((x362*x377))+x370+(((-1.0)*x363*x377))+((x362*x378))+(((-1.0)*r02*x372))+(((-1.0)*x363*x378))+(((-1.0)*r00*x380)));
evalcond[5]=((((-1.0)*x364))+(((-1.0)*r20*x380))+((x356*x377))+(((-1.0)*r22*x373))+((x356*x378))+((r22*x371))+(((-1.0)*x357*x374))+(((-1.0)*x365))+(((-1.0)*x357*x378))+(((-1.0)*r22*x372))+(((-1.0)*x357*x377))+((r21*x375))+((x356*x374))+(((-1.0)*r21*x379))+((r20*x376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x381=((0.457329844604393)*cj4);
IkReal x382=((0.444667476232793)*cj5);
IkReal x383=((0.444667476232793)*sj5);
IkReal x384=((0.264039508890796)*cj4*cj5);
IkReal x385=((0.264039508890796)*cj4*sj5);
IkReal x386=((0.528079017781592)*cj5*sj4);
IkReal x387=((0.528079017781592)*sj4*sj5);
if( IKabs(((((-1.0)*r00*x384))+(((-1.0)*(2.4390243902439)*px))+(((-1.0)*r01*x383))+((r00*x387))+((r01*x385))+(((0.15244342368824)*r02))+((r02*x381))+((r01*x386))+((r00*x382)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x383))+(((-1.0)*r20*x382))+((r20*x384))+(((-1.0)*r22*x381))+(((2.4390243902439)*pz))+(((-1.0)*r21*x385))+(((-1.0)*r20*x387))+(((-1.0)*r21*x386))+(((-1.0)*(0.15244342368824)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x384))+(((-1.0)*(2.4390243902439)*px))+(((-1.0)*r01*x383))+((r00*x387))+((r01*x385))+(((0.15244342368824)*r02))+((r02*x381))+((r01*x386))+((r00*x382))))+IKsqr((((r21*x383))+(((-1.0)*r20*x382))+((r20*x384))+(((-1.0)*r22*x381))+(((2.4390243902439)*pz))+(((-1.0)*r21*x385))+(((-1.0)*r20*x387))+(((-1.0)*r21*x386))+(((-1.0)*(0.15244342368824)*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x384))+(((-1.0)*(2.4390243902439)*px))+(((-1.0)*r01*x383))+((r00*x387))+((r01*x385))+(((0.15244342368824)*r02))+((r02*x381))+((r01*x386))+((r00*x382))), (((r21*x383))+(((-1.0)*r20*x382))+((r20*x384))+(((-1.0)*r22*x381))+(((2.4390243902439)*pz))+(((-1.0)*r21*x385))+(((-1.0)*r20*x387))+(((-1.0)*r21*x386))+(((-1.0)*(0.15244342368824)*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x388=((((0.41)*(IKsin(j1))))+px);
IkReal x389=((0.187505236287801)*cj4);
IkReal x390=(cj5*r00);
IkReal x391=(r01*sj5);
IkReal x392=((0.108256198645226)*cj4);
IkReal x393=((0.216512397290453)*cj5*sj4);
IkReal x394=((0.216512397290453)*sj4*sj5);
IkReal x395=(cj5*r20);
IkReal x396=(r21*sj5);
IkReal x397=((0.41)*(IKcos(j1)));
IkReal x398=((0.108256198645226)*sj3);
IkReal x399=((0.216512447764952)*cj3*sj4);
IkReal x400=((0.10825629959419)*cj4*sj3);
IkReal x401=((0.187505236287801)*sj3);
IkReal x402=((0.25000704)*cj3*cj4*cj5);
IkReal x403=((0.25000704)*cj3*cj4*sj5);
IkReal x404=((0.12500352)*cj3*sj4);
IkReal x405=((0.0625018037121786)*cj4*sj3);
IkReal x406=((0.125003607424357)*cj5*sj3*sj4);
IkReal x407=((0.125003607424357)*sj3*sj4*sj5);
evalcond[0]=((((-1.0)*x391*x392))+(((-1.0)*r01*x393))+x388+(((-1.0)*r02*x389))+(((0.182313665255445)*x391))+((x390*x392))+(((-0.182313665255445)*x390))+(((-1.0)*r00*x394))+(((-1.0)*(0.0625018037121786)*r02)));
evalcond[1]=((((-1.0)*(0.0625018037121786)*r22))+(((-1.0)*x397))+pz+(((-1.0)*r22*x389))+(((-1.0)*x392*x396))+(((-0.182313665255445)*x395))+(((-1.0)*r20*x394))+(((-1.0)*r21*x393))+(((0.182313665255445)*x396))+((x392*x395)));
evalcond[2]=((((-1.0)*x396*x405))+(((-1.0)*r20*x407))+((x395*x404))+((x395*x405))+((r22*x398))+x388+(((-1.0)*r22*x399))+(((0.0740573656612548)*x391))+((r21*x402))+(((-1.0)*x396*x401))+(((-0.0740573656612548)*x390))+((x395*x401))+(((-1.0)*r21*x406))+(((-1.0)*x396*x404))+((r20*x403))+(((-1.0)*r22*x400)));
evalcond[3]=(x397+((r02*x398))+((r01*x402))+(((-1.0)*(1.0)*pz))+((x390*x404))+(((-1.0)*r02*x400))+(((0.0740573656612548)*x395))+((x390*x405))+(((-0.0740573656612548)*x396))+(((-1.0)*x391*x404))+(((-1.0)*r00*x407))+((x390*x401))+(((-1.0)*x391*x405))+(((-1.0)*r01*x406))+(((-1.0)*x391*x401))+((r00*x403))+(((-1.0)*r02*x399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x408=((3.99988736317185)*cj1);
IkReal x409=((3.99988736317185)*sj1);
IkReal x410=((0.29622112105825)*cj1*cj5);
IkReal x411=((0.29622112105825)*cj1*sj5);
IkReal x412=((0.29622112105825)*cj5*sj1);
IkReal x413=((0.29622112105825)*sj1*sj5);
if( IKabs((((r00*x410))+(((-1.0)*r21*x413))+(((-1.0)*pz*x409))+(((-1.0)*px*x408))+(((-1.0)*r01*x411))+((r20*x412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((r00*x412))+((r21*x411))+(((-1.0)*r20*x410))+(((-1.0)*r01*x413))+(((-1.0)*px*x409))+((pz*x408)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x410))+(((-1.0)*r21*x413))+(((-1.0)*pz*x409))+(((-1.0)*px*x408))+(((-1.0)*r01*x411))+((r20*x412))))+IKsqr(((-1.63995381890046)+((r00*x412))+((r21*x411))+(((-1.0)*r20*x410))+(((-1.0)*r01*x413))+(((-1.0)*px*x409))+((pz*x408))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x410))+(((-1.0)*r21*x413))+(((-1.0)*pz*x409))+(((-1.0)*px*x408))+(((-1.0)*r01*x411))+((r20*x412))), ((-1.63995381890046)+((r00*x412))+((r21*x411))+(((-1.0)*r20*x410))+(((-1.0)*r01*x413))+(((-1.0)*px*x409))+((pz*x408))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x414=(cj5*r20);
IkReal x415=(r21*sj5);
IkReal x416=IKcos(j2);
IkReal x417=(cj1*x416);
IkReal x418=IKsin(j2);
IkReal x419=(sj1*x418);
IkReal x420=(cj5*r00);
IkReal x421=(r01*sj5);
IkReal x422=(cj1*x418);
IkReal x423=(sj1*x416);
IkReal x424=((0.749999825156128)*cj4);
IkReal x425=((0.433012600946063)*cj4);
IkReal x426=((0.866025201892125)*cj5*sj4);
IkReal x427=((0.866025201892125)*sj4*sj5);
IkReal x428=((((-1.0)*x423))+(((-1.0)*x422)));
IkReal x429=((0.433012600946063)*sj3);
IkReal x430=((0.866025403784439)*cj3*sj4);
IkReal x431=((0.433013004730548)*cj4*sj3);
IkReal x432=((0.749999825156128)*sj3);
IkReal x433=(cj3*cj4*cj5);
IkReal x434=(cj3*cj4*sj5);
IkReal x435=((0.5)*cj3*sj4);
IkReal x436=((0.250000174843791)*cj4*sj3);
IkReal x437=((0.500000349687582)*cj5*sj3*sj4);
IkReal x438=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.0740573656612548)*x415))+(((0.0740573656612548)*x414))+(((-0.25000704)*x419))+(((0.25000704)*x417)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((-0.25000704)*x423))+(((-0.25000704)*x422))+(((0.0740573656612548)*x420))+(((-1.0)*(0.41)*sj1))+(((-0.0740573656612548)*x421)));
evalcond[2]=((((-1.0)*r21*x426))+(((-1.0)*x419))+(((-1.0)*x415*x425))+x417+(((-1.0)*r20*x427))+((x414*x425))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r22*x424))+(((-0.433013004730548)*x414))+(((0.433013004730548)*x415)));
evalcond[3]=((((0.433013004730548)*x421))+(((-1.0)*r00*x427))+(((-0.433013004730548)*x420))+(((-1.0)*x421*x425))+(((-1.0)*r02*x424))+x428+(((-1.0)*(0.250000174843791)*r02))+(((-1.0)*r01*x426))+((x420*x425)));
evalcond[4]=(((r00*x434))+(((-1.0)*r02*x431))+(((-1.0)*x417))+((x420*x432))+(((-1.0)*x421*x432))+(((-1.0)*x421*x435))+x419+(((-1.0)*r01*x437))+(((-1.0)*r00*x438))+(((-1.0)*r02*x430))+((x420*x435))+((r01*x433))+(((-1.0)*x421*x436))+((r02*x429))+((x420*x436)));
evalcond[5]=(((r20*x434))+(((-1.0)*x415*x436))+((x414*x432))+(((-1.0)*r20*x438))+((x414*x435))+(((-1.0)*r22*x431))+((r22*x429))+x428+(((-1.0)*x415*x432))+(((-1.0)*r22*x430))+(((-1.0)*x415*x435))+((x414*x436))+(((-1.0)*r21*x437))+((r21*x433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x439=(r02*sj0);
IkReal x440=((0.182313665255445)*sj0);
IkReal x441=(cj5*r00);
IkReal x442=(r01*sj5);
IkReal x443=((0.108256198645226)*cj4*sj0);
IkReal x444=((0.216512397290453)*sj0*sj4);
IkReal x445=(cj5*r20);
IkReal x446=(r21*sj5);
IkReal x447=((0.264039508890796)*cj4);
IkReal x448=((0.528079017781592)*sj4);
CheckValue<IkReal> x449=IKPowWithIntegerCheck(sj0,-2);
if(!x449.valid){
continue;
}
if( IKabs(((-2.4390243902439)*(x449.value)*(((((-1.0)*(1.0)*px*sj0))+(((-1.0)*x441*x443))+(((-1.0)*x440*x442))+((r00*sj5*x444))+((cj5*r01*x444))+((x440*x441))+((x442*x443))+(((0.187505236287801)*cj4*x439))+(((0.0625018037121786)*x439))+(((0.00975)*cj0*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(0.457329844604393)*cj4*r22))+(((-1.0)*x446*x447))+(((0.444667476232793)*x446))+(((-0.444667476232793)*x445))+(((-1.0)*r20*sj5*x448))+(((2.4390243902439)*pz))+((x445*x447))+(((-1.0)*(0.15244342368824)*r22))+(((-1.0)*cj5*r21*x448)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.4390243902439)*(x449.value)*(((((-1.0)*(1.0)*px*sj0))+(((-1.0)*x441*x443))+(((-1.0)*x440*x442))+((r00*sj5*x444))+((cj5*r01*x444))+((x440*x441))+((x442*x443))+(((0.187505236287801)*cj4*x439))+(((0.0625018037121786)*x439))+(((0.00975)*cj0*sj0))))))+IKsqr(((((-1.0)*(0.457329844604393)*cj4*r22))+(((-1.0)*x446*x447))+(((0.444667476232793)*x446))+(((-0.444667476232793)*x445))+(((-1.0)*r20*sj5*x448))+(((2.4390243902439)*pz))+((x445*x447))+(((-1.0)*(0.15244342368824)*r22))+(((-1.0)*cj5*r21*x448))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.4390243902439)*(x449.value)*(((((-1.0)*(1.0)*px*sj0))+(((-1.0)*x441*x443))+(((-1.0)*x440*x442))+((r00*sj5*x444))+((cj5*r01*x444))+((x440*x441))+((x442*x443))+(((0.187505236287801)*cj4*x439))+(((0.0625018037121786)*x439))+(((0.00975)*cj0*sj0))))), ((((-1.0)*(0.457329844604393)*cj4*r22))+(((-1.0)*x446*x447))+(((0.444667476232793)*x446))+(((-0.444667476232793)*x445))+(((-1.0)*r20*sj5*x448))+(((2.4390243902439)*pz))+((x445*x447))+(((-1.0)*(0.15244342368824)*r22))+(((-1.0)*cj5*r21*x448))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x450=((0.182313665255445)*cj5);
IkReal x451=((0.182313665255445)*sj5);
IkReal x452=((0.41)*(IKcos(j1)));
IkReal x453=((0.108256198645226)*cj4*cj5);
IkReal x454=((0.108256198645226)*cj4*sj5);
IkReal x455=((0.216512397290453)*cj5*sj4);
IkReal x456=((0.216512397290453)*sj4*sj5);
IkReal x457=((0.0625018037121786)*cj0);
IkReal x458=((0.00975)*cj0);
IkReal x459=(sj0*x458);
IkReal x460=((0.187505236287801)*cj0*cj4);
IkReal x461=(cj0*r10);
IkReal x462=(cj0*r11);
IkReal x463=cj0*cj0;
IkReal x464=((0.41)*(IKsin(j1)));
IkReal x465=((1.0)*sj0);
IkReal x466=((0.0625018037121786)*sj0);
IkReal x467=((0.187505236287801)*cj4*sj0);
IkReal x468=(r00*sj0);
IkReal x469=(r01*sj0);
IkReal x470=(cj5*r00);
IkReal x471=((0.108256198645226)*cj4*sj0);
IkReal x472=(r01*sj5);
IkReal x473=sj0*sj0;
IkReal x474=((0.108256198645226)*sj3);
IkReal x475=((0.216512447764952)*cj3*sj4);
IkReal x476=((0.10825629959419)*cj4*sj3);
IkReal x477=((0.187505236287801)*sj3);
IkReal x478=((0.0740573656612548)*cj5*r20);
IkReal x479=((0.0740573656612548)*r21*sj5);
IkReal x480=((0.25000704)*cj3*cj4*cj5);
IkReal x481=((0.25000704)*cj3*cj4*sj5);
IkReal x482=((0.12500352)*cj3*sj4);
IkReal x483=((0.0625018037121786)*cj4*sj3);
IkReal x484=((0.125003607424357)*cj5*sj3*sj4);
IkReal x485=((0.125003607424357)*sj3*sj4*sj5);
IkReal x486=(cj5*r10);
IkReal x487=(r11*sj5);
IkReal x488=((0.0740573656612548)*cj5);
IkReal x489=(r10*x488);
IkReal x490=((0.0740573656612548)*sj5);
IkReal x491=(r11*x490);
IkReal x492=(cj0*x464);
IkReal x493=((0.108256198645226)*r22*sj3);
IkReal x494=((0.216512447764952)*cj3*r22*sj4);
IkReal x495=(cj5*r20);
IkReal x496=((0.187505236287801)*cj0*sj3);
IkReal x497=(r21*sj5);
IkReal x498=(cj0*r21);
IkReal x499=(cj0*r20);
IkReal x500=((0.12500352)*cj0*cj3*sj4);
IkReal x501=((0.0625018037121786)*cj0*cj4*sj3);
IkReal x502=(r00*x488);
IkReal x503=(r01*x490);
IkReal x504=((0.187505236287801)*sj0*sj3);
IkReal x505=(r21*sj0);
IkReal x506=(r20*sj0);
IkReal x507=((0.12500352)*cj3*sj0*sj4);
IkReal x508=((0.0625018037121786)*cj4*sj0*sj3);
IkReal x509=((0.10825629959419)*sj0);
IkReal x510=((-1.0)*sj0*x492);
IkReal x511=(r10*sj0);
IkReal x512=(r11*sj0);
IkReal x513=((0.10825629959419)*cj0);
IkReal x514=((0.108256198645226)*cj0*cj4);
evalcond[0]=((((-1.0)*r20*x456))+(((-1.0)*r21*x455))+(((-1.0)*(0.0625018037121786)*r22))+(((-1.0)*r20*x450))+pz+(((-1.0)*r21*x454))+((r20*x453))+(((-0.187505236287801)*cj4*r22))+(((-1.0)*x452))+((r21*x451)));
evalcond[1]=((((-1.0)*x454*x462))+((x463*x464))+((cj0*py))+((x453*x461))+(((-1.0)*r12*x460))+(((-1.0)*x450*x461))+(((-1.0)*r12*x457))+((x451*x462))+(((-1.0)*x455*x462))+(((-1.0)*x456*x461))+(((-1.0)*x459)));
evalcond[2]=((((-1.0)*px*x465))+((x450*x468))+((r02*x467))+((r02*x466))+((x455*x469))+(((-1.0)*x470*x471))+((x471*x472))+((x464*x473))+x459+((x456*x468))+(((-1.0)*x451*x469)));
evalcond[3]=(((x470*x483))+((x470*x482))+((x470*x477))+((r02*x474))+(((-1.0)*r01*x484))+(((-1.0)*x472*x482))+(((-1.0)*x472*x477))+(((-1.0)*sj0*x478))+(((-1.0)*x472*x483))+(((-1.0)*sj0*x452))+((pz*sj0))+(((-1.0)*r00*x485))+((r01*x480))+((sj0*x479))+(((-1.0)*r02*x476))+(((-1.0)*r02*x475))+((r00*x481)));
evalcond[4]=(((r11*x480))+(((-1.0)*(1.0)*cj0*pz))+((cj0*x478))+(((-1.0)*x477*x487))+((r12*x474))+(((-1.0)*r12*x475))+(((-1.0)*x483*x487))+(((-1.0)*x482*x487))+((r10*x481))+((x482*x486))+((x483*x486))+((x477*x486))+(((-1.0)*r12*x476))+(((-1.0)*r11*x484))+(((-1.0)*r10*x485))+((cj0*x452))+(((-1.0)*cj0*x479)));
evalcond[5]=(((x495*x500))+(((-1.0)*x496*x497))+((x480*x498))+((x495*x501))+((x481*x499))+(((-1.0)*x497*x501))+py+(((-1.0)*cj0*x494))+(((-1.0)*x484*x498))+(((-1.0)*x497*x500))+(((-1.0)*x485*x499))+((x495*x496))+(((-1.0)*(0.00975)*sj0))+(((-1.0)*x489))+((cj0*x493))+(((-0.10825629959419)*cj0*cj4*r22*sj3))+x492+x491);
evalcond[6]=(((x497*x504))+(((-1.0)*sj0*x464))+(((-1.0)*x481*x506))+x503+(((-1.0)*sj0*x493))+((x484*x505))+(((-1.0)*x495*x507))+px+(((-1.0)*x495*x504))+((r22*sj0*x476))+((x497*x508))+(((-1.0)*x502))+(((-1.0)*x480*x505))+(((-1.0)*x458))+((x497*x507))+((x485*x506))+((sj0*x494))+(((-1.0)*x495*x508)));
evalcond[7]=(((cj0*x503))+((cj0*px))+(((-0.00975)*x463))+((r12*x466))+(((-1.0)*x487*x509))+((x486*x509))+((r12*x467))+((x455*x512))+((x456*x511))+(((-1.0)*cj0*x502))+((x454*x512))+x510+(((-1.0)*x453*x511)));
evalcond[8]=((((-1.0)*r02*x460))+(((0.00975)*x473))+(((-1.0)*cj0*r00*x456))+((x470*x514))+(((-1.0)*sj0*x491))+(((-1.0)*py*x465))+(((-1.0)*r02*x457))+x510+(((-1.0)*x470*x513))+((sj0*x489))+((x472*x513))+(((-1.0)*cj0*r01*x455))+(((-1.0)*x472*x514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x515=((3.99988736317185)*cj1);
IkReal x516=((3.99988736317185)*sj1);
IkReal x517=((0.29622112105825)*cj1*cj5);
IkReal x518=((0.29622112105825)*cj1*sj5);
IkReal x519=((0.29622112105825)*cj5*sj1);
IkReal x520=((0.29622112105825)*sj1*sj5);
if( IKabs((((px*x515))+(((-1.0)*r00*x517))+(((-1.0)*pz*x516))+((r01*x518))+((r20*x519))+(((-1.0)*r21*x520)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((r01*x520))+((px*x516))+(((-1.0)*r00*x519))+((r21*x518))+(((-1.0)*r20*x517))+((pz*x515)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x515))+(((-1.0)*r00*x517))+(((-1.0)*pz*x516))+((r01*x518))+((r20*x519))+(((-1.0)*r21*x520))))+IKsqr(((-1.63995381890046)+((r01*x520))+((px*x516))+(((-1.0)*r00*x519))+((r21*x518))+(((-1.0)*r20*x517))+((pz*x515))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((px*x515))+(((-1.0)*r00*x517))+(((-1.0)*pz*x516))+((r01*x518))+((r20*x519))+(((-1.0)*r21*x520))), ((-1.63995381890046)+((r01*x520))+((px*x516))+(((-1.0)*r00*x519))+((r21*x518))+(((-1.0)*r20*x517))+((pz*x515))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x521=(cj5*r20);
IkReal x522=(r21*sj5);
IkReal x523=IKcos(j2);
IkReal x524=(cj1*x523);
IkReal x525=IKsin(j2);
IkReal x526=(sj1*x525);
IkReal x527=(cj5*r00);
IkReal x528=(r01*sj5);
IkReal x529=(cj1*x525);
IkReal x530=(sj1*x523);
IkReal x531=((0.749999825156128)*cj4);
IkReal x532=((0.433012600946063)*cj4);
IkReal x533=((0.866025201892125)*cj5*sj4);
IkReal x534=((0.866025201892125)*sj4*sj5);
IkReal x535=((((-1.0)*x526))+x524);
IkReal x536=((0.433012600946063)*sj3);
IkReal x537=((0.866025403784439)*cj3*sj4);
IkReal x538=((0.433013004730548)*cj4*sj3);
IkReal x539=((0.749999825156128)*sj3);
IkReal x540=(cj3*cj4*cj5);
IkReal x541=(cj3*cj4*sj5);
IkReal x542=((0.5)*cj3*sj4);
IkReal x543=((0.250000174843791)*cj4*sj3);
IkReal x544=((0.500000349687582)*cj5*sj3*sj4);
IkReal x545=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.25000704)*x524))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x526))+(((-0.0740573656612548)*x522))+(((0.0740573656612548)*x521)));
evalcond[1]=((((0.25000704)*x529))+(((-1.0)*(1.0)*px))+(((0.0740573656612548)*x527))+(((0.41)*sj1))+(((0.25000704)*x530))+(((-0.0740573656612548)*x528)));
evalcond[2]=(x530+(((-1.0)*r01*x533))+(((-1.0)*r02*x531))+(((-1.0)*r00*x534))+((x527*x532))+(((-1.0)*(0.250000174843791)*r02))+(((0.433013004730548)*x528))+(((-0.433013004730548)*x527))+(((-1.0)*x528*x532))+x529);
evalcond[3]=(x535+(((0.433013004730548)*x522))+(((-0.433013004730548)*x521))+(((-1.0)*r21*x533))+((x521*x532))+(((-1.0)*x522*x532))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r22*x531))+(((-1.0)*r20*x534)));
evalcond[4]=(x535+((x527*x539))+(((-1.0)*x528*x539))+(((-1.0)*x528*x543))+((r00*x541))+(((-1.0)*x528*x542))+((x527*x542))+(((-1.0)*r02*x538))+((x527*x543))+((r02*x536))+(((-1.0)*r01*x544))+(((-1.0)*r00*x545))+(((-1.0)*r02*x537))+((r01*x540)));
evalcond[5]=(((x521*x542))+(((-1.0)*x522*x539))+((r21*x540))+(((-1.0)*r22*x537))+((r22*x536))+(((-1.0)*x522*x542))+(((-1.0)*x522*x543))+(((-1.0)*r22*x538))+(((-1.0)*r21*x544))+((x521*x539))+((r20*x541))+(((-1.0)*r20*x545))+((x521*x543))+(((-1.0)*x530))+(((-1.0)*x529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x546=((3.99988736317185)*cj1);
IkReal x547=((3.99988736317185)*sj1);
IkReal x548=((0.29622112105825)*cj1*cj5);
IkReal x549=((0.29622112105825)*cj1*sj5);
IkReal x550=((0.29622112105825)*cj5*sj1);
IkReal x551=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*px*x546))+(((-1.0)*r01*x549))+((r20*x550))+((r00*x548))+(((-1.0)*r21*x551))+(((-1.0)*pz*x547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r20*x548))+(((-1.0)*r01*x551))+((pz*x546))+((r00*x550))+((r21*x549))+(((-1.0)*px*x547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*px*x546))+(((-1.0)*r01*x549))+((r20*x550))+((r00*x548))+(((-1.0)*r21*x551))+(((-1.0)*pz*x547))))+IKsqr(((-1.63995381890046)+(((-1.0)*r20*x548))+(((-1.0)*r01*x551))+((pz*x546))+((r00*x550))+((r21*x549))+(((-1.0)*px*x547))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*px*x546))+(((-1.0)*r01*x549))+((r20*x550))+((r00*x548))+(((-1.0)*r21*x551))+(((-1.0)*pz*x547))), ((-1.63995381890046)+(((-1.0)*r20*x548))+(((-1.0)*r01*x551))+((pz*x546))+((r00*x550))+((r21*x549))+(((-1.0)*px*x547))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x552=(cj5*r20);
IkReal x553=(r21*sj5);
IkReal x554=IKcos(j2);
IkReal x555=(cj1*x554);
IkReal x556=IKsin(j2);
IkReal x557=(sj1*x556);
IkReal x558=(cj5*r00);
IkReal x559=(r01*sj5);
IkReal x560=(cj1*x556);
IkReal x561=(sj1*x554);
IkReal x562=((0.749999825156128)*cj4);
IkReal x563=((0.433012600946063)*cj4);
IkReal x564=((0.866025201892125)*cj5*sj4);
IkReal x565=((0.866025201892125)*sj4*sj5);
IkReal x566=((((-1.0)*x560))+(((-1.0)*x561)));
IkReal x567=((0.433012600946063)*sj3);
IkReal x568=((0.866025403784439)*cj3*sj4);
IkReal x569=((0.433013004730548)*cj4*sj3);
IkReal x570=((0.749999825156128)*sj3);
IkReal x571=(cj3*cj4*cj5);
IkReal x572=(cj3*cj4*sj5);
IkReal x573=((0.5)*cj3*sj4);
IkReal x574=((0.250000174843791)*cj4*sj3);
IkReal x575=((0.500000349687582)*cj5*sj3*sj4);
IkReal x576=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((-0.25000704)*x557))+(((0.0740573656612548)*x552))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.25000704)*x555))+(((-0.0740573656612548)*x553)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((-0.25000704)*x560))+(((-0.25000704)*x561))+(((-1.0)*(0.41)*sj1))+(((-0.0740573656612548)*x559))+(((0.0740573656612548)*x558)));
evalcond[2]=((((-0.433013004730548)*x552))+(((-1.0)*r22*x562))+(((-1.0)*r20*x565))+x555+(((-1.0)*r21*x564))+(((-1.0)*x553*x563))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*x557))+(((0.433013004730548)*x553))+((x552*x563)));
evalcond[3]=((((-1.0)*r01*x564))+(((-1.0)*x559*x563))+(((-0.433013004730548)*x558))+(((-1.0)*(0.250000174843791)*r02))+(((-1.0)*r02*x562))+(((-1.0)*r00*x565))+x566+(((0.433013004730548)*x559))+((x558*x563)));
evalcond[4]=((((-1.0)*r01*x575))+(((-1.0)*x559*x570))+((x558*x570))+((x558*x573))+(((-1.0)*x559*x574))+(((-1.0)*x559*x573))+(((-1.0)*r02*x569))+(((-1.0)*r02*x568))+((r02*x567))+x557+((x558*x574))+((r00*x572))+(((-1.0)*r00*x576))+(((-1.0)*x555))+((r01*x571)));
evalcond[5]=((((-1.0)*r21*x575))+(((-1.0)*x553*x573))+((x552*x573))+((r22*x567))+(((-1.0)*r20*x576))+(((-1.0)*x553*x570))+((r21*x571))+((x552*x570))+((x552*x574))+(((-1.0)*r22*x569))+((r20*x572))+(((-1.0)*r22*x568))+x566+(((-1.0)*x553*x574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x577=((3.99988736317185)*cj1);
IkReal x578=((3.99988736317185)*sj1);
IkReal x579=((0.29622112105825)*cj1*cj5);
IkReal x580=((0.29622112105825)*cj1*sj5);
IkReal x581=((0.29622112105825)*cj5*sj1);
IkReal x582=((0.29622112105825)*sj1*sj5);
if( IKabs((((r20*x581))+(((-1.0)*pz*x578))+(((-1.0)*r21*x582))+((r10*x579))+(((-1.0)*r11*x580))+(((-1.0)*py*x577)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r20*x579))+((pz*x577))+((r10*x581))+((r21*x580))+(((-1.0)*py*x578))+(((-1.0)*r11*x582)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x581))+(((-1.0)*pz*x578))+(((-1.0)*r21*x582))+((r10*x579))+(((-1.0)*r11*x580))+(((-1.0)*py*x577))))+IKsqr(((-1.63995381890046)+(((-1.0)*r20*x579))+((pz*x577))+((r10*x581))+((r21*x580))+(((-1.0)*py*x578))+(((-1.0)*r11*x582))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x581))+(((-1.0)*pz*x578))+(((-1.0)*r21*x582))+((r10*x579))+(((-1.0)*r11*x580))+(((-1.0)*py*x577))), ((-1.63995381890046)+(((-1.0)*r20*x579))+((pz*x577))+((r10*x581))+((r21*x580))+(((-1.0)*py*x578))+(((-1.0)*r11*x582))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x583=(cj5*r20);
IkReal x584=(r21*sj5);
IkReal x585=IKcos(j2);
IkReal x586=(cj1*x585);
IkReal x587=IKsin(j2);
IkReal x588=(sj1*x587);
IkReal x589=(cj5*r10);
IkReal x590=(r11*sj5);
IkReal x591=(cj1*x587);
IkReal x592=(sj1*x585);
IkReal x593=((0.749999825156128)*cj4);
IkReal x594=((0.433012600946063)*cj4);
IkReal x595=((0.866025201892125)*cj5*sj4);
IkReal x596=((0.866025201892125)*sj4*sj5);
IkReal x597=((((-1.0)*x592))+(((-1.0)*x591)));
IkReal x598=((0.433012600946063)*sj3);
IkReal x599=((0.866025403784439)*cj3*sj4);
IkReal x600=((0.433013004730548)*cj4*sj3);
IkReal x601=((0.749999825156128)*sj3);
IkReal x602=(cj3*cj4*cj5);
IkReal x603=(cj3*cj4*sj5);
IkReal x604=((0.5)*cj3*sj4);
IkReal x605=((0.250000174843791)*cj4*sj3);
IkReal x606=((0.500000349687582)*cj5*sj3*sj4);
IkReal x607=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.0740573656612548)*x583))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.0740573656612548)*x584))+(((0.25000704)*x586))+(((-0.25000704)*x588)));
evalcond[1]=((((-0.25000704)*x592))+(((-0.25000704)*x591))+(((-1.0)*(1.0)*py))+(((-1.0)*(0.41)*sj1))+(((-0.0740573656612548)*x590))+(((0.0740573656612548)*x589)));
evalcond[2]=((((-1.0)*x584*x594))+((x583*x594))+(((-1.0)*r21*x595))+(((0.433013004730548)*x584))+(((-1.0)*x588))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r22*x593))+(((-0.433013004730548)*x583))+x586+(((-1.0)*r20*x596)));
evalcond[3]=((((-1.0)*r12*x593))+(((-1.0)*x590*x594))+(((-1.0)*r10*x596))+(((-1.0)*(0.250000174843791)*r12))+(((-0.433013004730548)*x589))+(((0.433013004730548)*x590))+(((-1.0)*r11*x595))+x597+((x589*x594)));
evalcond[4]=((((-1.0)*x590*x601))+(((-1.0)*x590*x604))+(((-1.0)*x586))+((r10*x603))+((r12*x598))+(((-1.0)*x590*x605))+((r11*x602))+(((-1.0)*r10*x607))+(((-1.0)*r12*x599))+((x589*x605))+(((-1.0)*r12*x600))+x588+(((-1.0)*r11*x606))+((x589*x601))+((x589*x604)));
evalcond[5]=((((-1.0)*x584*x605))+((x583*x605))+(((-1.0)*r20*x607))+(((-1.0)*x584*x601))+((r22*x598))+(((-1.0)*r22*x599))+(((-1.0)*x584*x604))+((r20*x603))+(((-1.0)*r22*x600))+(((-1.0)*r21*x606))+((r21*x602))+((x583*x601))+x597+((x583*x604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x608=((3.99988736317185)*cj1);
IkReal x609=((3.99988736317185)*sj1);
IkReal x610=((0.29622112105825)*cj1*cj5);
IkReal x611=((0.29622112105825)*cj1*sj5);
IkReal x612=((0.29622112105825)*cj5*sj1);
IkReal x613=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*pz*x609))+(((-1.0)*r21*x613))+((r20*x612))+(((-1.0)*r10*x610))+((r11*x611))+((py*x608)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((py*x609))+(((-1.0)*r20*x610))+((pz*x608))+(((-1.0)*r10*x612))+((r21*x611))+((r11*x613)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*x609))+(((-1.0)*r21*x613))+((r20*x612))+(((-1.0)*r10*x610))+((r11*x611))+((py*x608))))+IKsqr(((-1.63995381890046)+((py*x609))+(((-1.0)*r20*x610))+((pz*x608))+(((-1.0)*r10*x612))+((r21*x611))+((r11*x613))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*pz*x609))+(((-1.0)*r21*x613))+((r20*x612))+(((-1.0)*r10*x610))+((r11*x611))+((py*x608))), ((-1.63995381890046)+((py*x609))+(((-1.0)*r20*x610))+((pz*x608))+(((-1.0)*r10*x612))+((r21*x611))+((r11*x613))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x614=(cj5*r20);
IkReal x615=(r21*sj5);
IkReal x616=IKcos(j2);
IkReal x617=(cj1*x616);
IkReal x618=IKsin(j2);
IkReal x619=(sj1*x618);
IkReal x620=(cj5*r10);
IkReal x621=(r11*sj5);
IkReal x622=(cj1*x618);
IkReal x623=(sj1*x616);
IkReal x624=((0.749999825156128)*cj4);
IkReal x625=((0.433012600946063)*cj4);
IkReal x626=((0.866025201892125)*cj5*sj4);
IkReal x627=((0.866025201892125)*sj4*sj5);
IkReal x628=(x617+(((-1.0)*x619)));
IkReal x629=((0.433012600946063)*sj3);
IkReal x630=((0.866025403784439)*cj3*sj4);
IkReal x631=((0.433013004730548)*cj4*sj3);
IkReal x632=((0.749999825156128)*sj3);
IkReal x633=(cj3*cj4*cj5);
IkReal x634=(cj3*cj4*sj5);
IkReal x635=((0.5)*cj3*sj4);
IkReal x636=((0.250000174843791)*cj4*sj3);
IkReal x637=((0.500000349687582)*cj5*sj3*sj4);
IkReal x638=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.25000704)*x617))+(((-0.0740573656612548)*x615))+(((0.0740573656612548)*x614))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x619)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((0.41)*sj1))+(((0.25000704)*x623))+(((0.0740573656612548)*x620))+(((0.25000704)*x622))+(((-0.0740573656612548)*x621)));
evalcond[2]=((((-1.0)*r10*x627))+((x620*x625))+(((-1.0)*r11*x626))+x622+x623+(((-1.0)*(0.250000174843791)*r12))+(((-1.0)*r12*x624))+(((-1.0)*x621*x625))+(((-0.433013004730548)*x620))+(((0.433013004730548)*x621)));
evalcond[3]=((((0.433013004730548)*x615))+(((-0.433013004730548)*x614))+x628+(((-1.0)*r20*x627))+(((-1.0)*x615*x625))+(((-1.0)*r21*x626))+(((-1.0)*r22*x624))+((x614*x625))+(((-1.0)*(0.250000174843791)*r22)));
evalcond[4]=(((r11*x633))+(((-1.0)*r10*x638))+((x620*x632))+((x620*x635))+x628+((r10*x634))+((r12*x629))+(((-1.0)*x621*x632))+(((-1.0)*x621*x635))+(((-1.0)*r11*x637))+(((-1.0)*r12*x630))+(((-1.0)*r12*x631))+((x620*x636))+(((-1.0)*x621*x636)));
evalcond[5]=((((-1.0)*x615*x632))+(((-1.0)*x623))+(((-1.0)*r21*x637))+((x614*x636))+(((-1.0)*x622))+((r22*x629))+(((-1.0)*r22*x630))+((r20*x634))+((x614*x632))+(((-1.0)*r22*x631))+((x614*x635))+(((-1.0)*r20*x638))+((r21*x633))+(((-1.0)*x615*x636))+(((-1.0)*x615*x635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x639=((390625.0)*py);
IkReal x640=((3808.59375)*sj0);
IkReal x641=((390625.0)*cj0*pz);
IkReal x642=((28928.6584614277)*cj1);
IkReal x643=(cj5*r10);
IkReal x644=(r11*sj5);
IkReal x645=(cj5*r20);
IkReal x646=((28928.6584614277)*cj0*sj1);
IkReal x647=(r21*sj5);
IkReal x648=((28928.6584614277)*sj1);
IkReal x649=((28928.6584614277)*cj0*cj1);
CheckValue<IkReal> x650=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x650.valid){
continue;
}
CheckValue<IkReal> x651 = IKatan2WithCheck(IkReal((((cj1*x640))+(((-1.0)*x642*x644))+(((-1.0)*cj1*x639))+(((-1.0)*x646*x647))+((x645*x646))+(((-1.0)*sj1*x641))+((x642*x643)))),IkReal(((((-1.0)*sj1*x639))+((x643*x648))+(((-1.0)*x645*x649))+((cj1*x641))+(((-1.0)*x644*x648))+((sj1*x640))+((x647*x649))+(((-1.0)*(160156.25)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x651.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x650.value)))+(x651.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x652=(cj5*r20);
IkReal x653=(r21*sj5);
IkReal x654=IKcos(j2);
IkReal x655=(cj1*x654);
IkReal x656=IKsin(j2);
IkReal x657=(sj1*x656);
IkReal x658=(cj5*r00);
IkReal x659=(r01*sj5);
IkReal x660=((0.41)*sj1);
IkReal x661=(cj1*x656);
IkReal x662=(sj0*x661);
IkReal x663=(sj1*x654);
IkReal x664=(sj0*x663);
IkReal x665=(cj5*r10);
IkReal x666=(r11*sj5);
IkReal x667=((0.25000704)*cj0);
IkReal x668=((0.749999825156128)*cj4);
IkReal x669=((1.0)*x656);
IkReal x670=(sj1*x669);
IkReal x671=((0.433012600946063)*cj4);
IkReal x672=((0.866025201892125)*cj5*sj4);
IkReal x673=((0.866025201892125)*sj4*sj5);
IkReal x674=(cj1*x669);
IkReal x675=((1.0)*x663);
IkReal x676=((0.433012600946063)*sj3);
IkReal x677=((0.866025403784439)*cj3*sj4);
IkReal x678=((0.433013004730548)*cj4*sj3);
IkReal x679=((0.749999825156128)*sj3);
IkReal x680=(cj3*cj4*cj5);
IkReal x681=(cj3*cj4*sj5);
IkReal x682=((0.5)*cj3*sj4);
IkReal x683=((0.250000174843791)*cj4*sj3);
IkReal x684=((0.500000349687582)*cj5*sj3*sj4);
IkReal x685=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((-0.25000704)*x657))+(((0.25000704)*x655))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.0740573656612548)*x652))+(((-0.0740573656612548)*x653)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((-0.0740573656612548)*x659))+(((0.0740573656612548)*x658))+((sj0*x660))+(((0.25000704)*x662))+(((0.00975)*cj0))+(((0.25000704)*x664)));
evalcond[2]=((((0.0740573656612548)*x665))+(((-1.0)*(1.0)*py))+(((-1.0)*x663*x667))+(((0.00975)*sj0))+(((-1.0)*cj0*x660))+(((-0.0740573656612548)*x666))+(((-1.0)*x661*x667)));
evalcond[3]=(((x652*x671))+(((-1.0)*r20*x673))+(((-1.0)*r21*x672))+(((-1.0)*x670))+(((-1.0)*r22*x668))+(((0.433013004730548)*x653))+x655+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*x653*x671))+(((-0.433013004730548)*x652)));
evalcond[4]=((((-1.0)*r01*x672))+(((-1.0)*r00*x673))+(((-1.0)*x659*x671))+(((-1.0)*r02*x668))+(((0.433013004730548)*x659))+(((-1.0)*(0.250000174843791)*r02))+((x658*x671))+x664+x662+(((-0.433013004730548)*x658)));
evalcond[5]=((((0.433013004730548)*x666))+(((-1.0)*cj0*x674))+(((-1.0)*x666*x671))+(((-1.0)*(0.250000174843791)*r12))+(((-1.0)*r10*x673))+(((-0.433013004730548)*x665))+(((-1.0)*r11*x672))+(((-1.0)*r12*x668))+((x665*x671))+(((-1.0)*cj0*x675)));
evalcond[6]=((((-1.0)*x653*x682))+(((-1.0)*r21*x684))+((r21*x680))+(((-1.0)*x653*x679))+(((-1.0)*x675))+((x652*x682))+(((-1.0)*x653*x683))+((x652*x683))+((r22*x676))+(((-1.0)*r20*x685))+((x652*x679))+(((-1.0)*x674))+((r20*x681))+(((-1.0)*r22*x677))+(((-1.0)*r22*x678)));
evalcond[7]=((((-1.0)*r02*x678))+(((-1.0)*r02*x677))+(((-1.0)*x659*x682))+((x658*x679))+((r02*x676))+(((-1.0)*r01*x684))+((x658*x683))+((r01*x680))+(((-1.0)*x659*x683))+((x658*x682))+(((-1.0)*x659*x679))+((r00*x681))+(((-1.0)*r00*x685))+((sj0*x655))+(((-1.0)*sj0*x670)));
evalcond[8]=((((-1.0)*cj0*x655))+((x665*x679))+((x665*x683))+(((-1.0)*r12*x677))+(((-1.0)*r12*x678))+((x665*x682))+(((-1.0)*r10*x685))+((r12*x676))+(((-1.0)*x666*x683))+((r11*x680))+((r10*x681))+((cj0*x657))+(((-1.0)*r11*x684))+(((-1.0)*x666*x682))+(((-1.0)*x666*x679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x686=((3808.59375)*cj0);
IkReal x687=((390625.0)*px);
IkReal x688=((28928.6584614277)*cj1);
IkReal x689=(cj5*r00);
IkReal x690=(r01*sj5);
IkReal x691=((390625.0)*pz*sj0);
IkReal x692=(cj5*r20);
IkReal x693=((28928.6584614277)*sj0*sj1);
IkReal x694=(r21*sj5);
IkReal x695=((28928.6584614277)*sj1);
IkReal x696=((28928.6584614277)*cj1*sj0);
CheckValue<IkReal> x697 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x686))+(((-1.0)*sj1*x691))+((cj1*x687))+(((-1.0)*x688*x689))+(((-1.0)*x693*x694))+((x692*x693))+((x688*x690)))),IkReal((((cj1*x691))+((x694*x696))+(((-1.0)*x689*x695))+((sj1*x687))+(((-1.0)*(160156.25)*sj0))+(((-1.0)*x692*x696))+(((-1.0)*sj1*x686))+((x690*x695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x697.valid){
continue;
}
CheckValue<IkReal> x698=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x698.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x697.value)+(((1.5707963267949)*(x698.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x699=(cj5*r20);
IkReal x700=(r21*sj5);
IkReal x701=IKcos(j2);
IkReal x702=(cj1*x701);
IkReal x703=IKsin(j2);
IkReal x704=(sj1*x703);
IkReal x705=(cj5*r00);
IkReal x706=(r01*sj5);
IkReal x707=((0.41)*sj1);
IkReal x708=(cj1*x703);
IkReal x709=(sj0*x708);
IkReal x710=(sj1*x701);
IkReal x711=(sj0*x710);
IkReal x712=(cj5*r10);
IkReal x713=(r11*sj5);
IkReal x714=((0.25000704)*cj0);
IkReal x715=((0.749999825156128)*cj4);
IkReal x716=((1.0)*x703);
IkReal x717=(sj1*x716);
IkReal x718=((0.433012600946063)*cj4);
IkReal x719=((0.866025201892125)*cj5*sj4);
IkReal x720=((0.866025201892125)*sj4*sj5);
IkReal x721=(cj1*x716);
IkReal x722=((1.0)*x710);
IkReal x723=((0.433012600946063)*sj3);
IkReal x724=((0.866025403784439)*cj3*sj4);
IkReal x725=((0.433013004730548)*cj4*sj3);
IkReal x726=((0.749999825156128)*sj3);
IkReal x727=(cj3*cj4*cj5);
IkReal x728=(cj3*cj4*sj5);
IkReal x729=((0.5)*cj3*sj4);
IkReal x730=((0.250000174843791)*cj4*sj3);
IkReal x731=((0.500000349687582)*cj5*sj3*sj4);
IkReal x732=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.0740573656612548)*x699))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x704))+(((-0.0740573656612548)*x700))+(((0.25000704)*x702)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((0.25000704)*x709))+(((0.00975)*cj0))+(((0.25000704)*x711))+(((-0.0740573656612548)*x706))+(((0.0740573656612548)*x705))+((sj0*x707)));
evalcond[2]=((((-1.0)*x708*x714))+(((-1.0)*(1.0)*py))+(((-1.0)*cj0*x707))+(((0.00975)*sj0))+(((-1.0)*x710*x714))+(((-0.0740573656612548)*x713))+(((0.0740573656612548)*x712)));
evalcond[3]=((((0.433013004730548)*x700))+(((-0.433013004730548)*x699))+(((-1.0)*r20*x720))+x702+(((-1.0)*r21*x719))+((x699*x718))+(((-1.0)*x700*x718))+(((-1.0)*r22*x715))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*x717)));
evalcond[4]=((((-1.0)*x706*x718))+(((-0.433013004730548)*x705))+(((-1.0)*r00*x720))+x709+(((-1.0)*(0.250000174843791)*r02))+x711+((x705*x718))+(((0.433013004730548)*x706))+(((-1.0)*r01*x719))+(((-1.0)*r02*x715)));
evalcond[5]=((((-1.0)*cj0*x721))+(((-0.433013004730548)*x712))+(((-1.0)*(0.250000174843791)*r12))+(((-1.0)*x713*x718))+(((-1.0)*r12*x715))+(((-1.0)*r10*x720))+(((-1.0)*cj0*x722))+((x712*x718))+(((-1.0)*r11*x719))+(((0.433013004730548)*x713)));
evalcond[6]=((((-1.0)*r20*x732))+((x699*x729))+(((-1.0)*x721))+((x699*x730))+((r21*x727))+((x699*x726))+(((-1.0)*x700*x730))+((r22*x723))+(((-1.0)*r21*x731))+(((-1.0)*x700*x729))+(((-1.0)*r22*x724))+(((-1.0)*x722))+(((-1.0)*r22*x725))+((r20*x728))+(((-1.0)*x700*x726)));
evalcond[7]=((((-1.0)*r00*x732))+(((-1.0)*x706*x729))+(((-1.0)*x706*x730))+(((-1.0)*r02*x725))+((sj0*x702))+(((-1.0)*r02*x724))+((x705*x730))+((r02*x723))+(((-1.0)*sj0*x717))+((r01*x727))+((x705*x729))+(((-1.0)*r01*x731))+(((-1.0)*x706*x726))+((r00*x728))+((x705*x726)));
evalcond[8]=((((-1.0)*cj0*x702))+((x712*x730))+((x712*x729))+(((-1.0)*x713*x729))+((cj0*x704))+((x712*x726))+(((-1.0)*r11*x731))+(((-1.0)*x713*x726))+((r10*x728))+((r12*x723))+(((-1.0)*r10*x732))+(((-1.0)*r12*x724))+((r11*x727))+(((-1.0)*r12*x725))+(((-1.0)*x713*x730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x733=(cj0*r12);
IkReal x734=((0.182313665255445)*cj0);
IkReal x735=(cj5*r10);
IkReal x736=(r11*sj5);
IkReal x737=((0.108256198645226)*cj0*cj4);
IkReal x738=((0.216512397290453)*cj0*sj4);
IkReal x739=(cj5*r20);
IkReal x740=(r21*sj5);
IkReal x741=((0.264039508890796)*cj4);
IkReal x742=((0.528079017781592)*sj4);
CheckValue<IkReal> x743=IKPowWithIntegerCheck(cj0,-2);
if(!x743.valid){
continue;
}
if( IKabs(((-2.4390243902439)*(x743.value)*((((x735*x737))+(((-0.187505236287801)*cj4*x733))+((cj0*py))+(((-1.0)*x734*x735))+(((-1.0)*cj5*r11*x738))+(((-1.0)*(0.00975)*cj0*sj0))+(((-0.0625018037121786)*x733))+(((-1.0)*x736*x737))+(((-1.0)*r10*sj5*x738))+((x734*x736)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(0.457329844604393)*cj4*r22))+(((-0.444667476232793)*x739))+(((-1.0)*x740*x741))+(((2.4390243902439)*pz))+(((-1.0)*r20*sj5*x742))+((x739*x741))+(((-1.0)*(0.15244342368824)*r22))+(((0.444667476232793)*x740))+(((-1.0)*cj5*r21*x742)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.4390243902439)*(x743.value)*((((x735*x737))+(((-0.187505236287801)*cj4*x733))+((cj0*py))+(((-1.0)*x734*x735))+(((-1.0)*cj5*r11*x738))+(((-1.0)*(0.00975)*cj0*sj0))+(((-0.0625018037121786)*x733))+(((-1.0)*x736*x737))+(((-1.0)*r10*sj5*x738))+((x734*x736))))))+IKsqr(((((-1.0)*(0.457329844604393)*cj4*r22))+(((-0.444667476232793)*x739))+(((-1.0)*x740*x741))+(((2.4390243902439)*pz))+(((-1.0)*r20*sj5*x742))+((x739*x741))+(((-1.0)*(0.15244342368824)*r22))+(((0.444667476232793)*x740))+(((-1.0)*cj5*r21*x742))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.4390243902439)*(x743.value)*((((x735*x737))+(((-0.187505236287801)*cj4*x733))+((cj0*py))+(((-1.0)*x734*x735))+(((-1.0)*cj5*r11*x738))+(((-1.0)*(0.00975)*cj0*sj0))+(((-0.0625018037121786)*x733))+(((-1.0)*x736*x737))+(((-1.0)*r10*sj5*x738))+((x734*x736))))), ((((-1.0)*(0.457329844604393)*cj4*r22))+(((-0.444667476232793)*x739))+(((-1.0)*x740*x741))+(((2.4390243902439)*pz))+(((-1.0)*r20*sj5*x742))+((x739*x741))+(((-1.0)*(0.15244342368824)*r22))+(((0.444667476232793)*x740))+(((-1.0)*cj5*r21*x742))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x744=((0.182313665255445)*cj5);
IkReal x745=((0.182313665255445)*sj5);
IkReal x746=((0.41)*(IKcos(j1)));
IkReal x747=((0.108256198645226)*cj4*cj5);
IkReal x748=((0.108256198645226)*cj4*sj5);
IkReal x749=((0.216512397290453)*cj5*sj4);
IkReal x750=((0.216512397290453)*sj4*sj5);
IkReal x751=((0.0625018037121786)*cj0);
IkReal x752=((0.00975)*cj0);
IkReal x753=(sj0*x752);
IkReal x754=((0.187505236287801)*cj0*cj4);
IkReal x755=(cj0*r10);
IkReal x756=(cj0*r11);
IkReal x757=cj0*cj0;
IkReal x758=((0.41)*(IKsin(j1)));
IkReal x759=((1.0)*sj0);
IkReal x760=((0.0625018037121786)*sj0);
IkReal x761=((0.187505236287801)*cj4*sj0);
IkReal x762=(r00*sj0);
IkReal x763=(r01*sj0);
IkReal x764=(cj5*r00);
IkReal x765=((0.108256198645226)*cj4*sj0);
IkReal x766=(r01*sj5);
IkReal x767=sj0*sj0;
IkReal x768=((0.108256198645226)*sj3);
IkReal x769=((0.216512447764952)*cj3*sj4);
IkReal x770=((0.10825629959419)*cj4*sj3);
IkReal x771=((0.187505236287801)*sj3);
IkReal x772=((0.0740573656612548)*cj5*r20);
IkReal x773=((0.0740573656612548)*r21*sj5);
IkReal x774=((0.25000704)*cj3*cj4*cj5);
IkReal x775=((0.25000704)*cj3*cj4*sj5);
IkReal x776=((0.12500352)*cj3*sj4);
IkReal x777=((0.0625018037121786)*cj4*sj3);
IkReal x778=((0.125003607424357)*cj5*sj3*sj4);
IkReal x779=((0.125003607424357)*sj3*sj4*sj5);
IkReal x780=(cj5*r10);
IkReal x781=(r11*sj5);
IkReal x782=((0.0740573656612548)*cj5);
IkReal x783=(r10*x782);
IkReal x784=((0.0740573656612548)*sj5);
IkReal x785=(r11*x784);
IkReal x786=(cj0*x758);
IkReal x787=((0.108256198645226)*r22*sj3);
IkReal x788=((0.216512447764952)*cj3*r22*sj4);
IkReal x789=(cj5*r20);
IkReal x790=((0.187505236287801)*cj0*sj3);
IkReal x791=(r21*sj5);
IkReal x792=(cj0*r21);
IkReal x793=(cj0*r20);
IkReal x794=((0.12500352)*cj0*cj3*sj4);
IkReal x795=((0.0625018037121786)*cj0*cj4*sj3);
IkReal x796=(r00*x782);
IkReal x797=(r01*x784);
IkReal x798=((0.187505236287801)*sj0*sj3);
IkReal x799=(r21*sj0);
IkReal x800=(r20*sj0);
IkReal x801=((0.12500352)*cj3*sj0*sj4);
IkReal x802=((0.0625018037121786)*cj4*sj0*sj3);
IkReal x803=((0.10825629959419)*sj0);
IkReal x804=((-1.0)*sj0*x786);
IkReal x805=(r10*sj0);
IkReal x806=(r11*sj0);
IkReal x807=((0.10825629959419)*cj0);
IkReal x808=((0.108256198645226)*cj0*cj4);
evalcond[0]=((((-1.0)*x746))+(((-1.0)*(0.0625018037121786)*r22))+(((-1.0)*r20*x750))+(((-1.0)*r21*x749))+pz+(((-1.0)*r21*x748))+((r21*x745))+(((-1.0)*r20*x744))+(((-0.187505236287801)*cj4*r22))+((r20*x747)));
evalcond[1]=((((-1.0)*x753))+((cj0*py))+(((-1.0)*x744*x755))+((x757*x758))+(((-1.0)*r12*x754))+((x747*x755))+(((-1.0)*r12*x751))+((x745*x756))+(((-1.0)*x748*x756))+(((-1.0)*x750*x755))+(((-1.0)*x749*x756)));
evalcond[2]=(((x749*x763))+(((-1.0)*px*x759))+((x765*x766))+((r02*x760))+(((-1.0)*x764*x765))+((x758*x767))+((r02*x761))+((x744*x762))+((x750*x762))+(((-1.0)*x745*x763))+x753);
evalcond[3]=(((x764*x776))+((sj0*x773))+(((-1.0)*x766*x776))+(((-1.0)*r02*x770))+(((-1.0)*r01*x778))+((x764*x771))+((x764*x777))+(((-1.0)*r02*x769))+(((-1.0)*r00*x779))+((pz*sj0))+(((-1.0)*x766*x771))+(((-1.0)*x766*x777))+((r02*x768))+((r00*x775))+((r01*x774))+(((-1.0)*sj0*x746))+(((-1.0)*sj0*x772)));
evalcond[4]=((((-1.0)*r10*x779))+(((-1.0)*r11*x778))+(((-1.0)*(1.0)*cj0*pz))+((cj0*x772))+((r12*x768))+(((-1.0)*x771*x781))+((r10*x775))+(((-1.0)*cj0*x773))+((x777*x780))+(((-1.0)*x777*x781))+((x771*x780))+(((-1.0)*r12*x770))+(((-1.0)*r12*x769))+((cj0*x746))+(((-1.0)*x776*x781))+((r11*x774))+((x776*x780)));
evalcond[5]=(((x789*x790))+(((-1.0)*cj0*x788))+x786+x785+((cj0*x787))+((x774*x792))+(((-1.0)*x783))+((x789*x794))+py+(((-1.0)*x791*x794))+((x789*x795))+(((-1.0)*x791*x795))+(((-1.0)*(0.00975)*sj0))+(((-1.0)*x779*x793))+(((-0.10825629959419)*cj0*cj4*r22*sj3))+(((-1.0)*x778*x792))+((x775*x793))+(((-1.0)*x790*x791)));
evalcond[6]=((((-1.0)*x789*x801))+(((-1.0)*x752))+(((-1.0)*x775*x800))+((x791*x798))+((x778*x799))+((r22*sj0*x770))+px+((sj0*x788))+((x791*x802))+(((-1.0)*x789*x802))+((x779*x800))+(((-1.0)*x796))+(((-1.0)*x789*x798))+(((-1.0)*sj0*x758))+(((-1.0)*x774*x799))+(((-1.0)*sj0*x787))+((x791*x801))+x797);
evalcond[7]=((((-1.0)*x747*x805))+((x749*x806))+((cj0*px))+((r12*x761))+((cj0*x797))+x804+((x750*x805))+(((-1.0)*x781*x803))+((x780*x803))+(((-1.0)*cj0*x796))+((r12*x760))+(((-0.00975)*x757))+((x748*x806)));
evalcond[8]=((((-1.0)*cj0*r00*x750))+((x764*x808))+(((-1.0)*x766*x808))+x804+(((0.00975)*x767))+(((-1.0)*cj0*r01*x749))+(((-1.0)*sj0*x785))+(((-1.0)*r02*x751))+(((-1.0)*x764*x807))+(((-1.0)*r02*x754))+(((-1.0)*py*x759))+((x766*x807))+((sj0*x783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x809=((3.99988736317185)*cj1);
IkReal x810=((3.99988736317185)*sj1);
IkReal x811=((0.29622112105825)*cj1*cj5);
IkReal x812=((0.29622112105825)*cj1*sj5);
IkReal x813=((0.29622112105825)*cj5*sj1);
IkReal x814=((0.29622112105825)*sj1*sj5);
if( IKabs((((r01*x812))+((r20*x813))+(((-1.0)*r00*x811))+(((-1.0)*pz*x810))+((px*x809))+(((-1.0)*r21*x814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((r21*x812))+(((-1.0)*r00*x813))+((px*x810))+((r01*x814))+((pz*x809))+(((-1.0)*r20*x811)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x812))+((r20*x813))+(((-1.0)*r00*x811))+(((-1.0)*pz*x810))+((px*x809))+(((-1.0)*r21*x814))))+IKsqr(((-1.63995381890046)+((r21*x812))+(((-1.0)*r00*x813))+((px*x810))+((r01*x814))+((pz*x809))+(((-1.0)*r20*x811))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*x812))+((r20*x813))+(((-1.0)*r00*x811))+(((-1.0)*pz*x810))+((px*x809))+(((-1.0)*r21*x814))), ((-1.63995381890046)+((r21*x812))+(((-1.0)*r00*x813))+((px*x810))+((r01*x814))+((pz*x809))+(((-1.0)*r20*x811))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x815=(cj5*r20);
IkReal x816=(r21*sj5);
IkReal x817=IKcos(j2);
IkReal x818=(cj1*x817);
IkReal x819=IKsin(j2);
IkReal x820=(sj1*x819);
IkReal x821=(cj5*r00);
IkReal x822=(r01*sj5);
IkReal x823=(cj1*x819);
IkReal x824=(sj1*x817);
IkReal x825=((0.749999825156128)*cj4);
IkReal x826=((0.433012600946063)*cj4);
IkReal x827=((0.866025201892125)*cj5*sj4);
IkReal x828=((0.866025201892125)*sj4*sj5);
IkReal x829=((((-1.0)*x820))+x818);
IkReal x830=((0.433012600946063)*sj3);
IkReal x831=((0.866025403784439)*cj3*sj4);
IkReal x832=((0.433013004730548)*cj4*sj3);
IkReal x833=((0.749999825156128)*sj3);
IkReal x834=(cj3*cj4*cj5);
IkReal x835=(cj3*cj4*sj5);
IkReal x836=((0.5)*cj3*sj4);
IkReal x837=((0.250000174843791)*cj4*sj3);
IkReal x838=((0.500000349687582)*cj5*sj3*sj4);
IkReal x839=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((-0.0740573656612548)*x816))+(((0.0740573656612548)*x815))+(((-0.25000704)*x820))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.25000704)*x818)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((0.25000704)*x823))+(((0.41)*sj1))+(((-0.0740573656612548)*x822))+(((0.0740573656612548)*x821))+(((0.25000704)*x824)));
evalcond[2]=((((-1.0)*x822*x826))+((x821*x826))+(((-0.433013004730548)*x821))+(((-1.0)*r00*x828))+(((-1.0)*r02*x825))+(((-1.0)*r01*x827))+(((-1.0)*(0.250000174843791)*r02))+x824+x823+(((0.433013004730548)*x822)));
evalcond[3]=((((-1.0)*r22*x825))+((x815*x826))+(((0.433013004730548)*x816))+(((-1.0)*(0.250000174843791)*r22))+(((-0.433013004730548)*x815))+x829+(((-1.0)*r20*x828))+(((-1.0)*r21*x827))+(((-1.0)*x816*x826)));
evalcond[4]=(((x821*x836))+(((-1.0)*r00*x839))+((x821*x833))+((r00*x835))+(((-1.0)*r02*x832))+(((-1.0)*r02*x831))+((r01*x834))+(((-1.0)*x822*x833))+((r02*x830))+(((-1.0)*x822*x836))+((x821*x837))+x829+(((-1.0)*x822*x837))+(((-1.0)*r01*x838)));
evalcond[5]=(((x815*x837))+(((-1.0)*x823))+((r22*x830))+((x815*x836))+((r20*x835))+((x815*x833))+(((-1.0)*r21*x838))+(((-1.0)*x816*x836))+(((-1.0)*x824))+(((-1.0)*r20*x839))+(((-1.0)*r22*x832))+(((-1.0)*x816*x833))+(((-1.0)*r22*x831))+(((-1.0)*x816*x837))+((r21*x834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x840=((3.99988736317185)*cj1);
IkReal x841=((3.99988736317185)*sj1);
IkReal x842=((0.29622112105825)*cj1*cj5);
IkReal x843=((0.29622112105825)*cj1*sj5);
IkReal x844=((0.29622112105825)*cj5*sj1);
IkReal x845=((0.29622112105825)*sj1*sj5);
if( IKabs((((r00*x842))+(((-1.0)*r01*x843))+(((-1.0)*px*x840))+(((-1.0)*r21*x845))+((r20*x844))+(((-1.0)*pz*x841)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((r21*x843))+((pz*x840))+(((-1.0)*r20*x842))+(((-1.0)*px*x841))+(((-1.0)*r01*x845))+((r00*x844)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x842))+(((-1.0)*r01*x843))+(((-1.0)*px*x840))+(((-1.0)*r21*x845))+((r20*x844))+(((-1.0)*pz*x841))))+IKsqr(((-1.63995381890046)+((r21*x843))+((pz*x840))+(((-1.0)*r20*x842))+(((-1.0)*px*x841))+(((-1.0)*r01*x845))+((r00*x844))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x842))+(((-1.0)*r01*x843))+(((-1.0)*px*x840))+(((-1.0)*r21*x845))+((r20*x844))+(((-1.0)*pz*x841))), ((-1.63995381890046)+((r21*x843))+((pz*x840))+(((-1.0)*r20*x842))+(((-1.0)*px*x841))+(((-1.0)*r01*x845))+((r00*x844))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x846=(cj5*r20);
IkReal x847=(r21*sj5);
IkReal x848=IKcos(j2);
IkReal x849=(cj1*x848);
IkReal x850=IKsin(j2);
IkReal x851=(sj1*x850);
IkReal x852=(cj5*r00);
IkReal x853=(r01*sj5);
IkReal x854=(cj1*x850);
IkReal x855=(sj1*x848);
IkReal x856=((0.749999825156128)*cj4);
IkReal x857=((0.433012600946063)*cj4);
IkReal x858=((0.866025201892125)*cj5*sj4);
IkReal x859=((0.866025201892125)*sj4*sj5);
IkReal x860=((((-1.0)*x854))+(((-1.0)*x855)));
IkReal x861=((0.433012600946063)*sj3);
IkReal x862=((0.866025403784439)*cj3*sj4);
IkReal x863=((0.433013004730548)*cj4*sj3);
IkReal x864=((0.749999825156128)*sj3);
IkReal x865=(cj3*cj4*cj5);
IkReal x866=(cj3*cj4*sj5);
IkReal x867=((0.5)*cj3*sj4);
IkReal x868=((0.250000174843791)*cj4*sj3);
IkReal x869=((0.500000349687582)*cj5*sj3*sj4);
IkReal x870=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.25000704)*x849))+(((-0.0740573656612548)*x847))+(((0.0740573656612548)*x846))+(((-0.25000704)*x851)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((-0.25000704)*x854))+(((-0.25000704)*x855))+(((0.0740573656612548)*x852))+(((-1.0)*(0.41)*sj1))+(((-0.0740573656612548)*x853)));
evalcond[2]=((((-1.0)*x847*x857))+x849+(((-1.0)*x851))+(((-1.0)*r20*x859))+(((-0.433013004730548)*x846))+((x846*x857))+(((-1.0)*(0.250000174843791)*r22))+(((0.433013004730548)*x847))+(((-1.0)*r22*x856))+(((-1.0)*r21*x858)));
evalcond[3]=(((x852*x857))+(((0.433013004730548)*x853))+(((-1.0)*r02*x856))+(((-1.0)*r01*x858))+(((-1.0)*r00*x859))+(((-1.0)*x853*x857))+x860+(((-1.0)*(0.250000174843791)*r02))+(((-0.433013004730548)*x852)));
evalcond[4]=(((x852*x867))+(((-1.0)*r02*x862))+((x852*x868))+((r02*x861))+((r00*x866))+(((-1.0)*x853*x864))+(((-1.0)*x853*x868))+(((-1.0)*x853*x867))+((r01*x865))+x851+((x852*x864))+(((-1.0)*r02*x863))+(((-1.0)*r01*x869))+(((-1.0)*x849))+(((-1.0)*r00*x870)));
evalcond[5]=(((x846*x864))+(((-1.0)*x847*x864))+(((-1.0)*r21*x869))+((r20*x866))+(((-1.0)*x847*x868))+((x846*x868))+((x846*x867))+((r22*x861))+(((-1.0)*r22*x863))+(((-1.0)*r20*x870))+x860+((r21*x865))+(((-1.0)*r22*x862))+(((-1.0)*x847*x867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x871=((3.99988736317185)*cj1);
IkReal x872=((3.99988736317185)*sj1);
IkReal x873=((0.29622112105825)*cj1*cj5);
IkReal x874=((0.29622112105825)*cj1*sj5);
IkReal x875=((0.29622112105825)*cj5*sj1);
IkReal x876=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*r11*x874))+(((-1.0)*py*x871))+(((-1.0)*r21*x876))+(((-1.0)*pz*x872))+((r10*x873))+((r20*x875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((r21*x874))+(((-1.0)*r11*x876))+((r10*x875))+((pz*x871))+(((-1.0)*r20*x873))+(((-1.0)*py*x872)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x874))+(((-1.0)*py*x871))+(((-1.0)*r21*x876))+(((-1.0)*pz*x872))+((r10*x873))+((r20*x875))))+IKsqr(((-1.63995381890046)+((r21*x874))+(((-1.0)*r11*x876))+((r10*x875))+((pz*x871))+(((-1.0)*r20*x873))+(((-1.0)*py*x872))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x874))+(((-1.0)*py*x871))+(((-1.0)*r21*x876))+(((-1.0)*pz*x872))+((r10*x873))+((r20*x875))), ((-1.63995381890046)+((r21*x874))+(((-1.0)*r11*x876))+((r10*x875))+((pz*x871))+(((-1.0)*r20*x873))+(((-1.0)*py*x872))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x877=(cj5*r20);
IkReal x878=(r21*sj5);
IkReal x879=IKcos(j2);
IkReal x880=(cj1*x879);
IkReal x881=IKsin(j2);
IkReal x882=(sj1*x881);
IkReal x883=(cj5*r10);
IkReal x884=(r11*sj5);
IkReal x885=(cj1*x881);
IkReal x886=(sj1*x879);
IkReal x887=((0.749999825156128)*cj4);
IkReal x888=((0.433012600946063)*cj4);
IkReal x889=((0.866025201892125)*cj5*sj4);
IkReal x890=((0.866025201892125)*sj4*sj5);
IkReal x891=((((-1.0)*x886))+(((-1.0)*x885)));
IkReal x892=((0.433012600946063)*sj3);
IkReal x893=((0.866025403784439)*cj3*sj4);
IkReal x894=((0.433013004730548)*cj4*sj3);
IkReal x895=((0.749999825156128)*sj3);
IkReal x896=(cj3*cj4*cj5);
IkReal x897=(cj3*cj4*sj5);
IkReal x898=((0.5)*cj3*sj4);
IkReal x899=((0.250000174843791)*cj4*sj3);
IkReal x900=((0.500000349687582)*cj5*sj3*sj4);
IkReal x901=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((-0.25000704)*x882))+(((0.25000704)*x880))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.0740573656612548)*x877))+(((-0.0740573656612548)*x878)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-0.25000704)*x886))+(((-0.25000704)*x885))+(((-0.0740573656612548)*x884))+(((-1.0)*(0.41)*sj1))+(((0.0740573656612548)*x883)));
evalcond[2]=((((-1.0)*x882))+(((-1.0)*x878*x888))+(((-1.0)*r20*x890))+(((-1.0)*r22*x887))+(((-0.433013004730548)*x877))+x880+(((-1.0)*r21*x889))+((x877*x888))+(((-1.0)*(0.250000174843791)*r22))+(((0.433013004730548)*x878)));
evalcond[3]=((((-0.433013004730548)*x883))+(((0.433013004730548)*x884))+(((-1.0)*r11*x889))+((x883*x888))+(((-1.0)*(0.250000174843791)*r12))+(((-1.0)*r12*x887))+(((-1.0)*r10*x890))+(((-1.0)*x884*x888))+x891);
evalcond[4]=((((-1.0)*r12*x893))+((x883*x895))+(((-1.0)*x884*x899))+((x883*x899))+(((-1.0)*r12*x894))+(((-1.0)*x884*x895))+x882+((x883*x898))+((r12*x892))+(((-1.0)*r10*x901))+((r10*x897))+(((-1.0)*x880))+(((-1.0)*x884*x898))+(((-1.0)*r11*x900))+((r11*x896)));
evalcond[5]=((((-1.0)*x878*x899))+((r22*x892))+(((-1.0)*r20*x901))+(((-1.0)*x878*x895))+((x877*x898))+(((-1.0)*x878*x898))+(((-1.0)*r21*x900))+((x877*x895))+((x877*x899))+((r21*x896))+x891+((r20*x897))+(((-1.0)*r22*x893))+(((-1.0)*r22*x894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x902=((3.99988736317185)*cj1);
IkReal x903=((3.99988736317185)*sj1);
IkReal x904=((0.29622112105825)*cj1*cj5);
IkReal x905=((0.29622112105825)*cj1*sj5);
IkReal x906=((0.29622112105825)*cj5*sj1);
IkReal x907=((0.29622112105825)*sj1*sj5);
if( IKabs((((py*x902))+(((-1.0)*pz*x903))+((r11*x905))+((r20*x906))+(((-1.0)*r21*x907))+(((-1.0)*r10*x904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r10*x906))+((r21*x905))+((py*x903))+((pz*x902))+((r11*x907))+(((-1.0)*r20*x904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x902))+(((-1.0)*pz*x903))+((r11*x905))+((r20*x906))+(((-1.0)*r21*x907))+(((-1.0)*r10*x904))))+IKsqr(((-1.63995381890046)+(((-1.0)*r10*x906))+((r21*x905))+((py*x903))+((pz*x902))+((r11*x907))+(((-1.0)*r20*x904))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((py*x902))+(((-1.0)*pz*x903))+((r11*x905))+((r20*x906))+(((-1.0)*r21*x907))+(((-1.0)*r10*x904))), ((-1.63995381890046)+(((-1.0)*r10*x906))+((r21*x905))+((py*x903))+((pz*x902))+((r11*x907))+(((-1.0)*r20*x904))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x908=(cj5*r20);
IkReal x909=(r21*sj5);
IkReal x910=IKcos(j2);
IkReal x911=(cj1*x910);
IkReal x912=IKsin(j2);
IkReal x913=(sj1*x912);
IkReal x914=(cj5*r10);
IkReal x915=(r11*sj5);
IkReal x916=(cj1*x912);
IkReal x917=(sj1*x910);
IkReal x918=((0.749999825156128)*cj4);
IkReal x919=((0.433012600946063)*cj4);
IkReal x920=((0.866025201892125)*cj5*sj4);
IkReal x921=((0.866025201892125)*sj4*sj5);
IkReal x922=(x911+(((-1.0)*x913)));
IkReal x923=((0.433012600946063)*sj3);
IkReal x924=((0.866025403784439)*cj3*sj4);
IkReal x925=((0.433013004730548)*cj4*sj3);
IkReal x926=((0.749999825156128)*sj3);
IkReal x927=(cj3*cj4*cj5);
IkReal x928=(cj3*cj4*sj5);
IkReal x929=((0.5)*cj3*sj4);
IkReal x930=((0.250000174843791)*cj4*sj3);
IkReal x931=((0.500000349687582)*cj5*sj3*sj4);
IkReal x932=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((-0.0740573656612548)*x909))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.25000704)*x911))+(((0.0740573656612548)*x908))+(((-0.25000704)*x913)));
evalcond[1]=((((0.0740573656612548)*x914))+(((-1.0)*(1.0)*py))+(((0.25000704)*x916))+(((0.41)*sj1))+(((0.25000704)*x917))+(((-0.0740573656612548)*x915)));
evalcond[2]=((((-1.0)*r12*x918))+(((0.433013004730548)*x915))+(((-1.0)*r11*x920))+x917+x916+(((-0.433013004730548)*x914))+(((-1.0)*x915*x919))+(((-1.0)*(0.250000174843791)*r12))+((x914*x919))+(((-1.0)*r10*x921)));
evalcond[3]=((((-1.0)*r21*x920))+(((-1.0)*x909*x919))+(((0.433013004730548)*x909))+(((-0.433013004730548)*x908))+(((-1.0)*r22*x918))+(((-1.0)*r20*x921))+((x908*x919))+(((-1.0)*(0.250000174843791)*r22))+x922);
evalcond[4]=(((r10*x928))+((x914*x926))+(((-1.0)*r10*x932))+((x914*x929))+(((-1.0)*r12*x925))+((r11*x927))+(((-1.0)*x915*x930))+((r12*x923))+(((-1.0)*r12*x924))+(((-1.0)*r11*x931))+((x914*x930))+(((-1.0)*x915*x926))+x922+(((-1.0)*x915*x929)));
evalcond[5]=((((-1.0)*r21*x931))+(((-1.0)*x909*x926))+(((-1.0)*x917))+(((-1.0)*x916))+(((-1.0)*r22*x925))+(((-1.0)*x909*x930))+(((-1.0)*r20*x932))+((x908*x929))+(((-1.0)*r22*x924))+((x908*x926))+((x908*x930))+((r20*x928))+((r22*x923))+((r21*x927))+(((-1.0)*x909*x929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x933=((390625.0)*py);
IkReal x934=((3808.59375)*sj0);
IkReal x935=((390625.0)*cj0*pz);
IkReal x936=((28928.6584614277)*cj1);
IkReal x937=(cj5*r10);
IkReal x938=(r11*sj5);
IkReal x939=(cj5*r20);
IkReal x940=((28928.6584614277)*cj0*sj1);
IkReal x941=(r21*sj5);
IkReal x942=((28928.6584614277)*sj1);
IkReal x943=((28928.6584614277)*cj0*cj1);
CheckValue<IkReal> x944 = IKatan2WithCheck(IkReal(((((-1.0)*x936*x938))+(((-1.0)*x940*x941))+(((-1.0)*sj1*x935))+(((-1.0)*cj1*x933))+((cj1*x934))+((x936*x937))+((x939*x940)))),IkReal(((((-1.0)*x938*x942))+((sj1*x934))+((x941*x943))+((x937*x942))+(((-1.0)*sj1*x933))+(((-1.0)*x939*x943))+((cj1*x935))+(((-1.0)*(160156.25)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x944.valid){
continue;
}
CheckValue<IkReal> x945=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x945.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x944.value)+(((1.5707963267949)*(x945.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x946=(cj5*r20);
IkReal x947=(r21*sj5);
IkReal x948=IKcos(j2);
IkReal x949=(cj1*x948);
IkReal x950=IKsin(j2);
IkReal x951=(sj1*x950);
IkReal x952=(cj5*r00);
IkReal x953=(r01*sj5);
IkReal x954=((0.41)*sj1);
IkReal x955=(cj1*x950);
IkReal x956=(sj0*x955);
IkReal x957=(sj1*x948);
IkReal x958=(sj0*x957);
IkReal x959=(cj5*r10);
IkReal x960=(r11*sj5);
IkReal x961=((0.25000704)*cj0);
IkReal x962=((0.749999825156128)*cj4);
IkReal x963=((1.0)*x950);
IkReal x964=(sj1*x963);
IkReal x965=((0.433012600946063)*cj4);
IkReal x966=((0.866025201892125)*cj5*sj4);
IkReal x967=((0.866025201892125)*sj4*sj5);
IkReal x968=(cj1*x963);
IkReal x969=((1.0)*x957);
IkReal x970=((0.433012600946063)*sj3);
IkReal x971=((0.866025403784439)*cj3*sj4);
IkReal x972=((0.433013004730548)*cj4*sj3);
IkReal x973=((0.749999825156128)*sj3);
IkReal x974=(cj3*cj4*cj5);
IkReal x975=(cj3*cj4*sj5);
IkReal x976=((0.5)*cj3*sj4);
IkReal x977=((0.250000174843791)*cj4*sj3);
IkReal x978=((0.500000349687582)*cj5*sj3*sj4);
IkReal x979=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x951))+(((-0.0740573656612548)*x947))+(((0.25000704)*x949))+(((0.0740573656612548)*x946)));
evalcond[1]=((((0.25000704)*x956))+(((-1.0)*(1.0)*px))+(((-0.0740573656612548)*x953))+(((0.25000704)*x958))+(((0.0740573656612548)*x952))+((sj0*x954))+(((0.00975)*cj0)));
evalcond[2]=((((-1.0)*(1.0)*py))+(((-1.0)*cj0*x954))+(((0.0740573656612548)*x959))+(((0.00975)*sj0))+(((-1.0)*x955*x961))+(((-0.0740573656612548)*x960))+(((-1.0)*x957*x961)));
evalcond[3]=((((-1.0)*x964))+(((0.433013004730548)*x947))+(((-0.433013004730548)*x946))+((x946*x965))+(((-1.0)*r22*x962))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r20*x967))+(((-1.0)*x947*x965))+x949+(((-1.0)*r21*x966)));
evalcond[4]=((((-1.0)*r01*x966))+x956+x958+(((-0.433013004730548)*x952))+(((-1.0)*(0.250000174843791)*r02))+(((-1.0)*r00*x967))+((x952*x965))+(((-1.0)*x953*x965))+(((-1.0)*r02*x962))+(((0.433013004730548)*x953)));
evalcond[5]=((((-1.0)*x960*x965))+(((-1.0)*r11*x966))+(((-1.0)*r10*x967))+(((-1.0)*(0.250000174843791)*r12))+(((-1.0)*r12*x962))+((x959*x965))+(((-1.0)*cj0*x969))+(((0.433013004730548)*x960))+(((-1.0)*cj0*x968))+(((-0.433013004730548)*x959)));
evalcond[6]=(((r20*x975))+((x946*x976))+(((-1.0)*x968))+(((-1.0)*r20*x979))+(((-1.0)*x969))+((x946*x977))+(((-1.0)*x947*x976))+((x946*x973))+(((-1.0)*r21*x978))+((r21*x974))+(((-1.0)*r22*x971))+(((-1.0)*r22*x972))+(((-1.0)*x947*x977))+((r22*x970))+(((-1.0)*x947*x973)));
evalcond[7]=((((-1.0)*r00*x979))+((x952*x977))+((r01*x974))+(((-1.0)*x953*x976))+((sj0*x949))+(((-1.0)*r02*x972))+(((-1.0)*x953*x973))+(((-1.0)*sj0*x964))+((r02*x970))+((x952*x973))+((x952*x976))+(((-1.0)*r02*x971))+((r00*x975))+(((-1.0)*x953*x977))+(((-1.0)*r01*x978)));
evalcond[8]=(((r12*x970))+((x959*x976))+(((-1.0)*x960*x973))+((x959*x973))+(((-1.0)*r11*x978))+(((-1.0)*x960*x976))+(((-1.0)*cj0*x949))+((cj0*x951))+(((-1.0)*r12*x971))+((r11*x974))+((r10*x975))+(((-1.0)*r12*x972))+((x959*x977))+(((-1.0)*r10*x979))+(((-1.0)*x960*x977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x980=((3808.59375)*cj0);
IkReal x981=((390625.0)*px);
IkReal x982=((28928.6584614277)*cj1);
IkReal x983=(cj5*r00);
IkReal x984=(r01*sj5);
IkReal x985=((390625.0)*pz*sj0);
IkReal x986=(cj5*r20);
IkReal x987=((28928.6584614277)*sj0*sj1);
IkReal x988=(r21*sj5);
IkReal x989=((28928.6584614277)*sj1);
IkReal x990=((28928.6584614277)*cj1*sj0);
CheckValue<IkReal> x991 = IKatan2WithCheck(IkReal((((cj1*x981))+((x986*x987))+(((-1.0)*cj1*x980))+(((-1.0)*sj1*x985))+((x982*x984))+(((-1.0)*x982*x983))+(((-1.0)*x987*x988)))),IkReal((((x988*x990))+((cj1*x985))+(((-1.0)*x983*x989))+((x984*x989))+(((-1.0)*(160156.25)*sj0))+((sj1*x981))+(((-1.0)*sj1*x980))+(((-1.0)*x986*x990)))),IKFAST_ATAN2_MAGTHRESH);
if(!x991.valid){
continue;
}
CheckValue<IkReal> x992=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x992.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x991.value)+(((1.5707963267949)*(x992.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x993=(cj5*r20);
IkReal x994=(r21*sj5);
IkReal x995=IKcos(j2);
IkReal x996=(cj1*x995);
IkReal x997=IKsin(j2);
IkReal x998=(sj1*x997);
IkReal x999=(cj5*r00);
IkReal x1000=(r01*sj5);
IkReal x1001=((0.41)*sj1);
IkReal x1002=(cj1*x997);
IkReal x1003=(sj0*x1002);
IkReal x1004=(sj1*x995);
IkReal x1005=(sj0*x1004);
IkReal x1006=(cj5*r10);
IkReal x1007=(r11*sj5);
IkReal x1008=((0.25000704)*cj0);
IkReal x1009=((0.749999825156128)*cj4);
IkReal x1010=((1.0)*x997);
IkReal x1011=(sj1*x1010);
IkReal x1012=((0.433012600946063)*cj4);
IkReal x1013=((0.866025201892125)*cj5*sj4);
IkReal x1014=((0.866025201892125)*sj4*sj5);
IkReal x1015=(cj1*x1010);
IkReal x1016=((1.0)*x1004);
IkReal x1017=((0.433012600946063)*sj3);
IkReal x1018=((0.866025403784439)*cj3*sj4);
IkReal x1019=((0.433013004730548)*cj4*sj3);
IkReal x1020=((0.749999825156128)*sj3);
IkReal x1021=(cj3*cj4*cj5);
IkReal x1022=(cj3*cj4*sj5);
IkReal x1023=((0.5)*cj3*sj4);
IkReal x1024=((0.250000174843791)*cj4*sj3);
IkReal x1025=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1026=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x998))+(((0.0740573656612548)*x993))+(((-0.0740573656612548)*x994))+(((0.25000704)*x996)));
evalcond[1]=((((-1.0)*(1.0)*px))+((sj0*x1001))+(((0.25000704)*x1005))+(((0.00975)*cj0))+(((0.25000704)*x1003))+(((-0.0740573656612548)*x1000))+(((0.0740573656612548)*x999)));
evalcond[2]=((((-1.0)*(1.0)*py))+(((-1.0)*cj0*x1001))+(((-0.0740573656612548)*x1007))+(((-1.0)*x1002*x1008))+(((0.0740573656612548)*x1006))+(((0.00975)*sj0))+(((-1.0)*x1004*x1008)));
evalcond[3]=((((-1.0)*x1011))+(((-1.0)*r22*x1009))+(((-1.0)*r20*x1014))+((x1012*x993))+(((-1.0)*x1012*x994))+(((0.433013004730548)*x994))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r21*x1013))+x996+(((-0.433013004730548)*x993)));
evalcond[4]=((((0.433013004730548)*x1000))+(((-1.0)*r00*x1014))+x1003+x1005+(((-1.0)*(0.250000174843791)*r02))+(((-1.0)*r01*x1013))+(((-0.433013004730548)*x999))+(((-1.0)*x1000*x1012))+((x1012*x999))+(((-1.0)*r02*x1009)));
evalcond[5]=((((-1.0)*cj0*x1015))+(((-1.0)*r10*x1014))+(((-1.0)*cj0*x1016))+(((0.433013004730548)*x1007))+(((-1.0)*(0.250000174843791)*r12))+(((-1.0)*r11*x1013))+(((-1.0)*x1007*x1012))+(((-0.433013004730548)*x1006))+(((-1.0)*r12*x1009))+((x1006*x1012)));
evalcond[6]=((((-1.0)*x1020*x994))+((x1024*x993))+(((-1.0)*x1024*x994))+(((-1.0)*r22*x1019))+(((-1.0)*r20*x1026))+((r21*x1021))+(((-1.0)*x1023*x994))+((r20*x1022))+((x1020*x993))+(((-1.0)*r22*x1018))+((r22*x1017))+(((-1.0)*x1016))+(((-1.0)*x1015))+((x1023*x993))+(((-1.0)*r21*x1025)));
evalcond[7]=((((-1.0)*x1000*x1023))+(((-1.0)*r02*x1019))+((x1024*x999))+((x1020*x999))+((sj0*x996))+(((-1.0)*sj0*x1011))+((x1023*x999))+((r00*x1022))+(((-1.0)*r02*x1018))+(((-1.0)*x1000*x1024))+(((-1.0)*r01*x1025))+(((-1.0)*r00*x1026))+((r02*x1017))+(((-1.0)*x1000*x1020))+((r01*x1021)));
evalcond[8]=(((r10*x1022))+((r12*x1017))+((x1006*x1023))+(((-1.0)*r11*x1025))+(((-1.0)*cj0*x996))+(((-1.0)*r12*x1019))+((x1006*x1024))+(((-1.0)*r10*x1026))+(((-1.0)*x1007*x1020))+((cj0*x998))+((r11*x1021))+(((-1.0)*r12*x1018))+(((-1.0)*x1007*x1023))+(((-1.0)*x1007*x1024))+((x1006*x1020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1027=((0.433012600946063)*cj4);
IkReal x1028=((0.866025201892125)*sj4);
IkReal x1029=(r22*sj0);
IkReal x1030=((0.749999825156128)*sj0);
IkReal x1031=(cj5*r20);
IkReal x1032=(r21*sj5);
IkReal x1033=((0.250000174843791)*cj4*sj0);
IkReal x1034=(cj5*r21);
IkReal x1035=((0.500000349687582)*sj0*sj4);
IkReal x1036=(r20*sj5);
IkReal x1037=(cj4*sj0);
IkReal x1038=((0.5)*sj0*sj4);
CheckValue<IkReal> x1039=IKPowWithIntegerCheck(IKsign((((r02*(((0.250000174843791)+(((0.749999825156128)*cj4))))))+((r00*(((((0.433013004730548)*cj5))+((sj5*x1028))+(((-1.0)*cj5*x1027))))))+((r01*((((sj5*x1027))+(((-1.0)*(0.433013004730548)*sj5))+((cj5*x1028)))))))),-1);
if(!x1039.valid){
continue;
}
CheckValue<IkReal> x1040 = IKatan2WithCheck(IkReal(((((-1.0)*x1032*x1033))+(((-1.0)*x1035*x1036))+(((-1.0)*x1034*x1035))+((x1030*x1031))+(((-1.0)*x1030*x1032))+((x1031*x1033))+(((-0.433013004730548)*cj4*x1029))+(((0.433012600946063)*x1029)))),IkReal((((x1034*x1037))+(((-1.0)*x1032*x1038))+((x1031*x1038))+(((-0.866025403784439)*sj4*x1029))+((x1036*x1037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1040.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1039.value)))+(x1040.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1041=IKcos(j3);
IkReal x1042=((0.433012600946063)*x1041);
IkReal x1043=((0.433013004730548)*cj4*x1041);
IkReal x1044=((0.749999825156128)*cj5*x1041);
IkReal x1045=((0.749999825156128)*sj5*x1041);
IkReal x1046=IKsin(j3);
IkReal x1047=((0.866025403784439)*sj4*x1046);
IkReal x1048=((0.250000174843791)*cj4*cj5*x1041);
IkReal x1049=((1.0)*cj4*cj5*x1046);
IkReal x1050=((1.0)*cj4*sj5*x1046);
IkReal x1051=((0.250000174843791)*cj4*sj5*x1041);
IkReal x1052=((0.5)*cj5*sj4*x1046);
IkReal x1053=((0.500000349687582)*cj5*sj4*x1041);
IkReal x1054=((0.500000349687582)*sj4*sj5*x1041);
IkReal x1055=((0.5)*sj4*sj5*x1046);
evalcond[0]=((((-1.0)*r21*x1053))+(((-1.0)*r20*x1052))+(((-1.0)*r20*x1054))+(((-1.0)*r22*x1043))+((r20*x1048))+(((-1.0)*r20*x1050))+((r21*x1055))+(((-1.0)*r21*x1049))+((r22*x1042))+(((-1.0)*r21*x1051))+(((-1.0)*r21*x1045))+((r20*x1044))+((r22*x1047)));
evalcond[1]=(((r01*x1055))+(((-1.0)*r01*x1053))+(((-1.0)*r00*x1050))+(((-1.0)*r01*x1045))+((r00*x1044))+(((-1.0)*r00*x1052))+(((-1.0)*r00*x1054))+((r02*x1047))+(((-1.0)*r01*x1051))+((r02*x1042))+(((-1.0)*r01*x1049))+(((-1.0)*(1.0)*cj0))+(((-1.0)*r02*x1043))+((r00*x1048)));
evalcond[2]=(((r10*x1048))+(((-1.0)*(1.0)*sj0))+(((-1.0)*r11*x1045))+((r11*x1055))+(((-1.0)*r10*x1050))+(((-1.0)*r11*x1051))+((r12*x1047))+(((-1.0)*r12*x1043))+(((-1.0)*r10*x1052))+((r12*x1042))+(((-1.0)*r11*x1053))+((r10*x1044))+(((-1.0)*r10*x1054))+(((-1.0)*r11*x1049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1056=((0.457329844604393)*cj4);
IkReal x1057=((0.444667476232793)*cj5);
IkReal x1058=((0.444667476232793)*sj5);
IkReal x1059=((0.264039508890796)*cj4*cj5);
IkReal x1060=((0.264039508890796)*cj4*sj5);
IkReal x1061=((0.528079017781592)*cj5*sj4);
IkReal x1062=((0.528079017781592)*sj4*sj5);
if( IKabs((((r10*x1057))+(((-1.0)*r10*x1059))+(((-1.0)*(2.4390243902439)*py))+((r12*x1056))+(((0.15244342368824)*r12))+((r11*x1060))+((r10*x1062))+((r11*x1061))+(((-1.0)*r11*x1058)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1061))+(((-1.0)*r21*x1060))+(((-1.0)*r20*x1062))+(((-1.0)*r22*x1056))+((r21*x1058))+(((2.4390243902439)*pz))+(((-1.0)*r20*x1057))+((r20*x1059))+(((-1.0)*(0.15244342368824)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1057))+(((-1.0)*r10*x1059))+(((-1.0)*(2.4390243902439)*py))+((r12*x1056))+(((0.15244342368824)*r12))+((r11*x1060))+((r10*x1062))+((r11*x1061))+(((-1.0)*r11*x1058))))+IKsqr(((((-1.0)*r21*x1061))+(((-1.0)*r21*x1060))+(((-1.0)*r20*x1062))+(((-1.0)*r22*x1056))+((r21*x1058))+(((2.4390243902439)*pz))+(((-1.0)*r20*x1057))+((r20*x1059))+(((-1.0)*(0.15244342368824)*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x1057))+(((-1.0)*r10*x1059))+(((-1.0)*(2.4390243902439)*py))+((r12*x1056))+(((0.15244342368824)*r12))+((r11*x1060))+((r10*x1062))+((r11*x1061))+(((-1.0)*r11*x1058))), ((((-1.0)*r21*x1061))+(((-1.0)*r21*x1060))+(((-1.0)*r20*x1062))+(((-1.0)*r22*x1056))+((r21*x1058))+(((2.4390243902439)*pz))+(((-1.0)*r20*x1057))+((r20*x1059))+(((-1.0)*(0.15244342368824)*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1063=((((0.41)*(IKsin(j1))))+py);
IkReal x1064=((0.187505236287801)*cj4);
IkReal x1065=(cj5*r10);
IkReal x1066=(r11*sj5);
IkReal x1067=((0.108256198645226)*cj4);
IkReal x1068=((0.216512397290453)*cj5*sj4);
IkReal x1069=((0.216512397290453)*sj4*sj5);
IkReal x1070=(cj5*r20);
IkReal x1071=(r21*sj5);
IkReal x1072=((0.41)*(IKcos(j1)));
IkReal x1073=((0.108256198645226)*sj3);
IkReal x1074=((0.216512447764952)*cj3*sj4);
IkReal x1075=((0.10825629959419)*cj4*sj3);
IkReal x1076=((0.187505236287801)*sj3);
IkReal x1077=((0.25000704)*cj3*cj4*cj5);
IkReal x1078=((0.25000704)*cj3*cj4*sj5);
IkReal x1079=((0.12500352)*cj3*sj4);
IkReal x1080=((0.0625018037121786)*cj4*sj3);
IkReal x1081=((0.125003607424357)*cj5*sj3*sj4);
IkReal x1082=((0.125003607424357)*sj3*sj4*sj5);
evalcond[0]=((((0.182313665255445)*x1066))+(((-0.182313665255445)*x1065))+x1063+(((-1.0)*r12*x1064))+(((-1.0)*r11*x1068))+(((-1.0)*x1066*x1067))+((x1065*x1067))+(((-1.0)*(0.0625018037121786)*r12))+(((-1.0)*r10*x1069)));
evalcond[1]=((((-1.0)*r20*x1069))+(((-1.0)*(0.0625018037121786)*r22))+pz+(((-1.0)*r21*x1068))+(((-0.182313665255445)*x1070))+(((-1.0)*r22*x1064))+(((-1.0)*x1072))+(((-1.0)*x1067*x1071))+((x1067*x1070))+(((0.182313665255445)*x1071)));
evalcond[2]=(((r22*x1073))+(((-1.0)*r21*x1081))+(((-0.0740573656612548)*x1065))+((r20*x1078))+x1063+((x1070*x1076))+(((0.0740573656612548)*x1066))+(((-1.0)*x1071*x1079))+((x1070*x1079))+(((-1.0)*r20*x1082))+(((-1.0)*x1071*x1076))+((r21*x1077))+(((-1.0)*x1071*x1080))+(((-1.0)*r22*x1074))+(((-1.0)*r22*x1075))+((x1070*x1080)));
evalcond[3]=(((r11*x1077))+((r12*x1073))+((x1065*x1079))+x1072+(((-1.0)*(1.0)*pz))+(((-1.0)*x1066*x1079))+(((-1.0)*r11*x1081))+((x1065*x1076))+(((-0.0740573656612548)*x1071))+((r10*x1078))+((x1065*x1080))+(((0.0740573656612548)*x1070))+(((-1.0)*x1066*x1076))+(((-1.0)*r10*x1082))+(((-1.0)*r12*x1075))+(((-1.0)*r12*x1074))+(((-1.0)*x1066*x1080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1083=((3.99988736317185)*cj1);
IkReal x1084=((3.99988736317185)*sj1);
IkReal x1085=((0.29622112105825)*cj1*cj5);
IkReal x1086=((0.29622112105825)*cj1*sj5);
IkReal x1087=((0.29622112105825)*cj5*sj1);
IkReal x1088=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*r11*x1086))+((r20*x1087))+(((-1.0)*r21*x1088))+(((-1.0)*py*x1083))+((r10*x1085))+(((-1.0)*pz*x1084)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r11*x1088))+(((-1.0)*py*x1084))+((pz*x1083))+((r10*x1087))+(((-1.0)*r20*x1085))+((r21*x1086)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1086))+((r20*x1087))+(((-1.0)*r21*x1088))+(((-1.0)*py*x1083))+((r10*x1085))+(((-1.0)*pz*x1084))))+IKsqr(((-1.63995381890046)+(((-1.0)*r11*x1088))+(((-1.0)*py*x1084))+((pz*x1083))+((r10*x1087))+(((-1.0)*r20*x1085))+((r21*x1086))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x1086))+((r20*x1087))+(((-1.0)*r21*x1088))+(((-1.0)*py*x1083))+((r10*x1085))+(((-1.0)*pz*x1084))), ((-1.63995381890046)+(((-1.0)*r11*x1088))+(((-1.0)*py*x1084))+((pz*x1083))+((r10*x1087))+(((-1.0)*r20*x1085))+((r21*x1086))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1089=(cj5*r20);
IkReal x1090=(r21*sj5);
IkReal x1091=IKcos(j2);
IkReal x1092=(cj1*x1091);
IkReal x1093=IKsin(j2);
IkReal x1094=(sj1*x1093);
IkReal x1095=(cj5*r10);
IkReal x1096=(r11*sj5);
IkReal x1097=(cj1*x1093);
IkReal x1098=(sj1*x1091);
IkReal x1099=((0.749999825156128)*cj4);
IkReal x1100=((0.433012600946063)*cj4);
IkReal x1101=((0.866025201892125)*cj5*sj4);
IkReal x1102=((0.866025201892125)*sj4*sj5);
IkReal x1103=((((-1.0)*x1098))+(((-1.0)*x1097)));
IkReal x1104=((0.433012600946063)*sj3);
IkReal x1105=((0.866025403784439)*cj3*sj4);
IkReal x1106=((0.433013004730548)*cj4*sj3);
IkReal x1107=((0.749999825156128)*sj3);
IkReal x1108=(cj3*cj4*cj5);
IkReal x1109=(cj3*cj4*sj5);
IkReal x1110=((0.5)*cj3*sj4);
IkReal x1111=((0.250000174843791)*cj4*sj3);
IkReal x1112=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1113=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x1094))+(((0.25000704)*x1092))+(((-0.0740573656612548)*x1090))+(((0.0740573656612548)*x1089)));
evalcond[1]=((((-0.25000704)*x1097))+(((-1.0)*(1.0)*py))+(((-1.0)*(0.41)*sj1))+(((-0.25000704)*x1098))+(((-0.0740573656612548)*x1096))+(((0.0740573656612548)*x1095)));
evalcond[2]=((((-1.0)*r20*x1102))+(((-1.0)*x1094))+(((-1.0)*r21*x1101))+(((-0.433013004730548)*x1089))+(((-1.0)*r22*x1099))+(((0.433013004730548)*x1090))+(((-1.0)*(0.250000174843791)*r22))+((x1089*x1100))+x1092+(((-1.0)*x1090*x1100)));
evalcond[3]=((((-1.0)*x1096*x1100))+(((0.433013004730548)*x1096))+(((-1.0)*r10*x1102))+x1103+(((-0.433013004730548)*x1095))+(((-1.0)*r12*x1099))+((x1095*x1100))+(((-1.0)*(0.250000174843791)*r12))+(((-1.0)*r11*x1101)));
evalcond[4]=(((x1095*x1111))+((x1095*x1107))+(((-1.0)*r10*x1113))+(((-1.0)*x1092))+(((-1.0)*r11*x1112))+((r10*x1109))+((r12*x1104))+((r11*x1108))+((x1095*x1110))+(((-1.0)*x1096*x1107))+(((-1.0)*r12*x1105))+(((-1.0)*x1096*x1110))+x1094+(((-1.0)*r12*x1106))+(((-1.0)*x1096*x1111)));
evalcond[5]=(((x1089*x1107))+(((-1.0)*x1090*x1111))+(((-1.0)*r21*x1112))+x1103+(((-1.0)*r20*x1113))+(((-1.0)*x1090*x1107))+(((-1.0)*r22*x1105))+((r21*x1108))+(((-1.0)*r22*x1106))+(((-1.0)*x1090*x1110))+((r20*x1109))+((x1089*x1110))+((x1089*x1111))+((r22*x1104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1114=((0.457329844604393)*cj4);
IkReal x1115=((0.444667476232793)*cj5);
IkReal x1116=((0.444667476232793)*sj5);
IkReal x1117=((0.264039508890796)*cj4*cj5);
IkReal x1118=((0.264039508890796)*cj4*sj5);
IkReal x1119=((0.528079017781592)*cj5*sj4);
IkReal x1120=((0.528079017781592)*sj4*sj5);
if( IKabs(((((-1.0)*r11*x1118))+(((-1.0)*r10*x1120))+((r11*x1116))+(((-1.0)*(0.15244342368824)*r12))+(((-1.0)*r10*x1115))+(((2.4390243902439)*py))+(((-1.0)*r12*x1114))+(((-1.0)*r11*x1119))+((r10*x1117)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1115))+((r21*x1116))+(((2.4390243902439)*pz))+(((-1.0)*r21*x1119))+((r20*x1117))+(((-1.0)*r21*x1118))+(((-1.0)*r20*x1120))+(((-1.0)*r22*x1114))+(((-1.0)*(0.15244342368824)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1118))+(((-1.0)*r10*x1120))+((r11*x1116))+(((-1.0)*(0.15244342368824)*r12))+(((-1.0)*r10*x1115))+(((2.4390243902439)*py))+(((-1.0)*r12*x1114))+(((-1.0)*r11*x1119))+((r10*x1117))))+IKsqr(((((-1.0)*r20*x1115))+((r21*x1116))+(((2.4390243902439)*pz))+(((-1.0)*r21*x1119))+((r20*x1117))+(((-1.0)*r21*x1118))+(((-1.0)*r20*x1120))+(((-1.0)*r22*x1114))+(((-1.0)*(0.15244342368824)*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*x1118))+(((-1.0)*r10*x1120))+((r11*x1116))+(((-1.0)*(0.15244342368824)*r12))+(((-1.0)*r10*x1115))+(((2.4390243902439)*py))+(((-1.0)*r12*x1114))+(((-1.0)*r11*x1119))+((r10*x1117))), ((((-1.0)*r20*x1115))+((r21*x1116))+(((2.4390243902439)*pz))+(((-1.0)*r21*x1119))+((r20*x1117))+(((-1.0)*r21*x1118))+(((-1.0)*r20*x1120))+(((-1.0)*r22*x1114))+(((-1.0)*(0.15244342368824)*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1121=((((-1.0)*(0.41)*(IKcos(j1))))+pz);
IkReal x1122=((0.187505236287801)*cj4);
IkReal x1123=(cj5*r20);
IkReal x1124=(r21*sj5);
IkReal x1125=((0.108256198645226)*cj4);
IkReal x1126=((0.216512397290453)*cj5*sj4);
IkReal x1127=((0.216512397290453)*sj4*sj5);
IkReal x1128=(cj5*r10);
IkReal x1129=(r11*sj5);
IkReal x1130=((0.41)*(IKsin(j1)));
IkReal x1131=((0.108256198645226)*sj3);
IkReal x1132=((0.216512447764952)*cj3*sj4);
IkReal x1133=((0.10825629959419)*cj4*sj3);
IkReal x1134=((0.187505236287801)*sj3);
IkReal x1135=((0.25000704)*cj3*cj4*cj5);
IkReal x1136=((0.25000704)*cj3*cj4*sj5);
IkReal x1137=((0.12500352)*cj3*sj4);
IkReal x1138=((0.0625018037121786)*cj4*sj3);
IkReal x1139=((0.125003607424357)*cj5*sj3*sj4);
IkReal x1140=((0.125003607424357)*sj3*sj4*sj5);
evalcond[0]=((((0.182313665255445)*x1124))+(((-1.0)*x1124*x1125))+(((-1.0)*(0.0625018037121786)*r22))+x1121+(((-1.0)*r21*x1126))+(((-1.0)*r20*x1127))+(((-1.0)*r22*x1122))+((x1123*x1125))+(((-0.182313665255445)*x1123)));
evalcond[1]=((((-1.0)*(1.0)*py))+((r11*x1126))+(((0.182313665255445)*x1128))+(((-0.182313665255445)*x1129))+((r12*x1122))+((r10*x1127))+x1130+(((0.0625018037121786)*r12))+((x1125*x1129))+(((-1.0)*x1125*x1128)));
evalcond[2]=((((-1.0)*r20*x1136))+(((-1.0)*r21*x1135))+((r20*x1140))+((r21*x1139))+py+((x1124*x1138))+((x1124*x1134))+(((-1.0)*x1123*x1138))+(((-1.0)*r22*x1131))+((r22*x1132))+((x1124*x1137))+(((-1.0)*x1130))+((r22*x1133))+(((-1.0)*x1123*x1134))+(((0.0740573656612548)*x1129))+(((-0.0740573656612548)*x1128))+(((-1.0)*x1123*x1137)));
evalcond[3]=(((r12*x1131))+(((-1.0)*r10*x1140))+(((-0.0740573656612548)*x1123))+(((-1.0)*x1129*x1137))+(((-1.0)*r11*x1139))+x1121+(((-1.0)*x1129*x1134))+((x1128*x1137))+(((-1.0)*r12*x1133))+((r10*x1136))+((r11*x1135))+(((0.0740573656612548)*x1124))+(((-1.0)*r12*x1132))+((x1128*x1134))+((x1128*x1138))+(((-1.0)*x1129*x1138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1141=((3.99988736317185)*cj1);
IkReal x1142=((3.99988736317185)*sj1);
IkReal x1143=((0.29622112105825)*cj1*cj5);
IkReal x1144=((0.29622112105825)*cj1*sj5);
IkReal x1145=((0.29622112105825)*cj5*sj1);
IkReal x1146=((0.29622112105825)*sj1*sj5);
if( IKabs((((r11*x1144))+(((-1.0)*r10*x1143))+(((-1.0)*r21*x1146))+((py*x1141))+(((-1.0)*pz*x1142))+((r20*x1145)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((r21*x1144))+((pz*x1141))+((r11*x1146))+(((-1.0)*r20*x1143))+(((-1.0)*r10*x1145))+((py*x1142)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1144))+(((-1.0)*r10*x1143))+(((-1.0)*r21*x1146))+((py*x1141))+(((-1.0)*pz*x1142))+((r20*x1145))))+IKsqr(((-1.63995381890046)+((r21*x1144))+((pz*x1141))+((r11*x1146))+(((-1.0)*r20*x1143))+(((-1.0)*r10*x1145))+((py*x1142))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x1144))+(((-1.0)*r10*x1143))+(((-1.0)*r21*x1146))+((py*x1141))+(((-1.0)*pz*x1142))+((r20*x1145))), ((-1.63995381890046)+((r21*x1144))+((pz*x1141))+((r11*x1146))+(((-1.0)*r20*x1143))+(((-1.0)*r10*x1145))+((py*x1142))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1147=(cj5*r20);
IkReal x1148=(r21*sj5);
IkReal x1149=IKcos(j2);
IkReal x1150=(cj1*x1149);
IkReal x1151=IKsin(j2);
IkReal x1152=(sj1*x1151);
IkReal x1153=(cj5*r10);
IkReal x1154=(r11*sj5);
IkReal x1155=(cj1*x1151);
IkReal x1156=(sj1*x1149);
IkReal x1157=((0.749999825156128)*cj4);
IkReal x1158=((0.433012600946063)*cj4);
IkReal x1159=((0.866025201892125)*cj5*sj4);
IkReal x1160=((0.866025201892125)*sj4*sj5);
IkReal x1161=(x1150+(((-1.0)*x1152)));
IkReal x1162=((0.433012600946063)*sj3);
IkReal x1163=((0.866025403784439)*cj3*sj4);
IkReal x1164=((0.433013004730548)*cj4*sj3);
IkReal x1165=((0.749999825156128)*sj3);
IkReal x1166=(cj3*cj4*cj5);
IkReal x1167=(cj3*cj4*sj5);
IkReal x1168=((0.5)*cj3*sj4);
IkReal x1169=((0.250000174843791)*cj4*sj3);
IkReal x1170=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1171=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.25000704)*x1150))+(((-0.25000704)*x1152))+(((0.0740573656612548)*x1147))+(((-0.0740573656612548)*x1148)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-0.0740573656612548)*x1154))+(((0.25000704)*x1155))+(((0.41)*sj1))+(((0.25000704)*x1156))+(((0.0740573656612548)*x1153)));
evalcond[2]=((((-1.0)*r11*x1159))+(((0.433013004730548)*x1154))+(((-1.0)*r12*x1157))+x1155+x1156+((x1153*x1158))+(((-1.0)*(0.250000174843791)*r12))+(((-1.0)*x1154*x1158))+(((-0.433013004730548)*x1153))+(((-1.0)*r10*x1160)));
evalcond[3]=((((0.433013004730548)*x1148))+(((-1.0)*r22*x1157))+(((-0.433013004730548)*x1147))+x1161+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*x1148*x1158))+(((-1.0)*r21*x1159))+((x1147*x1158))+(((-1.0)*r20*x1160)));
evalcond[4]=((((-1.0)*x1154*x1168))+((r11*x1166))+((x1153*x1169))+((x1153*x1168))+((r12*x1162))+(((-1.0)*r10*x1171))+((x1153*x1165))+(((-1.0)*x1154*x1169))+(((-1.0)*r12*x1163))+x1161+(((-1.0)*r11*x1170))+(((-1.0)*x1154*x1165))+((r10*x1167))+(((-1.0)*r12*x1164)));
evalcond[5]=((((-1.0)*x1156))+(((-1.0)*x1155))+((x1147*x1169))+(((-1.0)*x1148*x1168))+(((-1.0)*x1148*x1169))+((x1147*x1168))+((x1147*x1165))+((r22*x1162))+(((-1.0)*x1148*x1165))+(((-1.0)*r20*x1171))+(((-1.0)*r21*x1170))+(((-1.0)*r22*x1163))+((r20*x1167))+((r21*x1166))+(((-1.0)*r22*x1164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1172=((0.457329844604393)*cj4);
IkReal x1173=((0.444667476232793)*cj5);
IkReal x1174=((0.444667476232793)*sj5);
IkReal x1175=((0.264039508890796)*cj4*cj5);
IkReal x1176=((0.264039508890796)*cj4*sj5);
IkReal x1177=((0.528079017781592)*cj5*sj4);
IkReal x1178=((0.528079017781592)*sj4*sj5);
if( IKabs((((r01*x1174))+(((-1.0)*(0.15244342368824)*r02))+(((-1.0)*r00*x1173))+(((-1.0)*r00*x1178))+((r00*x1175))+(((2.4390243902439)*px))+(((-1.0)*r02*x1172))+(((-1.0)*r01*x1177))+(((-1.0)*r01*x1176)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1173))+((r21*x1174))+(((-1.0)*r22*x1172))+(((-1.0)*r20*x1178))+(((-1.0)*r21*x1176))+(((2.4390243902439)*pz))+(((-1.0)*r21*x1177))+(((-1.0)*(0.15244342368824)*r22))+((r20*x1175)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1174))+(((-1.0)*(0.15244342368824)*r02))+(((-1.0)*r00*x1173))+(((-1.0)*r00*x1178))+((r00*x1175))+(((2.4390243902439)*px))+(((-1.0)*r02*x1172))+(((-1.0)*r01*x1177))+(((-1.0)*r01*x1176))))+IKsqr(((((-1.0)*r20*x1173))+((r21*x1174))+(((-1.0)*r22*x1172))+(((-1.0)*r20*x1178))+(((-1.0)*r21*x1176))+(((2.4390243902439)*pz))+(((-1.0)*r21*x1177))+(((-1.0)*(0.15244342368824)*r22))+((r20*x1175))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x1174))+(((-1.0)*(0.15244342368824)*r02))+(((-1.0)*r00*x1173))+(((-1.0)*r00*x1178))+((r00*x1175))+(((2.4390243902439)*px))+(((-1.0)*r02*x1172))+(((-1.0)*r01*x1177))+(((-1.0)*r01*x1176))), ((((-1.0)*r20*x1173))+((r21*x1174))+(((-1.0)*r22*x1172))+(((-1.0)*r20*x1178))+(((-1.0)*r21*x1176))+(((2.4390243902439)*pz))+(((-1.0)*r21*x1177))+(((-1.0)*(0.15244342368824)*r22))+((r20*x1175))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1179=((((-1.0)*(0.41)*(IKcos(j1))))+pz);
IkReal x1180=((0.187505236287801)*cj4);
IkReal x1181=(cj5*r20);
IkReal x1182=(r21*sj5);
IkReal x1183=((0.108256198645226)*cj4);
IkReal x1184=((0.216512397290453)*cj5*sj4);
IkReal x1185=((0.216512397290453)*sj4*sj5);
IkReal x1186=(cj5*r00);
IkReal x1187=(r01*sj5);
IkReal x1188=((0.41)*(IKsin(j1)));
IkReal x1189=((0.108256198645226)*sj3);
IkReal x1190=((0.216512447764952)*cj3*sj4);
IkReal x1191=((0.10825629959419)*cj4*sj3);
IkReal x1192=((0.187505236287801)*sj3);
IkReal x1193=((0.25000704)*cj3*cj4*cj5);
IkReal x1194=((0.25000704)*cj3*cj4*sj5);
IkReal x1195=((0.12500352)*cj3*sj4);
IkReal x1196=((0.0625018037121786)*cj4*sj3);
IkReal x1197=((0.125003607424357)*cj5*sj3*sj4);
IkReal x1198=((0.125003607424357)*sj3*sj4*sj5);
evalcond[0]=(((x1181*x1183))+(((-1.0)*(0.0625018037121786)*r22))+(((0.182313665255445)*x1182))+(((-0.182313665255445)*x1181))+(((-1.0)*r22*x1180))+x1179+(((-1.0)*x1182*x1183))+(((-1.0)*r20*x1185))+(((-1.0)*r21*x1184)));
evalcond[1]=((((0.0625018037121786)*r02))+(((-1.0)*(1.0)*px))+(((0.182313665255445)*x1186))+(((-1.0)*x1183*x1186))+((r01*x1184))+(((-0.182313665255445)*x1187))+((r00*x1185))+x1188+((r02*x1180))+((x1183*x1187)));
evalcond[2]=((((-1.0)*r21*x1193))+((r20*x1198))+((r21*x1197))+(((-1.0)*x1181*x1192))+(((-1.0)*r20*x1194))+(((-1.0)*x1181*x1196))+(((-1.0)*x1181*x1195))+((x1182*x1196))+px+((x1182*x1195))+((x1182*x1192))+(((-1.0)*x1188))+(((-1.0)*r22*x1189))+(((-0.0740573656612548)*x1186))+(((0.0740573656612548)*x1187))+((r22*x1190))+((r22*x1191)));
evalcond[3]=((((0.0740573656612548)*x1182))+(((-1.0)*x1187*x1192))+(((-1.0)*x1187*x1196))+((r00*x1194))+(((-0.0740573656612548)*x1181))+(((-1.0)*r02*x1190))+((x1186*x1196))+((r01*x1193))+((r02*x1189))+((x1186*x1195))+(((-1.0)*r02*x1191))+x1179+(((-1.0)*r00*x1198))+((x1186*x1192))+(((-1.0)*r01*x1197))+(((-1.0)*x1187*x1195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1199=((3.99988736317185)*cj1);
IkReal x1200=((3.99988736317185)*sj1);
IkReal x1201=((0.29622112105825)*cj1*cj5);
IkReal x1202=((0.29622112105825)*cj1*sj5);
IkReal x1203=((0.29622112105825)*cj5*sj1);
IkReal x1204=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*r21*x1204))+(((-1.0)*pz*x1200))+((r01*x1202))+(((-1.0)*r00*x1201))+((px*x1199))+((r20*x1203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r20*x1201))+((r21*x1202))+((r01*x1204))+((pz*x1199))+((px*x1200))+(((-1.0)*r00*x1203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x1204))+(((-1.0)*pz*x1200))+((r01*x1202))+(((-1.0)*r00*x1201))+((px*x1199))+((r20*x1203))))+IKsqr(((-1.63995381890046)+(((-1.0)*r20*x1201))+((r21*x1202))+((r01*x1204))+((pz*x1199))+((px*x1200))+(((-1.0)*r00*x1203))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x1204))+(((-1.0)*pz*x1200))+((r01*x1202))+(((-1.0)*r00*x1201))+((px*x1199))+((r20*x1203))), ((-1.63995381890046)+(((-1.0)*r20*x1201))+((r21*x1202))+((r01*x1204))+((pz*x1199))+((px*x1200))+(((-1.0)*r00*x1203))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1205=(cj5*r20);
IkReal x1206=(r21*sj5);
IkReal x1207=IKcos(j2);
IkReal x1208=(cj1*x1207);
IkReal x1209=IKsin(j2);
IkReal x1210=(sj1*x1209);
IkReal x1211=(cj5*r00);
IkReal x1212=(r01*sj5);
IkReal x1213=(cj1*x1209);
IkReal x1214=(sj1*x1207);
IkReal x1215=((0.749999825156128)*cj4);
IkReal x1216=((0.433012600946063)*cj4);
IkReal x1217=((0.866025201892125)*cj5*sj4);
IkReal x1218=((0.866025201892125)*sj4*sj5);
IkReal x1219=(x1208+(((-1.0)*x1210)));
IkReal x1220=((0.433012600946063)*sj3);
IkReal x1221=((0.866025403784439)*cj3*sj4);
IkReal x1222=((0.433013004730548)*cj4*sj3);
IkReal x1223=((0.749999825156128)*sj3);
IkReal x1224=(cj3*cj4*cj5);
IkReal x1225=(cj3*cj4*sj5);
IkReal x1226=((0.5)*cj3*sj4);
IkReal x1227=((0.250000174843791)*cj4*sj3);
IkReal x1228=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1229=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((-0.25000704)*x1210))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.0740573656612548)*x1205))+(((0.25000704)*x1208))+(((-0.0740573656612548)*x1206)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((0.25000704)*x1213))+(((0.0740573656612548)*x1211))+(((0.41)*sj1))+(((-0.0740573656612548)*x1212))+(((0.25000704)*x1214)));
evalcond[2]=((((-1.0)*r00*x1218))+(((-1.0)*r02*x1215))+(((0.433013004730548)*x1212))+(((-0.433013004730548)*x1211))+((x1211*x1216))+(((-1.0)*r01*x1217))+(((-1.0)*(0.250000174843791)*r02))+(((-1.0)*x1212*x1216))+x1213+x1214);
evalcond[3]=(((x1205*x1216))+(((-1.0)*r21*x1217))+(((0.433013004730548)*x1206))+(((-0.433013004730548)*x1205))+(((-1.0)*(0.250000174843791)*r22))+x1219+(((-1.0)*r22*x1215))+(((-1.0)*x1206*x1216))+(((-1.0)*r20*x1218)));
evalcond[4]=((((-1.0)*r01*x1228))+(((-1.0)*x1212*x1227))+((r01*x1224))+(((-1.0)*x1212*x1223))+((r00*x1225))+((x1211*x1223))+(((-1.0)*x1212*x1226))+(((-1.0)*r00*x1229))+((x1211*x1227))+x1219+(((-1.0)*r02*x1221))+((x1211*x1226))+(((-1.0)*r02*x1222))+((r02*x1220)));
evalcond[5]=((((-1.0)*x1206*x1227))+((r21*x1224))+(((-1.0)*x1206*x1226))+(((-1.0)*x1214))+((r20*x1225))+((x1205*x1223))+((x1205*x1227))+(((-1.0)*r20*x1229))+(((-1.0)*x1206*x1223))+((x1205*x1226))+((r22*x1220))+(((-1.0)*r22*x1221))+(((-1.0)*x1213))+(((-1.0)*r22*x1222))+(((-1.0)*r21*x1228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1230=((0.457329844604393)*cj4);
IkReal x1231=((0.444667476232793)*cj5);
IkReal x1232=((0.444667476232793)*sj5);
IkReal x1233=((0.264039508890796)*cj4*cj5);
IkReal x1234=((0.264039508890796)*cj4*sj5);
IkReal x1235=((0.528079017781592)*cj5*sj4);
IkReal x1236=((0.528079017781592)*sj4*sj5);
if( IKabs((((r00*x1236))+((r00*x1231))+((r02*x1230))+((r01*x1234))+(((-1.0)*(2.4390243902439)*px))+((r01*x1235))+(((0.15244342368824)*r02))+(((-1.0)*r00*x1233))+(((-1.0)*r01*x1232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1236))+(((-1.0)*r20*x1231))+(((-1.0)*r22*x1230))+(((2.4390243902439)*pz))+(((-1.0)*r21*x1235))+((r20*x1233))+(((-1.0)*(0.15244342368824)*r22))+(((-1.0)*r21*x1234))+((r21*x1232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1236))+((r00*x1231))+((r02*x1230))+((r01*x1234))+(((-1.0)*(2.4390243902439)*px))+((r01*x1235))+(((0.15244342368824)*r02))+(((-1.0)*r00*x1233))+(((-1.0)*r01*x1232))))+IKsqr(((((-1.0)*r20*x1236))+(((-1.0)*r20*x1231))+(((-1.0)*r22*x1230))+(((2.4390243902439)*pz))+(((-1.0)*r21*x1235))+((r20*x1233))+(((-1.0)*(0.15244342368824)*r22))+(((-1.0)*r21*x1234))+((r21*x1232))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*x1236))+((r00*x1231))+((r02*x1230))+((r01*x1234))+(((-1.0)*(2.4390243902439)*px))+((r01*x1235))+(((0.15244342368824)*r02))+(((-1.0)*r00*x1233))+(((-1.0)*r01*x1232))), ((((-1.0)*r20*x1236))+(((-1.0)*r20*x1231))+(((-1.0)*r22*x1230))+(((2.4390243902439)*pz))+(((-1.0)*r21*x1235))+((r20*x1233))+(((-1.0)*(0.15244342368824)*r22))+(((-1.0)*r21*x1234))+((r21*x1232))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1237=((((0.41)*(IKsin(j1))))+px);
IkReal x1238=((0.187505236287801)*cj4);
IkReal x1239=(cj5*r00);
IkReal x1240=(r01*sj5);
IkReal x1241=((0.108256198645226)*cj4);
IkReal x1242=((0.216512397290453)*cj5*sj4);
IkReal x1243=((0.216512397290453)*sj4*sj5);
IkReal x1244=(cj5*r20);
IkReal x1245=(r21*sj5);
IkReal x1246=((0.41)*(IKcos(j1)));
IkReal x1247=((0.108256198645226)*sj3);
IkReal x1248=((0.216512447764952)*cj3*sj4);
IkReal x1249=((0.10825629959419)*cj4*sj3);
IkReal x1250=((0.187505236287801)*sj3);
IkReal x1251=((0.25000704)*cj3*cj4*cj5);
IkReal x1252=((0.25000704)*cj3*cj4*sj5);
IkReal x1253=((0.12500352)*cj3*sj4);
IkReal x1254=((0.0625018037121786)*cj4*sj3);
IkReal x1255=((0.125003607424357)*cj5*sj3*sj4);
IkReal x1256=((0.125003607424357)*sj3*sj4*sj5);
evalcond[0]=((((-1.0)*x1240*x1241))+(((0.182313665255445)*x1240))+(((-1.0)*r00*x1243))+x1237+((x1239*x1241))+(((-1.0)*r01*x1242))+(((-0.182313665255445)*x1239))+(((-1.0)*(0.0625018037121786)*r02))+(((-1.0)*r02*x1238)));
evalcond[1]=((((-1.0)*r20*x1243))+(((-1.0)*x1241*x1245))+(((-1.0)*(0.0625018037121786)*r22))+((x1241*x1244))+(((-1.0)*r21*x1242))+(((0.182313665255445)*x1245))+pz+(((-0.182313665255445)*x1244))+(((-1.0)*r22*x1238))+(((-1.0)*x1246)));
evalcond[2]=(((r20*x1252))+(((-1.0)*x1245*x1254))+(((-1.0)*r22*x1248))+(((-1.0)*r22*x1249))+((r21*x1251))+((x1244*x1254))+(((0.0740573656612548)*x1240))+(((-1.0)*r20*x1256))+x1237+((x1244*x1253))+(((-1.0)*r21*x1255))+(((-0.0740573656612548)*x1239))+(((-1.0)*x1245*x1253))+(((-1.0)*x1245*x1250))+((r22*x1247))+((x1244*x1250)));
evalcond[3]=((((-1.0)*r01*x1255))+((r02*x1247))+((x1239*x1254))+(((-1.0)*r02*x1249))+((r00*x1252))+(((-1.0)*(1.0)*pz))+(((-1.0)*r00*x1256))+(((-1.0)*x1240*x1253))+(((-0.0740573656612548)*x1245))+((x1239*x1250))+(((-1.0)*r02*x1248))+(((0.0740573656612548)*x1244))+((x1239*x1253))+(((-1.0)*x1240*x1254))+((r01*x1251))+x1246+(((-1.0)*x1240*x1250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1257=((3.99988736317185)*cj1);
IkReal x1258=((3.99988736317185)*sj1);
IkReal x1259=((0.29622112105825)*cj1*cj5);
IkReal x1260=((0.29622112105825)*cj1*sj5);
IkReal x1261=((0.29622112105825)*cj5*sj1);
IkReal x1262=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*r01*x1260))+((r20*x1261))+((r00*x1259))+(((-1.0)*px*x1257))+(((-1.0)*pz*x1258))+(((-1.0)*r21*x1262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((r21*x1260))+((pz*x1257))+(((-1.0)*r01*x1262))+((r00*x1261))+(((-1.0)*px*x1258))+(((-1.0)*r20*x1259)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1260))+((r20*x1261))+((r00*x1259))+(((-1.0)*px*x1257))+(((-1.0)*pz*x1258))+(((-1.0)*r21*x1262))))+IKsqr(((-1.63995381890046)+((r21*x1260))+((pz*x1257))+(((-1.0)*r01*x1262))+((r00*x1261))+(((-1.0)*px*x1258))+(((-1.0)*r20*x1259))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x1260))+((r20*x1261))+((r00*x1259))+(((-1.0)*px*x1257))+(((-1.0)*pz*x1258))+(((-1.0)*r21*x1262))), ((-1.63995381890046)+((r21*x1260))+((pz*x1257))+(((-1.0)*r01*x1262))+((r00*x1261))+(((-1.0)*px*x1258))+(((-1.0)*r20*x1259))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1263=(cj5*r20);
IkReal x1264=(r21*sj5);
IkReal x1265=IKcos(j2);
IkReal x1266=(cj1*x1265);
IkReal x1267=IKsin(j2);
IkReal x1268=(sj1*x1267);
IkReal x1269=(cj5*r00);
IkReal x1270=(r01*sj5);
IkReal x1271=(cj1*x1267);
IkReal x1272=(sj1*x1265);
IkReal x1273=((0.749999825156128)*cj4);
IkReal x1274=((0.433012600946063)*cj4);
IkReal x1275=((0.866025201892125)*cj5*sj4);
IkReal x1276=((0.866025201892125)*sj4*sj5);
IkReal x1277=((((-1.0)*x1271))+(((-1.0)*x1272)));
IkReal x1278=((0.433012600946063)*sj3);
IkReal x1279=((0.866025403784439)*cj3*sj4);
IkReal x1280=((0.433013004730548)*cj4*sj3);
IkReal x1281=((0.749999825156128)*sj3);
IkReal x1282=(cj3*cj4*cj5);
IkReal x1283=(cj3*cj4*sj5);
IkReal x1284=((0.5)*cj3*sj4);
IkReal x1285=((0.250000174843791)*cj4*sj3);
IkReal x1286=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1287=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.0740573656612548)*x1263))+(((-0.25000704)*x1268))+(((-0.0740573656612548)*x1264))+(((0.25000704)*x1266)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((-0.0740573656612548)*x1270))+(((-1.0)*(0.41)*sj1))+(((-0.25000704)*x1271))+(((-0.25000704)*x1272))+(((0.0740573656612548)*x1269)));
evalcond[2]=((((-1.0)*r22*x1273))+(((-0.433013004730548)*x1263))+((x1263*x1274))+(((-1.0)*r20*x1276))+(((-1.0)*x1264*x1274))+(((0.433013004730548)*x1264))+(((-1.0)*r21*x1275))+x1266+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*x1268)));
evalcond[3]=((((-0.433013004730548)*x1269))+(((-1.0)*r02*x1273))+((x1269*x1274))+(((0.433013004730548)*x1270))+x1277+(((-1.0)*(0.250000174843791)*r02))+(((-1.0)*r00*x1276))+(((-1.0)*x1270*x1274))+(((-1.0)*r01*x1275)));
evalcond[4]=((((-1.0)*r00*x1287))+((r02*x1278))+((r01*x1282))+((x1269*x1281))+(((-1.0)*x1270*x1285))+(((-1.0)*x1270*x1281))+(((-1.0)*x1270*x1284))+(((-1.0)*r02*x1279))+x1268+(((-1.0)*x1266))+((r00*x1283))+((x1269*x1284))+(((-1.0)*r01*x1286))+((x1269*x1285))+(((-1.0)*r02*x1280)));
evalcond[5]=(((x1263*x1285))+((r22*x1278))+(((-1.0)*x1264*x1284))+((x1263*x1281))+(((-1.0)*x1264*x1285))+(((-1.0)*r22*x1279))+((r20*x1283))+(((-1.0)*r20*x1287))+x1277+(((-1.0)*x1264*x1281))+(((-1.0)*r21*x1286))+((r21*x1282))+(((-1.0)*r22*x1280))+((x1263*x1284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1288=(r02*sj0);
IkReal x1289=((0.182313665255445)*sj0);
IkReal x1290=(cj5*r00);
IkReal x1291=(r01*sj5);
IkReal x1292=((0.108256198645226)*cj4*sj0);
IkReal x1293=((0.216512397290453)*sj0*sj4);
IkReal x1294=(cj5*r20);
IkReal x1295=(r21*sj5);
IkReal x1296=((0.264039508890796)*cj4);
IkReal x1297=((0.528079017781592)*sj4);
CheckValue<IkReal> x1298=IKPowWithIntegerCheck(sj0,-2);
if(!x1298.valid){
continue;
}
if( IKabs(((-2.4390243902439)*(x1298.value)*(((((-1.0)*(1.0)*px*sj0))+(((0.0625018037121786)*x1288))+(((0.187505236287801)*cj4*x1288))+((x1291*x1292))+(((-1.0)*x1290*x1292))+((x1289*x1290))+(((-1.0)*x1289*x1291))+((r00*sj5*x1293))+(((0.00975)*cj0*sj0))+((cj5*r01*x1293)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(0.457329844604393)*cj4*r22))+(((-0.444667476232793)*x1294))+(((-1.0)*r20*sj5*x1297))+(((2.4390243902439)*pz))+((x1294*x1296))+(((-1.0)*x1295*x1296))+(((-1.0)*cj5*r21*x1297))+(((0.444667476232793)*x1295))+(((-1.0)*(0.15244342368824)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.4390243902439)*(x1298.value)*(((((-1.0)*(1.0)*px*sj0))+(((0.0625018037121786)*x1288))+(((0.187505236287801)*cj4*x1288))+((x1291*x1292))+(((-1.0)*x1290*x1292))+((x1289*x1290))+(((-1.0)*x1289*x1291))+((r00*sj5*x1293))+(((0.00975)*cj0*sj0))+((cj5*r01*x1293))))))+IKsqr(((((-1.0)*(0.457329844604393)*cj4*r22))+(((-0.444667476232793)*x1294))+(((-1.0)*r20*sj5*x1297))+(((2.4390243902439)*pz))+((x1294*x1296))+(((-1.0)*x1295*x1296))+(((-1.0)*cj5*r21*x1297))+(((0.444667476232793)*x1295))+(((-1.0)*(0.15244342368824)*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.4390243902439)*(x1298.value)*(((((-1.0)*(1.0)*px*sj0))+(((0.0625018037121786)*x1288))+(((0.187505236287801)*cj4*x1288))+((x1291*x1292))+(((-1.0)*x1290*x1292))+((x1289*x1290))+(((-1.0)*x1289*x1291))+((r00*sj5*x1293))+(((0.00975)*cj0*sj0))+((cj5*r01*x1293))))), ((((-1.0)*(0.457329844604393)*cj4*r22))+(((-0.444667476232793)*x1294))+(((-1.0)*r20*sj5*x1297))+(((2.4390243902439)*pz))+((x1294*x1296))+(((-1.0)*x1295*x1296))+(((-1.0)*cj5*r21*x1297))+(((0.444667476232793)*x1295))+(((-1.0)*(0.15244342368824)*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1299=((0.182313665255445)*cj5);
IkReal x1300=((0.182313665255445)*sj5);
IkReal x1301=((0.41)*(IKcos(j1)));
IkReal x1302=((0.108256198645226)*cj4*cj5);
IkReal x1303=((0.108256198645226)*cj4*sj5);
IkReal x1304=((0.216512397290453)*cj5*sj4);
IkReal x1305=((0.216512397290453)*sj4*sj5);
IkReal x1306=((0.0625018037121786)*cj0);
IkReal x1307=((0.00975)*cj0);
IkReal x1308=(sj0*x1307);
IkReal x1309=((0.187505236287801)*cj0*cj4);
IkReal x1310=(cj0*r10);
IkReal x1311=(cj0*r11);
IkReal x1312=cj0*cj0;
IkReal x1313=((0.41)*(IKsin(j1)));
IkReal x1314=((1.0)*sj0);
IkReal x1315=((0.0625018037121786)*sj0);
IkReal x1316=((0.187505236287801)*cj4*sj0);
IkReal x1317=(r00*sj0);
IkReal x1318=(r01*sj0);
IkReal x1319=(cj5*r00);
IkReal x1320=((0.108256198645226)*cj4*sj0);
IkReal x1321=(r01*sj5);
IkReal x1322=sj0*sj0;
IkReal x1323=((0.108256198645226)*sj3);
IkReal x1324=((0.216512447764952)*cj3*sj4);
IkReal x1325=((0.10825629959419)*cj4*sj3);
IkReal x1326=((0.187505236287801)*sj3);
IkReal x1327=((0.0740573656612548)*cj5*r20);
IkReal x1328=((0.0740573656612548)*r21*sj5);
IkReal x1329=((0.25000704)*cj3*cj4*cj5);
IkReal x1330=((0.25000704)*cj3*cj4*sj5);
IkReal x1331=((0.12500352)*cj3*sj4);
IkReal x1332=((0.0625018037121786)*cj4*sj3);
IkReal x1333=((0.125003607424357)*cj5*sj3*sj4);
IkReal x1334=((0.125003607424357)*sj3*sj4*sj5);
IkReal x1335=(cj5*r10);
IkReal x1336=(r11*sj5);
IkReal x1337=((0.0740573656612548)*cj5);
IkReal x1338=(r10*x1337);
IkReal x1339=((0.0740573656612548)*sj5);
IkReal x1340=(r11*x1339);
IkReal x1341=(cj0*x1313);
IkReal x1342=((0.108256198645226)*r22*sj3);
IkReal x1343=((0.216512447764952)*cj3*r22*sj4);
IkReal x1344=(cj5*r20);
IkReal x1345=((0.187505236287801)*cj0*sj3);
IkReal x1346=(r21*sj5);
IkReal x1347=(cj0*r21);
IkReal x1348=(cj0*r20);
IkReal x1349=((0.12500352)*cj0*cj3*sj4);
IkReal x1350=((0.0625018037121786)*cj0*cj4*sj3);
IkReal x1351=(r00*x1337);
IkReal x1352=(r01*x1339);
IkReal x1353=((0.187505236287801)*sj0*sj3);
IkReal x1354=(r21*sj0);
IkReal x1355=(r20*sj0);
IkReal x1356=((0.12500352)*cj3*sj0*sj4);
IkReal x1357=((0.0625018037121786)*cj4*sj0*sj3);
IkReal x1358=((0.10825629959419)*sj0);
IkReal x1359=((-1.0)*sj0*x1341);
IkReal x1360=(r10*sj0);
IkReal x1361=(r11*sj0);
IkReal x1362=((0.10825629959419)*cj0);
IkReal x1363=((0.108256198645226)*cj0*cj4);
evalcond[0]=((((-1.0)*r20*x1305))+((r21*x1300))+(((-1.0)*(0.0625018037121786)*r22))+pz+((r20*x1302))+(((-1.0)*r21*x1303))+(((-0.187505236287801)*cj4*r22))+(((-1.0)*r21*x1304))+(((-1.0)*x1301))+(((-1.0)*r20*x1299)));
evalcond[1]=(((x1312*x1313))+(((-1.0)*x1299*x1310))+(((-1.0)*r12*x1306))+((cj0*py))+(((-1.0)*r12*x1309))+((x1300*x1311))+(((-1.0)*x1305*x1310))+(((-1.0)*x1303*x1311))+(((-1.0)*x1304*x1311))+((x1302*x1310))+(((-1.0)*x1308)));
evalcond[2]=((((-1.0)*x1300*x1318))+x1308+(((-1.0)*px*x1314))+((x1320*x1321))+((r02*x1316))+((r02*x1315))+((x1304*x1318))+(((-1.0)*x1319*x1320))+((x1305*x1317))+((x1313*x1322))+((x1299*x1317)));
evalcond[3]=((((-1.0)*r02*x1325))+(((-1.0)*r02*x1324))+((r01*x1329))+(((-1.0)*sj0*x1301))+(((-1.0)*r00*x1334))+((x1319*x1332))+((pz*sj0))+((r00*x1330))+(((-1.0)*x1321*x1331))+(((-1.0)*sj0*x1327))+(((-1.0)*x1321*x1332))+((x1319*x1331))+(((-1.0)*r01*x1333))+((x1319*x1326))+(((-1.0)*x1321*x1326))+((r02*x1323))+((sj0*x1328)));
evalcond[4]=((((-1.0)*(1.0)*cj0*pz))+(((-1.0)*r11*x1333))+((r10*x1330))+(((-1.0)*x1331*x1336))+((cj0*x1301))+((x1326*x1335))+((r12*x1323))+((x1332*x1335))+((x1331*x1335))+((cj0*x1327))+(((-1.0)*r12*x1324))+(((-1.0)*x1326*x1336))+(((-1.0)*x1332*x1336))+(((-1.0)*r12*x1325))+(((-1.0)*cj0*x1328))+(((-1.0)*r10*x1334))+((r11*x1329)));
evalcond[5]=((((-1.0)*x1333*x1347))+((x1344*x1350))+(((-1.0)*x1346*x1350))+((x1330*x1348))+(((-1.0)*x1334*x1348))+((x1344*x1345))+(((-1.0)*x1346*x1349))+py+((x1344*x1349))+(((-1.0)*(0.00975)*sj0))+(((-1.0)*cj0*x1343))+(((-1.0)*x1345*x1346))+((cj0*x1342))+((x1329*x1347))+(((-1.0)*x1338))+x1341+x1340+(((-0.10825629959419)*cj0*cj4*r22*sj3)));
evalcond[6]=((((-1.0)*x1307))+(((-1.0)*x1344*x1357))+((r22*sj0*x1325))+((x1333*x1354))+(((-1.0)*x1344*x1353))+((x1346*x1357))+((x1334*x1355))+(((-1.0)*sj0*x1342))+px+((x1346*x1353))+(((-1.0)*sj0*x1313))+((sj0*x1343))+(((-1.0)*x1351))+(((-1.0)*x1330*x1355))+x1352+(((-1.0)*x1329*x1354))+(((-1.0)*x1344*x1356))+((x1346*x1356)));
evalcond[7]=((((-1.0)*x1302*x1360))+((cj0*px))+(((-0.00975)*x1312))+((x1304*x1361))+((x1335*x1358))+((cj0*x1352))+(((-1.0)*x1336*x1358))+x1359+((r12*x1315))+((x1303*x1361))+((x1305*x1360))+(((-1.0)*cj0*x1351))+((r12*x1316)));
evalcond[8]=((((-1.0)*r02*x1309))+(((0.00975)*x1322))+(((-1.0)*r02*x1306))+((x1319*x1363))+(((-1.0)*py*x1314))+(((-1.0)*sj0*x1340))+(((-1.0)*cj0*r00*x1305))+(((-1.0)*cj0*r01*x1304))+x1359+((sj0*x1338))+((x1321*x1362))+(((-1.0)*x1319*x1362))+(((-1.0)*x1321*x1363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1364=((3.99988736317185)*cj1);
IkReal x1365=((3.99988736317185)*sj1);
IkReal x1366=((0.29622112105825)*cj1*cj5);
IkReal x1367=((0.29622112105825)*cj1*sj5);
IkReal x1368=((0.29622112105825)*cj5*sj1);
IkReal x1369=((0.29622112105825)*sj1*sj5);
if( IKabs((((px*x1364))+(((-1.0)*r00*x1366))+((r01*x1367))+(((-1.0)*pz*x1365))+((r20*x1368))+(((-1.0)*r21*x1369)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r00*x1368))+((px*x1365))+((r01*x1369))+((r21*x1367))+((pz*x1364))+(((-1.0)*r20*x1366)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x1364))+(((-1.0)*r00*x1366))+((r01*x1367))+(((-1.0)*pz*x1365))+((r20*x1368))+(((-1.0)*r21*x1369))))+IKsqr(((-1.63995381890046)+(((-1.0)*r00*x1368))+((px*x1365))+((r01*x1369))+((r21*x1367))+((pz*x1364))+(((-1.0)*r20*x1366))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((px*x1364))+(((-1.0)*r00*x1366))+((r01*x1367))+(((-1.0)*pz*x1365))+((r20*x1368))+(((-1.0)*r21*x1369))), ((-1.63995381890046)+(((-1.0)*r00*x1368))+((px*x1365))+((r01*x1369))+((r21*x1367))+((pz*x1364))+(((-1.0)*r20*x1366))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1370=(cj5*r20);
IkReal x1371=(r21*sj5);
IkReal x1372=IKcos(j2);
IkReal x1373=(cj1*x1372);
IkReal x1374=IKsin(j2);
IkReal x1375=(sj1*x1374);
IkReal x1376=(cj5*r00);
IkReal x1377=(r01*sj5);
IkReal x1378=(cj1*x1374);
IkReal x1379=(sj1*x1372);
IkReal x1380=((0.749999825156128)*cj4);
IkReal x1381=((0.433012600946063)*cj4);
IkReal x1382=((0.866025201892125)*cj5*sj4);
IkReal x1383=((0.866025201892125)*sj4*sj5);
IkReal x1384=((((-1.0)*x1375))+x1373);
IkReal x1385=((0.433012600946063)*sj3);
IkReal x1386=((0.866025403784439)*cj3*sj4);
IkReal x1387=((0.433013004730548)*cj4*sj3);
IkReal x1388=((0.749999825156128)*sj3);
IkReal x1389=(cj3*cj4*cj5);
IkReal x1390=(cj3*cj4*sj5);
IkReal x1391=((0.5)*cj3*sj4);
IkReal x1392=((0.250000174843791)*cj4*sj3);
IkReal x1393=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1394=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.0740573656612548)*x1370))+(((-0.25000704)*x1375))+(((0.25000704)*x1373))+(((-0.0740573656612548)*x1371)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((0.0740573656612548)*x1376))+(((0.25000704)*x1378))+(((0.41)*sj1))+(((-0.0740573656612548)*x1377))+(((0.25000704)*x1379)));
evalcond[2]=((((-1.0)*r00*x1383))+x1378+x1379+((x1376*x1381))+(((-0.433013004730548)*x1376))+(((-1.0)*r02*x1380))+(((-1.0)*r01*x1382))+(((-1.0)*(0.250000174843791)*r02))+(((-1.0)*x1377*x1381))+(((0.433013004730548)*x1377)));
evalcond[3]=((((-1.0)*r20*x1383))+(((-1.0)*r21*x1382))+(((-1.0)*x1371*x1381))+x1384+(((0.433013004730548)*x1371))+(((-1.0)*(0.250000174843791)*r22))+(((-0.433013004730548)*x1370))+(((-1.0)*r22*x1380))+((x1370*x1381)));
evalcond[4]=(((x1376*x1392))+((r00*x1390))+(((-1.0)*r00*x1394))+(((-1.0)*r02*x1386))+(((-1.0)*x1377*x1392))+((r01*x1389))+(((-1.0)*r01*x1393))+(((-1.0)*x1377*x1388))+x1384+(((-1.0)*x1377*x1391))+(((-1.0)*r02*x1387))+((x1376*x1388))+((r02*x1385))+((x1376*x1391)));
evalcond[5]=((((-1.0)*x1378))+(((-1.0)*x1371*x1392))+((x1370*x1388))+(((-1.0)*r20*x1394))+(((-1.0)*x1379))+(((-1.0)*r21*x1393))+((r21*x1389))+(((-1.0)*r22*x1387))+((r20*x1390))+((x1370*x1391))+((x1370*x1392))+(((-1.0)*r22*x1386))+(((-1.0)*x1371*x1391))+((r22*x1385))+(((-1.0)*x1371*x1388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1395=((3.99988736317185)*cj1);
IkReal x1396=((3.99988736317185)*sj1);
IkReal x1397=((0.29622112105825)*cj1*cj5);
IkReal x1398=((0.29622112105825)*cj1*sj5);
IkReal x1399=((0.29622112105825)*cj5*sj1);
IkReal x1400=((0.29622112105825)*sj1*sj5);
if( IKabs((((r20*x1399))+((r00*x1397))+(((-1.0)*pz*x1396))+(((-1.0)*px*x1395))+(((-1.0)*r01*x1398))+(((-1.0)*r21*x1400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r20*x1397))+((r00*x1399))+((r21*x1398))+((pz*x1395))+(((-1.0)*r01*x1400))+(((-1.0)*px*x1396)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x1399))+((r00*x1397))+(((-1.0)*pz*x1396))+(((-1.0)*px*x1395))+(((-1.0)*r01*x1398))+(((-1.0)*r21*x1400))))+IKsqr(((-1.63995381890046)+(((-1.0)*r20*x1397))+((r00*x1399))+((r21*x1398))+((pz*x1395))+(((-1.0)*r01*x1400))+(((-1.0)*px*x1396))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x1399))+((r00*x1397))+(((-1.0)*pz*x1396))+(((-1.0)*px*x1395))+(((-1.0)*r01*x1398))+(((-1.0)*r21*x1400))), ((-1.63995381890046)+(((-1.0)*r20*x1397))+((r00*x1399))+((r21*x1398))+((pz*x1395))+(((-1.0)*r01*x1400))+(((-1.0)*px*x1396))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1401=(cj5*r20);
IkReal x1402=(r21*sj5);
IkReal x1403=IKcos(j2);
IkReal x1404=(cj1*x1403);
IkReal x1405=IKsin(j2);
IkReal x1406=(sj1*x1405);
IkReal x1407=(cj5*r00);
IkReal x1408=(r01*sj5);
IkReal x1409=(cj1*x1405);
IkReal x1410=(sj1*x1403);
IkReal x1411=((0.749999825156128)*cj4);
IkReal x1412=((0.433012600946063)*cj4);
IkReal x1413=((0.866025201892125)*cj5*sj4);
IkReal x1414=((0.866025201892125)*sj4*sj5);
IkReal x1415=((((-1.0)*x1410))+(((-1.0)*x1409)));
IkReal x1416=((0.433012600946063)*sj3);
IkReal x1417=((0.866025403784439)*cj3*sj4);
IkReal x1418=((0.433013004730548)*cj4*sj3);
IkReal x1419=((0.749999825156128)*sj3);
IkReal x1420=(cj3*cj4*cj5);
IkReal x1421=(cj3*cj4*sj5);
IkReal x1422=((0.5)*cj3*sj4);
IkReal x1423=((0.250000174843791)*cj4*sj3);
IkReal x1424=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1425=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.25000704)*x1404))+(((-0.0740573656612548)*x1402))+(((-0.25000704)*x1406))+(((0.0740573656612548)*x1401)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((-0.0740573656612548)*x1408))+(((-0.25000704)*x1409))+(((-1.0)*(0.41)*sj1))+(((0.0740573656612548)*x1407))+(((-0.25000704)*x1410)));
evalcond[2]=((((-1.0)*x1402*x1412))+(((-1.0)*r22*x1411))+(((-1.0)*x1406))+(((0.433013004730548)*x1402))+(((-1.0)*r21*x1413))+x1404+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r20*x1414))+((x1401*x1412))+(((-0.433013004730548)*x1401)));
evalcond[3]=((((-1.0)*r00*x1414))+(((0.433013004730548)*x1408))+(((-1.0)*(0.250000174843791)*r02))+(((-1.0)*x1408*x1412))+x1415+((x1407*x1412))+(((-0.433013004730548)*x1407))+(((-1.0)*r02*x1411))+(((-1.0)*r01*x1413)));
evalcond[4]=((((-1.0)*x1408*x1422))+(((-1.0)*x1408*x1419))+(((-1.0)*r02*x1417))+(((-1.0)*r01*x1424))+((x1407*x1419))+((x1407*x1422))+x1406+((r00*x1421))+(((-1.0)*x1408*x1423))+(((-1.0)*r00*x1425))+((r02*x1416))+((x1407*x1423))+(((-1.0)*x1404))+(((-1.0)*r02*x1418))+((r01*x1420)));
evalcond[5]=(((x1401*x1423))+((r21*x1420))+(((-1.0)*r22*x1418))+(((-1.0)*r20*x1425))+(((-1.0)*x1402*x1422))+((r20*x1421))+(((-1.0)*r21*x1424))+(((-1.0)*x1402*x1423))+(((-1.0)*x1402*x1419))+((x1401*x1419))+(((-1.0)*r22*x1417))+x1415+((x1401*x1422))+((r22*x1416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1426=((3.99988736317185)*cj1);
IkReal x1427=((3.99988736317185)*sj1);
IkReal x1428=((0.29622112105825)*cj1*cj5);
IkReal x1429=((0.29622112105825)*cj1*sj5);
IkReal x1430=((0.29622112105825)*cj5*sj1);
IkReal x1431=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*pz*x1427))+(((-1.0)*r21*x1431))+(((-1.0)*r11*x1429))+(((-1.0)*py*x1426))+((r20*x1430))+((r10*x1428)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r11*x1431))+((r10*x1430))+((r21*x1429))+(((-1.0)*r20*x1428))+((pz*x1426))+(((-1.0)*py*x1427)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*x1427))+(((-1.0)*r21*x1431))+(((-1.0)*r11*x1429))+(((-1.0)*py*x1426))+((r20*x1430))+((r10*x1428))))+IKsqr(((-1.63995381890046)+(((-1.0)*r11*x1431))+((r10*x1430))+((r21*x1429))+(((-1.0)*r20*x1428))+((pz*x1426))+(((-1.0)*py*x1427))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*pz*x1427))+(((-1.0)*r21*x1431))+(((-1.0)*r11*x1429))+(((-1.0)*py*x1426))+((r20*x1430))+((r10*x1428))), ((-1.63995381890046)+(((-1.0)*r11*x1431))+((r10*x1430))+((r21*x1429))+(((-1.0)*r20*x1428))+((pz*x1426))+(((-1.0)*py*x1427))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1432=(cj5*r20);
IkReal x1433=(r21*sj5);
IkReal x1434=IKcos(j2);
IkReal x1435=(cj1*x1434);
IkReal x1436=IKsin(j2);
IkReal x1437=(sj1*x1436);
IkReal x1438=(cj5*r10);
IkReal x1439=(r11*sj5);
IkReal x1440=(cj1*x1436);
IkReal x1441=(sj1*x1434);
IkReal x1442=((0.749999825156128)*cj4);
IkReal x1443=((0.433012600946063)*cj4);
IkReal x1444=((0.866025201892125)*cj5*sj4);
IkReal x1445=((0.866025201892125)*sj4*sj5);
IkReal x1446=((((-1.0)*x1441))+(((-1.0)*x1440)));
IkReal x1447=((0.433012600946063)*sj3);
IkReal x1448=((0.866025403784439)*cj3*sj4);
IkReal x1449=((0.433013004730548)*cj4*sj3);
IkReal x1450=((0.749999825156128)*sj3);
IkReal x1451=(cj3*cj4*cj5);
IkReal x1452=(cj3*cj4*sj5);
IkReal x1453=((0.5)*cj3*sj4);
IkReal x1454=((0.250000174843791)*cj4*sj3);
IkReal x1455=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1456=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.25000704)*x1435))+(((0.0740573656612548)*x1432))+(((-0.0740573656612548)*x1433))+(((-0.25000704)*x1437)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-0.25000704)*x1440))+(((-0.25000704)*x1441))+(((-0.0740573656612548)*x1439))+(((-1.0)*(0.41)*sj1))+(((0.0740573656612548)*x1438)));
evalcond[2]=((((-1.0)*x1433*x1443))+(((-1.0)*r20*x1445))+(((-1.0)*r21*x1444))+(((0.433013004730548)*x1433))+(((-0.433013004730548)*x1432))+x1435+(((-1.0)*x1437))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r22*x1442))+((x1432*x1443)));
evalcond[3]=((((-0.433013004730548)*x1438))+(((-1.0)*r10*x1445))+((x1438*x1443))+(((0.433013004730548)*x1439))+(((-1.0)*(0.250000174843791)*r12))+x1446+(((-1.0)*r12*x1442))+(((-1.0)*x1439*x1443))+(((-1.0)*r11*x1444)));
evalcond[4]=((((-1.0)*x1439*x1453))+((r12*x1447))+(((-1.0)*r11*x1455))+((x1438*x1453))+((r11*x1451))+(((-1.0)*r12*x1449))+(((-1.0)*r10*x1456))+(((-1.0)*x1439*x1450))+((r10*x1452))+x1437+(((-1.0)*x1439*x1454))+((x1438*x1454))+(((-1.0)*x1435))+(((-1.0)*r12*x1448))+((x1438*x1450)));
evalcond[5]=((((-1.0)*r21*x1455))+(((-1.0)*r22*x1448))+(((-1.0)*x1433*x1450))+((r21*x1451))+((x1432*x1450))+((x1432*x1453))+(((-1.0)*x1433*x1454))+((r20*x1452))+x1446+(((-1.0)*r20*x1456))+((x1432*x1454))+(((-1.0)*x1433*x1453))+(((-1.0)*r22*x1449))+((r22*x1447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1457=((3.99988736317185)*cj1);
IkReal x1458=((3.99988736317185)*sj1);
IkReal x1459=((0.29622112105825)*cj1*cj5);
IkReal x1460=((0.29622112105825)*cj1*sj5);
IkReal x1461=((0.29622112105825)*cj5*sj1);
IkReal x1462=((0.29622112105825)*sj1*sj5);
if( IKabs((((r20*x1461))+((r11*x1460))+(((-1.0)*pz*x1458))+((py*x1457))+(((-1.0)*r21*x1462))+(((-1.0)*r10*x1459)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r20*x1459))+(((-1.0)*r10*x1461))+((py*x1458))+((r11*x1462))+((pz*x1457))+((r21*x1460)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x1461))+((r11*x1460))+(((-1.0)*pz*x1458))+((py*x1457))+(((-1.0)*r21*x1462))+(((-1.0)*r10*x1459))))+IKsqr(((-1.63995381890046)+(((-1.0)*r20*x1459))+(((-1.0)*r10*x1461))+((py*x1458))+((r11*x1462))+((pz*x1457))+((r21*x1460))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x1461))+((r11*x1460))+(((-1.0)*pz*x1458))+((py*x1457))+(((-1.0)*r21*x1462))+(((-1.0)*r10*x1459))), ((-1.63995381890046)+(((-1.0)*r20*x1459))+(((-1.0)*r10*x1461))+((py*x1458))+((r11*x1462))+((pz*x1457))+((r21*x1460))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1463=(cj5*r20);
IkReal x1464=(r21*sj5);
IkReal x1465=IKcos(j2);
IkReal x1466=(cj1*x1465);
IkReal x1467=IKsin(j2);
IkReal x1468=(sj1*x1467);
IkReal x1469=(cj5*r10);
IkReal x1470=(r11*sj5);
IkReal x1471=(cj1*x1467);
IkReal x1472=(sj1*x1465);
IkReal x1473=((0.749999825156128)*cj4);
IkReal x1474=((0.433012600946063)*cj4);
IkReal x1475=((0.866025201892125)*cj5*sj4);
IkReal x1476=((0.866025201892125)*sj4*sj5);
IkReal x1477=((((-1.0)*x1468))+x1466);
IkReal x1478=((0.433012600946063)*sj3);
IkReal x1479=((0.866025403784439)*cj3*sj4);
IkReal x1480=((0.433013004730548)*cj4*sj3);
IkReal x1481=((0.749999825156128)*sj3);
IkReal x1482=(cj3*cj4*cj5);
IkReal x1483=(cj3*cj4*sj5);
IkReal x1484=((0.5)*cj3*sj4);
IkReal x1485=((0.250000174843791)*cj4*sj3);
IkReal x1486=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1487=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((-0.0740573656612548)*x1464))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.25000704)*x1466))+(((-0.25000704)*x1468))+(((0.0740573656612548)*x1463)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((0.41)*sj1))+(((0.0740573656612548)*x1469))+(((-0.0740573656612548)*x1470))+(((0.25000704)*x1472))+(((0.25000704)*x1471)));
evalcond[2]=((((-1.0)*r11*x1475))+(((-1.0)*x1470*x1474))+((x1469*x1474))+(((-1.0)*(0.250000174843791)*r12))+(((-1.0)*r10*x1476))+x1471+x1472+(((0.433013004730548)*x1470))+(((-1.0)*r12*x1473))+(((-0.433013004730548)*x1469)));
evalcond[3]=(((x1463*x1474))+(((-0.433013004730548)*x1463))+(((-1.0)*r22*x1473))+(((-1.0)*r21*x1475))+(((-1.0)*x1464*x1474))+x1477+(((-1.0)*r20*x1476))+(((-1.0)*(0.250000174843791)*r22))+(((0.433013004730548)*x1464)));
evalcond[4]=((((-1.0)*r10*x1487))+(((-1.0)*x1470*x1485))+((x1469*x1481))+((x1469*x1485))+((r11*x1482))+(((-1.0)*r11*x1486))+((r12*x1478))+(((-1.0)*x1470*x1484))+((r10*x1483))+((x1469*x1484))+x1477+(((-1.0)*r12*x1479))+(((-1.0)*r12*x1480))+(((-1.0)*x1470*x1481)));
evalcond[5]=(((r22*x1478))+(((-1.0)*r21*x1486))+(((-1.0)*x1464*x1484))+(((-1.0)*r20*x1487))+((x1463*x1484))+((r20*x1483))+((x1463*x1485))+(((-1.0)*r22*x1480))+(((-1.0)*x1464*x1481))+(((-1.0)*r22*x1479))+((r21*x1482))+((x1463*x1481))+(((-1.0)*x1471))+(((-1.0)*x1472))+(((-1.0)*x1464*x1485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1488=((390625.0)*py);
IkReal x1489=((3808.59375)*sj0);
IkReal x1490=((390625.0)*cj0*pz);
IkReal x1491=((28928.6584614277)*cj1);
IkReal x1492=(cj5*r10);
IkReal x1493=(r11*sj5);
IkReal x1494=(cj5*r20);
IkReal x1495=((28928.6584614277)*cj0*sj1);
IkReal x1496=(r21*sj5);
IkReal x1497=((28928.6584614277)*sj1);
IkReal x1498=((28928.6584614277)*cj0*cj1);
CheckValue<IkReal> x1499=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1499.valid){
continue;
}
CheckValue<IkReal> x1500 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x1490))+(((-1.0)*cj1*x1488))+((x1494*x1495))+(((-1.0)*x1495*x1496))+((cj1*x1489))+((x1491*x1492))+(((-1.0)*x1491*x1493)))),IkReal(((((-1.0)*x1493*x1497))+(((-1.0)*sj1*x1488))+((x1492*x1497))+((cj1*x1490))+(((-1.0)*x1494*x1498))+((x1496*x1498))+((sj1*x1489))+(((-1.0)*(160156.25)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1500.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1499.value)))+(x1500.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1501=(cj5*r20);
IkReal x1502=(r21*sj5);
IkReal x1503=IKcos(j2);
IkReal x1504=(cj1*x1503);
IkReal x1505=IKsin(j2);
IkReal x1506=(sj1*x1505);
IkReal x1507=(cj5*r00);
IkReal x1508=(r01*sj5);
IkReal x1509=((0.41)*sj1);
IkReal x1510=(cj1*x1505);
IkReal x1511=(sj0*x1510);
IkReal x1512=(sj1*x1503);
IkReal x1513=(sj0*x1512);
IkReal x1514=(cj5*r10);
IkReal x1515=(r11*sj5);
IkReal x1516=((0.25000704)*cj0);
IkReal x1517=((0.749999825156128)*cj4);
IkReal x1518=((1.0)*x1505);
IkReal x1519=(sj1*x1518);
IkReal x1520=((0.433012600946063)*cj4);
IkReal x1521=((0.866025201892125)*cj5*sj4);
IkReal x1522=((0.866025201892125)*sj4*sj5);
IkReal x1523=(cj1*x1518);
IkReal x1524=((1.0)*x1512);
IkReal x1525=((0.433012600946063)*sj3);
IkReal x1526=((0.866025403784439)*cj3*sj4);
IkReal x1527=((0.433013004730548)*cj4*sj3);
IkReal x1528=((0.749999825156128)*sj3);
IkReal x1529=(cj3*cj4*cj5);
IkReal x1530=(cj3*cj4*sj5);
IkReal x1531=((0.5)*cj3*sj4);
IkReal x1532=((0.250000174843791)*cj4*sj3);
IkReal x1533=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1534=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x1506))+(((0.0740573656612548)*x1501))+(((0.25000704)*x1504))+(((-0.0740573656612548)*x1502)));
evalcond[1]=((((0.0740573656612548)*x1507))+((sj0*x1509))+(((-1.0)*(1.0)*px))+(((0.25000704)*x1513))+(((0.25000704)*x1511))+(((-0.0740573656612548)*x1508))+(((0.00975)*cj0)));
evalcond[2]=((((-0.0740573656612548)*x1515))+(((-1.0)*(1.0)*py))+(((-1.0)*x1510*x1516))+(((0.0740573656612548)*x1514))+(((0.00975)*sj0))+(((-1.0)*cj0*x1509))+(((-1.0)*x1512*x1516)));
evalcond[3]=((((-0.433013004730548)*x1501))+((x1501*x1520))+(((0.433013004730548)*x1502))+(((-1.0)*x1502*x1520))+(((-1.0)*x1519))+(((-1.0)*r22*x1517))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r20*x1522))+x1504+(((-1.0)*r21*x1521)));
evalcond[4]=((((-1.0)*r02*x1517))+(((-1.0)*x1508*x1520))+x1513+x1511+(((-1.0)*r00*x1522))+(((0.433013004730548)*x1508))+(((-0.433013004730548)*x1507))+(((-1.0)*r01*x1521))+(((-1.0)*(0.250000174843791)*r02))+((x1507*x1520)));
evalcond[5]=((((-0.433013004730548)*x1514))+(((-1.0)*cj0*x1523))+(((-1.0)*r12*x1517))+(((0.433013004730548)*x1515))+(((-1.0)*(0.250000174843791)*r12))+(((-1.0)*r11*x1521))+(((-1.0)*cj0*x1524))+(((-1.0)*x1515*x1520))+(((-1.0)*r10*x1522))+((x1514*x1520)));
evalcond[6]=(((r22*x1525))+(((-1.0)*r20*x1534))+((x1501*x1531))+((r20*x1530))+(((-1.0)*x1502*x1528))+((x1501*x1532))+(((-1.0)*x1502*x1531))+(((-1.0)*x1523))+(((-1.0)*r21*x1533))+(((-1.0)*x1524))+(((-1.0)*r22*x1527))+(((-1.0)*r22*x1526))+((r21*x1529))+(((-1.0)*x1502*x1532))+((x1501*x1528)));
evalcond[7]=((((-1.0)*r02*x1526))+((x1507*x1531))+(((-1.0)*r00*x1534))+((x1507*x1528))+(((-1.0)*r02*x1527))+((r02*x1525))+(((-1.0)*x1508*x1528))+(((-1.0)*x1508*x1532))+((r01*x1529))+(((-1.0)*x1508*x1531))+((r00*x1530))+((sj0*x1504))+(((-1.0)*r01*x1533))+((x1507*x1532))+(((-1.0)*sj0*x1519)));
evalcond[8]=(((x1514*x1528))+(((-1.0)*r10*x1534))+((x1514*x1532))+((cj0*x1506))+(((-1.0)*x1515*x1532))+((r12*x1525))+(((-1.0)*r12*x1527))+(((-1.0)*r11*x1533))+(((-1.0)*r12*x1526))+((r11*x1529))+((r10*x1530))+((x1514*x1531))+(((-1.0)*x1515*x1528))+(((-1.0)*x1515*x1531))+(((-1.0)*cj0*x1504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1535=((3808.59375)*cj0);
IkReal x1536=((390625.0)*px);
IkReal x1537=((28928.6584614277)*cj1);
IkReal x1538=(cj5*r00);
IkReal x1539=(r01*sj5);
IkReal x1540=((390625.0)*pz*sj0);
IkReal x1541=(cj5*r20);
IkReal x1542=((28928.6584614277)*sj0*sj1);
IkReal x1543=(r21*sj5);
IkReal x1544=((28928.6584614277)*sj1);
IkReal x1545=((28928.6584614277)*cj1*sj0);
CheckValue<IkReal> x1546 = IKatan2WithCheck(IkReal((((cj1*x1536))+(((-1.0)*cj1*x1535))+(((-1.0)*x1542*x1543))+(((-1.0)*x1537*x1538))+((x1541*x1542))+(((-1.0)*sj1*x1540))+((x1537*x1539)))),IkReal((((x1543*x1545))+((x1539*x1544))+(((-1.0)*sj1*x1535))+(((-1.0)*x1541*x1545))+((cj1*x1540))+(((-1.0)*(160156.25)*sj0))+(((-1.0)*x1538*x1544))+((sj1*x1536)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1546.valid){
continue;
}
CheckValue<IkReal> x1547=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1547.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1546.value)+(((1.5707963267949)*(x1547.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1548=(cj5*r20);
IkReal x1549=(r21*sj5);
IkReal x1550=IKcos(j2);
IkReal x1551=(cj1*x1550);
IkReal x1552=IKsin(j2);
IkReal x1553=(sj1*x1552);
IkReal x1554=(cj5*r00);
IkReal x1555=(r01*sj5);
IkReal x1556=((0.41)*sj1);
IkReal x1557=(cj1*x1552);
IkReal x1558=(sj0*x1557);
IkReal x1559=(sj1*x1550);
IkReal x1560=(sj0*x1559);
IkReal x1561=(cj5*r10);
IkReal x1562=(r11*sj5);
IkReal x1563=((0.25000704)*cj0);
IkReal x1564=((0.749999825156128)*cj4);
IkReal x1565=((1.0)*x1552);
IkReal x1566=(sj1*x1565);
IkReal x1567=((0.433012600946063)*cj4);
IkReal x1568=((0.866025201892125)*cj5*sj4);
IkReal x1569=((0.866025201892125)*sj4*sj5);
IkReal x1570=(cj1*x1565);
IkReal x1571=((1.0)*x1559);
IkReal x1572=((0.433012600946063)*sj3);
IkReal x1573=((0.866025403784439)*cj3*sj4);
IkReal x1574=((0.433013004730548)*cj4*sj3);
IkReal x1575=((0.749999825156128)*sj3);
IkReal x1576=(cj3*cj4*cj5);
IkReal x1577=(cj3*cj4*sj5);
IkReal x1578=((0.5)*cj3*sj4);
IkReal x1579=((0.250000174843791)*cj4*sj3);
IkReal x1580=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1581=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.0740573656612548)*x1548))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.25000704)*x1551))+(((-0.0740573656612548)*x1549))+(((-0.25000704)*x1553)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((0.25000704)*x1558))+(((0.00975)*cj0))+((sj0*x1556))+(((0.25000704)*x1560))+(((0.0740573656612548)*x1554))+(((-0.0740573656612548)*x1555)));
evalcond[2]=((((-1.0)*x1559*x1563))+(((-1.0)*(1.0)*py))+(((0.00975)*sj0))+(((-0.0740573656612548)*x1562))+(((-1.0)*cj0*x1556))+(((-1.0)*x1557*x1563))+(((0.0740573656612548)*x1561)));
evalcond[3]=((((0.433013004730548)*x1549))+((x1548*x1567))+(((-1.0)*r20*x1569))+(((-0.433013004730548)*x1548))+x1551+(((-1.0)*r21*x1568))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r22*x1564))+(((-1.0)*x1549*x1567))+(((-1.0)*x1566)));
evalcond[4]=(((x1554*x1567))+(((0.433013004730548)*x1555))+(((-1.0)*r00*x1569))+x1558+(((-1.0)*r02*x1564))+(((-1.0)*(0.250000174843791)*r02))+(((-1.0)*x1555*x1567))+(((-0.433013004730548)*x1554))+x1560+(((-1.0)*r01*x1568)));
evalcond[5]=((((-1.0)*x1562*x1567))+(((-1.0)*r11*x1568))+((x1561*x1567))+(((-1.0)*cj0*x1571))+(((-1.0)*r12*x1564))+(((-1.0)*(0.250000174843791)*r12))+(((-0.433013004730548)*x1561))+(((-1.0)*cj0*x1570))+(((-1.0)*r10*x1569))+(((0.433013004730548)*x1562)));
evalcond[6]=((((-1.0)*r20*x1581))+((x1548*x1575))+((r20*x1577))+((r22*x1572))+((x1548*x1578))+(((-1.0)*x1549*x1579))+(((-1.0)*r22*x1574))+((x1548*x1579))+(((-1.0)*x1570))+(((-1.0)*r22*x1573))+(((-1.0)*x1571))+(((-1.0)*x1549*x1575))+(((-1.0)*x1549*x1578))+(((-1.0)*r21*x1580))+((r21*x1576)));
evalcond[7]=((((-1.0)*x1555*x1579))+(((-1.0)*x1555*x1575))+(((-1.0)*r01*x1580))+((sj0*x1551))+((x1554*x1579))+(((-1.0)*x1555*x1578))+((x1554*x1578))+(((-1.0)*sj0*x1566))+(((-1.0)*r02*x1574))+((r02*x1572))+((r00*x1577))+(((-1.0)*r02*x1573))+(((-1.0)*r00*x1581))+((x1554*x1575))+((r01*x1576)));
evalcond[8]=((((-1.0)*r12*x1574))+((x1561*x1578))+((r12*x1572))+((r10*x1577))+((r11*x1576))+(((-1.0)*x1562*x1575))+((cj0*x1553))+((x1561*x1575))+((x1561*x1579))+(((-1.0)*x1562*x1579))+(((-1.0)*x1562*x1578))+(((-1.0)*r12*x1573))+(((-1.0)*cj0*x1551))+(((-1.0)*r10*x1581))+(((-1.0)*r11*x1580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1582=(cj0*r12);
IkReal x1583=((0.182313665255445)*cj0);
IkReal x1584=(cj5*r10);
IkReal x1585=(r11*sj5);
IkReal x1586=((0.108256198645226)*cj0*cj4);
IkReal x1587=((0.216512397290453)*cj0*sj4);
IkReal x1588=(cj5*r20);
IkReal x1589=(r21*sj5);
IkReal x1590=((0.264039508890796)*cj4);
IkReal x1591=((0.528079017781592)*sj4);
CheckValue<IkReal> x1592=IKPowWithIntegerCheck(cj0,-2);
if(!x1592.valid){
continue;
}
if( IKabs(((-2.4390243902439)*(x1592.value)*((((cj0*py))+(((-1.0)*r10*sj5*x1587))+(((-1.0)*(0.00975)*cj0*sj0))+(((-1.0)*cj5*r11*x1587))+(((-1.0)*x1583*x1584))+((x1583*x1585))+(((-1.0)*x1585*x1586))+(((-0.187505236287801)*cj4*x1582))+((x1584*x1586))+(((-0.0625018037121786)*x1582)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.444667476232793)*x1589))+(((-1.0)*(0.457329844604393)*cj4*r22))+(((-0.444667476232793)*x1588))+(((-1.0)*r20*sj5*x1591))+(((-1.0)*x1589*x1590))+(((2.4390243902439)*pz))+(((-1.0)*cj5*r21*x1591))+(((-1.0)*(0.15244342368824)*r22))+((x1588*x1590)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.4390243902439)*(x1592.value)*((((cj0*py))+(((-1.0)*r10*sj5*x1587))+(((-1.0)*(0.00975)*cj0*sj0))+(((-1.0)*cj5*r11*x1587))+(((-1.0)*x1583*x1584))+((x1583*x1585))+(((-1.0)*x1585*x1586))+(((-0.187505236287801)*cj4*x1582))+((x1584*x1586))+(((-0.0625018037121786)*x1582))))))+IKsqr(((((0.444667476232793)*x1589))+(((-1.0)*(0.457329844604393)*cj4*r22))+(((-0.444667476232793)*x1588))+(((-1.0)*r20*sj5*x1591))+(((-1.0)*x1589*x1590))+(((2.4390243902439)*pz))+(((-1.0)*cj5*r21*x1591))+(((-1.0)*(0.15244342368824)*r22))+((x1588*x1590))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.4390243902439)*(x1592.value)*((((cj0*py))+(((-1.0)*r10*sj5*x1587))+(((-1.0)*(0.00975)*cj0*sj0))+(((-1.0)*cj5*r11*x1587))+(((-1.0)*x1583*x1584))+((x1583*x1585))+(((-1.0)*x1585*x1586))+(((-0.187505236287801)*cj4*x1582))+((x1584*x1586))+(((-0.0625018037121786)*x1582))))), ((((0.444667476232793)*x1589))+(((-1.0)*(0.457329844604393)*cj4*r22))+(((-0.444667476232793)*x1588))+(((-1.0)*r20*sj5*x1591))+(((-1.0)*x1589*x1590))+(((2.4390243902439)*pz))+(((-1.0)*cj5*r21*x1591))+(((-1.0)*(0.15244342368824)*r22))+((x1588*x1590))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1593=((0.182313665255445)*cj5);
IkReal x1594=((0.182313665255445)*sj5);
IkReal x1595=((0.41)*(IKcos(j1)));
IkReal x1596=((0.108256198645226)*cj4*cj5);
IkReal x1597=((0.108256198645226)*cj4*sj5);
IkReal x1598=((0.216512397290453)*cj5*sj4);
IkReal x1599=((0.216512397290453)*sj4*sj5);
IkReal x1600=((0.0625018037121786)*cj0);
IkReal x1601=((0.00975)*cj0);
IkReal x1602=(sj0*x1601);
IkReal x1603=((0.187505236287801)*cj0*cj4);
IkReal x1604=(cj0*r10);
IkReal x1605=(cj0*r11);
IkReal x1606=cj0*cj0;
IkReal x1607=((0.41)*(IKsin(j1)));
IkReal x1608=((1.0)*sj0);
IkReal x1609=((0.0625018037121786)*sj0);
IkReal x1610=((0.187505236287801)*cj4*sj0);
IkReal x1611=(r00*sj0);
IkReal x1612=(r01*sj0);
IkReal x1613=(cj5*r00);
IkReal x1614=((0.108256198645226)*cj4*sj0);
IkReal x1615=(r01*sj5);
IkReal x1616=sj0*sj0;
IkReal x1617=((0.108256198645226)*sj3);
IkReal x1618=((0.216512447764952)*cj3*sj4);
IkReal x1619=((0.10825629959419)*cj4*sj3);
IkReal x1620=((0.187505236287801)*sj3);
IkReal x1621=((0.0740573656612548)*cj5*r20);
IkReal x1622=((0.0740573656612548)*r21*sj5);
IkReal x1623=((0.25000704)*cj3*cj4*cj5);
IkReal x1624=((0.25000704)*cj3*cj4*sj5);
IkReal x1625=((0.12500352)*cj3*sj4);
IkReal x1626=((0.0625018037121786)*cj4*sj3);
IkReal x1627=((0.125003607424357)*cj5*sj3*sj4);
IkReal x1628=((0.125003607424357)*sj3*sj4*sj5);
IkReal x1629=(cj5*r10);
IkReal x1630=(r11*sj5);
IkReal x1631=((0.0740573656612548)*cj5);
IkReal x1632=(r10*x1631);
IkReal x1633=((0.0740573656612548)*sj5);
IkReal x1634=(r11*x1633);
IkReal x1635=(cj0*x1607);
IkReal x1636=((0.108256198645226)*r22*sj3);
IkReal x1637=((0.216512447764952)*cj3*r22*sj4);
IkReal x1638=(cj5*r20);
IkReal x1639=((0.187505236287801)*cj0*sj3);
IkReal x1640=(r21*sj5);
IkReal x1641=(cj0*r21);
IkReal x1642=(cj0*r20);
IkReal x1643=((0.12500352)*cj0*cj3*sj4);
IkReal x1644=((0.0625018037121786)*cj0*cj4*sj3);
IkReal x1645=(r00*x1631);
IkReal x1646=(r01*x1633);
IkReal x1647=((0.187505236287801)*sj0*sj3);
IkReal x1648=(r21*sj0);
IkReal x1649=(r20*sj0);
IkReal x1650=((0.12500352)*cj3*sj0*sj4);
IkReal x1651=((0.0625018037121786)*cj4*sj0*sj3);
IkReal x1652=((0.10825629959419)*sj0);
IkReal x1653=((-1.0)*sj0*x1635);
IkReal x1654=(r10*sj0);
IkReal x1655=(r11*sj0);
IkReal x1656=((0.10825629959419)*cj0);
IkReal x1657=((0.108256198645226)*cj0*cj4);
evalcond[0]=((((-1.0)*(0.0625018037121786)*r22))+(((-1.0)*r20*x1599))+(((-1.0)*r20*x1593))+pz+((r20*x1596))+((r21*x1594))+(((-1.0)*x1595))+(((-0.187505236287801)*cj4*r22))+(((-1.0)*r21*x1597))+(((-1.0)*r21*x1598)));
evalcond[1]=((((-1.0)*x1598*x1605))+(((-1.0)*x1597*x1605))+((x1594*x1605))+((cj0*py))+(((-1.0)*x1599*x1604))+(((-1.0)*r12*x1600))+((x1596*x1604))+(((-1.0)*r12*x1603))+(((-1.0)*x1602))+((x1606*x1607))+(((-1.0)*x1593*x1604)));
evalcond[2]=((((-1.0)*px*x1608))+((x1599*x1611))+(((-1.0)*x1594*x1612))+(((-1.0)*x1613*x1614))+((x1598*x1612))+((x1593*x1611))+x1602+((x1614*x1615))+((r02*x1609))+((r02*x1610))+((x1607*x1616)));
evalcond[3]=(((r00*x1624))+((x1613*x1620))+(((-1.0)*r02*x1618))+((x1613*x1625))+((r01*x1623))+(((-1.0)*sj0*x1595))+(((-1.0)*r02*x1619))+((x1613*x1626))+(((-1.0)*r01*x1627))+(((-1.0)*sj0*x1621))+(((-1.0)*r00*x1628))+((pz*sj0))+(((-1.0)*x1615*x1626))+((r02*x1617))+((sj0*x1622))+(((-1.0)*x1615*x1625))+(((-1.0)*x1615*x1620)));
evalcond[4]=((((-1.0)*(1.0)*cj0*pz))+((r11*x1623))+(((-1.0)*r12*x1619))+((r12*x1617))+((r10*x1624))+(((-1.0)*r12*x1618))+(((-1.0)*r10*x1628))+((cj0*x1621))+(((-1.0)*x1626*x1630))+((cj0*x1595))+(((-1.0)*x1620*x1630))+((x1620*x1629))+(((-1.0)*r11*x1627))+(((-1.0)*x1625*x1630))+((x1626*x1629))+((x1625*x1629))+(((-1.0)*cj0*x1622)));
evalcond[5]=((((-1.0)*x1627*x1641))+(((-1.0)*x1640*x1643))+((x1638*x1644))+((cj0*x1636))+((x1624*x1642))+(((-1.0)*x1639*x1640))+py+(((-1.0)*(0.00975)*sj0))+x1634+x1635+(((-1.0)*x1640*x1644))+(((-1.0)*x1632))+((x1623*x1641))+((x1638*x1643))+(((-1.0)*cj0*x1637))+(((-0.10825629959419)*cj0*cj4*r22*sj3))+(((-1.0)*x1628*x1642))+((x1638*x1639)));
evalcond[6]=(((r22*sj0*x1619))+((x1628*x1649))+(((-1.0)*sj0*x1607))+(((-1.0)*x1601))+((x1640*x1647))+(((-1.0)*x1638*x1647))+(((-1.0)*x1638*x1651))+(((-1.0)*x1638*x1650))+px+(((-1.0)*sj0*x1636))+((x1640*x1650))+((x1640*x1651))+((x1627*x1648))+(((-1.0)*x1623*x1648))+(((-1.0)*x1624*x1649))+((sj0*x1637))+(((-1.0)*x1645))+x1646);
evalcond[7]=(((cj0*px))+(((-0.00975)*x1606))+((r12*x1609))+(((-1.0)*x1630*x1652))+(((-1.0)*cj0*x1645))+((x1629*x1652))+((x1598*x1655))+((x1599*x1654))+((x1597*x1655))+((r12*x1610))+(((-1.0)*x1596*x1654))+x1653+((cj0*x1646)));
evalcond[8]=((((-1.0)*cj0*r00*x1599))+(((-1.0)*cj0*r01*x1598))+((x1615*x1656))+(((-1.0)*r02*x1600))+(((0.00975)*x1616))+((sj0*x1632))+(((-1.0)*sj0*x1634))+(((-1.0)*x1615*x1657))+(((-1.0)*x1613*x1656))+(((-1.0)*r02*x1603))+(((-1.0)*py*x1608))+x1653+((x1613*x1657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1658=((3.99988736317185)*cj1);
IkReal x1659=((3.99988736317185)*sj1);
IkReal x1660=((0.29622112105825)*cj1*cj5);
IkReal x1661=((0.29622112105825)*cj1*sj5);
IkReal x1662=((0.29622112105825)*cj5*sj1);
IkReal x1663=((0.29622112105825)*sj1*sj5);
if( IKabs((((r20*x1662))+(((-1.0)*r21*x1663))+(((-1.0)*r00*x1660))+((px*x1658))+((r01*x1661))+(((-1.0)*pz*x1659)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((pz*x1658))+((r21*x1661))+((px*x1659))+(((-1.0)*r00*x1662))+(((-1.0)*r20*x1660))+((r01*x1663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x1662))+(((-1.0)*r21*x1663))+(((-1.0)*r00*x1660))+((px*x1658))+((r01*x1661))+(((-1.0)*pz*x1659))))+IKsqr(((-1.63995381890046)+((pz*x1658))+((r21*x1661))+((px*x1659))+(((-1.0)*r00*x1662))+(((-1.0)*r20*x1660))+((r01*x1663))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x1662))+(((-1.0)*r21*x1663))+(((-1.0)*r00*x1660))+((px*x1658))+((r01*x1661))+(((-1.0)*pz*x1659))), ((-1.63995381890046)+((pz*x1658))+((r21*x1661))+((px*x1659))+(((-1.0)*r00*x1662))+(((-1.0)*r20*x1660))+((r01*x1663))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1664=(cj5*r20);
IkReal x1665=(r21*sj5);
IkReal x1666=IKcos(j2);
IkReal x1667=(cj1*x1666);
IkReal x1668=IKsin(j2);
IkReal x1669=(sj1*x1668);
IkReal x1670=(cj5*r00);
IkReal x1671=(r01*sj5);
IkReal x1672=(cj1*x1668);
IkReal x1673=(sj1*x1666);
IkReal x1674=((0.749999825156128)*cj4);
IkReal x1675=((0.433012600946063)*cj4);
IkReal x1676=((0.866025201892125)*cj5*sj4);
IkReal x1677=((0.866025201892125)*sj4*sj5);
IkReal x1678=((((-1.0)*x1669))+x1667);
IkReal x1679=((0.433012600946063)*sj3);
IkReal x1680=((0.866025403784439)*cj3*sj4);
IkReal x1681=((0.433013004730548)*cj4*sj3);
IkReal x1682=((0.749999825156128)*sj3);
IkReal x1683=(cj3*cj4*cj5);
IkReal x1684=(cj3*cj4*sj5);
IkReal x1685=((0.5)*cj3*sj4);
IkReal x1686=((0.250000174843791)*cj4*sj3);
IkReal x1687=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1688=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((-0.0740573656612548)*x1665))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.25000704)*x1667))+(((-0.25000704)*x1669))+(((0.0740573656612548)*x1664)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((0.25000704)*x1672))+(((0.41)*sj1))+(((0.0740573656612548)*x1670))+(((-0.0740573656612548)*x1671))+(((0.25000704)*x1673)));
evalcond[2]=(x1673+x1672+(((-1.0)*(0.250000174843791)*r02))+(((-1.0)*x1671*x1675))+(((-0.433013004730548)*x1670))+((x1670*x1675))+(((-1.0)*r01*x1676))+(((0.433013004730548)*x1671))+(((-1.0)*r02*x1674))+(((-1.0)*r00*x1677)));
evalcond[3]=((((-0.433013004730548)*x1664))+x1678+(((-1.0)*r22*x1674))+(((0.433013004730548)*x1665))+(((-1.0)*r21*x1676))+((x1664*x1675))+(((-1.0)*r20*x1677))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*x1665*x1675)));
evalcond[4]=(x1678+((x1670*x1686))+(((-1.0)*r02*x1681))+((x1670*x1682))+(((-1.0)*x1671*x1682))+(((-1.0)*r01*x1687))+((r01*x1683))+((r00*x1684))+((r02*x1679))+(((-1.0)*r02*x1680))+(((-1.0)*x1671*x1686))+((x1670*x1685))+(((-1.0)*x1671*x1685))+(((-1.0)*r00*x1688)));
evalcond[5]=(((r20*x1684))+(((-1.0)*x1665*x1685))+((x1664*x1686))+(((-1.0)*r21*x1687))+(((-1.0)*r22*x1681))+(((-1.0)*x1672))+(((-1.0)*x1665*x1686))+(((-1.0)*x1665*x1682))+((x1664*x1685))+(((-1.0)*r20*x1688))+(((-1.0)*x1673))+((r22*x1679))+((x1664*x1682))+(((-1.0)*r22*x1680))+((r21*x1683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1689=((3.99988736317185)*cj1);
IkReal x1690=((3.99988736317185)*sj1);
IkReal x1691=((0.29622112105825)*cj1*cj5);
IkReal x1692=((0.29622112105825)*cj1*sj5);
IkReal x1693=((0.29622112105825)*cj5*sj1);
IkReal x1694=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*px*x1689))+(((-1.0)*pz*x1690))+((r00*x1691))+(((-1.0)*r01*x1692))+(((-1.0)*r21*x1694))+((r20*x1693)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r01*x1694))+(((-1.0)*r20*x1691))+((r21*x1692))+(((-1.0)*px*x1690))+((pz*x1689))+((r00*x1693)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*px*x1689))+(((-1.0)*pz*x1690))+((r00*x1691))+(((-1.0)*r01*x1692))+(((-1.0)*r21*x1694))+((r20*x1693))))+IKsqr(((-1.63995381890046)+(((-1.0)*r01*x1694))+(((-1.0)*r20*x1691))+((r21*x1692))+(((-1.0)*px*x1690))+((pz*x1689))+((r00*x1693))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*px*x1689))+(((-1.0)*pz*x1690))+((r00*x1691))+(((-1.0)*r01*x1692))+(((-1.0)*r21*x1694))+((r20*x1693))), ((-1.63995381890046)+(((-1.0)*r01*x1694))+(((-1.0)*r20*x1691))+((r21*x1692))+(((-1.0)*px*x1690))+((pz*x1689))+((r00*x1693))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1695=(cj5*r20);
IkReal x1696=(r21*sj5);
IkReal x1697=IKcos(j2);
IkReal x1698=(cj1*x1697);
IkReal x1699=IKsin(j2);
IkReal x1700=(sj1*x1699);
IkReal x1701=(cj5*r00);
IkReal x1702=(r01*sj5);
IkReal x1703=(cj1*x1699);
IkReal x1704=(sj1*x1697);
IkReal x1705=((0.749999825156128)*cj4);
IkReal x1706=((0.433012600946063)*cj4);
IkReal x1707=((0.866025201892125)*cj5*sj4);
IkReal x1708=((0.866025201892125)*sj4*sj5);
IkReal x1709=((((-1.0)*x1704))+(((-1.0)*x1703)));
IkReal x1710=((0.433012600946063)*sj3);
IkReal x1711=((0.866025403784439)*cj3*sj4);
IkReal x1712=((0.433013004730548)*cj4*sj3);
IkReal x1713=((0.749999825156128)*sj3);
IkReal x1714=(cj3*cj4*cj5);
IkReal x1715=(cj3*cj4*sj5);
IkReal x1716=((0.5)*cj3*sj4);
IkReal x1717=((0.250000174843791)*cj4*sj3);
IkReal x1718=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1719=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.0740573656612548)*x1696))+(((0.25000704)*x1698))+(((-0.25000704)*x1700))+(((0.0740573656612548)*x1695)));
evalcond[1]=((((-0.0740573656612548)*x1702))+(((-1.0)*(1.0)*px))+(((-1.0)*(0.41)*sj1))+(((0.0740573656612548)*x1701))+(((-0.25000704)*x1704))+(((-0.25000704)*x1703)));
evalcond[2]=(x1698+(((-1.0)*r21*x1707))+((x1695*x1706))+(((-1.0)*r22*x1705))+(((-1.0)*x1700))+(((-0.433013004730548)*x1695))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*x1696*x1706))+(((0.433013004730548)*x1696))+(((-1.0)*r20*x1708)));
evalcond[3]=((((-1.0)*r00*x1708))+(((-1.0)*r01*x1707))+(((-1.0)*r02*x1705))+((x1701*x1706))+x1709+(((0.433013004730548)*x1702))+(((-1.0)*x1702*x1706))+(((-0.433013004730548)*x1701))+(((-1.0)*(0.250000174843791)*r02)));
evalcond[4]=(((x1701*x1713))+(((-1.0)*r00*x1719))+(((-1.0)*x1702*x1716))+x1700+((r00*x1715))+(((-1.0)*x1698))+((x1701*x1716))+((x1701*x1717))+(((-1.0)*r01*x1718))+(((-1.0)*r02*x1711))+((r02*x1710))+((r01*x1714))+(((-1.0)*r02*x1712))+(((-1.0)*x1702*x1713))+(((-1.0)*x1702*x1717)));
evalcond[5]=(((r20*x1715))+(((-1.0)*x1696*x1717))+(((-1.0)*r22*x1711))+x1709+((r22*x1710))+((x1695*x1717))+(((-1.0)*r22*x1712))+(((-1.0)*r21*x1718))+(((-1.0)*x1696*x1716))+(((-1.0)*r20*x1719))+((x1695*x1716))+((x1695*x1713))+(((-1.0)*x1696*x1713))+((r21*x1714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1720=((3.99988736317185)*cj1);
IkReal x1721=((3.99988736317185)*sj1);
IkReal x1722=((0.29622112105825)*cj1*cj5);
IkReal x1723=((0.29622112105825)*cj1*sj5);
IkReal x1724=((0.29622112105825)*cj5*sj1);
IkReal x1725=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*r11*x1723))+((r20*x1724))+(((-1.0)*pz*x1721))+(((-1.0)*py*x1720))+((r10*x1722))+(((-1.0)*r21*x1725)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((pz*x1720))+(((-1.0)*r11*x1725))+(((-1.0)*py*x1721))+((r10*x1724))+((r21*x1723))+(((-1.0)*r20*x1722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1723))+((r20*x1724))+(((-1.0)*pz*x1721))+(((-1.0)*py*x1720))+((r10*x1722))+(((-1.0)*r21*x1725))))+IKsqr(((-1.63995381890046)+((pz*x1720))+(((-1.0)*r11*x1725))+(((-1.0)*py*x1721))+((r10*x1724))+((r21*x1723))+(((-1.0)*r20*x1722))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x1723))+((r20*x1724))+(((-1.0)*pz*x1721))+(((-1.0)*py*x1720))+((r10*x1722))+(((-1.0)*r21*x1725))), ((-1.63995381890046)+((pz*x1720))+(((-1.0)*r11*x1725))+(((-1.0)*py*x1721))+((r10*x1724))+((r21*x1723))+(((-1.0)*r20*x1722))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1726=(cj5*r20);
IkReal x1727=(r21*sj5);
IkReal x1728=IKcos(j2);
IkReal x1729=(cj1*x1728);
IkReal x1730=IKsin(j2);
IkReal x1731=(sj1*x1730);
IkReal x1732=(cj5*r10);
IkReal x1733=(r11*sj5);
IkReal x1734=(cj1*x1730);
IkReal x1735=(sj1*x1728);
IkReal x1736=((0.749999825156128)*cj4);
IkReal x1737=((0.433012600946063)*cj4);
IkReal x1738=((0.866025201892125)*cj5*sj4);
IkReal x1739=((0.866025201892125)*sj4*sj5);
IkReal x1740=((((-1.0)*x1734))+(((-1.0)*x1735)));
IkReal x1741=((0.433012600946063)*sj3);
IkReal x1742=((0.866025403784439)*cj3*sj4);
IkReal x1743=((0.433013004730548)*cj4*sj3);
IkReal x1744=((0.749999825156128)*sj3);
IkReal x1745=(cj3*cj4*cj5);
IkReal x1746=(cj3*cj4*sj5);
IkReal x1747=((0.5)*cj3*sj4);
IkReal x1748=((0.250000174843791)*cj4*sj3);
IkReal x1749=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1750=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.0740573656612548)*x1726))+(((0.25000704)*x1729))+(((-0.25000704)*x1731))+(((-0.0740573656612548)*x1727)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-0.25000704)*x1735))+(((-0.25000704)*x1734))+(((-1.0)*(0.41)*sj1))+(((-0.0740573656612548)*x1733))+(((0.0740573656612548)*x1732)));
evalcond[2]=((((-1.0)*r21*x1738))+(((-1.0)*r20*x1739))+(((-1.0)*r22*x1736))+(((-0.433013004730548)*x1726))+(((-1.0)*x1727*x1737))+(((0.433013004730548)*x1727))+(((-1.0)*x1731))+((x1726*x1737))+x1729+(((-1.0)*(0.250000174843791)*r22)));
evalcond[3]=((((0.433013004730548)*x1733))+(((-1.0)*(0.250000174843791)*r12))+x1740+(((-0.433013004730548)*x1732))+(((-1.0)*r12*x1736))+(((-1.0)*r11*x1738))+((x1732*x1737))+(((-1.0)*r10*x1739))+(((-1.0)*x1733*x1737)));
evalcond[4]=((((-1.0)*r12*x1743))+((r12*x1741))+(((-1.0)*x1733*x1748))+((x1732*x1747))+(((-1.0)*r12*x1742))+(((-1.0)*x1729))+(((-1.0)*r11*x1749))+(((-1.0)*x1733*x1744))+(((-1.0)*r10*x1750))+((x1732*x1744))+(((-1.0)*x1733*x1747))+((r11*x1745))+((x1732*x1748))+x1731+((r10*x1746)));
evalcond[5]=(((x1726*x1748))+((r20*x1746))+(((-1.0)*r22*x1743))+(((-1.0)*r21*x1749))+(((-1.0)*r22*x1742))+((r21*x1745))+((x1726*x1747))+((x1726*x1744))+(((-1.0)*x1727*x1748))+(((-1.0)*r20*x1750))+x1740+((r22*x1741))+(((-1.0)*x1727*x1744))+(((-1.0)*x1727*x1747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1751=((3.99988736317185)*cj1);
IkReal x1752=((3.99988736317185)*sj1);
IkReal x1753=((0.29622112105825)*cj1*cj5);
IkReal x1754=((0.29622112105825)*cj1*sj5);
IkReal x1755=((0.29622112105825)*cj5*sj1);
IkReal x1756=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*r10*x1753))+(((-1.0)*pz*x1752))+((r20*x1755))+((py*x1751))+((r11*x1754))+(((-1.0)*r21*x1756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r20*x1753))+((r11*x1756))+((py*x1752))+((r21*x1754))+(((-1.0)*r10*x1755))+((pz*x1751)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1753))+(((-1.0)*pz*x1752))+((r20*x1755))+((py*x1751))+((r11*x1754))+(((-1.0)*r21*x1756))))+IKsqr(((-1.63995381890046)+(((-1.0)*r20*x1753))+((r11*x1756))+((py*x1752))+((r21*x1754))+(((-1.0)*r10*x1755))+((pz*x1751))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x1753))+(((-1.0)*pz*x1752))+((r20*x1755))+((py*x1751))+((r11*x1754))+(((-1.0)*r21*x1756))), ((-1.63995381890046)+(((-1.0)*r20*x1753))+((r11*x1756))+((py*x1752))+((r21*x1754))+(((-1.0)*r10*x1755))+((pz*x1751))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1757=(cj5*r20);
IkReal x1758=(r21*sj5);
IkReal x1759=IKcos(j2);
IkReal x1760=(cj1*x1759);
IkReal x1761=IKsin(j2);
IkReal x1762=(sj1*x1761);
IkReal x1763=(cj5*r10);
IkReal x1764=(r11*sj5);
IkReal x1765=(cj1*x1761);
IkReal x1766=(sj1*x1759);
IkReal x1767=((0.749999825156128)*cj4);
IkReal x1768=((0.433012600946063)*cj4);
IkReal x1769=((0.866025201892125)*cj5*sj4);
IkReal x1770=((0.866025201892125)*sj4*sj5);
IkReal x1771=((((-1.0)*x1762))+x1760);
IkReal x1772=((0.433012600946063)*sj3);
IkReal x1773=((0.866025403784439)*cj3*sj4);
IkReal x1774=((0.433013004730548)*cj4*sj3);
IkReal x1775=((0.749999825156128)*sj3);
IkReal x1776=(cj3*cj4*cj5);
IkReal x1777=(cj3*cj4*sj5);
IkReal x1778=((0.5)*cj3*sj4);
IkReal x1779=((0.250000174843791)*cj4*sj3);
IkReal x1780=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1781=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.0740573656612548)*x1758))+(((0.25000704)*x1760))+(((0.0740573656612548)*x1757))+(((-0.25000704)*x1762)));
evalcond[1]=((((0.25000704)*x1765))+(((0.0740573656612548)*x1763))+(((-0.0740573656612548)*x1764))+(((-1.0)*(1.0)*py))+(((0.25000704)*x1766))+(((0.41)*sj1)));
evalcond[2]=((((-1.0)*r12*x1767))+(((0.433013004730548)*x1764))+(((-1.0)*r11*x1769))+((x1763*x1768))+(((-0.433013004730548)*x1763))+(((-1.0)*x1764*x1768))+(((-1.0)*(0.250000174843791)*r12))+(((-1.0)*r10*x1770))+x1765+x1766);
evalcond[3]=((((-1.0)*x1758*x1768))+(((-0.433013004730548)*x1757))+(((-1.0)*r20*x1770))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r22*x1767))+((x1757*x1768))+(((-1.0)*r21*x1769))+(((0.433013004730548)*x1758))+x1771);
evalcond[4]=((((-1.0)*x1764*x1779))+((x1763*x1778))+((x1763*x1779))+(((-1.0)*r12*x1773))+(((-1.0)*x1764*x1778))+((r11*x1776))+(((-1.0)*r10*x1781))+((r12*x1772))+(((-1.0)*r12*x1774))+(((-1.0)*r11*x1780))+((r10*x1777))+((x1763*x1775))+(((-1.0)*x1764*x1775))+x1771);
evalcond[5]=((((-1.0)*x1758*x1775))+(((-1.0)*x1765))+((x1757*x1778))+(((-1.0)*x1758*x1779))+((x1757*x1775))+((r22*x1772))+(((-1.0)*x1758*x1778))+(((-1.0)*x1766))+((x1757*x1779))+(((-1.0)*r22*x1773))+((r20*x1777))+(((-1.0)*r22*x1774))+(((-1.0)*r20*x1781))+(((-1.0)*r21*x1780))+((r21*x1776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1782=((390625.0)*py);
IkReal x1783=((3808.59375)*sj0);
IkReal x1784=((390625.0)*cj0*pz);
IkReal x1785=((28928.6584614277)*cj1);
IkReal x1786=(cj5*r10);
IkReal x1787=(r11*sj5);
IkReal x1788=(cj5*r20);
IkReal x1789=((28928.6584614277)*cj0*sj1);
IkReal x1790=(r21*sj5);
IkReal x1791=((28928.6584614277)*sj1);
IkReal x1792=((28928.6584614277)*cj0*cj1);
CheckValue<IkReal> x1793 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x1782))+((x1788*x1789))+((x1785*x1786))+(((-1.0)*x1789*x1790))+((cj1*x1783))+(((-1.0)*sj1*x1784))+(((-1.0)*x1785*x1787)))),IkReal(((((-1.0)*x1788*x1792))+(((-1.0)*x1787*x1791))+((x1790*x1792))+((x1786*x1791))+((sj1*x1783))+((cj1*x1784))+(((-1.0)*sj1*x1782))+(((-1.0)*(160156.25)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1793.valid){
continue;
}
CheckValue<IkReal> x1794=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1794.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1793.value)+(((1.5707963267949)*(x1794.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1795=(cj5*r20);
IkReal x1796=(r21*sj5);
IkReal x1797=IKcos(j2);
IkReal x1798=(cj1*x1797);
IkReal x1799=IKsin(j2);
IkReal x1800=(sj1*x1799);
IkReal x1801=(cj5*r00);
IkReal x1802=(r01*sj5);
IkReal x1803=((0.41)*sj1);
IkReal x1804=(cj1*x1799);
IkReal x1805=(sj0*x1804);
IkReal x1806=(sj1*x1797);
IkReal x1807=(sj0*x1806);
IkReal x1808=(cj5*r10);
IkReal x1809=(r11*sj5);
IkReal x1810=((0.25000704)*cj0);
IkReal x1811=((0.749999825156128)*cj4);
IkReal x1812=((1.0)*x1799);
IkReal x1813=(sj1*x1812);
IkReal x1814=((0.433012600946063)*cj4);
IkReal x1815=((0.866025201892125)*cj5*sj4);
IkReal x1816=((0.866025201892125)*sj4*sj5);
IkReal x1817=(cj1*x1812);
IkReal x1818=((1.0)*x1806);
IkReal x1819=((0.433012600946063)*sj3);
IkReal x1820=((0.866025403784439)*cj3*sj4);
IkReal x1821=((0.433013004730548)*cj4*sj3);
IkReal x1822=((0.749999825156128)*sj3);
IkReal x1823=(cj3*cj4*cj5);
IkReal x1824=(cj3*cj4*sj5);
IkReal x1825=((0.5)*cj3*sj4);
IkReal x1826=((0.250000174843791)*cj4*sj3);
IkReal x1827=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1828=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x1800))+(((-0.0740573656612548)*x1796))+(((0.25000704)*x1798))+(((0.0740573656612548)*x1795)));
evalcond[1]=((((-1.0)*(1.0)*px))+((sj0*x1803))+(((0.00975)*cj0))+(((0.0740573656612548)*x1801))+(((-0.0740573656612548)*x1802))+(((0.25000704)*x1805))+(((0.25000704)*x1807)));
evalcond[2]=((((0.0740573656612548)*x1808))+(((-1.0)*(1.0)*py))+(((-0.0740573656612548)*x1809))+(((-1.0)*x1806*x1810))+(((-1.0)*cj0*x1803))+(((-1.0)*x1804*x1810))+(((0.00975)*sj0)));
evalcond[3]=(((x1795*x1814))+(((-1.0)*r21*x1815))+(((-1.0)*r20*x1816))+(((0.433013004730548)*x1796))+(((-1.0)*r22*x1811))+(((-1.0)*x1813))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*x1796*x1814))+x1798+(((-0.433013004730548)*x1795)));
evalcond[4]=((((-1.0)*r02*x1811))+(((-1.0)*x1802*x1814))+(((-1.0)*r00*x1816))+(((-1.0)*r01*x1815))+x1805+x1807+(((-1.0)*(0.250000174843791)*r02))+(((0.433013004730548)*x1802))+(((-0.433013004730548)*x1801))+((x1801*x1814)));
evalcond[5]=((((0.433013004730548)*x1809))+(((-1.0)*r12*x1811))+(((-1.0)*r10*x1816))+(((-1.0)*(0.250000174843791)*r12))+(((-1.0)*cj0*x1818))+(((-1.0)*x1809*x1814))+(((-0.433013004730548)*x1808))+(((-1.0)*r11*x1815))+(((-1.0)*cj0*x1817))+((x1808*x1814)));
evalcond[6]=(((x1795*x1825))+(((-1.0)*r22*x1820))+((r20*x1824))+(((-1.0)*x1796*x1825))+(((-1.0)*r20*x1828))+(((-1.0)*x1817))+((r22*x1819))+(((-1.0)*r22*x1821))+((x1795*x1822))+((x1795*x1826))+(((-1.0)*x1818))+(((-1.0)*x1796*x1822))+(((-1.0)*r21*x1827))+((r21*x1823))+(((-1.0)*x1796*x1826)));
evalcond[7]=((((-1.0)*x1802*x1822))+(((-1.0)*r01*x1827))+((x1801*x1826))+((x1801*x1825))+((r00*x1824))+((r02*x1819))+((sj0*x1798))+(((-1.0)*x1802*x1825))+(((-1.0)*sj0*x1813))+(((-1.0)*r02*x1820))+((x1801*x1822))+((r01*x1823))+(((-1.0)*r02*x1821))+(((-1.0)*x1802*x1826))+(((-1.0)*r00*x1828)));
evalcond[8]=(((x1808*x1825))+((cj0*x1800))+((x1808*x1826))+(((-1.0)*r10*x1828))+((r11*x1823))+((x1808*x1822))+(((-1.0)*r11*x1827))+(((-1.0)*cj0*x1798))+(((-1.0)*r12*x1820))+(((-1.0)*x1809*x1825))+((r10*x1824))+(((-1.0)*x1809*x1826))+((r12*x1819))+(((-1.0)*r12*x1821))+(((-1.0)*x1809*x1822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1829=((3808.59375)*cj0);
IkReal x1830=((390625.0)*px);
IkReal x1831=((28928.6584614277)*cj1);
IkReal x1832=(cj5*r00);
IkReal x1833=(r01*sj5);
IkReal x1834=((390625.0)*pz*sj0);
IkReal x1835=(cj5*r20);
IkReal x1836=((28928.6584614277)*sj0*sj1);
IkReal x1837=(r21*sj5);
IkReal x1838=((28928.6584614277)*sj1);
IkReal x1839=((28928.6584614277)*cj1*sj0);
CheckValue<IkReal> x1840 = IKatan2WithCheck(IkReal(((((-1.0)*x1836*x1837))+(((-1.0)*x1831*x1832))+((cj1*x1830))+(((-1.0)*sj1*x1834))+(((-1.0)*cj1*x1829))+((x1835*x1836))+((x1831*x1833)))),IkReal(((((-1.0)*sj1*x1829))+((sj1*x1830))+((x1833*x1838))+((cj1*x1834))+(((-1.0)*x1832*x1838))+(((-1.0)*(160156.25)*sj0))+((x1837*x1839))+(((-1.0)*x1835*x1839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1840.valid){
continue;
}
CheckValue<IkReal> x1841=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1841.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1840.value)+(((1.5707963267949)*(x1841.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1842=(cj5*r20);
IkReal x1843=(r21*sj5);
IkReal x1844=IKcos(j2);
IkReal x1845=(cj1*x1844);
IkReal x1846=IKsin(j2);
IkReal x1847=(sj1*x1846);
IkReal x1848=(cj5*r00);
IkReal x1849=(r01*sj5);
IkReal x1850=((0.41)*sj1);
IkReal x1851=(cj1*x1846);
IkReal x1852=(sj0*x1851);
IkReal x1853=(sj1*x1844);
IkReal x1854=(sj0*x1853);
IkReal x1855=(cj5*r10);
IkReal x1856=(r11*sj5);
IkReal x1857=((0.25000704)*cj0);
IkReal x1858=((0.749999825156128)*cj4);
IkReal x1859=((1.0)*x1846);
IkReal x1860=(sj1*x1859);
IkReal x1861=((0.433012600946063)*cj4);
IkReal x1862=((0.866025201892125)*cj5*sj4);
IkReal x1863=((0.866025201892125)*sj4*sj5);
IkReal x1864=(cj1*x1859);
IkReal x1865=((1.0)*x1853);
IkReal x1866=((0.433012600946063)*sj3);
IkReal x1867=((0.866025403784439)*cj3*sj4);
IkReal x1868=((0.433013004730548)*cj4*sj3);
IkReal x1869=((0.749999825156128)*sj3);
IkReal x1870=(cj3*cj4*cj5);
IkReal x1871=(cj3*cj4*sj5);
IkReal x1872=((0.5)*cj3*sj4);
IkReal x1873=((0.250000174843791)*cj4*sj3);
IkReal x1874=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1875=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.25000704)*x1845))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.0740573656612548)*x1842))+(((-0.25000704)*x1847))+(((-0.0740573656612548)*x1843)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((-0.0740573656612548)*x1849))+(((0.25000704)*x1854))+(((0.00975)*cj0))+((sj0*x1850))+(((0.0740573656612548)*x1848))+(((0.25000704)*x1852)));
evalcond[2]=((((-0.0740573656612548)*x1856))+(((-1.0)*(1.0)*py))+(((-1.0)*cj0*x1850))+(((0.0740573656612548)*x1855))+(((0.00975)*sj0))+(((-1.0)*x1853*x1857))+(((-1.0)*x1851*x1857)));
evalcond[3]=((((-0.433013004730548)*x1842))+(((-1.0)*r22*x1858))+(((-1.0)*r20*x1863))+((x1842*x1861))+x1845+(((-1.0)*r21*x1862))+(((-1.0)*x1843*x1861))+(((0.433013004730548)*x1843))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*x1860)));
evalcond[4]=(x1852+x1854+(((-1.0)*r02*x1858))+((x1848*x1861))+(((-1.0)*(0.250000174843791)*r02))+(((-1.0)*r00*x1863))+(((-0.433013004730548)*x1848))+(((-1.0)*r01*x1862))+(((-1.0)*x1849*x1861))+(((0.433013004730548)*x1849)));
evalcond[5]=((((-1.0)*r10*x1863))+(((-1.0)*cj0*x1864))+(((-1.0)*x1856*x1861))+((x1855*x1861))+(((-1.0)*r11*x1862))+(((-1.0)*r12*x1858))+(((-1.0)*(0.250000174843791)*r12))+(((-1.0)*cj0*x1865))+(((-0.433013004730548)*x1855))+(((0.433013004730548)*x1856)));
evalcond[6]=(((r22*x1866))+(((-1.0)*r21*x1874))+(((-1.0)*x1843*x1873))+(((-1.0)*x1843*x1872))+(((-1.0)*r20*x1875))+(((-1.0)*r22*x1867))+((r20*x1871))+((r21*x1870))+(((-1.0)*x1843*x1869))+(((-1.0)*r22*x1868))+(((-1.0)*x1865))+((x1842*x1872))+((x1842*x1873))+((x1842*x1869))+(((-1.0)*x1864)));
evalcond[7]=((((-1.0)*sj0*x1860))+(((-1.0)*r02*x1868))+((r02*x1866))+((x1848*x1873))+((x1848*x1872))+((x1848*x1869))+(((-1.0)*r02*x1867))+(((-1.0)*x1849*x1873))+((sj0*x1845))+(((-1.0)*r01*x1874))+(((-1.0)*x1849*x1872))+(((-1.0)*x1849*x1869))+((r01*x1870))+((r00*x1871))+(((-1.0)*r00*x1875)));
evalcond[8]=((((-1.0)*x1856*x1873))+(((-1.0)*x1856*x1872))+(((-1.0)*cj0*x1845))+((r12*x1866))+((x1855*x1872))+((r11*x1870))+((r10*x1871))+((x1855*x1873))+(((-1.0)*r12*x1867))+(((-1.0)*r11*x1874))+((x1855*x1869))+(((-1.0)*r12*x1868))+(((-1.0)*r10*x1875))+(((-1.0)*x1856*x1869))+((cj0*x1847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1876=((0.433012600946063)*cj4);
IkReal x1877=((0.866025201892125)*sj4);
IkReal x1878=(cj0*r22);
IkReal x1879=((0.749999825156128)*cj0);
IkReal x1880=(cj5*r20);
IkReal x1881=(r21*sj5);
IkReal x1882=((0.250000174843791)*cj0*cj4);
IkReal x1883=(cj5*r21);
IkReal x1884=((0.500000349687582)*cj0*sj4);
IkReal x1885=(r20*sj5);
IkReal x1886=(cj0*cj4);
IkReal x1887=((0.5)*cj0*sj4);
CheckValue<IkReal> x1888=IKPowWithIntegerCheck(IKsign((((r11*(((((0.433013004730548)*sj5))+(((-1.0)*cj5*x1877))+(((-1.0)*sj5*x1876))))))+((r12*(((-0.250000174843791)+(((-1.0)*(0.749999825156128)*cj4))))))+((r10*(((((-1.0)*sj5*x1877))+(((-1.0)*(0.433013004730548)*cj5))+((cj5*x1876)))))))),-1);
if(!x1888.valid){
continue;
}
CheckValue<IkReal> x1889 = IKatan2WithCheck(IkReal(((((-1.0)*x1884*x1885))+(((-1.0)*x1881*x1882))+((x1880*x1882))+((x1879*x1880))+(((-1.0)*x1883*x1884))+(((0.433012600946063)*x1878))+(((-1.0)*x1879*x1881))+(((-0.433013004730548)*cj4*x1878)))),IkReal(((((-1.0)*x1881*x1887))+((x1880*x1887))+(((-0.866025403784439)*sj4*x1878))+((x1885*x1886))+((x1883*x1886)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1889.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1888.value)))+(x1889.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1890=IKcos(j3);
IkReal x1891=((0.433012600946063)*x1890);
IkReal x1892=((0.433013004730548)*cj4*x1890);
IkReal x1893=((0.749999825156128)*cj5*x1890);
IkReal x1894=((0.749999825156128)*sj5*x1890);
IkReal x1895=IKsin(j3);
IkReal x1896=((0.866025403784439)*sj4*x1895);
IkReal x1897=((0.250000174843791)*cj4*cj5*x1890);
IkReal x1898=((1.0)*cj4*cj5*x1895);
IkReal x1899=((1.0)*cj4*sj5*x1895);
IkReal x1900=((0.250000174843791)*cj4*sj5*x1890);
IkReal x1901=((0.5)*cj5*sj4*x1895);
IkReal x1902=((0.500000349687582)*cj5*sj4*x1890);
IkReal x1903=((0.500000349687582)*sj4*sj5*x1890);
IkReal x1904=((0.5)*sj4*sj5*x1895);
evalcond[0]=(((r20*x1897))+(((-1.0)*r20*x1901))+(((-1.0)*r20*x1899))+(((-1.0)*r21*x1894))+(((-1.0)*r21*x1898))+(((-1.0)*r21*x1902))+(((-1.0)*r22*x1892))+((r20*x1893))+(((-1.0)*r21*x1900))+(((-1.0)*r20*x1903))+((r22*x1891))+((r22*x1896))+((r21*x1904)));
evalcond[1]=((((-1.0)*r01*x1902))+((r00*x1897))+(((-1.0)*r01*x1894))+((r00*x1893))+(((-1.0)*r00*x1903))+((r01*x1904))+(((-1.0)*r00*x1901))+((r02*x1891))+(((-1.0)*r02*x1892))+(((-1.0)*(1.0)*cj0))+((r02*x1896))+(((-1.0)*r01*x1900))+(((-1.0)*r01*x1898))+(((-1.0)*r00*x1899)));
evalcond[2]=((((-1.0)*r11*x1900))+(((-1.0)*r12*x1892))+(((-1.0)*(1.0)*sj0))+(((-1.0)*r10*x1903))+(((-1.0)*r10*x1899))+(((-1.0)*r11*x1898))+(((-1.0)*r11*x1894))+(((-1.0)*r10*x1901))+((r11*x1904))+((r12*x1896))+((r10*x1897))+((r10*x1893))+((r12*x1891))+(((-1.0)*r11*x1902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1905=((0.457329844604393)*cj4);
IkReal x1906=((0.444667476232793)*cj5);
IkReal x1907=((0.444667476232793)*sj5);
IkReal x1908=((0.264039508890796)*cj4*cj5);
IkReal x1909=((0.264039508890796)*cj4*sj5);
IkReal x1910=((0.528079017781592)*cj5*sj4);
IkReal x1911=((0.528079017781592)*sj4*sj5);
if( IKabs(((((-1.0)*(2.4390243902439)*py))+((r12*x1905))+(((-1.0)*r10*x1908))+(((-1.0)*r11*x1907))+((r11*x1909))+((r10*x1911))+(((0.15244342368824)*r12))+((r10*x1906))+((r11*x1910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1910))+(((-1.0)*r20*x1906))+(((-1.0)*r22*x1905))+(((-1.0)*r21*x1909))+(((-1.0)*r20*x1911))+(((2.4390243902439)*pz))+((r20*x1908))+(((-1.0)*(0.15244342368824)*r22))+((r21*x1907)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(2.4390243902439)*py))+((r12*x1905))+(((-1.0)*r10*x1908))+(((-1.0)*r11*x1907))+((r11*x1909))+((r10*x1911))+(((0.15244342368824)*r12))+((r10*x1906))+((r11*x1910))))+IKsqr(((((-1.0)*r21*x1910))+(((-1.0)*r20*x1906))+(((-1.0)*r22*x1905))+(((-1.0)*r21*x1909))+(((-1.0)*r20*x1911))+(((2.4390243902439)*pz))+((r20*x1908))+(((-1.0)*(0.15244342368824)*r22))+((r21*x1907))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*(2.4390243902439)*py))+((r12*x1905))+(((-1.0)*r10*x1908))+(((-1.0)*r11*x1907))+((r11*x1909))+((r10*x1911))+(((0.15244342368824)*r12))+((r10*x1906))+((r11*x1910))), ((((-1.0)*r21*x1910))+(((-1.0)*r20*x1906))+(((-1.0)*r22*x1905))+(((-1.0)*r21*x1909))+(((-1.0)*r20*x1911))+(((2.4390243902439)*pz))+((r20*x1908))+(((-1.0)*(0.15244342368824)*r22))+((r21*x1907))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1912=((((0.41)*(IKsin(j1))))+py);
IkReal x1913=((0.187505236287801)*cj4);
IkReal x1914=(cj5*r10);
IkReal x1915=(r11*sj5);
IkReal x1916=((0.108256198645226)*cj4);
IkReal x1917=((0.216512397290453)*cj5*sj4);
IkReal x1918=((0.216512397290453)*sj4*sj5);
IkReal x1919=(cj5*r20);
IkReal x1920=(r21*sj5);
IkReal x1921=((0.41)*(IKcos(j1)));
IkReal x1922=((0.108256198645226)*sj3);
IkReal x1923=((0.216512447764952)*cj3*sj4);
IkReal x1924=((0.10825629959419)*cj4*sj3);
IkReal x1925=((0.187505236287801)*sj3);
IkReal x1926=((0.25000704)*cj3*cj4*cj5);
IkReal x1927=((0.25000704)*cj3*cj4*sj5);
IkReal x1928=((0.12500352)*cj3*sj4);
IkReal x1929=((0.0625018037121786)*cj4*sj3);
IkReal x1930=((0.125003607424357)*cj5*sj3*sj4);
IkReal x1931=((0.125003607424357)*sj3*sj4*sj5);
evalcond[0]=((((-0.182313665255445)*x1914))+((x1914*x1916))+(((0.182313665255445)*x1915))+x1912+(((-1.0)*r11*x1917))+(((-1.0)*r12*x1913))+(((-1.0)*x1915*x1916))+(((-1.0)*(0.0625018037121786)*r12))+(((-1.0)*r10*x1918)));
evalcond[1]=((((-1.0)*(0.0625018037121786)*r22))+(((-1.0)*x1916*x1920))+pz+(((-0.182313665255445)*x1919))+((x1916*x1919))+(((-1.0)*r21*x1917))+(((-1.0)*r20*x1918))+(((-1.0)*r22*x1913))+(((0.182313665255445)*x1920))+(((-1.0)*x1921)));
evalcond[2]=((((-0.0740573656612548)*x1914))+(((0.0740573656612548)*x1915))+(((-1.0)*r22*x1924))+(((-1.0)*r22*x1923))+(((-1.0)*r21*x1930))+x1912+(((-1.0)*x1920*x1925))+(((-1.0)*x1920*x1928))+((r20*x1927))+((r22*x1922))+((x1919*x1928))+((x1919*x1925))+((x1919*x1929))+(((-1.0)*x1920*x1929))+((r21*x1926))+(((-1.0)*r20*x1931)));
evalcond[3]=((((-1.0)*r10*x1931))+(((-1.0)*r11*x1930))+((r12*x1922))+(((-1.0)*(1.0)*pz))+x1921+(((-0.0740573656612548)*x1920))+((x1914*x1928))+(((0.0740573656612548)*x1919))+(((-1.0)*r12*x1923))+(((-1.0)*x1915*x1925))+((x1914*x1929))+((x1914*x1925))+((r10*x1927))+((r11*x1926))+(((-1.0)*r12*x1924))+(((-1.0)*x1915*x1928))+(((-1.0)*x1915*x1929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1932=((3.99988736317185)*cj1);
IkReal x1933=((3.99988736317185)*sj1);
IkReal x1934=((0.29622112105825)*cj1*cj5);
IkReal x1935=((0.29622112105825)*cj1*sj5);
IkReal x1936=((0.29622112105825)*cj5*sj1);
IkReal x1937=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*py*x1932))+(((-1.0)*r21*x1937))+((r10*x1934))+(((-1.0)*r11*x1935))+(((-1.0)*pz*x1933))+((r20*x1936)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r11*x1937))+((pz*x1932))+(((-1.0)*py*x1933))+((r21*x1935))+((r10*x1936))+(((-1.0)*r20*x1934)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*py*x1932))+(((-1.0)*r21*x1937))+((r10*x1934))+(((-1.0)*r11*x1935))+(((-1.0)*pz*x1933))+((r20*x1936))))+IKsqr(((-1.63995381890046)+(((-1.0)*r11*x1937))+((pz*x1932))+(((-1.0)*py*x1933))+((r21*x1935))+((r10*x1936))+(((-1.0)*r20*x1934))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*py*x1932))+(((-1.0)*r21*x1937))+((r10*x1934))+(((-1.0)*r11*x1935))+(((-1.0)*pz*x1933))+((r20*x1936))), ((-1.63995381890046)+(((-1.0)*r11*x1937))+((pz*x1932))+(((-1.0)*py*x1933))+((r21*x1935))+((r10*x1936))+(((-1.0)*r20*x1934))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1938=(cj5*r20);
IkReal x1939=(r21*sj5);
IkReal x1940=IKcos(j2);
IkReal x1941=(cj1*x1940);
IkReal x1942=IKsin(j2);
IkReal x1943=(sj1*x1942);
IkReal x1944=(cj5*r10);
IkReal x1945=(r11*sj5);
IkReal x1946=(cj1*x1942);
IkReal x1947=(sj1*x1940);
IkReal x1948=((0.749999825156128)*cj4);
IkReal x1949=((0.433012600946063)*cj4);
IkReal x1950=((0.866025201892125)*cj5*sj4);
IkReal x1951=((0.866025201892125)*sj4*sj5);
IkReal x1952=((((-1.0)*x1946))+(((-1.0)*x1947)));
IkReal x1953=((0.433012600946063)*sj3);
IkReal x1954=((0.866025403784439)*cj3*sj4);
IkReal x1955=((0.433013004730548)*cj4*sj3);
IkReal x1956=((0.749999825156128)*sj3);
IkReal x1957=(cj3*cj4*cj5);
IkReal x1958=(cj3*cj4*sj5);
IkReal x1959=((0.5)*cj3*sj4);
IkReal x1960=((0.250000174843791)*cj4*sj3);
IkReal x1961=((0.500000349687582)*cj5*sj3*sj4);
IkReal x1962=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((-0.0740573656612548)*x1939))+(((0.0740573656612548)*x1938))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x1943))+(((0.25000704)*x1941)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-0.0740573656612548)*x1945))+(((-0.25000704)*x1946))+(((-1.0)*(0.41)*sj1))+(((-0.25000704)*x1947))+(((0.0740573656612548)*x1944)));
evalcond[2]=((((-1.0)*r22*x1948))+(((0.433013004730548)*x1939))+x1941+(((-0.433013004730548)*x1938))+(((-1.0)*r21*x1950))+((x1938*x1949))+(((-1.0)*x1943))+(((-1.0)*r20*x1951))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*x1939*x1949)));
evalcond[3]=((((0.433013004730548)*x1945))+(((-1.0)*x1945*x1949))+(((-1.0)*r11*x1950))+(((-1.0)*r10*x1951))+((x1944*x1949))+(((-0.433013004730548)*x1944))+(((-1.0)*(0.250000174843791)*r12))+x1952+(((-1.0)*r12*x1948)));
evalcond[4]=(((r12*x1953))+x1943+(((-1.0)*x1945*x1960))+((r10*x1958))+(((-1.0)*x1941))+((r11*x1957))+(((-1.0)*r12*x1954))+((x1944*x1959))+(((-1.0)*r12*x1955))+((x1944*x1956))+(((-1.0)*x1945*x1956))+(((-1.0)*x1945*x1959))+(((-1.0)*r11*x1961))+((x1944*x1960))+(((-1.0)*r10*x1962)));
evalcond[5]=(((r22*x1953))+(((-1.0)*x1939*x1956))+(((-1.0)*r21*x1961))+((x1938*x1960))+(((-1.0)*r22*x1955))+(((-1.0)*x1939*x1959))+((r20*x1958))+(((-1.0)*x1939*x1960))+(((-1.0)*r20*x1962))+((x1938*x1959))+((x1938*x1956))+(((-1.0)*r22*x1954))+x1952+((r21*x1957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1963=((0.457329844604393)*cj4);
IkReal x1964=((0.444667476232793)*cj5);
IkReal x1965=((0.444667476232793)*sj5);
IkReal x1966=((0.264039508890796)*cj4*cj5);
IkReal x1967=((0.264039508890796)*cj4*sj5);
IkReal x1968=((0.528079017781592)*cj5*sj4);
IkReal x1969=((0.528079017781592)*sj4*sj5);
if( IKabs(((((-1.0)*r12*x1963))+(((-1.0)*r11*x1967))+(((-1.0)*r10*x1969))+(((-1.0)*r11*x1968))+(((-1.0)*r10*x1964))+(((-1.0)*(0.15244342368824)*r12))+((r11*x1965))+((r10*x1966))+(((2.4390243902439)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1967))+(((-1.0)*r20*x1969))+(((2.4390243902439)*pz))+(((-1.0)*r22*x1963))+((r20*x1966))+((r21*x1965))+(((-1.0)*r20*x1964))+(((-1.0)*(0.15244342368824)*r22))+(((-1.0)*r21*x1968)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1963))+(((-1.0)*r11*x1967))+(((-1.0)*r10*x1969))+(((-1.0)*r11*x1968))+(((-1.0)*r10*x1964))+(((-1.0)*(0.15244342368824)*r12))+((r11*x1965))+((r10*x1966))+(((2.4390243902439)*py))))+IKsqr(((((-1.0)*r21*x1967))+(((-1.0)*r20*x1969))+(((2.4390243902439)*pz))+(((-1.0)*r22*x1963))+((r20*x1966))+((r21*x1965))+(((-1.0)*r20*x1964))+(((-1.0)*(0.15244342368824)*r22))+(((-1.0)*r21*x1968))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*x1963))+(((-1.0)*r11*x1967))+(((-1.0)*r10*x1969))+(((-1.0)*r11*x1968))+(((-1.0)*r10*x1964))+(((-1.0)*(0.15244342368824)*r12))+((r11*x1965))+((r10*x1966))+(((2.4390243902439)*py))), ((((-1.0)*r21*x1967))+(((-1.0)*r20*x1969))+(((2.4390243902439)*pz))+(((-1.0)*r22*x1963))+((r20*x1966))+((r21*x1965))+(((-1.0)*r20*x1964))+(((-1.0)*(0.15244342368824)*r22))+(((-1.0)*r21*x1968))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1970=((((-1.0)*(0.41)*(IKcos(j1))))+pz);
IkReal x1971=((0.187505236287801)*cj4);
IkReal x1972=(cj5*r20);
IkReal x1973=(r21*sj5);
IkReal x1974=((0.108256198645226)*cj4);
IkReal x1975=((0.216512397290453)*cj5*sj4);
IkReal x1976=((0.216512397290453)*sj4*sj5);
IkReal x1977=(cj5*r10);
IkReal x1978=(r11*sj5);
IkReal x1979=((0.41)*(IKsin(j1)));
IkReal x1980=((0.108256198645226)*sj3);
IkReal x1981=((0.216512447764952)*cj3*sj4);
IkReal x1982=((0.10825629959419)*cj4*sj3);
IkReal x1983=((0.187505236287801)*sj3);
IkReal x1984=((0.25000704)*cj3*cj4*cj5);
IkReal x1985=((0.25000704)*cj3*cj4*sj5);
IkReal x1986=((0.12500352)*cj3*sj4);
IkReal x1987=((0.0625018037121786)*cj4*sj3);
IkReal x1988=((0.125003607424357)*cj5*sj3*sj4);
IkReal x1989=((0.125003607424357)*sj3*sj4*sj5);
evalcond[0]=((((-0.182313665255445)*x1972))+(((-1.0)*(0.0625018037121786)*r22))+(((-1.0)*x1973*x1974))+((x1972*x1974))+(((-1.0)*r21*x1975))+(((0.182313665255445)*x1973))+(((-1.0)*r22*x1971))+(((-1.0)*r20*x1976))+x1970);
evalcond[1]=((((-0.182313665255445)*x1978))+(((-1.0)*x1974*x1977))+(((-1.0)*(1.0)*py))+(((0.182313665255445)*x1977))+((r11*x1975))+((r12*x1971))+(((0.0625018037121786)*r12))+((r10*x1976))+x1979+((x1974*x1978)));
evalcond[2]=((((-1.0)*x1972*x1983))+(((-1.0)*x1979))+((x1973*x1987))+(((0.0740573656612548)*x1978))+((x1973*x1986))+py+(((-1.0)*x1972*x1986))+((r22*x1981))+(((-0.0740573656612548)*x1977))+(((-1.0)*x1972*x1987))+((x1973*x1983))+(((-1.0)*r20*x1985))+(((-1.0)*r22*x1980))+((r22*x1982))+((r21*x1988))+((r20*x1989))+(((-1.0)*r21*x1984)));
evalcond[3]=(((r11*x1984))+((r12*x1980))+(((-1.0)*r12*x1982))+(((-1.0)*r11*x1988))+((x1977*x1986))+(((-1.0)*r12*x1981))+(((-0.0740573656612548)*x1972))+(((0.0740573656612548)*x1973))+((x1977*x1987))+(((-1.0)*x1978*x1986))+(((-1.0)*x1978*x1987))+((r10*x1985))+((x1977*x1983))+(((-1.0)*x1978*x1983))+(((-1.0)*r10*x1989))+x1970);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1990=((3.99988736317185)*cj1);
IkReal x1991=((3.99988736317185)*sj1);
IkReal x1992=((0.29622112105825)*cj1*cj5);
IkReal x1993=((0.29622112105825)*cj1*sj5);
IkReal x1994=((0.29622112105825)*cj5*sj1);
IkReal x1995=((0.29622112105825)*sj1*sj5);
if( IKabs((((r11*x1993))+(((-1.0)*pz*x1991))+(((-1.0)*r10*x1992))+((py*x1990))+((r20*x1994))+(((-1.0)*r21*x1995)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r10*x1994))+((r11*x1995))+((r21*x1993))+((pz*x1990))+((py*x1991))+(((-1.0)*r20*x1992)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1993))+(((-1.0)*pz*x1991))+(((-1.0)*r10*x1992))+((py*x1990))+((r20*x1994))+(((-1.0)*r21*x1995))))+IKsqr(((-1.63995381890046)+(((-1.0)*r10*x1994))+((r11*x1995))+((r21*x1993))+((pz*x1990))+((py*x1991))+(((-1.0)*r20*x1992))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x1993))+(((-1.0)*pz*x1991))+(((-1.0)*r10*x1992))+((py*x1990))+((r20*x1994))+(((-1.0)*r21*x1995))), ((-1.63995381890046)+(((-1.0)*r10*x1994))+((r11*x1995))+((r21*x1993))+((pz*x1990))+((py*x1991))+(((-1.0)*r20*x1992))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1996=(cj5*r20);
IkReal x1997=(r21*sj5);
IkReal x1998=IKcos(j2);
IkReal x1999=(cj1*x1998);
IkReal x2000=IKsin(j2);
IkReal x2001=(sj1*x2000);
IkReal x2002=(cj5*r10);
IkReal x2003=(r11*sj5);
IkReal x2004=(cj1*x2000);
IkReal x2005=(sj1*x1998);
IkReal x2006=((0.749999825156128)*cj4);
IkReal x2007=((0.433012600946063)*cj4);
IkReal x2008=((0.866025201892125)*cj5*sj4);
IkReal x2009=((0.866025201892125)*sj4*sj5);
IkReal x2010=(x1999+(((-1.0)*x2001)));
IkReal x2011=((0.433012600946063)*sj3);
IkReal x2012=((0.866025403784439)*cj3*sj4);
IkReal x2013=((0.433013004730548)*cj4*sj3);
IkReal x2014=((0.749999825156128)*sj3);
IkReal x2015=(cj3*cj4*cj5);
IkReal x2016=(cj3*cj4*sj5);
IkReal x2017=((0.5)*cj3*sj4);
IkReal x2018=((0.250000174843791)*cj4*sj3);
IkReal x2019=((0.500000349687582)*cj5*sj3*sj4);
IkReal x2020=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((-0.0740573656612548)*x1997))+(((-0.25000704)*x2001))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.25000704)*x1999))+(((0.0740573656612548)*x1996)));
evalcond[1]=((((0.0740573656612548)*x2002))+(((-1.0)*(1.0)*py))+(((0.25000704)*x2004))+(((0.41)*sj1))+(((0.25000704)*x2005))+(((-0.0740573656612548)*x2003)));
evalcond[2]=((((-1.0)*r11*x2008))+x2005+x2004+(((0.433013004730548)*x2003))+(((-1.0)*r12*x2006))+((x2002*x2007))+(((-1.0)*(0.250000174843791)*r12))+(((-1.0)*x2003*x2007))+(((-1.0)*r10*x2009))+(((-0.433013004730548)*x2002)));
evalcond[3]=((((-1.0)*x1997*x2007))+(((-1.0)*r20*x2009))+x2010+(((0.433013004730548)*x1997))+(((-1.0)*r22*x2006))+((x1996*x2007))+(((-1.0)*r21*x2008))+(((-0.433013004730548)*x1996))+(((-1.0)*(0.250000174843791)*r22)));
evalcond[4]=(((x2002*x2018))+(((-1.0)*r12*x2013))+(((-1.0)*x2003*x2017))+((x2002*x2014))+(((-1.0)*r12*x2012))+((x2002*x2017))+x2010+(((-1.0)*x2003*x2018))+((r12*x2011))+(((-1.0)*r11*x2019))+((r10*x2016))+(((-1.0)*x2003*x2014))+((r11*x2015))+(((-1.0)*r10*x2020)));
evalcond[5]=((((-1.0)*x1997*x2014))+(((-1.0)*x2005))+(((-1.0)*r21*x2019))+(((-1.0)*x1997*x2018))+((x1996*x2018))+(((-1.0)*x2004))+((r21*x2015))+((r22*x2011))+(((-1.0)*r20*x2020))+(((-1.0)*x1997*x2017))+(((-1.0)*r22*x2013))+((x1996*x2014))+((r20*x2016))+((x1996*x2017))+(((-1.0)*r22*x2012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2021=((0.457329844604393)*cj4);
IkReal x2022=((0.444667476232793)*cj5);
IkReal x2023=((0.444667476232793)*sj5);
IkReal x2024=((0.264039508890796)*cj4*cj5);
IkReal x2025=((0.264039508890796)*cj4*sj5);
IkReal x2026=((0.528079017781592)*cj5*sj4);
IkReal x2027=((0.528079017781592)*sj4*sj5);
if( IKabs((((r00*x2024))+(((-1.0)*r00*x2027))+(((-1.0)*(0.15244342368824)*r02))+(((-1.0)*r01*x2025))+(((-1.0)*r02*x2021))+((r01*x2023))+(((2.4390243902439)*px))+(((-1.0)*r01*x2026))+(((-1.0)*r00*x2022)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x2021))+(((-1.0)*r21*x2026))+(((-1.0)*r21*x2025))+(((2.4390243902439)*pz))+(((-1.0)*r20*x2027))+(((-1.0)*r20*x2022))+(((-1.0)*(0.15244342368824)*r22))+((r21*x2023))+((r20*x2024)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2024))+(((-1.0)*r00*x2027))+(((-1.0)*(0.15244342368824)*r02))+(((-1.0)*r01*x2025))+(((-1.0)*r02*x2021))+((r01*x2023))+(((2.4390243902439)*px))+(((-1.0)*r01*x2026))+(((-1.0)*r00*x2022))))+IKsqr(((((-1.0)*r22*x2021))+(((-1.0)*r21*x2026))+(((-1.0)*r21*x2025))+(((2.4390243902439)*pz))+(((-1.0)*r20*x2027))+(((-1.0)*r20*x2022))+(((-1.0)*(0.15244342368824)*r22))+((r21*x2023))+((r20*x2024))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*x2024))+(((-1.0)*r00*x2027))+(((-1.0)*(0.15244342368824)*r02))+(((-1.0)*r01*x2025))+(((-1.0)*r02*x2021))+((r01*x2023))+(((2.4390243902439)*px))+(((-1.0)*r01*x2026))+(((-1.0)*r00*x2022))), ((((-1.0)*r22*x2021))+(((-1.0)*r21*x2026))+(((-1.0)*r21*x2025))+(((2.4390243902439)*pz))+(((-1.0)*r20*x2027))+(((-1.0)*r20*x2022))+(((-1.0)*(0.15244342368824)*r22))+((r21*x2023))+((r20*x2024))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2028=((((-1.0)*(0.41)*(IKcos(j1))))+pz);
IkReal x2029=((0.187505236287801)*cj4);
IkReal x2030=(cj5*r20);
IkReal x2031=(r21*sj5);
IkReal x2032=((0.108256198645226)*cj4);
IkReal x2033=((0.216512397290453)*cj5*sj4);
IkReal x2034=((0.216512397290453)*sj4*sj5);
IkReal x2035=(cj5*r00);
IkReal x2036=(r01*sj5);
IkReal x2037=((0.41)*(IKsin(j1)));
IkReal x2038=((0.108256198645226)*sj3);
IkReal x2039=((0.216512447764952)*cj3*sj4);
IkReal x2040=((0.10825629959419)*cj4*sj3);
IkReal x2041=((0.187505236287801)*sj3);
IkReal x2042=((0.25000704)*cj3*cj4*cj5);
IkReal x2043=((0.25000704)*cj3*cj4*sj5);
IkReal x2044=((0.12500352)*cj3*sj4);
IkReal x2045=((0.0625018037121786)*cj4*sj3);
IkReal x2046=((0.125003607424357)*cj5*sj3*sj4);
IkReal x2047=((0.125003607424357)*sj3*sj4*sj5);
evalcond[0]=((((-1.0)*r21*x2033))+(((-1.0)*(0.0625018037121786)*r22))+(((-1.0)*r20*x2034))+(((0.182313665255445)*x2031))+(((-1.0)*r22*x2029))+(((-0.182313665255445)*x2030))+x2028+(((-1.0)*x2031*x2032))+((x2030*x2032)));
evalcond[1]=((((0.0625018037121786)*r02))+(((-1.0)*(1.0)*px))+(((0.182313665255445)*x2035))+(((-0.182313665255445)*x2036))+((x2032*x2036))+(((-1.0)*x2032*x2035))+((r01*x2033))+((r00*x2034))+x2037+((r02*x2029)));
evalcond[2]=(((r21*x2046))+((r22*x2039))+((r22*x2040))+(((-1.0)*r22*x2038))+(((-0.0740573656612548)*x2035))+(((0.0740573656612548)*x2036))+(((-1.0)*r21*x2042))+px+((x2031*x2044))+(((-1.0)*x2030*x2044))+((x2031*x2045))+(((-1.0)*x2037))+(((-1.0)*x2030*x2045))+(((-1.0)*r20*x2043))+((r20*x2047))+((x2031*x2041))+(((-1.0)*x2030*x2041)));
evalcond[3]=((((-1.0)*x2036*x2041))+(((-1.0)*r00*x2047))+(((-1.0)*r01*x2046))+((x2035*x2044))+((r01*x2042))+((x2035*x2045))+(((-1.0)*x2036*x2044))+(((-1.0)*r02*x2040))+((r02*x2038))+x2028+((x2035*x2041))+(((-1.0)*x2036*x2045))+(((-1.0)*r02*x2039))+(((0.0740573656612548)*x2031))+(((-0.0740573656612548)*x2030))+((r00*x2043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2048=((3.99988736317185)*cj1);
IkReal x2049=((3.99988736317185)*sj1);
IkReal x2050=((0.29622112105825)*cj1*cj5);
IkReal x2051=((0.29622112105825)*cj1*sj5);
IkReal x2052=((0.29622112105825)*cj5*sj1);
IkReal x2053=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*r00*x2050))+((r01*x2051))+(((-1.0)*pz*x2049))+(((-1.0)*r21*x2053))+((px*x2048))+((r20*x2052)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((px*x2049))+(((-1.0)*r20*x2050))+(((-1.0)*r00*x2052))+((pz*x2048))+((r01*x2053))+((r21*x2051)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2050))+((r01*x2051))+(((-1.0)*pz*x2049))+(((-1.0)*r21*x2053))+((px*x2048))+((r20*x2052))))+IKsqr(((-1.63995381890046)+((px*x2049))+(((-1.0)*r20*x2050))+(((-1.0)*r00*x2052))+((pz*x2048))+((r01*x2053))+((r21*x2051))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x2050))+((r01*x2051))+(((-1.0)*pz*x2049))+(((-1.0)*r21*x2053))+((px*x2048))+((r20*x2052))), ((-1.63995381890046)+((px*x2049))+(((-1.0)*r20*x2050))+(((-1.0)*r00*x2052))+((pz*x2048))+((r01*x2053))+((r21*x2051))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2054=(cj5*r20);
IkReal x2055=(r21*sj5);
IkReal x2056=IKcos(j2);
IkReal x2057=(cj1*x2056);
IkReal x2058=IKsin(j2);
IkReal x2059=(sj1*x2058);
IkReal x2060=(cj5*r00);
IkReal x2061=(r01*sj5);
IkReal x2062=(cj1*x2058);
IkReal x2063=(sj1*x2056);
IkReal x2064=((0.749999825156128)*cj4);
IkReal x2065=((0.433012600946063)*cj4);
IkReal x2066=((0.866025201892125)*cj5*sj4);
IkReal x2067=((0.866025201892125)*sj4*sj5);
IkReal x2068=((((-1.0)*x2059))+x2057);
IkReal x2069=((0.433012600946063)*sj3);
IkReal x2070=((0.866025403784439)*cj3*sj4);
IkReal x2071=((0.433013004730548)*cj4*sj3);
IkReal x2072=((0.749999825156128)*sj3);
IkReal x2073=(cj3*cj4*cj5);
IkReal x2074=(cj3*cj4*sj5);
IkReal x2075=((0.5)*cj3*sj4);
IkReal x2076=((0.250000174843791)*cj4*sj3);
IkReal x2077=((0.500000349687582)*cj5*sj3*sj4);
IkReal x2078=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.25000704)*x2057))+(((0.0740573656612548)*x2054))+(((-0.25000704)*x2059))+(((-0.0740573656612548)*x2055)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((0.25000704)*x2062))+(((0.25000704)*x2063))+(((0.41)*sj1))+(((0.0740573656612548)*x2060))+(((-0.0740573656612548)*x2061)));
evalcond[2]=((((-1.0)*r00*x2067))+x2062+x2063+(((-1.0)*r02*x2064))+((x2060*x2065))+(((-1.0)*x2061*x2065))+(((-1.0)*(0.250000174843791)*r02))+(((-0.433013004730548)*x2060))+(((0.433013004730548)*x2061))+(((-1.0)*r01*x2066)));
evalcond[3]=((((-1.0)*r20*x2067))+x2068+(((-1.0)*x2055*x2065))+(((-1.0)*r21*x2066))+(((0.433013004730548)*x2055))+(((-0.433013004730548)*x2054))+(((-1.0)*r22*x2064))+(((-1.0)*(0.250000174843791)*r22))+((x2054*x2065)));
evalcond[4]=((((-1.0)*r02*x2070))+((x2060*x2076))+(((-1.0)*r02*x2071))+((x2060*x2072))+x2068+(((-1.0)*r01*x2077))+(((-1.0)*x2061*x2076))+((r00*x2074))+(((-1.0)*x2061*x2075))+((r01*x2073))+(((-1.0)*r00*x2078))+((x2060*x2075))+(((-1.0)*x2061*x2072))+((r02*x2069)));
evalcond[5]=((((-1.0)*x2055*x2075))+(((-1.0)*r20*x2078))+((x2054*x2075))+((r22*x2069))+((r20*x2074))+(((-1.0)*x2062))+(((-1.0)*r22*x2070))+(((-1.0)*x2063))+(((-1.0)*x2055*x2072))+((x2054*x2072))+(((-1.0)*r22*x2071))+((x2054*x2076))+(((-1.0)*r21*x2077))+((r21*x2073))+(((-1.0)*x2055*x2076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2079=((0.457329844604393)*cj4);
IkReal x2080=((0.444667476232793)*cj5);
IkReal x2081=((0.444667476232793)*sj5);
IkReal x2082=((0.264039508890796)*cj4*cj5);
IkReal x2083=((0.264039508890796)*cj4*sj5);
IkReal x2084=((0.528079017781592)*cj5*sj4);
IkReal x2085=((0.528079017781592)*sj4*sj5);
if( IKabs((((r01*x2084))+(((-1.0)*(2.4390243902439)*px))+((r02*x2079))+((r01*x2083))+(((0.15244342368824)*r02))+((r00*x2080))+(((-1.0)*r01*x2081))+((r00*x2085))+(((-1.0)*r00*x2082)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x2079))+(((-1.0)*r21*x2084))+(((-1.0)*r20*x2080))+(((-1.0)*r20*x2085))+(((2.4390243902439)*pz))+((r20*x2082))+((r21*x2081))+(((-1.0)*(0.15244342368824)*r22))+(((-1.0)*r21*x2083)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2084))+(((-1.0)*(2.4390243902439)*px))+((r02*x2079))+((r01*x2083))+(((0.15244342368824)*r02))+((r00*x2080))+(((-1.0)*r01*x2081))+((r00*x2085))+(((-1.0)*r00*x2082))))+IKsqr(((((-1.0)*r22*x2079))+(((-1.0)*r21*x2084))+(((-1.0)*r20*x2080))+(((-1.0)*r20*x2085))+(((2.4390243902439)*pz))+((r20*x2082))+((r21*x2081))+(((-1.0)*(0.15244342368824)*r22))+(((-1.0)*r21*x2083))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x2084))+(((-1.0)*(2.4390243902439)*px))+((r02*x2079))+((r01*x2083))+(((0.15244342368824)*r02))+((r00*x2080))+(((-1.0)*r01*x2081))+((r00*x2085))+(((-1.0)*r00*x2082))), ((((-1.0)*r22*x2079))+(((-1.0)*r21*x2084))+(((-1.0)*r20*x2080))+(((-1.0)*r20*x2085))+(((2.4390243902439)*pz))+((r20*x2082))+((r21*x2081))+(((-1.0)*(0.15244342368824)*r22))+(((-1.0)*r21*x2083))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2086=((((0.41)*(IKsin(j1))))+px);
IkReal x2087=((0.187505236287801)*cj4);
IkReal x2088=(cj5*r00);
IkReal x2089=(r01*sj5);
IkReal x2090=((0.108256198645226)*cj4);
IkReal x2091=((0.216512397290453)*cj5*sj4);
IkReal x2092=((0.216512397290453)*sj4*sj5);
IkReal x2093=(cj5*r20);
IkReal x2094=(r21*sj5);
IkReal x2095=((0.41)*(IKcos(j1)));
IkReal x2096=((0.108256198645226)*sj3);
IkReal x2097=((0.216512447764952)*cj3*sj4);
IkReal x2098=((0.10825629959419)*cj4*sj3);
IkReal x2099=((0.187505236287801)*sj3);
IkReal x2100=((0.25000704)*cj3*cj4*cj5);
IkReal x2101=((0.25000704)*cj3*cj4*sj5);
IkReal x2102=((0.12500352)*cj3*sj4);
IkReal x2103=((0.0625018037121786)*cj4*sj3);
IkReal x2104=((0.125003607424357)*cj5*sj3*sj4);
IkReal x2105=((0.125003607424357)*sj3*sj4*sj5);
evalcond[0]=((((-0.182313665255445)*x2088))+(((-1.0)*r01*x2091))+(((0.182313665255445)*x2089))+((x2088*x2090))+(((-1.0)*r02*x2087))+(((-1.0)*x2089*x2090))+x2086+(((-1.0)*(0.0625018037121786)*r02))+(((-1.0)*r00*x2092)));
evalcond[1]=((((-1.0)*r21*x2091))+(((-1.0)*r20*x2092))+(((-0.182313665255445)*x2093))+(((-1.0)*(0.0625018037121786)*r22))+(((-1.0)*x2090*x2094))+((x2090*x2093))+pz+(((-1.0)*r22*x2087))+(((-1.0)*x2095))+(((0.182313665255445)*x2094)));
evalcond[2]=(((x2093*x2099))+((x2093*x2102))+(((-1.0)*r22*x2097))+(((-1.0)*x2094*x2102))+(((-1.0)*r21*x2104))+((r21*x2100))+(((-1.0)*x2094*x2099))+((r22*x2096))+(((-1.0)*r22*x2098))+(((-0.0740573656612548)*x2088))+x2086+((x2093*x2103))+((r20*x2101))+(((0.0740573656612548)*x2089))+(((-1.0)*x2094*x2103))+(((-1.0)*r20*x2105)));
evalcond[3]=(((x2088*x2102))+x2095+(((-1.0)*r00*x2105))+(((-1.0)*(1.0)*pz))+((x2088*x2103))+((r00*x2101))+((x2088*x2099))+(((-1.0)*x2089*x2099))+(((0.0740573656612548)*x2093))+(((-1.0)*r01*x2104))+((r02*x2096))+(((-0.0740573656612548)*x2094))+(((-1.0)*x2089*x2103))+(((-1.0)*r02*x2097))+(((-1.0)*x2089*x2102))+((r01*x2100))+(((-1.0)*r02*x2098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2106=((3.99988736317185)*cj1);
IkReal x2107=((3.99988736317185)*sj1);
IkReal x2108=((0.29622112105825)*cj1*cj5);
IkReal x2109=((0.29622112105825)*cj1*sj5);
IkReal x2110=((0.29622112105825)*cj5*sj1);
IkReal x2111=((0.29622112105825)*sj1*sj5);
if( IKabs((((r00*x2108))+((r20*x2110))+(((-1.0)*r01*x2109))+(((-1.0)*px*x2106))+(((-1.0)*r21*x2111))+(((-1.0)*pz*x2107)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r20*x2108))+((r00*x2110))+((r21*x2109))+(((-1.0)*r01*x2111))+(((-1.0)*px*x2107))+((pz*x2106)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2108))+((r20*x2110))+(((-1.0)*r01*x2109))+(((-1.0)*px*x2106))+(((-1.0)*r21*x2111))+(((-1.0)*pz*x2107))))+IKsqr(((-1.63995381890046)+(((-1.0)*r20*x2108))+((r00*x2110))+((r21*x2109))+(((-1.0)*r01*x2111))+(((-1.0)*px*x2107))+((pz*x2106))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x2108))+((r20*x2110))+(((-1.0)*r01*x2109))+(((-1.0)*px*x2106))+(((-1.0)*r21*x2111))+(((-1.0)*pz*x2107))), ((-1.63995381890046)+(((-1.0)*r20*x2108))+((r00*x2110))+((r21*x2109))+(((-1.0)*r01*x2111))+(((-1.0)*px*x2107))+((pz*x2106))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2112=(cj5*r20);
IkReal x2113=(r21*sj5);
IkReal x2114=IKcos(j2);
IkReal x2115=(cj1*x2114);
IkReal x2116=IKsin(j2);
IkReal x2117=(sj1*x2116);
IkReal x2118=(cj5*r00);
IkReal x2119=(r01*sj5);
IkReal x2120=(cj1*x2116);
IkReal x2121=(sj1*x2114);
IkReal x2122=((0.749999825156128)*cj4);
IkReal x2123=((0.433012600946063)*cj4);
IkReal x2124=((0.866025201892125)*cj5*sj4);
IkReal x2125=((0.866025201892125)*sj4*sj5);
IkReal x2126=((((-1.0)*x2121))+(((-1.0)*x2120)));
IkReal x2127=((0.433012600946063)*sj3);
IkReal x2128=((0.866025403784439)*cj3*sj4);
IkReal x2129=((0.433013004730548)*cj4*sj3);
IkReal x2130=((0.749999825156128)*sj3);
IkReal x2131=(cj3*cj4*cj5);
IkReal x2132=(cj3*cj4*sj5);
IkReal x2133=((0.5)*cj3*sj4);
IkReal x2134=((0.250000174843791)*cj4*sj3);
IkReal x2135=((0.500000349687582)*cj5*sj3*sj4);
IkReal x2136=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((-0.25000704)*x2117))+(((0.0740573656612548)*x2112))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.0740573656612548)*x2113))+(((0.25000704)*x2115)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((-0.0740573656612548)*x2119))+(((-0.25000704)*x2120))+(((-1.0)*(0.41)*sj1))+(((-0.25000704)*x2121))+(((0.0740573656612548)*x2118)));
evalcond[2]=((((-1.0)*r20*x2125))+(((-0.433013004730548)*x2112))+x2115+(((0.433013004730548)*x2113))+((x2112*x2123))+(((-1.0)*x2117))+(((-1.0)*r22*x2122))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r21*x2124))+(((-1.0)*x2113*x2123)));
evalcond[3]=((((-1.0)*r01*x2124))+(((0.433013004730548)*x2119))+(((-1.0)*r00*x2125))+(((-1.0)*(0.250000174843791)*r02))+x2126+(((-1.0)*x2119*x2123))+(((-0.433013004730548)*x2118))+(((-1.0)*r02*x2122))+((x2118*x2123)));
evalcond[4]=((((-1.0)*r01*x2135))+((x2118*x2133))+((x2118*x2130))+x2117+(((-1.0)*r02*x2128))+(((-1.0)*x2119*x2130))+((x2118*x2134))+((r02*x2127))+((r01*x2131))+((r00*x2132))+(((-1.0)*x2119*x2133))+(((-1.0)*x2119*x2134))+(((-1.0)*r02*x2129))+(((-1.0)*r00*x2136))+(((-1.0)*x2115)));
evalcond[5]=(((r21*x2131))+(((-1.0)*r21*x2135))+(((-1.0)*r20*x2136))+(((-1.0)*x2113*x2134))+((r20*x2132))+(((-1.0)*r22*x2128))+((r22*x2127))+x2126+((x2112*x2133))+(((-1.0)*x2113*x2130))+((x2112*x2130))+((x2112*x2134))+(((-1.0)*x2113*x2133))+(((-1.0)*r22*x2129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2137=(r02*sj0);
IkReal x2138=((0.182313665255445)*sj0);
IkReal x2139=(cj5*r00);
IkReal x2140=(r01*sj5);
IkReal x2141=((0.108256198645226)*cj4*sj0);
IkReal x2142=((0.216512397290453)*sj0*sj4);
IkReal x2143=(cj5*r20);
IkReal x2144=(r21*sj5);
IkReal x2145=((0.264039508890796)*cj4);
IkReal x2146=((0.528079017781592)*sj4);
CheckValue<IkReal> x2147=IKPowWithIntegerCheck(sj0,-2);
if(!x2147.valid){
continue;
}
if( IKabs(((-2.4390243902439)*(x2147.value)*(((((0.0625018037121786)*x2137))+((r00*sj5*x2142))+(((-1.0)*(1.0)*px*sj0))+(((-1.0)*x2139*x2141))+(((-1.0)*x2138*x2140))+((x2140*x2141))+(((0.187505236287801)*cj4*x2137))+((x2138*x2139))+((cj5*r01*x2142))+(((0.00975)*cj0*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(0.457329844604393)*cj4*r22))+((x2143*x2145))+(((2.4390243902439)*pz))+(((0.444667476232793)*x2144))+(((-1.0)*r20*sj5*x2146))+(((-1.0)*cj5*r21*x2146))+(((-1.0)*(0.15244342368824)*r22))+(((-1.0)*x2144*x2145))+(((-0.444667476232793)*x2143)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.4390243902439)*(x2147.value)*(((((0.0625018037121786)*x2137))+((r00*sj5*x2142))+(((-1.0)*(1.0)*px*sj0))+(((-1.0)*x2139*x2141))+(((-1.0)*x2138*x2140))+((x2140*x2141))+(((0.187505236287801)*cj4*x2137))+((x2138*x2139))+((cj5*r01*x2142))+(((0.00975)*cj0*sj0))))))+IKsqr(((((-1.0)*(0.457329844604393)*cj4*r22))+((x2143*x2145))+(((2.4390243902439)*pz))+(((0.444667476232793)*x2144))+(((-1.0)*r20*sj5*x2146))+(((-1.0)*cj5*r21*x2146))+(((-1.0)*(0.15244342368824)*r22))+(((-1.0)*x2144*x2145))+(((-0.444667476232793)*x2143))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.4390243902439)*(x2147.value)*(((((0.0625018037121786)*x2137))+((r00*sj5*x2142))+(((-1.0)*(1.0)*px*sj0))+(((-1.0)*x2139*x2141))+(((-1.0)*x2138*x2140))+((x2140*x2141))+(((0.187505236287801)*cj4*x2137))+((x2138*x2139))+((cj5*r01*x2142))+(((0.00975)*cj0*sj0))))), ((((-1.0)*(0.457329844604393)*cj4*r22))+((x2143*x2145))+(((2.4390243902439)*pz))+(((0.444667476232793)*x2144))+(((-1.0)*r20*sj5*x2146))+(((-1.0)*cj5*r21*x2146))+(((-1.0)*(0.15244342368824)*r22))+(((-1.0)*x2144*x2145))+(((-0.444667476232793)*x2143))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2148=((0.182313665255445)*cj5);
IkReal x2149=((0.182313665255445)*sj5);
IkReal x2150=((0.41)*(IKcos(j1)));
IkReal x2151=((0.108256198645226)*cj4*cj5);
IkReal x2152=((0.108256198645226)*cj4*sj5);
IkReal x2153=((0.216512397290453)*cj5*sj4);
IkReal x2154=((0.216512397290453)*sj4*sj5);
IkReal x2155=((0.0625018037121786)*cj0);
IkReal x2156=((0.00975)*cj0);
IkReal x2157=(sj0*x2156);
IkReal x2158=((0.187505236287801)*cj0*cj4);
IkReal x2159=(cj0*r10);
IkReal x2160=(cj0*r11);
IkReal x2161=cj0*cj0;
IkReal x2162=((0.41)*(IKsin(j1)));
IkReal x2163=((1.0)*sj0);
IkReal x2164=((0.0625018037121786)*sj0);
IkReal x2165=((0.187505236287801)*cj4*sj0);
IkReal x2166=(r00*sj0);
IkReal x2167=(r01*sj0);
IkReal x2168=(cj5*r00);
IkReal x2169=((0.108256198645226)*cj4*sj0);
IkReal x2170=(r01*sj5);
IkReal x2171=sj0*sj0;
IkReal x2172=((0.108256198645226)*sj3);
IkReal x2173=((0.216512447764952)*cj3*sj4);
IkReal x2174=((0.10825629959419)*cj4*sj3);
IkReal x2175=((0.187505236287801)*sj3);
IkReal x2176=((0.0740573656612548)*cj5*r20);
IkReal x2177=((0.0740573656612548)*r21*sj5);
IkReal x2178=((0.25000704)*cj3*cj4*cj5);
IkReal x2179=((0.25000704)*cj3*cj4*sj5);
IkReal x2180=((0.12500352)*cj3*sj4);
IkReal x2181=((0.0625018037121786)*cj4*sj3);
IkReal x2182=((0.125003607424357)*cj5*sj3*sj4);
IkReal x2183=((0.125003607424357)*sj3*sj4*sj5);
IkReal x2184=(cj5*r10);
IkReal x2185=(r11*sj5);
IkReal x2186=((0.0740573656612548)*cj5);
IkReal x2187=(r10*x2186);
IkReal x2188=((0.0740573656612548)*sj5);
IkReal x2189=(r11*x2188);
IkReal x2190=(cj0*x2162);
IkReal x2191=((0.108256198645226)*r22*sj3);
IkReal x2192=((0.216512447764952)*cj3*r22*sj4);
IkReal x2193=(cj5*r20);
IkReal x2194=((0.187505236287801)*cj0*sj3);
IkReal x2195=(r21*sj5);
IkReal x2196=(cj0*r21);
IkReal x2197=(cj0*r20);
IkReal x2198=((0.12500352)*cj0*cj3*sj4);
IkReal x2199=((0.0625018037121786)*cj0*cj4*sj3);
IkReal x2200=(r00*x2186);
IkReal x2201=(r01*x2188);
IkReal x2202=((0.187505236287801)*sj0*sj3);
IkReal x2203=(r21*sj0);
IkReal x2204=(r20*sj0);
IkReal x2205=((0.12500352)*cj3*sj0*sj4);
IkReal x2206=((0.0625018037121786)*cj4*sj0*sj3);
IkReal x2207=((0.10825629959419)*sj0);
IkReal x2208=((-1.0)*sj0*x2190);
IkReal x2209=(r10*sj0);
IkReal x2210=(r11*sj0);
IkReal x2211=((0.10825629959419)*cj0);
IkReal x2212=((0.108256198645226)*cj0*cj4);
evalcond[0]=(((r20*x2151))+(((-1.0)*r20*x2148))+(((-1.0)*(0.0625018037121786)*r22))+((r21*x2149))+(((-1.0)*r21*x2153))+(((-1.0)*r21*x2152))+pz+(((-1.0)*x2150))+(((-1.0)*r20*x2154))+(((-0.187505236287801)*cj4*r22)));
evalcond[1]=((((-1.0)*x2152*x2160))+(((-1.0)*r12*x2158))+((x2161*x2162))+(((-1.0)*r12*x2155))+((cj0*py))+(((-1.0)*x2153*x2160))+(((-1.0)*x2154*x2159))+((x2151*x2159))+(((-1.0)*x2157))+((x2149*x2160))+(((-1.0)*x2148*x2159)));
evalcond[2]=((((-1.0)*x2149*x2167))+((x2154*x2166))+((x2169*x2170))+((x2162*x2171))+(((-1.0)*x2168*x2169))+x2157+((x2148*x2166))+((r02*x2165))+((x2153*x2167))+((r02*x2164))+(((-1.0)*px*x2163)));
evalcond[3]=(((sj0*x2177))+(((-1.0)*r02*x2173))+(((-1.0)*r00*x2183))+(((-1.0)*r02*x2174))+((r00*x2179))+((x2168*x2175))+(((-1.0)*x2170*x2180))+((pz*sj0))+(((-1.0)*sj0*x2150))+(((-1.0)*sj0*x2176))+(((-1.0)*r01*x2182))+((r02*x2172))+((x2168*x2180))+(((-1.0)*x2170*x2175))+(((-1.0)*x2170*x2181))+((r01*x2178))+((x2168*x2181)));
evalcond[4]=((((-1.0)*(1.0)*cj0*pz))+((r11*x2178))+((x2181*x2184))+((x2175*x2184))+(((-1.0)*r10*x2183))+((x2180*x2184))+(((-1.0)*x2180*x2185))+(((-1.0)*x2181*x2185))+((r12*x2172))+(((-1.0)*r11*x2182))+((r10*x2179))+((cj0*x2176))+(((-1.0)*r12*x2174))+(((-1.0)*x2175*x2185))+((cj0*x2150))+(((-1.0)*cj0*x2177))+(((-1.0)*r12*x2173)));
evalcond[5]=(x2190+((x2178*x2196))+(((-1.0)*x2194*x2195))+((x2193*x2199))+(((-1.0)*cj0*x2192))+py+(((-1.0)*x2195*x2198))+(((-1.0)*x2183*x2197))+(((-1.0)*x2182*x2196))+((x2193*x2198))+(((-1.0)*x2187))+(((-1.0)*(0.00975)*sj0))+((x2179*x2197))+(((-1.0)*x2195*x2199))+((cj0*x2191))+x2189+(((-0.10825629959419)*cj0*cj4*r22*sj3))+((x2193*x2194)));
evalcond[6]=(((x2195*x2206))+((sj0*x2192))+(((-1.0)*x2156))+(((-1.0)*x2193*x2202))+(((-1.0)*x2200))+((x2195*x2202))+(((-1.0)*x2193*x2206))+((x2183*x2204))+((r22*sj0*x2174))+px+(((-1.0)*x2179*x2204))+(((-1.0)*x2193*x2205))+(((-1.0)*sj0*x2162))+x2201+(((-1.0)*sj0*x2191))+(((-1.0)*x2178*x2203))+((x2195*x2205))+((x2182*x2203)));
evalcond[7]=(((cj0*px))+((x2184*x2207))+((r12*x2165))+((x2153*x2210))+((cj0*x2201))+(((-1.0)*x2185*x2207))+((x2152*x2210))+(((-0.00975)*x2161))+x2208+(((-1.0)*cj0*x2200))+((x2154*x2209))+((r12*x2164))+(((-1.0)*x2151*x2209)));
evalcond[8]=((((-1.0)*r02*x2158))+((x2168*x2212))+(((-1.0)*py*x2163))+((sj0*x2187))+((x2170*x2211))+(((-1.0)*sj0*x2189))+(((-1.0)*x2170*x2212))+(((0.00975)*x2171))+(((-1.0)*x2168*x2211))+x2208+(((-1.0)*cj0*r00*x2154))+(((-1.0)*r02*x2155))+(((-1.0)*cj0*r01*x2153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2213=((3.99988736317185)*cj1);
IkReal x2214=((3.99988736317185)*sj1);
IkReal x2215=((0.29622112105825)*cj1*cj5);
IkReal x2216=((0.29622112105825)*cj1*sj5);
IkReal x2217=((0.29622112105825)*cj5*sj1);
IkReal x2218=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*r21*x2218))+((r20*x2217))+(((-1.0)*r00*x2215))+((r01*x2216))+(((-1.0)*pz*x2214))+((px*x2213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r20*x2215))+((px*x2214))+((r21*x2216))+((r01*x2218))+(((-1.0)*r00*x2217))+((pz*x2213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x2218))+((r20*x2217))+(((-1.0)*r00*x2215))+((r01*x2216))+(((-1.0)*pz*x2214))+((px*x2213))))+IKsqr(((-1.63995381890046)+(((-1.0)*r20*x2215))+((px*x2214))+((r21*x2216))+((r01*x2218))+(((-1.0)*r00*x2217))+((pz*x2213))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x2218))+((r20*x2217))+(((-1.0)*r00*x2215))+((r01*x2216))+(((-1.0)*pz*x2214))+((px*x2213))), ((-1.63995381890046)+(((-1.0)*r20*x2215))+((px*x2214))+((r21*x2216))+((r01*x2218))+(((-1.0)*r00*x2217))+((pz*x2213))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2219=(cj5*r20);
IkReal x2220=(r21*sj5);
IkReal x2221=IKcos(j2);
IkReal x2222=(cj1*x2221);
IkReal x2223=IKsin(j2);
IkReal x2224=(sj1*x2223);
IkReal x2225=(cj5*r00);
IkReal x2226=(r01*sj5);
IkReal x2227=(cj1*x2223);
IkReal x2228=(sj1*x2221);
IkReal x2229=((0.749999825156128)*cj4);
IkReal x2230=((0.433012600946063)*cj4);
IkReal x2231=((0.866025201892125)*cj5*sj4);
IkReal x2232=((0.866025201892125)*sj4*sj5);
IkReal x2233=((((-1.0)*x2224))+x2222);
IkReal x2234=((0.433012600946063)*sj3);
IkReal x2235=((0.866025403784439)*cj3*sj4);
IkReal x2236=((0.433013004730548)*cj4*sj3);
IkReal x2237=((0.749999825156128)*sj3);
IkReal x2238=(cj3*cj4*cj5);
IkReal x2239=(cj3*cj4*sj5);
IkReal x2240=((0.5)*cj3*sj4);
IkReal x2241=((0.250000174843791)*cj4*sj3);
IkReal x2242=((0.500000349687582)*cj5*sj3*sj4);
IkReal x2243=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((-0.25000704)*x2224))+(((0.0740573656612548)*x2219))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.0740573656612548)*x2220))+(((0.25000704)*x2222)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((0.0740573656612548)*x2225))+(((-0.0740573656612548)*x2226))+(((0.41)*sj1))+(((0.25000704)*x2227))+(((0.25000704)*x2228)));
evalcond[2]=((((0.433013004730548)*x2226))+(((-1.0)*r00*x2232))+((x2225*x2230))+(((-1.0)*r01*x2231))+(((-1.0)*r02*x2229))+(((-1.0)*x2226*x2230))+x2227+x2228+(((-1.0)*(0.250000174843791)*r02))+(((-0.433013004730548)*x2225)));
evalcond[3]=((((-1.0)*x2220*x2230))+(((-0.433013004730548)*x2219))+(((-1.0)*r22*x2229))+x2233+(((0.433013004730548)*x2220))+((x2219*x2230))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r21*x2231))+(((-1.0)*r20*x2232)));
evalcond[4]=((((-1.0)*r02*x2236))+((x2225*x2240))+((x2225*x2237))+(((-1.0)*x2226*x2241))+((r01*x2238))+(((-1.0)*x2226*x2237))+x2233+((r02*x2234))+((x2225*x2241))+((r00*x2239))+(((-1.0)*r01*x2242))+(((-1.0)*r00*x2243))+(((-1.0)*x2226*x2240))+(((-1.0)*r02*x2235)));
evalcond[5]=((((-1.0)*x2220*x2240))+(((-1.0)*r22*x2235))+(((-1.0)*r22*x2236))+((x2219*x2240))+((r20*x2239))+(((-1.0)*r21*x2242))+((r21*x2238))+((x2219*x2237))+(((-1.0)*r20*x2243))+((x2219*x2241))+(((-1.0)*x2227))+(((-1.0)*x2228))+(((-1.0)*x2220*x2241))+(((-1.0)*x2220*x2237))+((r22*x2234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2244=((3.99988736317185)*cj1);
IkReal x2245=((3.99988736317185)*sj1);
IkReal x2246=((0.29622112105825)*cj1*cj5);
IkReal x2247=((0.29622112105825)*cj1*sj5);
IkReal x2248=((0.29622112105825)*cj5*sj1);
IkReal x2249=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*r21*x2249))+((r20*x2248))+(((-1.0)*px*x2244))+(((-1.0)*r01*x2247))+(((-1.0)*pz*x2245))+((r00*x2246)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r01*x2249))+((r00*x2248))+(((-1.0)*px*x2245))+(((-1.0)*r20*x2246))+((pz*x2244))+((r21*x2247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x2249))+((r20*x2248))+(((-1.0)*px*x2244))+(((-1.0)*r01*x2247))+(((-1.0)*pz*x2245))+((r00*x2246))))+IKsqr(((-1.63995381890046)+(((-1.0)*r01*x2249))+((r00*x2248))+(((-1.0)*px*x2245))+(((-1.0)*r20*x2246))+((pz*x2244))+((r21*x2247))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x2249))+((r20*x2248))+(((-1.0)*px*x2244))+(((-1.0)*r01*x2247))+(((-1.0)*pz*x2245))+((r00*x2246))), ((-1.63995381890046)+(((-1.0)*r01*x2249))+((r00*x2248))+(((-1.0)*px*x2245))+(((-1.0)*r20*x2246))+((pz*x2244))+((r21*x2247))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2250=(cj5*r20);
IkReal x2251=(r21*sj5);
IkReal x2252=IKcos(j2);
IkReal x2253=(cj1*x2252);
IkReal x2254=IKsin(j2);
IkReal x2255=(sj1*x2254);
IkReal x2256=(cj5*r00);
IkReal x2257=(r01*sj5);
IkReal x2258=(cj1*x2254);
IkReal x2259=(sj1*x2252);
IkReal x2260=((0.749999825156128)*cj4);
IkReal x2261=((0.433012600946063)*cj4);
IkReal x2262=((0.866025201892125)*cj5*sj4);
IkReal x2263=((0.866025201892125)*sj4*sj5);
IkReal x2264=((((-1.0)*x2258))+(((-1.0)*x2259)));
IkReal x2265=((0.433012600946063)*sj3);
IkReal x2266=((0.866025403784439)*cj3*sj4);
IkReal x2267=((0.433013004730548)*cj4*sj3);
IkReal x2268=((0.749999825156128)*sj3);
IkReal x2269=(cj3*cj4*cj5);
IkReal x2270=(cj3*cj4*sj5);
IkReal x2271=((0.5)*cj3*sj4);
IkReal x2272=((0.250000174843791)*cj4*sj3);
IkReal x2273=((0.500000349687582)*cj5*sj3*sj4);
IkReal x2274=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.25000704)*x2253))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x2255))+(((-0.0740573656612548)*x2251))+(((0.0740573656612548)*x2250)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((0.0740573656612548)*x2256))+(((-1.0)*(0.41)*sj1))+(((-0.25000704)*x2258))+(((-0.25000704)*x2259))+(((-0.0740573656612548)*x2257)));
evalcond[2]=((((0.433013004730548)*x2251))+(((-1.0)*x2255))+((x2250*x2261))+(((-1.0)*r21*x2262))+(((-0.433013004730548)*x2250))+(((-1.0)*r22*x2260))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r20*x2263))+x2253+(((-1.0)*x2251*x2261)));
evalcond[3]=((((-1.0)*r02*x2260))+((x2256*x2261))+(((-1.0)*r01*x2262))+(((-1.0)*r00*x2263))+(((0.433013004730548)*x2257))+x2264+(((-1.0)*(0.250000174843791)*r02))+(((-0.433013004730548)*x2256))+(((-1.0)*x2257*x2261)));
evalcond[4]=((((-1.0)*r01*x2273))+(((-1.0)*x2257*x2272))+(((-1.0)*r02*x2267))+((r00*x2270))+(((-1.0)*r02*x2266))+(((-1.0)*x2253))+((x2256*x2271))+(((-1.0)*r00*x2274))+(((-1.0)*x2257*x2268))+((x2256*x2272))+x2255+((x2256*x2268))+((r02*x2265))+((r01*x2269))+(((-1.0)*x2257*x2271)));
evalcond[5]=(((r20*x2270))+x2264+(((-1.0)*r22*x2266))+((x2250*x2268))+(((-1.0)*r22*x2267))+(((-1.0)*r20*x2274))+((x2250*x2271))+((r21*x2269))+((r22*x2265))+(((-1.0)*x2251*x2271))+(((-1.0)*r21*x2273))+(((-1.0)*x2251*x2268))+((x2250*x2272))+(((-1.0)*x2251*x2272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2275=((3.99988736317185)*cj1);
IkReal x2276=((3.99988736317185)*sj1);
IkReal x2277=((0.29622112105825)*cj1*cj5);
IkReal x2278=((0.29622112105825)*cj1*sj5);
IkReal x2279=((0.29622112105825)*cj5*sj1);
IkReal x2280=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*pz*x2276))+(((-1.0)*py*x2275))+(((-1.0)*r21*x2280))+((r20*x2279))+((r10*x2277))+(((-1.0)*r11*x2278)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((pz*x2275))+(((-1.0)*r20*x2277))+(((-1.0)*r11*x2280))+((r10*x2279))+((r21*x2278))+(((-1.0)*py*x2276)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*x2276))+(((-1.0)*py*x2275))+(((-1.0)*r21*x2280))+((r20*x2279))+((r10*x2277))+(((-1.0)*r11*x2278))))+IKsqr(((-1.63995381890046)+((pz*x2275))+(((-1.0)*r20*x2277))+(((-1.0)*r11*x2280))+((r10*x2279))+((r21*x2278))+(((-1.0)*py*x2276))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*pz*x2276))+(((-1.0)*py*x2275))+(((-1.0)*r21*x2280))+((r20*x2279))+((r10*x2277))+(((-1.0)*r11*x2278))), ((-1.63995381890046)+((pz*x2275))+(((-1.0)*r20*x2277))+(((-1.0)*r11*x2280))+((r10*x2279))+((r21*x2278))+(((-1.0)*py*x2276))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2281=(cj5*r20);
IkReal x2282=(r21*sj5);
IkReal x2283=IKcos(j2);
IkReal x2284=(cj1*x2283);
IkReal x2285=IKsin(j2);
IkReal x2286=(sj1*x2285);
IkReal x2287=(cj5*r10);
IkReal x2288=(r11*sj5);
IkReal x2289=(cj1*x2285);
IkReal x2290=(sj1*x2283);
IkReal x2291=((0.749999825156128)*cj4);
IkReal x2292=((0.433012600946063)*cj4);
IkReal x2293=((0.866025201892125)*cj5*sj4);
IkReal x2294=((0.866025201892125)*sj4*sj5);
IkReal x2295=((((-1.0)*x2289))+(((-1.0)*x2290)));
IkReal x2296=((0.433012600946063)*sj3);
IkReal x2297=((0.866025403784439)*cj3*sj4);
IkReal x2298=((0.433013004730548)*cj4*sj3);
IkReal x2299=((0.749999825156128)*sj3);
IkReal x2300=(cj3*cj4*cj5);
IkReal x2301=(cj3*cj4*sj5);
IkReal x2302=((0.5)*cj3*sj4);
IkReal x2303=((0.250000174843791)*cj4*sj3);
IkReal x2304=((0.500000349687582)*cj5*sj3*sj4);
IkReal x2305=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.0740573656612548)*x2281))+(((-0.25000704)*x2286))+(((0.25000704)*x2284))+(((-0.0740573656612548)*x2282)));
evalcond[1]=((((0.0740573656612548)*x2287))+(((-0.25000704)*x2290))+(((-1.0)*(1.0)*py))+(((-0.25000704)*x2289))+(((-0.0740573656612548)*x2288))+(((-1.0)*(0.41)*sj1)));
evalcond[2]=(x2284+(((-1.0)*r22*x2291))+(((-0.433013004730548)*x2281))+(((-1.0)*r21*x2293))+((x2281*x2292))+(((-1.0)*x2286))+(((-1.0)*r20*x2294))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*x2282*x2292))+(((0.433013004730548)*x2282)));
evalcond[3]=((((-1.0)*r11*x2293))+x2295+(((-0.433013004730548)*x2287))+(((-1.0)*(0.250000174843791)*r12))+(((0.433013004730548)*x2288))+(((-1.0)*r12*x2291))+((x2287*x2292))+(((-1.0)*r10*x2294))+(((-1.0)*x2288*x2292)));
evalcond[4]=(x2286+((x2287*x2302))+((r10*x2301))+((r12*x2296))+(((-1.0)*x2288*x2302))+(((-1.0)*x2288*x2299))+(((-1.0)*r10*x2305))+(((-1.0)*r12*x2298))+(((-1.0)*x2284))+((r11*x2300))+((x2287*x2303))+(((-1.0)*x2288*x2303))+(((-1.0)*r11*x2304))+((x2287*x2299))+(((-1.0)*r12*x2297)));
evalcond[5]=(x2295+((r21*x2300))+(((-1.0)*r22*x2298))+(((-1.0)*x2282*x2299))+(((-1.0)*r22*x2297))+(((-1.0)*r21*x2304))+((r22*x2296))+((r20*x2301))+(((-1.0)*x2282*x2302))+((x2281*x2303))+((x2281*x2299))+((x2281*x2302))+(((-1.0)*x2282*x2303))+(((-1.0)*r20*x2305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2306=((3.99988736317185)*cj1);
IkReal x2307=((3.99988736317185)*sj1);
IkReal x2308=((0.29622112105825)*cj1*cj5);
IkReal x2309=((0.29622112105825)*cj1*sj5);
IkReal x2310=((0.29622112105825)*cj5*sj1);
IkReal x2311=((0.29622112105825)*sj1*sj5);
if( IKabs((((r11*x2309))+((py*x2306))+(((-1.0)*pz*x2307))+((r20*x2310))+(((-1.0)*r21*x2311))+(((-1.0)*r10*x2308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r20*x2308))+(((-1.0)*r10*x2310))+((py*x2307))+((r11*x2311))+((r21*x2309))+((pz*x2306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x2309))+((py*x2306))+(((-1.0)*pz*x2307))+((r20*x2310))+(((-1.0)*r21*x2311))+(((-1.0)*r10*x2308))))+IKsqr(((-1.63995381890046)+(((-1.0)*r20*x2308))+(((-1.0)*r10*x2310))+((py*x2307))+((r11*x2311))+((r21*x2309))+((pz*x2306))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x2309))+((py*x2306))+(((-1.0)*pz*x2307))+((r20*x2310))+(((-1.0)*r21*x2311))+(((-1.0)*r10*x2308))), ((-1.63995381890046)+(((-1.0)*r20*x2308))+(((-1.0)*r10*x2310))+((py*x2307))+((r11*x2311))+((r21*x2309))+((pz*x2306))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2312=(cj5*r20);
IkReal x2313=(r21*sj5);
IkReal x2314=IKcos(j2);
IkReal x2315=(cj1*x2314);
IkReal x2316=IKsin(j2);
IkReal x2317=(sj1*x2316);
IkReal x2318=(cj5*r10);
IkReal x2319=(r11*sj5);
IkReal x2320=(cj1*x2316);
IkReal x2321=(sj1*x2314);
IkReal x2322=((0.749999825156128)*cj4);
IkReal x2323=((0.433012600946063)*cj4);
IkReal x2324=((0.866025201892125)*cj5*sj4);
IkReal x2325=((0.866025201892125)*sj4*sj5);
IkReal x2326=((((-1.0)*x2317))+x2315);
IkReal x2327=((0.433012600946063)*sj3);
IkReal x2328=((0.866025403784439)*cj3*sj4);
IkReal x2329=((0.433013004730548)*cj4*sj3);
IkReal x2330=((0.749999825156128)*sj3);
IkReal x2331=(cj3*cj4*cj5);
IkReal x2332=(cj3*cj4*sj5);
IkReal x2333=((0.5)*cj3*sj4);
IkReal x2334=((0.250000174843791)*cj4*sj3);
IkReal x2335=((0.500000349687582)*cj5*sj3*sj4);
IkReal x2336=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((-0.25000704)*x2317))+(((0.25000704)*x2315))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.0740573656612548)*x2313))+(((0.0740573656612548)*x2312)));
evalcond[1]=((((-0.0740573656612548)*x2319))+(((-1.0)*(1.0)*py))+(((0.25000704)*x2321))+(((0.41)*sj1))+(((0.25000704)*x2320))+(((0.0740573656612548)*x2318)));
evalcond[2]=((((-1.0)*r10*x2325))+(((-1.0)*x2319*x2323))+((x2318*x2323))+(((-1.0)*(0.250000174843791)*r12))+(((0.433013004730548)*x2319))+(((-1.0)*r12*x2322))+x2320+x2321+(((-1.0)*r11*x2324))+(((-0.433013004730548)*x2318)));
evalcond[3]=((((-1.0)*r20*x2325))+((x2312*x2323))+(((-1.0)*r21*x2324))+(((-0.433013004730548)*x2312))+(((-1.0)*r22*x2322))+(((0.433013004730548)*x2313))+(((-1.0)*x2313*x2323))+(((-1.0)*(0.250000174843791)*r22))+x2326);
evalcond[4]=((((-1.0)*x2319*x2333))+(((-1.0)*r11*x2335))+(((-1.0)*r10*x2336))+(((-1.0)*r12*x2329))+((x2318*x2334))+((x2318*x2333))+((x2318*x2330))+((r11*x2331))+((r12*x2327))+(((-1.0)*r12*x2328))+((r10*x2332))+(((-1.0)*x2319*x2334))+x2326+(((-1.0)*x2319*x2330)));
evalcond[5]=(((r22*x2327))+((r20*x2332))+(((-1.0)*x2320))+((x2312*x2330))+(((-1.0)*r21*x2335))+((r21*x2331))+(((-1.0)*x2313*x2333))+(((-1.0)*r22*x2329))+((x2312*x2334))+(((-1.0)*r20*x2336))+(((-1.0)*x2321))+((x2312*x2333))+(((-1.0)*r22*x2328))+(((-1.0)*x2313*x2334))+(((-1.0)*x2313*x2330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2337=((390625.0)*py);
IkReal x2338=((3808.59375)*sj0);
IkReal x2339=((390625.0)*cj0*pz);
IkReal x2340=((28928.6584614277)*cj1);
IkReal x2341=(cj5*r10);
IkReal x2342=(r11*sj5);
IkReal x2343=(cj5*r20);
IkReal x2344=((28928.6584614277)*cj0*sj1);
IkReal x2345=(r21*sj5);
IkReal x2346=((28928.6584614277)*sj1);
IkReal x2347=((28928.6584614277)*cj0*cj1);
CheckValue<IkReal> x2348 = IKatan2WithCheck(IkReal((((x2343*x2344))+(((-1.0)*sj1*x2339))+((cj1*x2338))+(((-1.0)*x2344*x2345))+(((-1.0)*x2340*x2342))+(((-1.0)*cj1*x2337))+((x2340*x2341)))),IkReal(((((-1.0)*x2342*x2346))+((sj1*x2338))+((x2341*x2346))+(((-1.0)*sj1*x2337))+(((-1.0)*x2343*x2347))+((cj1*x2339))+((x2345*x2347))+(((-1.0)*(160156.25)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2348.valid){
continue;
}
CheckValue<IkReal> x2349=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2349.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2348.value)+(((1.5707963267949)*(x2349.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2350=(cj5*r20);
IkReal x2351=(r21*sj5);
IkReal x2352=IKcos(j2);
IkReal x2353=(cj1*x2352);
IkReal x2354=IKsin(j2);
IkReal x2355=(sj1*x2354);
IkReal x2356=(cj5*r00);
IkReal x2357=(r01*sj5);
IkReal x2358=((0.41)*sj1);
IkReal x2359=(cj1*x2354);
IkReal x2360=(sj0*x2359);
IkReal x2361=(sj1*x2352);
IkReal x2362=(sj0*x2361);
IkReal x2363=(cj5*r10);
IkReal x2364=(r11*sj5);
IkReal x2365=((0.25000704)*cj0);
IkReal x2366=((0.749999825156128)*cj4);
IkReal x2367=((1.0)*x2354);
IkReal x2368=(sj1*x2367);
IkReal x2369=((0.433012600946063)*cj4);
IkReal x2370=((0.866025201892125)*cj5*sj4);
IkReal x2371=((0.866025201892125)*sj4*sj5);
IkReal x2372=(cj1*x2367);
IkReal x2373=((1.0)*x2361);
IkReal x2374=((0.433012600946063)*sj3);
IkReal x2375=((0.866025403784439)*cj3*sj4);
IkReal x2376=((0.433013004730548)*cj4*sj3);
IkReal x2377=((0.749999825156128)*sj3);
IkReal x2378=(cj3*cj4*cj5);
IkReal x2379=(cj3*cj4*sj5);
IkReal x2380=((0.5)*cj3*sj4);
IkReal x2381=((0.250000174843791)*cj4*sj3);
IkReal x2382=((0.500000349687582)*cj5*sj3*sj4);
IkReal x2383=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.0740573656612548)*x2350))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.0740573656612548)*x2351))+(((-0.25000704)*x2355))+(((0.25000704)*x2353)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((0.0740573656612548)*x2356))+(((0.00975)*cj0))+(((0.25000704)*x2360))+(((0.25000704)*x2362))+((sj0*x2358))+(((-0.0740573656612548)*x2357)));
evalcond[2]=((((-1.0)*(1.0)*py))+(((-1.0)*x2361*x2365))+(((-1.0)*x2359*x2365))+(((0.00975)*sj0))+(((-0.0740573656612548)*x2364))+(((0.0740573656612548)*x2363))+(((-1.0)*cj0*x2358)));
evalcond[3]=((((-1.0)*r22*x2366))+(((-0.433013004730548)*x2350))+(((-1.0)*x2351*x2369))+((x2350*x2369))+(((-1.0)*x2368))+(((-1.0)*r21*x2370))+x2353+(((-1.0)*(0.250000174843791)*r22))+(((0.433013004730548)*x2351))+(((-1.0)*r20*x2371)));
evalcond[4]=((((-1.0)*r02*x2366))+(((-1.0)*r00*x2371))+(((-1.0)*x2357*x2369))+((x2356*x2369))+x2360+x2362+(((0.433013004730548)*x2357))+(((-1.0)*(0.250000174843791)*r02))+(((-0.433013004730548)*x2356))+(((-1.0)*r01*x2370)));
evalcond[5]=((((0.433013004730548)*x2364))+(((-1.0)*r11*x2370))+(((-1.0)*cj0*x2372))+(((-1.0)*cj0*x2373))+(((-1.0)*r12*x2366))+(((-0.433013004730548)*x2363))+(((-1.0)*(0.250000174843791)*r12))+(((-1.0)*x2364*x2369))+(((-1.0)*r10*x2371))+((x2363*x2369)));
evalcond[6]=(((x2350*x2380))+(((-1.0)*r21*x2382))+(((-1.0)*x2373))+((x2350*x2381))+(((-1.0)*r20*x2383))+(((-1.0)*x2372))+((r20*x2379))+(((-1.0)*r22*x2375))+(((-1.0)*x2351*x2377))+((r22*x2374))+((x2350*x2377))+((r21*x2378))+(((-1.0)*x2351*x2381))+(((-1.0)*r22*x2376))+(((-1.0)*x2351*x2380)));
evalcond[7]=(((x2356*x2377))+((sj0*x2353))+(((-1.0)*r00*x2383))+(((-1.0)*x2357*x2381))+(((-1.0)*r01*x2382))+((r00*x2379))+(((-1.0)*r02*x2375))+((x2356*x2381))+((r02*x2374))+(((-1.0)*r02*x2376))+(((-1.0)*x2357*x2380))+(((-1.0)*x2357*x2377))+(((-1.0)*sj0*x2368))+((r01*x2378))+((x2356*x2380)));
evalcond[8]=((((-1.0)*x2364*x2377))+(((-1.0)*r12*x2375))+(((-1.0)*r11*x2382))+((r12*x2374))+((r11*x2378))+(((-1.0)*x2364*x2381))+((x2363*x2380))+((r10*x2379))+(((-1.0)*r10*x2383))+(((-1.0)*x2364*x2380))+((x2363*x2381))+(((-1.0)*cj0*x2353))+((cj0*x2355))+((x2363*x2377))+(((-1.0)*r12*x2376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2384=((3808.59375)*cj0);
IkReal x2385=((390625.0)*px);
IkReal x2386=((28928.6584614277)*cj1);
IkReal x2387=(cj5*r00);
IkReal x2388=(r01*sj5);
IkReal x2389=((390625.0)*pz*sj0);
IkReal x2390=(cj5*r20);
IkReal x2391=((28928.6584614277)*sj0*sj1);
IkReal x2392=(r21*sj5);
IkReal x2393=((28928.6584614277)*sj1);
IkReal x2394=((28928.6584614277)*cj1*sj0);
CheckValue<IkReal> x2395 = IKatan2WithCheck(IkReal((((x2386*x2388))+(((-1.0)*x2386*x2387))+((cj1*x2385))+(((-1.0)*x2391*x2392))+(((-1.0)*cj1*x2384))+((x2390*x2391))+(((-1.0)*sj1*x2389)))),IkReal((((cj1*x2389))+(((-1.0)*x2387*x2393))+((x2388*x2393))+((x2392*x2394))+((sj1*x2385))+(((-1.0)*(160156.25)*sj0))+(((-1.0)*sj1*x2384))+(((-1.0)*x2390*x2394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2395.valid){
continue;
}
CheckValue<IkReal> x2396=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2396.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2395.value)+(((1.5707963267949)*(x2396.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2397=(cj5*r20);
IkReal x2398=(r21*sj5);
IkReal x2399=IKcos(j2);
IkReal x2400=(cj1*x2399);
IkReal x2401=IKsin(j2);
IkReal x2402=(sj1*x2401);
IkReal x2403=(cj5*r00);
IkReal x2404=(r01*sj5);
IkReal x2405=((0.41)*sj1);
IkReal x2406=(cj1*x2401);
IkReal x2407=(sj0*x2406);
IkReal x2408=(sj1*x2399);
IkReal x2409=(sj0*x2408);
IkReal x2410=(cj5*r10);
IkReal x2411=(r11*sj5);
IkReal x2412=((0.25000704)*cj0);
IkReal x2413=((0.749999825156128)*cj4);
IkReal x2414=((1.0)*x2401);
IkReal x2415=(sj1*x2414);
IkReal x2416=((0.433012600946063)*cj4);
IkReal x2417=((0.866025201892125)*cj5*sj4);
IkReal x2418=((0.866025201892125)*sj4*sj5);
IkReal x2419=(cj1*x2414);
IkReal x2420=((1.0)*x2408);
IkReal x2421=((0.433012600946063)*sj3);
IkReal x2422=((0.866025403784439)*cj3*sj4);
IkReal x2423=((0.433013004730548)*cj4*sj3);
IkReal x2424=((0.749999825156128)*sj3);
IkReal x2425=(cj3*cj4*cj5);
IkReal x2426=(cj3*cj4*sj5);
IkReal x2427=((0.5)*cj3*sj4);
IkReal x2428=((0.250000174843791)*cj4*sj3);
IkReal x2429=((0.500000349687582)*cj5*sj3*sj4);
IkReal x2430=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x2402))+(((0.25000704)*x2400))+(((-0.0740573656612548)*x2398))+(((0.0740573656612548)*x2397)));
evalcond[1]=((((-0.0740573656612548)*x2404))+(((-1.0)*(1.0)*px))+(((0.25000704)*x2409))+((sj0*x2405))+(((0.0740573656612548)*x2403))+(((0.00975)*cj0))+(((0.25000704)*x2407)));
evalcond[2]=((((-1.0)*cj0*x2405))+(((-1.0)*(1.0)*py))+(((-1.0)*x2406*x2412))+(((0.00975)*sj0))+(((0.0740573656612548)*x2410))+(((-0.0740573656612548)*x2411))+(((-1.0)*x2408*x2412)));
evalcond[3]=(((x2397*x2416))+(((-1.0)*x2415))+(((-1.0)*r22*x2413))+(((-1.0)*r21*x2417))+(((-1.0)*r20*x2418))+(((0.433013004730548)*x2398))+(((-1.0)*(0.250000174843791)*r22))+(((-0.433013004730548)*x2397))+x2400+(((-1.0)*x2398*x2416)));
evalcond[4]=((((-1.0)*r02*x2413))+(((-1.0)*r01*x2417))+(((-1.0)*x2404*x2416))+(((-0.433013004730548)*x2403))+(((-1.0)*(0.250000174843791)*r02))+x2409+x2407+(((0.433013004730548)*x2404))+(((-1.0)*r00*x2418))+((x2403*x2416)));
evalcond[5]=((((-1.0)*r11*x2417))+(((-1.0)*cj0*x2420))+(((-1.0)*r10*x2418))+(((0.433013004730548)*x2411))+(((-1.0)*(0.250000174843791)*r12))+(((-0.433013004730548)*x2410))+(((-1.0)*r12*x2413))+(((-1.0)*cj0*x2419))+(((-1.0)*x2411*x2416))+((x2410*x2416)));
evalcond[6]=(((r21*x2425))+((x2397*x2428))+(((-1.0)*x2398*x2424))+(((-1.0)*r20*x2430))+(((-1.0)*x2398*x2428))+((r20*x2426))+((x2397*x2427))+(((-1.0)*x2398*x2427))+(((-1.0)*r22*x2423))+(((-1.0)*x2419))+(((-1.0)*r21*x2429))+(((-1.0)*x2420))+(((-1.0)*r22*x2422))+((x2397*x2424))+((r22*x2421)));
evalcond[7]=((((-1.0)*x2404*x2428))+(((-1.0)*r02*x2422))+((sj0*x2400))+((x2403*x2428))+((x2403*x2424))+((r00*x2426))+((r01*x2425))+(((-1.0)*x2404*x2424))+((x2403*x2427))+(((-1.0)*r01*x2429))+((r02*x2421))+(((-1.0)*x2404*x2427))+(((-1.0)*sj0*x2415))+(((-1.0)*r00*x2430))+(((-1.0)*r02*x2423)));
evalcond[8]=(((x2410*x2427))+(((-1.0)*r10*x2430))+((x2410*x2428))+(((-1.0)*x2411*x2424))+(((-1.0)*r12*x2422))+((r10*x2426))+((r11*x2425))+((cj0*x2402))+(((-1.0)*x2411*x2428))+(((-1.0)*cj0*x2400))+(((-1.0)*r11*x2429))+(((-1.0)*r12*x2423))+((r12*x2421))+(((-1.0)*x2411*x2427))+((x2410*x2424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2431=(cj0*r12);
IkReal x2432=((0.182313665255445)*cj0);
IkReal x2433=(cj5*r10);
IkReal x2434=(r11*sj5);
IkReal x2435=((0.108256198645226)*cj0*cj4);
IkReal x2436=((0.216512397290453)*cj0*sj4);
IkReal x2437=(cj5*r20);
IkReal x2438=(r21*sj5);
IkReal x2439=((0.264039508890796)*cj4);
IkReal x2440=((0.528079017781592)*sj4);
CheckValue<IkReal> x2441=IKPowWithIntegerCheck(cj0,-2);
if(!x2441.valid){
continue;
}
if( IKabs(((-2.4390243902439)*(x2441.value)*(((((-0.187505236287801)*cj4*x2431))+(((-1.0)*x2434*x2435))+((cj0*py))+(((-1.0)*cj5*r11*x2436))+(((-1.0)*r10*sj5*x2436))+(((-1.0)*x2432*x2433))+((x2432*x2434))+(((-1.0)*(0.00975)*cj0*sj0))+(((-0.0625018037121786)*x2431))+((x2433*x2435)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(0.457329844604393)*cj4*r22))+(((0.444667476232793)*x2438))+(((-1.0)*cj5*r21*x2440))+((x2437*x2439))+(((-1.0)*r20*sj5*x2440))+(((-0.444667476232793)*x2437))+(((2.4390243902439)*pz))+(((-1.0)*x2438*x2439))+(((-1.0)*(0.15244342368824)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.4390243902439)*(x2441.value)*(((((-0.187505236287801)*cj4*x2431))+(((-1.0)*x2434*x2435))+((cj0*py))+(((-1.0)*cj5*r11*x2436))+(((-1.0)*r10*sj5*x2436))+(((-1.0)*x2432*x2433))+((x2432*x2434))+(((-1.0)*(0.00975)*cj0*sj0))+(((-0.0625018037121786)*x2431))+((x2433*x2435))))))+IKsqr(((((-1.0)*(0.457329844604393)*cj4*r22))+(((0.444667476232793)*x2438))+(((-1.0)*cj5*r21*x2440))+((x2437*x2439))+(((-1.0)*r20*sj5*x2440))+(((-0.444667476232793)*x2437))+(((2.4390243902439)*pz))+(((-1.0)*x2438*x2439))+(((-1.0)*(0.15244342368824)*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.4390243902439)*(x2441.value)*(((((-0.187505236287801)*cj4*x2431))+(((-1.0)*x2434*x2435))+((cj0*py))+(((-1.0)*cj5*r11*x2436))+(((-1.0)*r10*sj5*x2436))+(((-1.0)*x2432*x2433))+((x2432*x2434))+(((-1.0)*(0.00975)*cj0*sj0))+(((-0.0625018037121786)*x2431))+((x2433*x2435))))), ((((-1.0)*(0.457329844604393)*cj4*r22))+(((0.444667476232793)*x2438))+(((-1.0)*cj5*r21*x2440))+((x2437*x2439))+(((-1.0)*r20*sj5*x2440))+(((-0.444667476232793)*x2437))+(((2.4390243902439)*pz))+(((-1.0)*x2438*x2439))+(((-1.0)*(0.15244342368824)*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2442=((0.182313665255445)*cj5);
IkReal x2443=((0.182313665255445)*sj5);
IkReal x2444=((0.41)*(IKcos(j1)));
IkReal x2445=((0.108256198645226)*cj4*cj5);
IkReal x2446=((0.108256198645226)*cj4*sj5);
IkReal x2447=((0.216512397290453)*cj5*sj4);
IkReal x2448=((0.216512397290453)*sj4*sj5);
IkReal x2449=((0.0625018037121786)*cj0);
IkReal x2450=((0.00975)*cj0);
IkReal x2451=(sj0*x2450);
IkReal x2452=((0.187505236287801)*cj0*cj4);
IkReal x2453=(cj0*r10);
IkReal x2454=(cj0*r11);
IkReal x2455=cj0*cj0;
IkReal x2456=((0.41)*(IKsin(j1)));
IkReal x2457=((1.0)*sj0);
IkReal x2458=((0.0625018037121786)*sj0);
IkReal x2459=((0.187505236287801)*cj4*sj0);
IkReal x2460=(r00*sj0);
IkReal x2461=(r01*sj0);
IkReal x2462=(cj5*r00);
IkReal x2463=((0.108256198645226)*cj4*sj0);
IkReal x2464=(r01*sj5);
IkReal x2465=sj0*sj0;
IkReal x2466=((0.108256198645226)*sj3);
IkReal x2467=((0.216512447764952)*cj3*sj4);
IkReal x2468=((0.10825629959419)*cj4*sj3);
IkReal x2469=((0.187505236287801)*sj3);
IkReal x2470=((0.0740573656612548)*cj5*r20);
IkReal x2471=((0.0740573656612548)*r21*sj5);
IkReal x2472=((0.25000704)*cj3*cj4*cj5);
IkReal x2473=((0.25000704)*cj3*cj4*sj5);
IkReal x2474=((0.12500352)*cj3*sj4);
IkReal x2475=((0.0625018037121786)*cj4*sj3);
IkReal x2476=((0.125003607424357)*cj5*sj3*sj4);
IkReal x2477=((0.125003607424357)*sj3*sj4*sj5);
IkReal x2478=(cj5*r10);
IkReal x2479=(r11*sj5);
IkReal x2480=((0.0740573656612548)*cj5);
IkReal x2481=(r10*x2480);
IkReal x2482=((0.0740573656612548)*sj5);
IkReal x2483=(r11*x2482);
IkReal x2484=(cj0*x2456);
IkReal x2485=((0.108256198645226)*r22*sj3);
IkReal x2486=((0.216512447764952)*cj3*r22*sj4);
IkReal x2487=(cj5*r20);
IkReal x2488=((0.187505236287801)*cj0*sj3);
IkReal x2489=(r21*sj5);
IkReal x2490=(cj0*r21);
IkReal x2491=(cj0*r20);
IkReal x2492=((0.12500352)*cj0*cj3*sj4);
IkReal x2493=((0.0625018037121786)*cj0*cj4*sj3);
IkReal x2494=(r00*x2480);
IkReal x2495=(r01*x2482);
IkReal x2496=((0.187505236287801)*sj0*sj3);
IkReal x2497=(r21*sj0);
IkReal x2498=(r20*sj0);
IkReal x2499=((0.12500352)*cj3*sj0*sj4);
IkReal x2500=((0.0625018037121786)*cj4*sj0*sj3);
IkReal x2501=((0.10825629959419)*sj0);
IkReal x2502=((-1.0)*sj0*x2484);
IkReal x2503=(r10*sj0);
IkReal x2504=(r11*sj0);
IkReal x2505=((0.10825629959419)*cj0);
IkReal x2506=((0.108256198645226)*cj0*cj4);
evalcond[0]=((((-1.0)*r21*x2446))+(((-1.0)*x2444))+(((-1.0)*(0.0625018037121786)*r22))+pz+(((-1.0)*r21*x2447))+((r21*x2443))+(((-1.0)*r20*x2442))+(((-0.187505236287801)*cj4*r22))+(((-1.0)*r20*x2448))+((r20*x2445)));
evalcond[1]=((((-1.0)*x2448*x2453))+((cj0*py))+((x2445*x2453))+(((-1.0)*x2451))+(((-1.0)*x2446*x2454))+((x2455*x2456))+(((-1.0)*r12*x2452))+(((-1.0)*x2447*x2454))+(((-1.0)*x2442*x2453))+((x2443*x2454))+(((-1.0)*r12*x2449)));
evalcond[2]=(((x2442*x2460))+((x2456*x2465))+((x2447*x2461))+((x2448*x2460))+(((-1.0)*x2462*x2463))+x2451+((x2463*x2464))+(((-1.0)*x2443*x2461))+(((-1.0)*px*x2457))+((r02*x2459))+((r02*x2458)));
evalcond[3]=((((-1.0)*r01*x2476))+(((-1.0)*r02*x2467))+((x2462*x2474))+((r01*x2472))+((sj0*x2471))+(((-1.0)*x2464*x2469))+(((-1.0)*sj0*x2444))+((pz*sj0))+(((-1.0)*r02*x2468))+(((-1.0)*r00*x2477))+((x2462*x2475))+(((-1.0)*sj0*x2470))+((r00*x2473))+((r02*x2466))+(((-1.0)*x2464*x2474))+((x2462*x2469))+(((-1.0)*x2464*x2475)));
evalcond[4]=((((-1.0)*(1.0)*cj0*pz))+((x2469*x2478))+(((-1.0)*x2475*x2479))+(((-1.0)*x2474*x2479))+(((-1.0)*cj0*x2471))+((r11*x2472))+((cj0*x2444))+((x2475*x2478))+(((-1.0)*r12*x2468))+(((-1.0)*x2469*x2479))+((r10*x2473))+((r12*x2466))+((x2474*x2478))+(((-1.0)*r10*x2477))+((cj0*x2470))+(((-1.0)*r12*x2467))+(((-1.0)*r11*x2476)));
evalcond[5]=(((x2487*x2488))+((x2487*x2493))+(((-1.0)*x2489*x2493))+x2483+x2484+((x2472*x2490))+py+((x2487*x2492))+(((-1.0)*x2476*x2490))+(((-1.0)*cj0*x2486))+(((-1.0)*(0.00975)*sj0))+(((-1.0)*x2477*x2491))+(((-1.0)*x2489*x2492))+(((-1.0)*x2481))+((x2473*x2491))+((cj0*x2485))+(((-0.10825629959419)*cj0*cj4*r22*sj3))+(((-1.0)*x2488*x2489)));
evalcond[6]=((((-1.0)*sj0*x2456))+x2495+((sj0*x2486))+((r22*sj0*x2468))+(((-1.0)*x2487*x2496))+(((-1.0)*x2472*x2497))+((x2477*x2498))+((x2476*x2497))+((x2489*x2499))+px+((x2489*x2496))+(((-1.0)*sj0*x2485))+(((-1.0)*x2487*x2500))+(((-1.0)*x2494))+(((-1.0)*x2487*x2499))+(((-1.0)*x2450))+(((-1.0)*x2473*x2498))+((x2489*x2500)));
evalcond[7]=((((-0.00975)*x2455))+((x2447*x2504))+((cj0*px))+(((-1.0)*cj0*x2494))+((x2478*x2501))+((cj0*x2495))+(((-1.0)*x2445*x2503))+x2502+(((-1.0)*x2479*x2501))+((r12*x2459))+((r12*x2458))+((x2446*x2504))+((x2448*x2503)));
evalcond[8]=((((-1.0)*cj0*r00*x2448))+(((-1.0)*sj0*x2483))+((x2464*x2505))+(((-1.0)*r02*x2452))+(((0.00975)*x2465))+((x2462*x2506))+x2502+(((-1.0)*x2462*x2505))+(((-1.0)*r02*x2449))+(((-1.0)*cj0*r01*x2447))+((sj0*x2481))+(((-1.0)*x2464*x2506))+(((-1.0)*py*x2457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2507=((3.99988736317185)*cj1);
IkReal x2508=((3.99988736317185)*sj1);
IkReal x2509=((0.29622112105825)*cj1*cj5);
IkReal x2510=((0.29622112105825)*cj1*sj5);
IkReal x2511=((0.29622112105825)*cj5*sj1);
IkReal x2512=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*pz*x2508))+(((-1.0)*r21*x2512))+(((-1.0)*r00*x2509))+((r01*x2510))+((r20*x2511))+((px*x2507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((px*x2508))+((r01*x2512))+((r21*x2510))+(((-1.0)*r00*x2511))+(((-1.0)*r20*x2509))+((pz*x2507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*x2508))+(((-1.0)*r21*x2512))+(((-1.0)*r00*x2509))+((r01*x2510))+((r20*x2511))+((px*x2507))))+IKsqr(((-1.63995381890046)+((px*x2508))+((r01*x2512))+((r21*x2510))+(((-1.0)*r00*x2511))+(((-1.0)*r20*x2509))+((pz*x2507))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*pz*x2508))+(((-1.0)*r21*x2512))+(((-1.0)*r00*x2509))+((r01*x2510))+((r20*x2511))+((px*x2507))), ((-1.63995381890046)+((px*x2508))+((r01*x2512))+((r21*x2510))+(((-1.0)*r00*x2511))+(((-1.0)*r20*x2509))+((pz*x2507))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2513=(cj5*r20);
IkReal x2514=(r21*sj5);
IkReal x2515=IKcos(j2);
IkReal x2516=(cj1*x2515);
IkReal x2517=IKsin(j2);
IkReal x2518=(sj1*x2517);
IkReal x2519=(cj5*r00);
IkReal x2520=(r01*sj5);
IkReal x2521=(cj1*x2517);
IkReal x2522=(sj1*x2515);
IkReal x2523=((0.749999825156128)*cj4);
IkReal x2524=((0.433012600946063)*cj4);
IkReal x2525=((0.866025201892125)*cj5*sj4);
IkReal x2526=((0.866025201892125)*sj4*sj5);
IkReal x2527=((((-1.0)*x2518))+x2516);
IkReal x2528=((0.433012600946063)*sj3);
IkReal x2529=((0.866025403784439)*cj3*sj4);
IkReal x2530=((0.433013004730548)*cj4*sj3);
IkReal x2531=((0.749999825156128)*sj3);
IkReal x2532=(cj3*cj4*cj5);
IkReal x2533=(cj3*cj4*sj5);
IkReal x2534=((0.5)*cj3*sj4);
IkReal x2535=((0.250000174843791)*cj4*sj3);
IkReal x2536=((0.500000349687582)*cj5*sj3*sj4);
IkReal x2537=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x2518))+(((0.25000704)*x2516))+(((0.0740573656612548)*x2513))+(((-0.0740573656612548)*x2514)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((-0.0740573656612548)*x2520))+(((0.25000704)*x2521))+(((0.25000704)*x2522))+(((0.41)*sj1))+(((0.0740573656612548)*x2519)));
evalcond[2]=((((0.433013004730548)*x2520))+(((-0.433013004730548)*x2519))+(((-1.0)*r00*x2526))+x2522+x2521+(((-1.0)*r02*x2523))+(((-1.0)*(0.250000174843791)*r02))+(((-1.0)*x2520*x2524))+(((-1.0)*r01*x2525))+((x2519*x2524)));
evalcond[3]=(((x2513*x2524))+(((-1.0)*x2514*x2524))+(((-1.0)*r20*x2526))+(((-1.0)*r22*x2523))+(((-1.0)*r21*x2525))+x2527+(((-0.433013004730548)*x2513))+(((-1.0)*(0.250000174843791)*r22))+(((0.433013004730548)*x2514)));
evalcond[4]=(((r01*x2532))+((x2519*x2531))+(((-1.0)*x2520*x2535))+((r00*x2533))+((x2519*x2535))+(((-1.0)*r02*x2530))+(((-1.0)*x2520*x2531))+x2527+((x2519*x2534))+(((-1.0)*r01*x2536))+(((-1.0)*x2520*x2534))+(((-1.0)*r00*x2537))+((r02*x2528))+(((-1.0)*r02*x2529)));
evalcond[5]=(((r20*x2533))+(((-1.0)*x2514*x2534))+((r21*x2532))+(((-1.0)*r22*x2530))+(((-1.0)*x2514*x2531))+(((-1.0)*x2522))+((r22*x2528))+(((-1.0)*r20*x2537))+((x2513*x2535))+((x2513*x2534))+((x2513*x2531))+(((-1.0)*r21*x2536))+(((-1.0)*r22*x2529))+(((-1.0)*x2514*x2535))+(((-1.0)*x2521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2538=((3.99988736317185)*cj1);
IkReal x2539=((3.99988736317185)*sj1);
IkReal x2540=((0.29622112105825)*cj1*cj5);
IkReal x2541=((0.29622112105825)*cj1*sj5);
IkReal x2542=((0.29622112105825)*cj5*sj1);
IkReal x2543=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*pz*x2539))+((r20*x2542))+((r00*x2540))+(((-1.0)*r01*x2541))+(((-1.0)*px*x2538))+(((-1.0)*r21*x2543)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((r00*x2542))+((pz*x2538))+((r21*x2541))+(((-1.0)*r01*x2543))+(((-1.0)*px*x2539))+(((-1.0)*r20*x2540)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*x2539))+((r20*x2542))+((r00*x2540))+(((-1.0)*r01*x2541))+(((-1.0)*px*x2538))+(((-1.0)*r21*x2543))))+IKsqr(((-1.63995381890046)+((r00*x2542))+((pz*x2538))+((r21*x2541))+(((-1.0)*r01*x2543))+(((-1.0)*px*x2539))+(((-1.0)*r20*x2540))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*pz*x2539))+((r20*x2542))+((r00*x2540))+(((-1.0)*r01*x2541))+(((-1.0)*px*x2538))+(((-1.0)*r21*x2543))), ((-1.63995381890046)+((r00*x2542))+((pz*x2538))+((r21*x2541))+(((-1.0)*r01*x2543))+(((-1.0)*px*x2539))+(((-1.0)*r20*x2540))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2544=(cj5*r20);
IkReal x2545=(r21*sj5);
IkReal x2546=IKcos(j2);
IkReal x2547=(cj1*x2546);
IkReal x2548=IKsin(j2);
IkReal x2549=(sj1*x2548);
IkReal x2550=(cj5*r00);
IkReal x2551=(r01*sj5);
IkReal x2552=(cj1*x2548);
IkReal x2553=(sj1*x2546);
IkReal x2554=((0.749999825156128)*cj4);
IkReal x2555=((0.433012600946063)*cj4);
IkReal x2556=((0.866025201892125)*cj5*sj4);
IkReal x2557=((0.866025201892125)*sj4*sj5);
IkReal x2558=((((-1.0)*x2552))+(((-1.0)*x2553)));
IkReal x2559=((0.433012600946063)*sj3);
IkReal x2560=((0.866025403784439)*cj3*sj4);
IkReal x2561=((0.433013004730548)*cj4*sj3);
IkReal x2562=((0.749999825156128)*sj3);
IkReal x2563=(cj3*cj4*cj5);
IkReal x2564=(cj3*cj4*sj5);
IkReal x2565=((0.5)*cj3*sj4);
IkReal x2566=((0.250000174843791)*cj4*sj3);
IkReal x2567=((0.500000349687582)*cj5*sj3*sj4);
IkReal x2568=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((-0.0740573656612548)*x2545))+(((0.0740573656612548)*x2544))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x2549))+(((0.25000704)*x2547)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((-0.0740573656612548)*x2551))+(((-0.25000704)*x2552))+(((-1.0)*(0.41)*sj1))+(((-0.25000704)*x2553))+(((0.0740573656612548)*x2550)));
evalcond[2]=((((-1.0)*x2549))+(((-0.433013004730548)*x2544))+(((-1.0)*x2545*x2555))+x2547+(((0.433013004730548)*x2545))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r20*x2557))+((x2544*x2555))+(((-1.0)*r21*x2556))+(((-1.0)*r22*x2554)));
evalcond[3]=((((-1.0)*r01*x2556))+(((-1.0)*x2551*x2555))+(((-1.0)*r00*x2557))+x2558+(((-0.433013004730548)*x2550))+(((-1.0)*(0.250000174843791)*r02))+(((0.433013004730548)*x2551))+(((-1.0)*r02*x2554))+((x2550*x2555)));
evalcond[4]=((((-1.0)*x2551*x2566))+(((-1.0)*r02*x2561))+((x2550*x2562))+(((-1.0)*x2551*x2562))+((r00*x2564))+(((-1.0)*r02*x2560))+x2549+(((-1.0)*r01*x2567))+(((-1.0)*r00*x2568))+((x2550*x2566))+(((-1.0)*x2551*x2565))+((x2550*x2565))+((r02*x2559))+(((-1.0)*x2547))+((r01*x2563)));
evalcond[5]=(((r22*x2559))+(((-1.0)*r21*x2567))+(((-1.0)*x2545*x2566))+((x2544*x2566))+x2558+(((-1.0)*x2545*x2565))+(((-1.0)*x2545*x2562))+(((-1.0)*r22*x2560))+((r20*x2564))+((r21*x2563))+(((-1.0)*r22*x2561))+((x2544*x2562))+((x2544*x2565))+(((-1.0)*r20*x2568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2569=((3.99988736317185)*cj1);
IkReal x2570=((3.99988736317185)*sj1);
IkReal x2571=((0.29622112105825)*cj1*cj5);
IkReal x2572=((0.29622112105825)*cj1*sj5);
IkReal x2573=((0.29622112105825)*cj5*sj1);
IkReal x2574=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*pz*x2570))+((r20*x2573))+(((-1.0)*py*x2569))+(((-1.0)*r11*x2572))+(((-1.0)*r21*x2574))+((r10*x2571)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+(((-1.0)*r11*x2574))+((r21*x2572))+(((-1.0)*r20*x2571))+(((-1.0)*py*x2570))+((r10*x2573))+((pz*x2569)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*x2570))+((r20*x2573))+(((-1.0)*py*x2569))+(((-1.0)*r11*x2572))+(((-1.0)*r21*x2574))+((r10*x2571))))+IKsqr(((-1.63995381890046)+(((-1.0)*r11*x2574))+((r21*x2572))+(((-1.0)*r20*x2571))+(((-1.0)*py*x2570))+((r10*x2573))+((pz*x2569))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*pz*x2570))+((r20*x2573))+(((-1.0)*py*x2569))+(((-1.0)*r11*x2572))+(((-1.0)*r21*x2574))+((r10*x2571))), ((-1.63995381890046)+(((-1.0)*r11*x2574))+((r21*x2572))+(((-1.0)*r20*x2571))+(((-1.0)*py*x2570))+((r10*x2573))+((pz*x2569))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2575=(cj5*r20);
IkReal x2576=(r21*sj5);
IkReal x2577=IKcos(j2);
IkReal x2578=(cj1*x2577);
IkReal x2579=IKsin(j2);
IkReal x2580=(sj1*x2579);
IkReal x2581=(cj5*r10);
IkReal x2582=(r11*sj5);
IkReal x2583=(cj1*x2579);
IkReal x2584=(sj1*x2577);
IkReal x2585=((0.749999825156128)*cj4);
IkReal x2586=((0.433012600946063)*cj4);
IkReal x2587=((0.866025201892125)*cj5*sj4);
IkReal x2588=((0.866025201892125)*sj4*sj5);
IkReal x2589=((((-1.0)*x2584))+(((-1.0)*x2583)));
IkReal x2590=((0.433012600946063)*sj3);
IkReal x2591=((0.866025403784439)*cj3*sj4);
IkReal x2592=((0.433013004730548)*cj4*sj3);
IkReal x2593=((0.749999825156128)*sj3);
IkReal x2594=(cj3*cj4*cj5);
IkReal x2595=(cj3*cj4*sj5);
IkReal x2596=((0.5)*cj3*sj4);
IkReal x2597=((0.250000174843791)*cj4*sj3);
IkReal x2598=((0.500000349687582)*cj5*sj3*sj4);
IkReal x2599=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x2580))+(((0.25000704)*x2578))+(((-0.0740573656612548)*x2576))+(((0.0740573656612548)*x2575)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-0.25000704)*x2584))+(((-0.25000704)*x2583))+(((-0.0740573656612548)*x2582))+(((-1.0)*(0.41)*sj1))+(((0.0740573656612548)*x2581)));
evalcond[2]=((((-1.0)*r21*x2587))+(((-1.0)*r20*x2588))+(((-1.0)*x2576*x2586))+(((-0.433013004730548)*x2575))+((x2575*x2586))+(((0.433013004730548)*x2576))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*x2580))+(((-1.0)*r22*x2585))+x2578);
evalcond[3]=((((0.433013004730548)*x2582))+(((-0.433013004730548)*x2581))+(((-1.0)*r12*x2585))+(((-1.0)*x2582*x2586))+(((-1.0)*(0.250000174843791)*r12))+x2589+(((-1.0)*r10*x2588))+(((-1.0)*r11*x2587))+((x2581*x2586)));
evalcond[4]=(((r10*x2595))+(((-1.0)*r12*x2592))+((x2581*x2593))+(((-1.0)*r10*x2599))+(((-1.0)*r12*x2591))+(((-1.0)*x2578))+((x2581*x2597))+(((-1.0)*x2582*x2596))+((x2581*x2596))+x2580+(((-1.0)*x2582*x2593))+((r12*x2590))+(((-1.0)*r11*x2598))+(((-1.0)*x2582*x2597))+((r11*x2594)));
evalcond[5]=((((-1.0)*r21*x2598))+(((-1.0)*r22*x2592))+(((-1.0)*r20*x2599))+((x2575*x2597))+(((-1.0)*r22*x2591))+((x2575*x2596))+((r21*x2594))+x2589+((r20*x2595))+(((-1.0)*x2576*x2597))+((x2575*x2593))+(((-1.0)*x2576*x2596))+(((-1.0)*x2576*x2593))+((r22*x2590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2600=((3.99988736317185)*cj1);
IkReal x2601=((3.99988736317185)*sj1);
IkReal x2602=((0.29622112105825)*cj1*cj5);
IkReal x2603=((0.29622112105825)*cj1*sj5);
IkReal x2604=((0.29622112105825)*cj5*sj1);
IkReal x2605=((0.29622112105825)*sj1*sj5);
if( IKabs(((((-1.0)*r21*x2605))+(((-1.0)*pz*x2601))+((py*x2600))+((r11*x2603))+((r20*x2604))+(((-1.0)*r10*x2602)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.63995381890046)+((py*x2601))+((r21*x2603))+((r11*x2605))+(((-1.0)*r10*x2604))+((pz*x2600))+(((-1.0)*r20*x2602)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x2605))+(((-1.0)*pz*x2601))+((py*x2600))+((r11*x2603))+((r20*x2604))+(((-1.0)*r10*x2602))))+IKsqr(((-1.63995381890046)+((py*x2601))+((r21*x2603))+((r11*x2605))+(((-1.0)*r10*x2604))+((pz*x2600))+(((-1.0)*r20*x2602))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x2605))+(((-1.0)*pz*x2601))+((py*x2600))+((r11*x2603))+((r20*x2604))+(((-1.0)*r10*x2602))), ((-1.63995381890046)+((py*x2601))+((r21*x2603))+((r11*x2605))+(((-1.0)*r10*x2604))+((pz*x2600))+(((-1.0)*r20*x2602))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2606=(cj5*r20);
IkReal x2607=(r21*sj5);
IkReal x2608=IKcos(j2);
IkReal x2609=(cj1*x2608);
IkReal x2610=IKsin(j2);
IkReal x2611=(sj1*x2610);
IkReal x2612=(cj5*r10);
IkReal x2613=(r11*sj5);
IkReal x2614=(cj1*x2610);
IkReal x2615=(sj1*x2608);
IkReal x2616=((0.749999825156128)*cj4);
IkReal x2617=((0.433012600946063)*cj4);
IkReal x2618=((0.866025201892125)*cj5*sj4);
IkReal x2619=((0.866025201892125)*sj4*sj5);
IkReal x2620=(x2609+(((-1.0)*x2611)));
IkReal x2621=((0.433012600946063)*sj3);
IkReal x2622=((0.866025403784439)*cj3*sj4);
IkReal x2623=((0.433013004730548)*cj4*sj3);
IkReal x2624=((0.749999825156128)*sj3);
IkReal x2625=(cj3*cj4*cj5);
IkReal x2626=(cj3*cj4*sj5);
IkReal x2627=((0.5)*cj3*sj4);
IkReal x2628=((0.250000174843791)*cj4*sj3);
IkReal x2629=((0.500000349687582)*cj5*sj3*sj4);
IkReal x2630=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x2611))+(((0.0740573656612548)*x2606))+(((0.25000704)*x2609))+(((-0.0740573656612548)*x2607)));
evalcond[1]=((((0.0740573656612548)*x2612))+(((-1.0)*(1.0)*py))+(((0.25000704)*x2615))+(((0.41)*sj1))+(((-0.0740573656612548)*x2613))+(((0.25000704)*x2614)));
evalcond[2]=((((-0.433013004730548)*x2612))+(((-1.0)*r12*x2616))+(((-1.0)*r11*x2618))+x2614+x2615+(((-1.0)*(0.250000174843791)*r12))+((x2612*x2617))+(((0.433013004730548)*x2613))+(((-1.0)*x2613*x2617))+(((-1.0)*r10*x2619)));
evalcond[3]=((((-1.0)*x2607*x2617))+(((-1.0)*r20*x2619))+x2620+(((-1.0)*r22*x2616))+(((0.433013004730548)*x2607))+(((-0.433013004730548)*x2606))+((x2606*x2617))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*r21*x2618)));
evalcond[4]=((((-1.0)*r10*x2630))+(((-1.0)*r12*x2622))+x2620+((r10*x2626))+(((-1.0)*x2613*x2627))+((r12*x2621))+(((-1.0)*x2613*x2624))+((r11*x2625))+((x2612*x2628))+(((-1.0)*x2613*x2628))+(((-1.0)*r11*x2629))+(((-1.0)*r12*x2623))+((x2612*x2624))+((x2612*x2627)));
evalcond[5]=((((-1.0)*r22*x2623))+(((-1.0)*r20*x2630))+((x2606*x2627))+((x2606*x2624))+(((-1.0)*x2614))+((r21*x2625))+((r22*x2621))+(((-1.0)*x2615))+((r20*x2626))+(((-1.0)*r22*x2622))+(((-1.0)*x2607*x2627))+(((-1.0)*x2607*x2624))+((x2606*x2628))+(((-1.0)*x2607*x2628))+(((-1.0)*r21*x2629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2631=((390625.0)*py);
IkReal x2632=((3808.59375)*sj0);
IkReal x2633=((390625.0)*cj0*pz);
IkReal x2634=((28928.6584614277)*cj1);
IkReal x2635=(cj5*r10);
IkReal x2636=(r11*sj5);
IkReal x2637=(cj5*r20);
IkReal x2638=((28928.6584614277)*cj0*sj1);
IkReal x2639=(r21*sj5);
IkReal x2640=((28928.6584614277)*sj1);
IkReal x2641=((28928.6584614277)*cj0*cj1);
CheckValue<IkReal> x2642=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2642.valid){
continue;
}
CheckValue<IkReal> x2643 = IKatan2WithCheck(IkReal((((x2637*x2638))+(((-1.0)*cj1*x2631))+(((-1.0)*x2634*x2636))+(((-1.0)*x2638*x2639))+(((-1.0)*sj1*x2633))+((cj1*x2632))+((x2634*x2635)))),IkReal((((x2639*x2641))+((sj1*x2632))+(((-1.0)*x2637*x2641))+(((-1.0)*x2636*x2640))+((x2635*x2640))+(((-1.0)*sj1*x2631))+((cj1*x2633))+(((-1.0)*(160156.25)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2643.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2642.value)))+(x2643.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2644=(cj5*r20);
IkReal x2645=(r21*sj5);
IkReal x2646=IKcos(j2);
IkReal x2647=(cj1*x2646);
IkReal x2648=IKsin(j2);
IkReal x2649=(sj1*x2648);
IkReal x2650=(cj5*r00);
IkReal x2651=(r01*sj5);
IkReal x2652=((0.41)*sj1);
IkReal x2653=(cj1*x2648);
IkReal x2654=(sj0*x2653);
IkReal x2655=(sj1*x2646);
IkReal x2656=(sj0*x2655);
IkReal x2657=(cj5*r10);
IkReal x2658=(r11*sj5);
IkReal x2659=((0.25000704)*cj0);
IkReal x2660=((0.749999825156128)*cj4);
IkReal x2661=((1.0)*x2648);
IkReal x2662=(sj1*x2661);
IkReal x2663=((0.433012600946063)*cj4);
IkReal x2664=((0.866025201892125)*cj5*sj4);
IkReal x2665=((0.866025201892125)*sj4*sj5);
IkReal x2666=(cj1*x2661);
IkReal x2667=((1.0)*x2655);
IkReal x2668=((0.433012600946063)*sj3);
IkReal x2669=((0.866025403784439)*cj3*sj4);
IkReal x2670=((0.433013004730548)*cj4*sj3);
IkReal x2671=((0.749999825156128)*sj3);
IkReal x2672=(cj3*cj4*cj5);
IkReal x2673=(cj3*cj4*sj5);
IkReal x2674=((0.5)*cj3*sj4);
IkReal x2675=((0.250000174843791)*cj4*sj3);
IkReal x2676=((0.500000349687582)*cj5*sj3*sj4);
IkReal x2677=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((0.0740573656612548)*x2644))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.25000704)*x2649))+(((0.25000704)*x2647))+(((-0.0740573656612548)*x2645)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((-0.0740573656612548)*x2651))+(((0.25000704)*x2654))+(((0.00975)*cj0))+(((0.0740573656612548)*x2650))+(((0.25000704)*x2656))+((sj0*x2652)));
evalcond[2]=((((-0.0740573656612548)*x2658))+(((-1.0)*(1.0)*py))+(((-1.0)*x2655*x2659))+(((-1.0)*x2653*x2659))+(((0.00975)*sj0))+(((0.0740573656612548)*x2657))+(((-1.0)*cj0*x2652)));
evalcond[3]=((((-1.0)*x2662))+((x2644*x2663))+(((-1.0)*x2645*x2663))+(((-1.0)*r21*x2664))+x2647+(((0.433013004730548)*x2645))+(((-0.433013004730548)*x2644))+(((-1.0)*r22*x2660))+(((-1.0)*r20*x2665))+(((-1.0)*(0.250000174843791)*r22)));
evalcond[4]=(((x2650*x2663))+(((-1.0)*r01*x2664))+(((-1.0)*x2651*x2663))+(((-1.0)*(0.250000174843791)*r02))+(((0.433013004730548)*x2651))+(((-1.0)*r02*x2660))+(((-0.433013004730548)*x2650))+x2656+x2654+(((-1.0)*r00*x2665)));
evalcond[5]=((((-1.0)*r12*x2660))+(((-1.0)*r10*x2665))+(((-1.0)*x2658*x2663))+((x2657*x2663))+(((-0.433013004730548)*x2657))+(((-1.0)*(0.250000174843791)*r12))+(((-1.0)*cj0*x2667))+(((0.433013004730548)*x2658))+(((-1.0)*cj0*x2666))+(((-1.0)*r11*x2664)));
evalcond[6]=(((x2644*x2671))+(((-1.0)*x2645*x2675))+(((-1.0)*r22*x2669))+((r20*x2673))+(((-1.0)*x2645*x2674))+((x2644*x2675))+((x2644*x2674))+((r22*x2668))+(((-1.0)*r22*x2670))+(((-1.0)*r20*x2677))+(((-1.0)*x2667))+(((-1.0)*x2666))+(((-1.0)*x2645*x2671))+((r21*x2672))+(((-1.0)*r21*x2676)));
evalcond[7]=(((x2650*x2674))+(((-1.0)*x2651*x2674))+(((-1.0)*x2651*x2671))+(((-1.0)*r02*x2669))+((sj0*x2647))+((r01*x2672))+(((-1.0)*sj0*x2662))+((r02*x2668))+(((-1.0)*r02*x2670))+(((-1.0)*r01*x2676))+((x2650*x2671))+(((-1.0)*r00*x2677))+((x2650*x2675))+(((-1.0)*x2651*x2675))+((r00*x2673)));
evalcond[8]=((((-1.0)*r10*x2677))+(((-1.0)*x2658*x2675))+((x2657*x2674))+(((-1.0)*cj0*x2647))+((r12*x2668))+(((-1.0)*r12*x2670))+((r10*x2673))+(((-1.0)*r12*x2669))+((r11*x2672))+((cj0*x2649))+(((-1.0)*r11*x2676))+(((-1.0)*x2658*x2671))+((x2657*x2671))+((x2657*x2675))+(((-1.0)*x2658*x2674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2678=((3808.59375)*cj0);
IkReal x2679=((390625.0)*px);
IkReal x2680=((28928.6584614277)*cj1);
IkReal x2681=(cj5*r00);
IkReal x2682=(r01*sj5);
IkReal x2683=((390625.0)*pz*sj0);
IkReal x2684=(cj5*r20);
IkReal x2685=((28928.6584614277)*sj0*sj1);
IkReal x2686=(r21*sj5);
IkReal x2687=((28928.6584614277)*sj1);
IkReal x2688=((28928.6584614277)*cj1*sj0);
CheckValue<IkReal> x2689 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x2678))+(((-1.0)*x2685*x2686))+((x2680*x2682))+(((-1.0)*sj1*x2683))+((x2684*x2685))+((cj1*x2679))+(((-1.0)*x2680*x2681)))),IkReal((((x2686*x2688))+((sj1*x2679))+((cj1*x2683))+(((-1.0)*(160156.25)*sj0))+(((-1.0)*x2684*x2688))+(((-1.0)*x2681*x2687))+(((-1.0)*sj1*x2678))+((x2682*x2687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2689.valid){
continue;
}
CheckValue<IkReal> x2690=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2690.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2689.value)+(((1.5707963267949)*(x2690.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2691=(cj5*r20);
IkReal x2692=(r21*sj5);
IkReal x2693=IKcos(j2);
IkReal x2694=(cj1*x2693);
IkReal x2695=IKsin(j2);
IkReal x2696=(sj1*x2695);
IkReal x2697=(cj5*r00);
IkReal x2698=(r01*sj5);
IkReal x2699=((0.41)*sj1);
IkReal x2700=(cj1*x2695);
IkReal x2701=(sj0*x2700);
IkReal x2702=(sj1*x2693);
IkReal x2703=(sj0*x2702);
IkReal x2704=(cj5*r10);
IkReal x2705=(r11*sj5);
IkReal x2706=((0.25000704)*cj0);
IkReal x2707=((0.749999825156128)*cj4);
IkReal x2708=((1.0)*x2695);
IkReal x2709=(sj1*x2708);
IkReal x2710=((0.433012600946063)*cj4);
IkReal x2711=((0.866025201892125)*cj5*sj4);
IkReal x2712=((0.866025201892125)*sj4*sj5);
IkReal x2713=(cj1*x2708);
IkReal x2714=((1.0)*x2702);
IkReal x2715=((0.433012600946063)*sj3);
IkReal x2716=((0.866025403784439)*cj3*sj4);
IkReal x2717=((0.433013004730548)*cj4*sj3);
IkReal x2718=((0.749999825156128)*sj3);
IkReal x2719=(cj3*cj4*cj5);
IkReal x2720=(cj3*cj4*sj5);
IkReal x2721=((0.5)*cj3*sj4);
IkReal x2722=((0.250000174843791)*cj4*sj3);
IkReal x2723=((0.500000349687582)*cj5*sj3*sj4);
IkReal x2724=((0.500000349687582)*sj3*sj4*sj5);
evalcond[0]=((((-0.25000704)*x2696))+(((0.41)*cj1))+(((-1.0)*(1.0)*pz))+(((0.0740573656612548)*x2691))+(((-0.0740573656612548)*x2692))+(((0.25000704)*x2694)));
evalcond[1]=((((-1.0)*(1.0)*px))+(((0.25000704)*x2701))+(((0.25000704)*x2703))+(((0.00975)*cj0))+((sj0*x2699))+(((-0.0740573656612548)*x2698))+(((0.0740573656612548)*x2697)));
evalcond[2]=((((-1.0)*(1.0)*py))+(((0.00975)*sj0))+(((-1.0)*cj0*x2699))+(((0.0740573656612548)*x2704))+(((-1.0)*x2702*x2706))+(((-1.0)*x2700*x2706))+(((-0.0740573656612548)*x2705)));
evalcond[3]=(x2694+(((-1.0)*r20*x2712))+(((-1.0)*x2709))+(((0.433013004730548)*x2692))+(((-1.0)*(0.250000174843791)*r22))+(((-1.0)*x2692*x2710))+(((-1.0)*r21*x2711))+((x2691*x2710))+(((-1.0)*r22*x2707))+(((-0.433013004730548)*x2691)));
evalcond[4]=(x2701+x2703+(((-1.0)*r02*x2707))+(((0.433013004730548)*x2698))+(((-1.0)*x2698*x2710))+(((-1.0)*r00*x2712))+((x2697*x2710))+(((-1.0)*(0.250000174843791)*r02))+(((-0.433013004730548)*x2697))+(((-1.0)*r01*x2711)));
evalcond[5]=((((-1.0)*x2705*x2710))+(((-1.0)*r11*x2711))+(((-0.433013004730548)*x2704))+(((-1.0)*r12*x2707))+(((-1.0)*cj0*x2714))+(((-1.0)*r10*x2712))+(((-1.0)*(0.250000174843791)*r12))+((x2704*x2710))+(((0.433013004730548)*x2705))+(((-1.0)*cj0*x2713)));
evalcond[6]=(((r21*x2719))+(((-1.0)*x2692*x2721))+((r20*x2720))+(((-1.0)*x2714))+(((-1.0)*x2713))+(((-1.0)*r22*x2717))+(((-1.0)*x2692*x2722))+((r22*x2715))+(((-1.0)*r21*x2723))+(((-1.0)*r22*x2716))+(((-1.0)*r20*x2724))+((x2691*x2718))+((x2691*x2722))+(((-1.0)*x2692*x2718))+((x2691*x2721)));
evalcond[7]=((((-1.0)*x2698*x2721))+(((-1.0)*r01*x2723))+(((-1.0)*x2698*x2722))+(((-1.0)*r02*x2716))+((r00*x2720))+((x2697*x2718))+(((-1.0)*sj0*x2709))+(((-1.0)*r02*x2717))+(((-1.0)*x2698*x2718))+((sj0*x2694))+(((-1.0)*r00*x2724))+((x2697*x2722))+((r02*x2715))+((r01*x2719))+((x2697*x2721)));
evalcond[8]=((((-1.0)*x2705*x2722))+((x2704*x2722))+((cj0*x2696))+(((-1.0)*r12*x2716))+(((-1.0)*x2705*x2718))+((x2704*x2721))+((r12*x2715))+((r10*x2720))+(((-1.0)*cj0*x2694))+((x2704*x2718))+(((-1.0)*r10*x2724))+((r11*x2719))+(((-1.0)*r11*x2723))+(((-1.0)*r12*x2717))+(((-1.0)*x2705*x2721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - jaco (b3832bb296acdbbc6f671c15fbbe4940)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
